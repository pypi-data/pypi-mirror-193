import os
import logging
from typing import List, Optional, Union

from byb.utils import browser, path

log = logging.getLogger(__name__)


class BYBObject(object):
    """Base class for byb with some formatting helpers."""

    __base_name__ = "byb_object"

    @property
    def name(self) -> str:
        return path.camel_to_snake(self.__class__.__name__)

    def __repr__(self) -> str:
        return f"""{''.join([p.title() for p in self.__base_name__.split('_')])}({self.name})"""


class PostContent(BYBObject):
    """An individual piece of Post which is generated by a `Bot` and posted to a `Platform`"""

    __base_name__ = "post_content"

    def __init__(self, media: str, text: str, urls: List[str], **kwargs):
        self.media = media
        self.text = text
        self.urls = urls

    def is_video(self):
        return self.media.endswith(".mp4")

    def is_image(self):
        return self.media.endswith(".jpg")

    def __repr__(self) -> str:
        return f"<PostContent: {self.media} || {self.text[0:50]}... >"

class Platform(BYBObject):
    """
    A platform is an outlet for bot-generated content.
    A platform class must only implement a `post` method which is
    responsible for distributing `PostContent` instances.
    """

    __base_name__ = "platform"

    def setup(self, **kwargs):
        """Optionally add setup steps here."""
        pass

    def teardown(self, **kwargs):
        """Optionally add teardown steps here."""
        pass

    def prepare_media(self, media: str, **kwargs) -> str:
        """Optionally add media preparation steps here.

        Args:
            media (str): A path to a media file to modify.

        Returns:
            str: A path to a modified media file.
        """
        return media

    def prepare_text(self, text: str, **kwargs) -> str:
        """Optionally add text preparation steps here.

        Args:
            text (str): A blob of file to modify.

        Returns:
            str: A modified blob of text.
        """
        return text

    def post(self, content: PostContent, **kwargs) -> PostContent:
        """Post to a platform.

        Args:
            media (str): A filepath to a media file (usually image or video)
            text (str): An optional text caption.

        """
        raise NotImplemented

    def exec(self, content: PostContent, **kwargs) -> PostContent:
        """Execute the `post` method given output from a `Bot`

        Args:
            media (str): A filepath to a media file (usually image or video)
            text (str): An optional text caption.

        Raises:
            ValueError: _description_
        """
        self.setup(**kwargs)
        media = content.media
        text = content.text

        # TODO: move this somewhere else.
        if not os.path.exists(media):
            if media.startswith("http"):
                log.info(f"Downloading {media}...")
                media = browser.download_file(media)
            else:
                raise ValueError(f"path '{media}' does not exist!")
        try:
            content.media = self.prepare_media(media)
        except Exception as e:
            raise ValueError(f"Could not prepare media file {media} because of: {e}")

        try:
            content.text = self.prepare_text(text)
        except Exception as e:
            raise ValueError(f"Could not prepare text:\n'{text}'\nbecause of: {e}")
        try:
            post_content = self.post(content, **kwargs)
        except Exception as e:
            raise RuntimeError(f"Could not post {content} because of {e}.")
        finally:
            self.teardown(**kwargs)
        return post_content


class Bot(BYBObject):
    # A bot is any python function that generates media and/or text.
    # A bot's generated Post can be posted to a platform.
    # All a platform class must implement is `post` method which is responsible for distributing Post
    __base_name__ = "bot"

    def setup(self, **kwargs) -> None:
        """Optionally add setup steps here."""
        pass

    def teardown(self, **kwargs):
        """Optionally add teardown steps here."""
        pass

    def generate(self, **kwargs) -> Optional[PostContent]:
        """Define a function that returns a `Content` object"""
        raise NotImplemented

    def exec(self, **kwargs) -> Optional[PostContent]:
        """Execute the `generate` method with added setup/teardown functions"""
        self.setup(**kwargs)
        try:
            post_content = self.generate(**kwargs)
        except Exception as e:
            # TODO: error logging
            raise RuntimeError(f"Could not generate content because of {e}.")
        finally:
            self.teardown(**kwargs)
        return post_content

    def post_content_to_platforms(
        self, platforms: Union[Platform, List[Platform]], **kwargs
    ) -> PostContent:
        """Run a `Bot` and post it's generated `PostContent` to one or more `Platform`.

        Args:
            platforms (Union[Platform, List[Platform]]): One or more valid `Platform`

        Returns:
            PostContent: The generated `PostContent` with an added `url` property.
        """
        post_content = self.exec(**kwargs)
        if not post_content:
            log.info(f"No content found by bot: {self}")
            return
        if not isinstance(platforms, list):
            platforms = [platforms]

        for platform in platforms:
            log.info(f"Posting {post_content} generated by {self} to {platform}")
            post_content = platform().exec(post_content, **kwargs)
        return post_content
