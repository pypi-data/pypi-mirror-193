# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fastapi_motor_oil']

package_data = \
{'': ['*']}

install_requires = \
['motor>=3.1.1,<4.0.0', 'pydantic>=1.10.5,<2.0.0']

setup_kwargs = {
    'name': 'fastapi-motor-oil',
    'version': '0.1.1',
    'description': 'Typed utilities for using MongoDB (and the asyncio motor driver) with FastAPI - not an ODM.',
    'long_description': '# fastapi-motor-oil\n\nTyped utilities for using MongoDB (and the asyncio `motor` driver) with FastAPI - not an ODM.\n\n## Installation\n\nYou can install the library and its dependencies with `pip install fastapi-motor-oil`.\n\n## Example\n\nPrerequisites:\n\n- MongoDB (e.g. the Community Edition) installed and running locally;\n- `fastapi` with all its dependencies (`pip install fastapi[all]`);\n- This library (`pip install fastapi-motor-oil`).\n\nIn this example we will create:\n\n- a simple `Note` document model;\n- the services that are necessary to create, read, update, and delete notes;\n- a `fastapi` `APIRouter` factory that can be included in `fastapi` applications;\n- and the `fastapi` application itself.\n\nThe project layout under your root directory will be as follows:\n\n- `/notes_app`\n  - `__init__.py`\n  - `api.py`\n  - `app.py`\n  - `model.py`\n  - `service.py`\n\nModel definitions (in `model.py`):\n\n```python\nfrom fastapi_motor_oil import DocumentModel, UTCDatetime\nfrom pydantic import BaseModel\n\nclass Note(DocumentModel):\n    """Model for serializing documents."""\n    title: str\n    text: str\n    created_at: UTCDatetime\n\nclass NoteCreationData(BaseModel):\n    """Model for creating documents."""\n    title: str\n    text: str\n\nclass NoteUpdateData(BaseModel):\n    """Model for updating documents."""\n    title: str | None = None\n    text: str | None = None\n```\n\nService implementation (in `service.py`):\n\n```python\nfrom typing import Any\n\nfrom fastapi_motor_oil import AsyncIOMotorDatabase, MongoService\nfrom datetime import datetime\n\nfrom .model import NoteCreationData, NoteUpdateData\n\nclass NoteService(MongoService[NoteCreationData, NoteUpdateData]):\n    __slots__ = ()\n\n    def __init__(self, database: AsyncIOMotorDatabase) -> None:\n        super().__init__(database, "notes")\n\n    def _prepare_for_insert(self, data: NoteCreationData) -> dict[str, Any]:\n        return {\n            **super()._prepare_for_insert(data),\n            "created_at": datetime.utcnow(),  # Insert the created_at attribute.\n        }\n\n```\n\nRouting implementation (in `api.py`):\n\n```python\nfrom typing import Any\n\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi_motor_oil import (\n    AsyncIOMotorDatabase,\n    DatabaseProvider,\n    DeleteResultModel,\n    StrObjectId,\n)\n\nfrom .model import Note, NoteCreationData, NoteUpdateData\nfrom .service import NoteService\n\ndef make_notes_api(\n    *,\n    get_database: DatabaseProvider,\n    prefix: str = "/note",\n) -> APIRouter:\n    """\n    Note `APIRouter` factory.\n\n    Arguments:\n        get_database: FastAPI dependency that returns the `AsyncIOMotorDatabase`\n                      database instance for the API.\n        prefix: The prefix for the created `APIRouter`.\n\n    Returns:\n        The created `APIRouter` instance.\n    """\n    api = APIRouter(prefix=prefix)\n\n    @api.get("/", response_model=list[Note])\n    async def get_all(\n        database: AsyncIOMotorDatabase = Depends(get_database),\n    ) -> list[dict[str, Any]]:\n        svc = NoteService(database)\n        return [d async for d in svc.find()]  # This async for can be quite inefficient...\n\n    @api.post("/", response_model=Note)\n    async def create(\n        data: NoteCreationData,\n        database: AsyncIOMotorDatabase = Depends(get_database),\n    ) -> dict[str, Any]:\n        svc = NoteService(database)\n        result = await svc.insert_one(data)\n        if (created := await svc.get_by_id(result.inserted_id)) is not None:\n            return created\n\n        raise HTTPException(status.HTTP_409_CONFLICT)\n\n    @api.get("/{id}", response_model=Note)\n    async def get_by_id(\n        id: StrObjectId,\n        database: AsyncIOMotorDatabase = Depends(get_database),\n    ) -> dict[str, Any]:\n        svc = NoteService(database)\n        if (result := await svc.get_by_id(id)) is not None:\n            return result\n\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(id))\n\n    @api.put("/{id}", response_model=Note)\n    async def update_by_id(\n        id: StrObjectId,\n        data: NoteUpdateData,\n        database: AsyncIOMotorDatabase = Depends(get_database),\n    ) -> dict[str, Any]:\n        svc = NoteService(database)\n        result = await svc.update_by_id(id, data)\n        if result.matched_count == 0:\n            raise HTTPException(status.HTTP_404_NOT_FOUND, detail=str(id))\n\n        if (updated := await svc.get_by_id(id)) is not None:\n            return updated\n\n        raise HTTPException(status.HTTP_404_NOT_FOUND, detail=str(id))\n\n    @api.delete("/{id}", response_model=DeleteResultModel)\n    async def delete_by_id(\n        id: StrObjectId,\n        database: AsyncIOMotorDatabase = Depends(get_database),\n    ) -> DeleteResultModel:\n        svc = NoteService(database)\n        result = await svc.delete_by_id(id)\n        return DeleteResultModel(delete_count=result.deleted_count)\n\n    return api\n```\n\nApplication (in `app.py`):\n\n```python\nfrom functools import lru_cache\n\nfrom fastapi import FastAPI\nfrom motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase\n\n@lru_cache(maxsize=1)\ndef get_database() -> AsyncIOMotorDatabase:\n    """Database provider dependency for the created API."""\n    mongo_connection_string = "mongodb://127.0.0.1:27017"\n    database_name = "notes-database"\n    client = AsyncIOMotorClient(mongo_connection_string)\n    return client[database_name]\n\ndef register_routes(app: FastAPI) -> None:\n    """Registers all routes of the application."""\n    from .api import make_notes_api\n\n    api_prefix = "/api/v1"\n\n    app.include_router(\n        make_notes_api(get_database=get_database),\n        prefix=api_prefix,\n    )\n\ndef create_app() -> FastAPI:\n    app = FastAPI()\n\n    register_routes(app)\n\n    return app\n```\n\nAdd `__init__.py` as well to `notes_app`:\n\n```python\nfrom .app import create_app\n```\n\nWith everything in place, you can serve the application by executing `uvicorn notes_app:create_app --reload --factory` in your root directory. Go to [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs) in the browser to see and try the created REST API.\n\n## Requirements\n\nThe project depends on `motor` (the official asyncio MongoDB driver, which is built on top of `pymongo` and `bson`) and `pydantic`.\n\n`fastapi` is not an actual dependency, but the code was written with `fastapi` applications with a REST API in mind.\n\n## Development\n\nUse `black` for code formatting and `mypy` for static code analysis.\n\n## Contributing\n\nContributions are welcome.\n\n## License - MIT\n\nThe library is open-sourced under the conditions of the MIT [license](https://choosealicense.com/licenses/mit/).\n',
    'author': 'Peter Volf',
    'author_email': 'do.volfp@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
