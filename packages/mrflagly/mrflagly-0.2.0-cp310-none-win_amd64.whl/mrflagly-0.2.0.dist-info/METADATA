Metadata-Version: 2.1
Name: mrflagly
Version: 0.2.0
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Summary: No nonsense feature flagging system
Home-Page: https://github.com/vangheem/mr.flagly
License: MIT
Requires-Python: >=3.7
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Source Code, https://github.com/vangheem/mr.flagly

# Introduction

Feature flagging should not be so complicated.

Mr Flagly is a decentralized feature flagging system written in Rust with bindings for other languages.

It does not depend on third party services or require you to deploy services and databases to manage.

Supported feature flag definition sources:

- URL
- JSON Value
- Environment Variable


## Rust usage

Setup your flag service:

```rust
use mrflagly::service::{FlagService, FlagServiceOptions};
let flag_service = FlagService::new(FlagServiceOptions {
    finder_type: mrflagly::service::types::FlagFinderType::URL,
    url: "https://path/to/hosted/json/file",
    refresh_interval: 600,
    data: None,
    env_var: None,
})
```

Then, to check for feature flag:

```rust
if flag_service.enabled("feature_x", false /* default value */, Some(HashMap::from([(String::from("user_id"), String::from("123")),])) /* optional context */) {
    // do something
}
```


## Python support

```python
import mrflagly
import json

flag_service = mrflagly.FlagService(data=json.dumps({"feature_x": {"rollout": 100}}))
if flag_service.enabled("feature_x", False, None):
    # do something
```


## JSON format

JSON format for feature flag data:

```
{
    "my_feature": {
        "rollout": 100
    },
    "my_feature_with_variants": {
        "rollout": 0,
        "variants" {
            "user_id": ["123"],
            "company_id": ["123"]
        }
    }
}
```
