def Thing_test():
    from schorg.Thing import ThingInheritedProperties
    from schorg.Thing import ThingProperties
    from schorg.Thing import ThingAllProperties
    from schorg.Thing import create_schema_org_model
    from schorg.Thing import create_thing_model
    from schorg.Thing import Thing

    a = create_schema_org_model(type_=ThingInheritedProperties)
    b = create_schema_org_model(type_=ThingProperties)
    c = create_schema_org_model(type_=ThingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Thing.schema()
    create_thing_model(ThingAllProperties).schema()
    create_thing_model(ThingInheritedProperties).schema()
    create_thing_model(ThingProperties).schema()


def Intangible_test():
    from schorg.Intangible import IntangibleInheritedProperties
    from schorg.Intangible import IntangibleProperties
    from schorg.Intangible import IntangibleAllProperties
    from schorg.Intangible import create_schema_org_model
    from schorg.Intangible import create_intangible_model
    from schorg.Intangible import Intangible

    a = create_schema_org_model(type_=IntangibleInheritedProperties)
    b = create_schema_org_model(type_=IntangibleProperties)
    c = create_schema_org_model(type_=IntangibleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Intangible.schema()
    create_intangible_model(IntangibleAllProperties).schema()
    create_intangible_model(IntangibleInheritedProperties).schema()
    create_intangible_model(IntangibleProperties).schema()


def StructuredValue_test():
    from schorg.StructuredValue import StructuredValueInheritedProperties
    from schorg.StructuredValue import StructuredValueProperties
    from schorg.StructuredValue import StructuredValueAllProperties
    from schorg.StructuredValue import create_schema_org_model
    from schorg.StructuredValue import create_structuredvalue_model
    from schorg.StructuredValue import StructuredValue

    a = create_schema_org_model(type_=StructuredValueInheritedProperties)
    b = create_schema_org_model(type_=StructuredValueProperties)
    c = create_schema_org_model(type_=StructuredValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StructuredValue.schema()
    create_structuredvalue_model(StructuredValueAllProperties).schema()
    create_structuredvalue_model(StructuredValueInheritedProperties).schema()
    create_structuredvalue_model(StructuredValueProperties).schema()


def GeoShape_test():
    from schorg.GeoShape import GeoShapeInheritedProperties
    from schorg.GeoShape import GeoShapeProperties
    from schorg.GeoShape import GeoShapeAllProperties
    from schorg.GeoShape import create_schema_org_model
    from schorg.GeoShape import create_geoshape_model
    from schorg.GeoShape import GeoShape

    a = create_schema_org_model(type_=GeoShapeInheritedProperties)
    b = create_schema_org_model(type_=GeoShapeProperties)
    c = create_schema_org_model(type_=GeoShapeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GeoShape.schema()
    create_geoshape_model(GeoShapeAllProperties).schema()
    create_geoshape_model(GeoShapeInheritedProperties).schema()
    create_geoshape_model(GeoShapeProperties).schema()


def Enumeration_test():
    from schorg.Enumeration import EnumerationInheritedProperties
    from schorg.Enumeration import EnumerationProperties
    from schorg.Enumeration import EnumerationAllProperties
    from schorg.Enumeration import create_schema_org_model
    from schorg.Enumeration import create_enumeration_model
    from schorg.Enumeration import Enumeration

    a = create_schema_org_model(type_=EnumerationInheritedProperties)
    b = create_schema_org_model(type_=EnumerationProperties)
    c = create_schema_org_model(type_=EnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Enumeration.schema()
    create_enumeration_model(EnumerationAllProperties).schema()
    create_enumeration_model(EnumerationInheritedProperties).schema()
    create_enumeration_model(EnumerationProperties).schema()


def SizeGroupEnumeration_test():
    from schorg.SizeGroupEnumeration import SizeGroupEnumerationInheritedProperties
    from schorg.SizeGroupEnumeration import SizeGroupEnumerationProperties
    from schorg.SizeGroupEnumeration import SizeGroupEnumerationAllProperties
    from schorg.SizeGroupEnumeration import create_schema_org_model
    from schorg.SizeGroupEnumeration import create_sizegroupenumeration_model
    from schorg.SizeGroupEnumeration import SizeGroupEnumeration

    a = create_schema_org_model(type_=SizeGroupEnumerationInheritedProperties)
    b = create_schema_org_model(type_=SizeGroupEnumerationProperties)
    c = create_schema_org_model(type_=SizeGroupEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SizeGroupEnumeration.schema()
    create_sizegroupenumeration_model(SizeGroupEnumerationAllProperties).schema()
    create_sizegroupenumeration_model(SizeGroupEnumerationInheritedProperties).schema()
    create_sizegroupenumeration_model(SizeGroupEnumerationProperties).schema()


def WearableSizeGroupEnumeration_test():
    from schorg.WearableSizeGroupEnumeration import (
        WearableSizeGroupEnumerationInheritedProperties,
    )
    from schorg.WearableSizeGroupEnumeration import (
        WearableSizeGroupEnumerationProperties,
    )
    from schorg.WearableSizeGroupEnumeration import (
        WearableSizeGroupEnumerationAllProperties,
    )
    from schorg.WearableSizeGroupEnumeration import create_schema_org_model
    from schorg.WearableSizeGroupEnumeration import (
        create_wearablesizegroupenumeration_model,
    )
    from schorg.WearableSizeGroupEnumeration import WearableSizeGroupEnumeration

    a = create_schema_org_model(type_=WearableSizeGroupEnumerationInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupEnumerationProperties)
    c = create_schema_org_model(type_=WearableSizeGroupEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupEnumeration.schema()
    create_wearablesizegroupenumeration_model(
        WearableSizeGroupEnumerationAllProperties
    ).schema()
    create_wearablesizegroupenumeration_model(
        WearableSizeGroupEnumerationInheritedProperties
    ).schema()
    create_wearablesizegroupenumeration_model(
        WearableSizeGroupEnumerationProperties
    ).schema()


def WearableSizeGroupMens_test():
    from schorg.WearableSizeGroupMens import WearableSizeGroupMensInheritedProperties
    from schorg.WearableSizeGroupMens import WearableSizeGroupMensProperties
    from schorg.WearableSizeGroupMens import WearableSizeGroupMensAllProperties
    from schorg.WearableSizeGroupMens import create_schema_org_model
    from schorg.WearableSizeGroupMens import create_wearablesizegroupmens_model
    from schorg.WearableSizeGroupMens import WearableSizeGroupMens

    a = create_schema_org_model(type_=WearableSizeGroupMensInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupMensProperties)
    c = create_schema_org_model(type_=WearableSizeGroupMensAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupMens.schema()
    create_wearablesizegroupmens_model(WearableSizeGroupMensAllProperties).schema()
    create_wearablesizegroupmens_model(
        WearableSizeGroupMensInheritedProperties
    ).schema()
    create_wearablesizegroupmens_model(WearableSizeGroupMensProperties).schema()


def QualitativeValue_test():
    from schorg.QualitativeValue import QualitativeValueInheritedProperties
    from schorg.QualitativeValue import QualitativeValueProperties
    from schorg.QualitativeValue import QualitativeValueAllProperties
    from schorg.QualitativeValue import create_schema_org_model
    from schorg.QualitativeValue import create_qualitativevalue_model
    from schorg.QualitativeValue import QualitativeValue

    a = create_schema_org_model(type_=QualitativeValueInheritedProperties)
    b = create_schema_org_model(type_=QualitativeValueProperties)
    c = create_schema_org_model(type_=QualitativeValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    QualitativeValue.schema()
    create_qualitativevalue_model(QualitativeValueAllProperties).schema()
    create_qualitativevalue_model(QualitativeValueInheritedProperties).schema()
    create_qualitativevalue_model(QualitativeValueProperties).schema()


def DriveWheelConfigurationValue_test():
    from schorg.DriveWheelConfigurationValue import (
        DriveWheelConfigurationValueInheritedProperties,
    )
    from schorg.DriveWheelConfigurationValue import (
        DriveWheelConfigurationValueProperties,
    )
    from schorg.DriveWheelConfigurationValue import (
        DriveWheelConfigurationValueAllProperties,
    )
    from schorg.DriveWheelConfigurationValue import create_schema_org_model
    from schorg.DriveWheelConfigurationValue import (
        create_drivewheelconfigurationvalue_model,
    )
    from schorg.DriveWheelConfigurationValue import DriveWheelConfigurationValue

    a = create_schema_org_model(type_=DriveWheelConfigurationValueInheritedProperties)
    b = create_schema_org_model(type_=DriveWheelConfigurationValueProperties)
    c = create_schema_org_model(type_=DriveWheelConfigurationValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DriveWheelConfigurationValue.schema()
    create_drivewheelconfigurationvalue_model(
        DriveWheelConfigurationValueAllProperties
    ).schema()
    create_drivewheelconfigurationvalue_model(
        DriveWheelConfigurationValueInheritedProperties
    ).schema()
    create_drivewheelconfigurationvalue_model(
        DriveWheelConfigurationValueProperties
    ).schema()


def FrontWheelDriveConfiguration_test():
    from schorg.FrontWheelDriveConfiguration import (
        FrontWheelDriveConfigurationInheritedProperties,
    )
    from schorg.FrontWheelDriveConfiguration import (
        FrontWheelDriveConfigurationProperties,
    )
    from schorg.FrontWheelDriveConfiguration import (
        FrontWheelDriveConfigurationAllProperties,
    )
    from schorg.FrontWheelDriveConfiguration import create_schema_org_model
    from schorg.FrontWheelDriveConfiguration import (
        create_frontwheeldriveconfiguration_model,
    )
    from schorg.FrontWheelDriveConfiguration import FrontWheelDriveConfiguration

    a = create_schema_org_model(type_=FrontWheelDriveConfigurationInheritedProperties)
    b = create_schema_org_model(type_=FrontWheelDriveConfigurationProperties)
    c = create_schema_org_model(type_=FrontWheelDriveConfigurationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FrontWheelDriveConfiguration.schema()
    create_frontwheeldriveconfiguration_model(
        FrontWheelDriveConfigurationAllProperties
    ).schema()
    create_frontwheeldriveconfiguration_model(
        FrontWheelDriveConfigurationInheritedProperties
    ).schema()
    create_frontwheeldriveconfiguration_model(
        FrontWheelDriveConfigurationProperties
    ).schema()


def QuantitativeValueDistribution_test():
    from schorg.QuantitativeValueDistribution import (
        QuantitativeValueDistributionInheritedProperties,
    )
    from schorg.QuantitativeValueDistribution import (
        QuantitativeValueDistributionProperties,
    )
    from schorg.QuantitativeValueDistribution import (
        QuantitativeValueDistributionAllProperties,
    )
    from schorg.QuantitativeValueDistribution import create_schema_org_model
    from schorg.QuantitativeValueDistribution import (
        create_quantitativevaluedistribution_model,
    )
    from schorg.QuantitativeValueDistribution import QuantitativeValueDistribution

    a = create_schema_org_model(type_=QuantitativeValueDistributionInheritedProperties)
    b = create_schema_org_model(type_=QuantitativeValueDistributionProperties)
    c = create_schema_org_model(type_=QuantitativeValueDistributionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    QuantitativeValueDistribution.schema()
    create_quantitativevaluedistribution_model(
        QuantitativeValueDistributionAllProperties
    ).schema()
    create_quantitativevaluedistribution_model(
        QuantitativeValueDistributionInheritedProperties
    ).schema()
    create_quantitativevaluedistribution_model(
        QuantitativeValueDistributionProperties
    ).schema()


def MonetaryAmountDistribution_test():
    from schorg.MonetaryAmountDistribution import (
        MonetaryAmountDistributionInheritedProperties,
    )
    from schorg.MonetaryAmountDistribution import MonetaryAmountDistributionProperties
    from schorg.MonetaryAmountDistribution import (
        MonetaryAmountDistributionAllProperties,
    )
    from schorg.MonetaryAmountDistribution import create_schema_org_model
    from schorg.MonetaryAmountDistribution import (
        create_monetaryamountdistribution_model,
    )
    from schorg.MonetaryAmountDistribution import MonetaryAmountDistribution

    a = create_schema_org_model(type_=MonetaryAmountDistributionInheritedProperties)
    b = create_schema_org_model(type_=MonetaryAmountDistributionProperties)
    c = create_schema_org_model(type_=MonetaryAmountDistributionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MonetaryAmountDistribution.schema()
    create_monetaryamountdistribution_model(
        MonetaryAmountDistributionAllProperties
    ).schema()
    create_monetaryamountdistribution_model(
        MonetaryAmountDistributionInheritedProperties
    ).schema()
    create_monetaryamountdistribution_model(
        MonetaryAmountDistributionProperties
    ).schema()


def Organization_test():
    from schorg.Organization import OrganizationInheritedProperties
    from schorg.Organization import OrganizationProperties
    from schorg.Organization import OrganizationAllProperties
    from schorg.Organization import create_schema_org_model
    from schorg.Organization import create_organization_model
    from schorg.Organization import Organization

    a = create_schema_org_model(type_=OrganizationInheritedProperties)
    b = create_schema_org_model(type_=OrganizationProperties)
    c = create_schema_org_model(type_=OrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Organization.schema()
    create_organization_model(OrganizationAllProperties).schema()
    create_organization_model(OrganizationInheritedProperties).schema()
    create_organization_model(OrganizationProperties).schema()


def WorkersUnion_test():
    from schorg.WorkersUnion import WorkersUnionInheritedProperties
    from schorg.WorkersUnion import WorkersUnionProperties
    from schorg.WorkersUnion import WorkersUnionAllProperties
    from schorg.WorkersUnion import create_schema_org_model
    from schorg.WorkersUnion import create_workersunion_model
    from schorg.WorkersUnion import WorkersUnion

    a = create_schema_org_model(type_=WorkersUnionInheritedProperties)
    b = create_schema_org_model(type_=WorkersUnionProperties)
    c = create_schema_org_model(type_=WorkersUnionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WorkersUnion.schema()
    create_workersunion_model(WorkersUnionAllProperties).schema()
    create_workersunion_model(WorkersUnionInheritedProperties).schema()
    create_workersunion_model(WorkersUnionProperties).schema()


def Place_test():
    from schorg.Place import PlaceInheritedProperties
    from schorg.Place import PlaceProperties
    from schorg.Place import PlaceAllProperties
    from schorg.Place import create_schema_org_model
    from schorg.Place import create_place_model
    from schorg.Place import Place

    a = create_schema_org_model(type_=PlaceInheritedProperties)
    b = create_schema_org_model(type_=PlaceProperties)
    c = create_schema_org_model(type_=PlaceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Place.schema()
    create_place_model(PlaceAllProperties).schema()
    create_place_model(PlaceInheritedProperties).schema()
    create_place_model(PlaceProperties).schema()


def CivicStructure_test():
    from schorg.CivicStructure import CivicStructureInheritedProperties
    from schorg.CivicStructure import CivicStructureProperties
    from schorg.CivicStructure import CivicStructureAllProperties
    from schorg.CivicStructure import create_schema_org_model
    from schorg.CivicStructure import create_civicstructure_model
    from schorg.CivicStructure import CivicStructure

    a = create_schema_org_model(type_=CivicStructureInheritedProperties)
    b = create_schema_org_model(type_=CivicStructureProperties)
    c = create_schema_org_model(type_=CivicStructureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CivicStructure.schema()
    create_civicstructure_model(CivicStructureAllProperties).schema()
    create_civicstructure_model(CivicStructureInheritedProperties).schema()
    create_civicstructure_model(CivicStructureProperties).schema()


def Park_test():
    from schorg.Park import ParkInheritedProperties
    from schorg.Park import ParkProperties
    from schorg.Park import ParkAllProperties
    from schorg.Park import create_schema_org_model
    from schorg.Park import create_park_model
    from schorg.Park import Park

    a = create_schema_org_model(type_=ParkInheritedProperties)
    b = create_schema_org_model(type_=ParkProperties)
    c = create_schema_org_model(type_=ParkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Park.schema()
    create_park_model(ParkAllProperties).schema()
    create_park_model(ParkInheritedProperties).schema()
    create_park_model(ParkProperties).schema()


def LocalBusiness_test():
    from schorg.LocalBusiness import LocalBusinessInheritedProperties
    from schorg.LocalBusiness import LocalBusinessProperties
    from schorg.LocalBusiness import LocalBusinessAllProperties
    from schorg.LocalBusiness import create_schema_org_model
    from schorg.LocalBusiness import create_localbusiness_model
    from schorg.LocalBusiness import LocalBusiness

    a = create_schema_org_model(type_=LocalBusinessInheritedProperties)
    b = create_schema_org_model(type_=LocalBusinessProperties)
    c = create_schema_org_model(type_=LocalBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LocalBusiness.schema()
    create_localbusiness_model(LocalBusinessAllProperties).schema()
    create_localbusiness_model(LocalBusinessInheritedProperties).schema()
    create_localbusiness_model(LocalBusinessProperties).schema()


def Store_test():
    from schorg.Store import StoreInheritedProperties
    from schorg.Store import StoreProperties
    from schorg.Store import StoreAllProperties
    from schorg.Store import create_schema_org_model
    from schorg.Store import create_store_model
    from schorg.Store import Store

    a = create_schema_org_model(type_=StoreInheritedProperties)
    b = create_schema_org_model(type_=StoreProperties)
    c = create_schema_org_model(type_=StoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Store.schema()
    create_store_model(StoreAllProperties).schema()
    create_store_model(StoreInheritedProperties).schema()
    create_store_model(StoreProperties).schema()


def PetStore_test():
    from schorg.PetStore import PetStoreInheritedProperties
    from schorg.PetStore import PetStoreProperties
    from schorg.PetStore import PetStoreAllProperties
    from schorg.PetStore import create_schema_org_model
    from schorg.PetStore import create_petstore_model
    from schorg.PetStore import PetStore

    a = create_schema_org_model(type_=PetStoreInheritedProperties)
    b = create_schema_org_model(type_=PetStoreProperties)
    c = create_schema_org_model(type_=PetStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PetStore.schema()
    create_petstore_model(PetStoreAllProperties).schema()
    create_petstore_model(PetStoreInheritedProperties).schema()
    create_petstore_model(PetStoreProperties).schema()


def MedicalEntity_test():
    from schorg.MedicalEntity import MedicalEntityInheritedProperties
    from schorg.MedicalEntity import MedicalEntityProperties
    from schorg.MedicalEntity import MedicalEntityAllProperties
    from schorg.MedicalEntity import create_schema_org_model
    from schorg.MedicalEntity import create_medicalentity_model
    from schorg.MedicalEntity import MedicalEntity

    a = create_schema_org_model(type_=MedicalEntityInheritedProperties)
    b = create_schema_org_model(type_=MedicalEntityProperties)
    c = create_schema_org_model(type_=MedicalEntityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalEntity.schema()
    create_medicalentity_model(MedicalEntityAllProperties).schema()
    create_medicalentity_model(MedicalEntityInheritedProperties).schema()
    create_medicalentity_model(MedicalEntityProperties).schema()


def MedicalIntangible_test():
    from schorg.MedicalIntangible import MedicalIntangibleInheritedProperties
    from schorg.MedicalIntangible import MedicalIntangibleProperties
    from schorg.MedicalIntangible import MedicalIntangibleAllProperties
    from schorg.MedicalIntangible import create_schema_org_model
    from schorg.MedicalIntangible import create_medicalintangible_model
    from schorg.MedicalIntangible import MedicalIntangible

    a = create_schema_org_model(type_=MedicalIntangibleInheritedProperties)
    b = create_schema_org_model(type_=MedicalIntangibleProperties)
    c = create_schema_org_model(type_=MedicalIntangibleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalIntangible.schema()
    create_medicalintangible_model(MedicalIntangibleAllProperties).schema()
    create_medicalintangible_model(MedicalIntangibleInheritedProperties).schema()
    create_medicalintangible_model(MedicalIntangibleProperties).schema()


def DDxElement_test():
    from schorg.DDxElement import DDxElementInheritedProperties
    from schorg.DDxElement import DDxElementProperties
    from schorg.DDxElement import DDxElementAllProperties
    from schorg.DDxElement import create_schema_org_model
    from schorg.DDxElement import create_ddxelement_model
    from schorg.DDxElement import DDxElement

    a = create_schema_org_model(type_=DDxElementInheritedProperties)
    b = create_schema_org_model(type_=DDxElementProperties)
    c = create_schema_org_model(type_=DDxElementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DDxElement.schema()
    create_ddxelement_model(DDxElementAllProperties).schema()
    create_ddxelement_model(DDxElementInheritedProperties).schema()
    create_ddxelement_model(DDxElementProperties).schema()


def ReturnFeesEnumeration_test():
    from schorg.ReturnFeesEnumeration import ReturnFeesEnumerationInheritedProperties
    from schorg.ReturnFeesEnumeration import ReturnFeesEnumerationProperties
    from schorg.ReturnFeesEnumeration import ReturnFeesEnumerationAllProperties
    from schorg.ReturnFeesEnumeration import create_schema_org_model
    from schorg.ReturnFeesEnumeration import create_returnfeesenumeration_model
    from schorg.ReturnFeesEnumeration import ReturnFeesEnumeration

    a = create_schema_org_model(type_=ReturnFeesEnumerationInheritedProperties)
    b = create_schema_org_model(type_=ReturnFeesEnumerationProperties)
    c = create_schema_org_model(type_=ReturnFeesEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnFeesEnumeration.schema()
    create_returnfeesenumeration_model(ReturnFeesEnumerationAllProperties).schema()
    create_returnfeesenumeration_model(
        ReturnFeesEnumerationInheritedProperties
    ).schema()
    create_returnfeesenumeration_model(ReturnFeesEnumerationProperties).schema()


def ReturnShippingFees_test():
    from schorg.ReturnShippingFees import ReturnShippingFeesInheritedProperties
    from schorg.ReturnShippingFees import ReturnShippingFeesProperties
    from schorg.ReturnShippingFees import ReturnShippingFeesAllProperties
    from schorg.ReturnShippingFees import create_schema_org_model
    from schorg.ReturnShippingFees import create_returnshippingfees_model
    from schorg.ReturnShippingFees import ReturnShippingFees

    a = create_schema_org_model(type_=ReturnShippingFeesInheritedProperties)
    b = create_schema_org_model(type_=ReturnShippingFeesProperties)
    c = create_schema_org_model(type_=ReturnShippingFeesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnShippingFees.schema()
    create_returnshippingfees_model(ReturnShippingFeesAllProperties).schema()
    create_returnshippingfees_model(ReturnShippingFeesInheritedProperties).schema()
    create_returnshippingfees_model(ReturnShippingFeesProperties).schema()


def Florist_test():
    from schorg.Florist import FloristInheritedProperties
    from schorg.Florist import FloristProperties
    from schorg.Florist import FloristAllProperties
    from schorg.Florist import create_schema_org_model
    from schorg.Florist import create_florist_model
    from schorg.Florist import Florist

    a = create_schema_org_model(type_=FloristInheritedProperties)
    b = create_schema_org_model(type_=FloristProperties)
    c = create_schema_org_model(type_=FloristAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Florist.schema()
    create_florist_model(FloristAllProperties).schema()
    create_florist_model(FloristInheritedProperties).schema()
    create_florist_model(FloristProperties).schema()


def AnatomicalStructure_test():
    from schorg.AnatomicalStructure import AnatomicalStructureInheritedProperties
    from schorg.AnatomicalStructure import AnatomicalStructureProperties
    from schorg.AnatomicalStructure import AnatomicalStructureAllProperties
    from schorg.AnatomicalStructure import create_schema_org_model
    from schorg.AnatomicalStructure import create_anatomicalstructure_model
    from schorg.AnatomicalStructure import AnatomicalStructure

    a = create_schema_org_model(type_=AnatomicalStructureInheritedProperties)
    b = create_schema_org_model(type_=AnatomicalStructureProperties)
    c = create_schema_org_model(type_=AnatomicalStructureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AnatomicalStructure.schema()
    create_anatomicalstructure_model(AnatomicalStructureAllProperties).schema()
    create_anatomicalstructure_model(AnatomicalStructureInheritedProperties).schema()
    create_anatomicalstructure_model(AnatomicalStructureProperties).schema()


def SizeSystemEnumeration_test():
    from schorg.SizeSystemEnumeration import SizeSystemEnumerationInheritedProperties
    from schorg.SizeSystemEnumeration import SizeSystemEnumerationProperties
    from schorg.SizeSystemEnumeration import SizeSystemEnumerationAllProperties
    from schorg.SizeSystemEnumeration import create_schema_org_model
    from schorg.SizeSystemEnumeration import create_sizesystemenumeration_model
    from schorg.SizeSystemEnumeration import SizeSystemEnumeration

    a = create_schema_org_model(type_=SizeSystemEnumerationInheritedProperties)
    b = create_schema_org_model(type_=SizeSystemEnumerationProperties)
    c = create_schema_org_model(type_=SizeSystemEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SizeSystemEnumeration.schema()
    create_sizesystemenumeration_model(SizeSystemEnumerationAllProperties).schema()
    create_sizesystemenumeration_model(
        SizeSystemEnumerationInheritedProperties
    ).schema()
    create_sizesystemenumeration_model(SizeSystemEnumerationProperties).schema()


def WearableSizeSystemEnumeration_test():
    from schorg.WearableSizeSystemEnumeration import (
        WearableSizeSystemEnumerationInheritedProperties,
    )
    from schorg.WearableSizeSystemEnumeration import (
        WearableSizeSystemEnumerationProperties,
    )
    from schorg.WearableSizeSystemEnumeration import (
        WearableSizeSystemEnumerationAllProperties,
    )
    from schorg.WearableSizeSystemEnumeration import create_schema_org_model
    from schorg.WearableSizeSystemEnumeration import (
        create_wearablesizesystemenumeration_model,
    )
    from schorg.WearableSizeSystemEnumeration import WearableSizeSystemEnumeration

    a = create_schema_org_model(type_=WearableSizeSystemEnumerationInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemEnumerationProperties)
    c = create_schema_org_model(type_=WearableSizeSystemEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemEnumeration.schema()
    create_wearablesizesystemenumeration_model(
        WearableSizeSystemEnumerationAllProperties
    ).schema()
    create_wearablesizesystemenumeration_model(
        WearableSizeSystemEnumerationInheritedProperties
    ).schema()
    create_wearablesizesystemenumeration_model(
        WearableSizeSystemEnumerationProperties
    ).schema()


def WearableSizeSystemBR_test():
    from schorg.WearableSizeSystemBR import WearableSizeSystemBRInheritedProperties
    from schorg.WearableSizeSystemBR import WearableSizeSystemBRProperties
    from schorg.WearableSizeSystemBR import WearableSizeSystemBRAllProperties
    from schorg.WearableSizeSystemBR import create_schema_org_model
    from schorg.WearableSizeSystemBR import create_wearablesizesystembr_model
    from schorg.WearableSizeSystemBR import WearableSizeSystemBR

    a = create_schema_org_model(type_=WearableSizeSystemBRInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemBRProperties)
    c = create_schema_org_model(type_=WearableSizeSystemBRAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemBR.schema()
    create_wearablesizesystembr_model(WearableSizeSystemBRAllProperties).schema()
    create_wearablesizesystembr_model(WearableSizeSystemBRInheritedProperties).schema()
    create_wearablesizesystembr_model(WearableSizeSystemBRProperties).schema()


def NonprofitType_test():
    from schorg.NonprofitType import NonprofitTypeInheritedProperties
    from schorg.NonprofitType import NonprofitTypeProperties
    from schorg.NonprofitType import NonprofitTypeAllProperties
    from schorg.NonprofitType import create_schema_org_model
    from schorg.NonprofitType import create_nonprofittype_model
    from schorg.NonprofitType import NonprofitType

    a = create_schema_org_model(type_=NonprofitTypeInheritedProperties)
    b = create_schema_org_model(type_=NonprofitTypeProperties)
    c = create_schema_org_model(type_=NonprofitTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NonprofitType.schema()
    create_nonprofittype_model(NonprofitTypeAllProperties).schema()
    create_nonprofittype_model(NonprofitTypeInheritedProperties).schema()
    create_nonprofittype_model(NonprofitTypeProperties).schema()


def NLNonprofitType_test():
    from schorg.NLNonprofitType import NLNonprofitTypeInheritedProperties
    from schorg.NLNonprofitType import NLNonprofitTypeProperties
    from schorg.NLNonprofitType import NLNonprofitTypeAllProperties
    from schorg.NLNonprofitType import create_schema_org_model
    from schorg.NLNonprofitType import create_nlnonprofittype_model
    from schorg.NLNonprofitType import NLNonprofitType

    a = create_schema_org_model(type_=NLNonprofitTypeInheritedProperties)
    b = create_schema_org_model(type_=NLNonprofitTypeProperties)
    c = create_schema_org_model(type_=NLNonprofitTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NLNonprofitType.schema()
    create_nlnonprofittype_model(NLNonprofitTypeAllProperties).schema()
    create_nlnonprofittype_model(NLNonprofitTypeInheritedProperties).schema()
    create_nlnonprofittype_model(NLNonprofitTypeProperties).schema()


def NonprofitSBBI_test():
    from schorg.NonprofitSBBI import NonprofitSBBIInheritedProperties
    from schorg.NonprofitSBBI import NonprofitSBBIProperties
    from schorg.NonprofitSBBI import NonprofitSBBIAllProperties
    from schorg.NonprofitSBBI import create_schema_org_model
    from schorg.NonprofitSBBI import create_nonprofitsbbi_model
    from schorg.NonprofitSBBI import NonprofitSBBI

    a = create_schema_org_model(type_=NonprofitSBBIInheritedProperties)
    b = create_schema_org_model(type_=NonprofitSBBIProperties)
    c = create_schema_org_model(type_=NonprofitSBBIAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NonprofitSBBI.schema()
    create_nonprofitsbbi_model(NonprofitSBBIAllProperties).schema()
    create_nonprofitsbbi_model(NonprofitSBBIInheritedProperties).schema()
    create_nonprofitsbbi_model(NonprofitSBBIProperties).schema()


def CreativeWork_test():
    from schorg.CreativeWork import CreativeWorkInheritedProperties
    from schorg.CreativeWork import CreativeWorkProperties
    from schorg.CreativeWork import CreativeWorkAllProperties
    from schorg.CreativeWork import create_schema_org_model
    from schorg.CreativeWork import create_creativework_model
    from schorg.CreativeWork import CreativeWork

    a = create_schema_org_model(type_=CreativeWorkInheritedProperties)
    b = create_schema_org_model(type_=CreativeWorkProperties)
    c = create_schema_org_model(type_=CreativeWorkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CreativeWork.schema()
    create_creativework_model(CreativeWorkAllProperties).schema()
    create_creativework_model(CreativeWorkInheritedProperties).schema()
    create_creativework_model(CreativeWorkProperties).schema()


def DataCatalog_test():
    from schorg.DataCatalog import DataCatalogInheritedProperties
    from schorg.DataCatalog import DataCatalogProperties
    from schorg.DataCatalog import DataCatalogAllProperties
    from schorg.DataCatalog import create_schema_org_model
    from schorg.DataCatalog import create_datacatalog_model
    from schorg.DataCatalog import DataCatalog

    a = create_schema_org_model(type_=DataCatalogInheritedProperties)
    b = create_schema_org_model(type_=DataCatalogProperties)
    c = create_schema_org_model(type_=DataCatalogAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DataCatalog.schema()
    create_datacatalog_model(DataCatalogAllProperties).schema()
    create_datacatalog_model(DataCatalogInheritedProperties).schema()
    create_datacatalog_model(DataCatalogProperties).schema()


def WebPageElement_test():
    from schorg.WebPageElement import WebPageElementInheritedProperties
    from schorg.WebPageElement import WebPageElementProperties
    from schorg.WebPageElement import WebPageElementAllProperties
    from schorg.WebPageElement import create_schema_org_model
    from schorg.WebPageElement import create_webpageelement_model
    from schorg.WebPageElement import WebPageElement

    a = create_schema_org_model(type_=WebPageElementInheritedProperties)
    b = create_schema_org_model(type_=WebPageElementProperties)
    c = create_schema_org_model(type_=WebPageElementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebPageElement.schema()
    create_webpageelement_model(WebPageElementAllProperties).schema()
    create_webpageelement_model(WebPageElementInheritedProperties).schema()
    create_webpageelement_model(WebPageElementProperties).schema()


def Accommodation_test():
    from schorg.Accommodation import AccommodationInheritedProperties
    from schorg.Accommodation import AccommodationProperties
    from schorg.Accommodation import AccommodationAllProperties
    from schorg.Accommodation import create_schema_org_model
    from schorg.Accommodation import create_accommodation_model
    from schorg.Accommodation import Accommodation

    a = create_schema_org_model(type_=AccommodationInheritedProperties)
    b = create_schema_org_model(type_=AccommodationProperties)
    c = create_schema_org_model(type_=AccommodationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Accommodation.schema()
    create_accommodation_model(AccommodationAllProperties).schema()
    create_accommodation_model(AccommodationInheritedProperties).schema()
    create_accommodation_model(AccommodationProperties).schema()


def Apartment_test():
    from schorg.Apartment import ApartmentInheritedProperties
    from schorg.Apartment import ApartmentProperties
    from schorg.Apartment import ApartmentAllProperties
    from schorg.Apartment import create_schema_org_model
    from schorg.Apartment import create_apartment_model
    from schorg.Apartment import Apartment

    a = create_schema_org_model(type_=ApartmentInheritedProperties)
    b = create_schema_org_model(type_=ApartmentProperties)
    c = create_schema_org_model(type_=ApartmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Apartment.schema()
    create_apartment_model(ApartmentAllProperties).schema()
    create_apartment_model(ApartmentInheritedProperties).schema()
    create_apartment_model(ApartmentProperties).schema()


def Event_test():
    from schorg.Event import EventInheritedProperties
    from schorg.Event import EventProperties
    from schorg.Event import EventAllProperties
    from schorg.Event import create_schema_org_model
    from schorg.Event import create_event_model
    from schorg.Event import Event

    a = create_schema_org_model(type_=EventInheritedProperties)
    b = create_schema_org_model(type_=EventProperties)
    c = create_schema_org_model(type_=EventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Event.schema()
    create_event_model(EventAllProperties).schema()
    create_event_model(EventInheritedProperties).schema()
    create_event_model(EventProperties).schema()


def LiteraryEvent_test():
    from schorg.LiteraryEvent import LiteraryEventInheritedProperties
    from schorg.LiteraryEvent import LiteraryEventProperties
    from schorg.LiteraryEvent import LiteraryEventAllProperties
    from schorg.LiteraryEvent import create_schema_org_model
    from schorg.LiteraryEvent import create_literaryevent_model
    from schorg.LiteraryEvent import LiteraryEvent

    a = create_schema_org_model(type_=LiteraryEventInheritedProperties)
    b = create_schema_org_model(type_=LiteraryEventProperties)
    c = create_schema_org_model(type_=LiteraryEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LiteraryEvent.schema()
    create_literaryevent_model(LiteraryEventAllProperties).schema()
    create_literaryevent_model(LiteraryEventInheritedProperties).schema()
    create_literaryevent_model(LiteraryEventProperties).schema()


def Clip_test():
    from schorg.Clip import ClipInheritedProperties
    from schorg.Clip import ClipProperties
    from schorg.Clip import ClipAllProperties
    from schorg.Clip import create_schema_org_model
    from schorg.Clip import create_clip_model
    from schorg.Clip import Clip

    a = create_schema_org_model(type_=ClipInheritedProperties)
    b = create_schema_org_model(type_=ClipProperties)
    c = create_schema_org_model(type_=ClipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Clip.schema()
    create_clip_model(ClipAllProperties).schema()
    create_clip_model(ClipInheritedProperties).schema()
    create_clip_model(ClipProperties).schema()


def MovieClip_test():
    from schorg.MovieClip import MovieClipInheritedProperties
    from schorg.MovieClip import MovieClipProperties
    from schorg.MovieClip import MovieClipAllProperties
    from schorg.MovieClip import create_schema_org_model
    from schorg.MovieClip import create_movieclip_model
    from schorg.MovieClip import MovieClip

    a = create_schema_org_model(type_=MovieClipInheritedProperties)
    b = create_schema_org_model(type_=MovieClipProperties)
    c = create_schema_org_model(type_=MovieClipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MovieClip.schema()
    create_movieclip_model(MovieClipAllProperties).schema()
    create_movieclip_model(MovieClipInheritedProperties).schema()
    create_movieclip_model(MovieClipProperties).schema()


def EducationEvent_test():
    from schorg.EducationEvent import EducationEventInheritedProperties
    from schorg.EducationEvent import EducationEventProperties
    from schorg.EducationEvent import EducationEventAllProperties
    from schorg.EducationEvent import create_schema_org_model
    from schorg.EducationEvent import create_educationevent_model
    from schorg.EducationEvent import EducationEvent

    a = create_schema_org_model(type_=EducationEventInheritedProperties)
    b = create_schema_org_model(type_=EducationEventProperties)
    c = create_schema_org_model(type_=EducationEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EducationEvent.schema()
    create_educationevent_model(EducationEventAllProperties).schema()
    create_educationevent_model(EducationEventInheritedProperties).schema()
    create_educationevent_model(EducationEventProperties).schema()


def MedicalProcedure_test():
    from schorg.MedicalProcedure import MedicalProcedureInheritedProperties
    from schorg.MedicalProcedure import MedicalProcedureProperties
    from schorg.MedicalProcedure import MedicalProcedureAllProperties
    from schorg.MedicalProcedure import create_schema_org_model
    from schorg.MedicalProcedure import create_medicalprocedure_model
    from schorg.MedicalProcedure import MedicalProcedure

    a = create_schema_org_model(type_=MedicalProcedureInheritedProperties)
    b = create_schema_org_model(type_=MedicalProcedureProperties)
    c = create_schema_org_model(type_=MedicalProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalProcedure.schema()
    create_medicalprocedure_model(MedicalProcedureAllProperties).schema()
    create_medicalprocedure_model(MedicalProcedureInheritedProperties).schema()
    create_medicalprocedure_model(MedicalProcedureProperties).schema()


def MedicalEnumeration_test():
    from schorg.MedicalEnumeration import MedicalEnumerationInheritedProperties
    from schorg.MedicalEnumeration import MedicalEnumerationProperties
    from schorg.MedicalEnumeration import MedicalEnumerationAllProperties
    from schorg.MedicalEnumeration import create_schema_org_model
    from schorg.MedicalEnumeration import create_medicalenumeration_model
    from schorg.MedicalEnumeration import MedicalEnumeration

    a = create_schema_org_model(type_=MedicalEnumerationInheritedProperties)
    b = create_schema_org_model(type_=MedicalEnumerationProperties)
    c = create_schema_org_model(type_=MedicalEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalEnumeration.schema()
    create_medicalenumeration_model(MedicalEnumerationAllProperties).schema()
    create_medicalenumeration_model(MedicalEnumerationInheritedProperties).schema()
    create_medicalenumeration_model(MedicalEnumerationProperties).schema()


def PhysicalExam_test():
    from schorg.PhysicalExam import PhysicalExamInheritedProperties
    from schorg.PhysicalExam import PhysicalExamProperties
    from schorg.PhysicalExam import PhysicalExamAllProperties
    from schorg.PhysicalExam import create_schema_org_model
    from schorg.PhysicalExam import create_physicalexam_model
    from schorg.PhysicalExam import PhysicalExam

    a = create_schema_org_model(type_=PhysicalExamInheritedProperties)
    b = create_schema_org_model(type_=PhysicalExamProperties)
    c = create_schema_org_model(type_=PhysicalExamAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PhysicalExam.schema()
    create_physicalexam_model(PhysicalExamAllProperties).schema()
    create_physicalexam_model(PhysicalExamInheritedProperties).schema()
    create_physicalexam_model(PhysicalExamProperties).schema()


def Abdomen_test():
    from schorg.Abdomen import AbdomenInheritedProperties
    from schorg.Abdomen import AbdomenProperties
    from schorg.Abdomen import AbdomenAllProperties
    from schorg.Abdomen import create_schema_org_model
    from schorg.Abdomen import create_abdomen_model
    from schorg.Abdomen import Abdomen

    a = create_schema_org_model(type_=AbdomenInheritedProperties)
    b = create_schema_org_model(type_=AbdomenProperties)
    c = create_schema_org_model(type_=AbdomenAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Abdomen.schema()
    create_abdomen_model(AbdomenAllProperties).schema()
    create_abdomen_model(AbdomenInheritedProperties).schema()
    create_abdomen_model(AbdomenProperties).schema()


def SocialEvent_test():
    from schorg.SocialEvent import SocialEventInheritedProperties
    from schorg.SocialEvent import SocialEventProperties
    from schorg.SocialEvent import SocialEventAllProperties
    from schorg.SocialEvent import create_schema_org_model
    from schorg.SocialEvent import create_socialevent_model
    from schorg.SocialEvent import SocialEvent

    a = create_schema_org_model(type_=SocialEventInheritedProperties)
    b = create_schema_org_model(type_=SocialEventProperties)
    c = create_schema_org_model(type_=SocialEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SocialEvent.schema()
    create_socialevent_model(SocialEventAllProperties).schema()
    create_socialevent_model(SocialEventInheritedProperties).schema()
    create_socialevent_model(SocialEventProperties).schema()


def MedicalTest_test():
    from schorg.MedicalTest import MedicalTestInheritedProperties
    from schorg.MedicalTest import MedicalTestProperties
    from schorg.MedicalTest import MedicalTestAllProperties
    from schorg.MedicalTest import create_schema_org_model
    from schorg.MedicalTest import create_medicaltest_model
    from schorg.MedicalTest import MedicalTest

    a = create_schema_org_model(type_=MedicalTestInheritedProperties)
    b = create_schema_org_model(type_=MedicalTestProperties)
    c = create_schema_org_model(type_=MedicalTestAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalTest.schema()
    create_medicaltest_model(MedicalTestAllProperties).schema()
    create_medicaltest_model(MedicalTestInheritedProperties).schema()
    create_medicaltest_model(MedicalTestProperties).schema()


def ImagingTest_test():
    from schorg.ImagingTest import ImagingTestInheritedProperties
    from schorg.ImagingTest import ImagingTestProperties
    from schorg.ImagingTest import ImagingTestAllProperties
    from schorg.ImagingTest import create_schema_org_model
    from schorg.ImagingTest import create_imagingtest_model
    from schorg.ImagingTest import ImagingTest

    a = create_schema_org_model(type_=ImagingTestInheritedProperties)
    b = create_schema_org_model(type_=ImagingTestProperties)
    c = create_schema_org_model(type_=ImagingTestAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ImagingTest.schema()
    create_imagingtest_model(ImagingTestAllProperties).schema()
    create_imagingtest_model(ImagingTestInheritedProperties).schema()
    create_imagingtest_model(ImagingTestProperties).schema()


def InteractionCounter_test():
    from schorg.InteractionCounter import InteractionCounterInheritedProperties
    from schorg.InteractionCounter import InteractionCounterProperties
    from schorg.InteractionCounter import InteractionCounterAllProperties
    from schorg.InteractionCounter import create_schema_org_model
    from schorg.InteractionCounter import create_interactioncounter_model
    from schorg.InteractionCounter import InteractionCounter

    a = create_schema_org_model(type_=InteractionCounterInheritedProperties)
    b = create_schema_org_model(type_=InteractionCounterProperties)
    c = create_schema_org_model(type_=InteractionCounterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InteractionCounter.schema()
    create_interactioncounter_model(InteractionCounterAllProperties).schema()
    create_interactioncounter_model(InteractionCounterInheritedProperties).schema()
    create_interactioncounter_model(InteractionCounterProperties).schema()


def Audience_test():
    from schorg.Audience import AudienceInheritedProperties
    from schorg.Audience import AudienceProperties
    from schorg.Audience import AudienceAllProperties
    from schorg.Audience import create_schema_org_model
    from schorg.Audience import create_audience_model
    from schorg.Audience import Audience

    a = create_schema_org_model(type_=AudienceInheritedProperties)
    b = create_schema_org_model(type_=AudienceProperties)
    c = create_schema_org_model(type_=AudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Audience.schema()
    create_audience_model(AudienceAllProperties).schema()
    create_audience_model(AudienceInheritedProperties).schema()
    create_audience_model(AudienceProperties).schema()


def PeopleAudience_test():
    from schorg.PeopleAudience import PeopleAudienceInheritedProperties
    from schorg.PeopleAudience import PeopleAudienceProperties
    from schorg.PeopleAudience import PeopleAudienceAllProperties
    from schorg.PeopleAudience import create_schema_org_model
    from schorg.PeopleAudience import create_peopleaudience_model
    from schorg.PeopleAudience import PeopleAudience

    a = create_schema_org_model(type_=PeopleAudienceInheritedProperties)
    b = create_schema_org_model(type_=PeopleAudienceProperties)
    c = create_schema_org_model(type_=PeopleAudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PeopleAudience.schema()
    create_peopleaudience_model(PeopleAudienceAllProperties).schema()
    create_peopleaudience_model(PeopleAudienceInheritedProperties).schema()
    create_peopleaudience_model(PeopleAudienceProperties).schema()


def ParentAudience_test():
    from schorg.ParentAudience import ParentAudienceInheritedProperties
    from schorg.ParentAudience import ParentAudienceProperties
    from schorg.ParentAudience import ParentAudienceAllProperties
    from schorg.ParentAudience import create_schema_org_model
    from schorg.ParentAudience import create_parentaudience_model
    from schorg.ParentAudience import ParentAudience

    a = create_schema_org_model(type_=ParentAudienceInheritedProperties)
    b = create_schema_org_model(type_=ParentAudienceProperties)
    c = create_schema_org_model(type_=ParentAudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParentAudience.schema()
    create_parentaudience_model(ParentAudienceAllProperties).schema()
    create_parentaudience_model(ParentAudienceInheritedProperties).schema()
    create_parentaudience_model(ParentAudienceProperties).schema()


def Product_test():
    from schorg.Product import ProductInheritedProperties
    from schorg.Product import ProductProperties
    from schorg.Product import ProductAllProperties
    from schorg.Product import create_schema_org_model
    from schorg.Product import create_product_model
    from schorg.Product import Product

    a = create_schema_org_model(type_=ProductInheritedProperties)
    b = create_schema_org_model(type_=ProductProperties)
    c = create_schema_org_model(type_=ProductAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Product.schema()
    create_product_model(ProductAllProperties).schema()
    create_product_model(ProductInheritedProperties).schema()
    create_product_model(ProductProperties).schema()


def ProductModel_test():
    from schorg.ProductModel import ProductModelInheritedProperties
    from schorg.ProductModel import ProductModelProperties
    from schorg.ProductModel import ProductModelAllProperties
    from schorg.ProductModel import create_schema_org_model
    from schorg.ProductModel import create_productmodel_model
    from schorg.ProductModel import ProductModel

    a = create_schema_org_model(type_=ProductModelInheritedProperties)
    b = create_schema_org_model(type_=ProductModelProperties)
    c = create_schema_org_model(type_=ProductModelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProductModel.schema()
    create_productmodel_model(ProductModelAllProperties).schema()
    create_productmodel_model(ProductModelInheritedProperties).schema()
    create_productmodel_model(ProductModelProperties).schema()


def MedicalTrialDesign_test():
    from schorg.MedicalTrialDesign import MedicalTrialDesignInheritedProperties
    from schorg.MedicalTrialDesign import MedicalTrialDesignProperties
    from schorg.MedicalTrialDesign import MedicalTrialDesignAllProperties
    from schorg.MedicalTrialDesign import create_schema_org_model
    from schorg.MedicalTrialDesign import create_medicaltrialdesign_model
    from schorg.MedicalTrialDesign import MedicalTrialDesign

    a = create_schema_org_model(type_=MedicalTrialDesignInheritedProperties)
    b = create_schema_org_model(type_=MedicalTrialDesignProperties)
    c = create_schema_org_model(type_=MedicalTrialDesignAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalTrialDesign.schema()
    create_medicaltrialdesign_model(MedicalTrialDesignAllProperties).schema()
    create_medicaltrialdesign_model(MedicalTrialDesignInheritedProperties).schema()
    create_medicaltrialdesign_model(MedicalTrialDesignProperties).schema()


def PlaceboControlledTrial_test():
    from schorg.PlaceboControlledTrial import PlaceboControlledTrialInheritedProperties
    from schorg.PlaceboControlledTrial import PlaceboControlledTrialProperties
    from schorg.PlaceboControlledTrial import PlaceboControlledTrialAllProperties
    from schorg.PlaceboControlledTrial import create_schema_org_model
    from schorg.PlaceboControlledTrial import create_placebocontrolledtrial_model
    from schorg.PlaceboControlledTrial import PlaceboControlledTrial

    a = create_schema_org_model(type_=PlaceboControlledTrialInheritedProperties)
    b = create_schema_org_model(type_=PlaceboControlledTrialProperties)
    c = create_schema_org_model(type_=PlaceboControlledTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlaceboControlledTrial.schema()
    create_placebocontrolledtrial_model(PlaceboControlledTrialAllProperties).schema()
    create_placebocontrolledtrial_model(
        PlaceboControlledTrialInheritedProperties
    ).schema()
    create_placebocontrolledtrial_model(PlaceboControlledTrialProperties).schema()


def Action_test():
    from schorg.Action import ActionInheritedProperties
    from schorg.Action import ActionProperties
    from schorg.Action import ActionAllProperties
    from schorg.Action import create_schema_org_model
    from schorg.Action import create_action_model
    from schorg.Action import Action

    a = create_schema_org_model(type_=ActionInheritedProperties)
    b = create_schema_org_model(type_=ActionProperties)
    c = create_schema_org_model(type_=ActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Action.schema()
    create_action_model(ActionAllProperties).schema()
    create_action_model(ActionInheritedProperties).schema()
    create_action_model(ActionProperties).schema()


def CreateAction_test():
    from schorg.CreateAction import CreateActionInheritedProperties
    from schorg.CreateAction import CreateActionProperties
    from schorg.CreateAction import CreateActionAllProperties
    from schorg.CreateAction import create_schema_org_model
    from schorg.CreateAction import create_createaction_model
    from schorg.CreateAction import CreateAction

    a = create_schema_org_model(type_=CreateActionInheritedProperties)
    b = create_schema_org_model(type_=CreateActionProperties)
    c = create_schema_org_model(type_=CreateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CreateAction.schema()
    create_createaction_model(CreateActionAllProperties).schema()
    create_createaction_model(CreateActionInheritedProperties).schema()
    create_createaction_model(CreateActionProperties).schema()


def PhotographAction_test():
    from schorg.PhotographAction import PhotographActionInheritedProperties
    from schorg.PhotographAction import PhotographActionProperties
    from schorg.PhotographAction import PhotographActionAllProperties
    from schorg.PhotographAction import create_schema_org_model
    from schorg.PhotographAction import create_photographaction_model
    from schorg.PhotographAction import PhotographAction

    a = create_schema_org_model(type_=PhotographActionInheritedProperties)
    b = create_schema_org_model(type_=PhotographActionProperties)
    c = create_schema_org_model(type_=PhotographActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PhotographAction.schema()
    create_photographaction_model(PhotographActionAllProperties).schema()
    create_photographaction_model(PhotographActionInheritedProperties).schema()
    create_photographaction_model(PhotographActionProperties).schema()


def USNonprofitType_test():
    from schorg.USNonprofitType import USNonprofitTypeInheritedProperties
    from schorg.USNonprofitType import USNonprofitTypeProperties
    from schorg.USNonprofitType import USNonprofitTypeAllProperties
    from schorg.USNonprofitType import create_schema_org_model
    from schorg.USNonprofitType import create_usnonprofittype_model
    from schorg.USNonprofitType import USNonprofitType

    a = create_schema_org_model(type_=USNonprofitTypeInheritedProperties)
    b = create_schema_org_model(type_=USNonprofitTypeProperties)
    c = create_schema_org_model(type_=USNonprofitTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    USNonprofitType.schema()
    create_usnonprofittype_model(USNonprofitTypeAllProperties).schema()
    create_usnonprofittype_model(USNonprofitTypeInheritedProperties).schema()
    create_usnonprofittype_model(USNonprofitTypeProperties).schema()


def Nonprofit501c4_test():
    from schorg.Nonprofit501c4 import Nonprofit501c4InheritedProperties
    from schorg.Nonprofit501c4 import Nonprofit501c4Properties
    from schorg.Nonprofit501c4 import Nonprofit501c4AllProperties
    from schorg.Nonprofit501c4 import create_schema_org_model
    from schorg.Nonprofit501c4 import create_nonprofit501c4_model
    from schorg.Nonprofit501c4 import Nonprofit501c4

    a = create_schema_org_model(type_=Nonprofit501c4InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c4Properties)
    c = create_schema_org_model(type_=Nonprofit501c4AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c4.schema()
    create_nonprofit501c4_model(Nonprofit501c4AllProperties).schema()
    create_nonprofit501c4_model(Nonprofit501c4InheritedProperties).schema()
    create_nonprofit501c4_model(Nonprofit501c4Properties).schema()


def MeasurementTypeEnumeration_test():
    from schorg.MeasurementTypeEnumeration import (
        MeasurementTypeEnumerationInheritedProperties,
    )
    from schorg.MeasurementTypeEnumeration import MeasurementTypeEnumerationProperties
    from schorg.MeasurementTypeEnumeration import (
        MeasurementTypeEnumerationAllProperties,
    )
    from schorg.MeasurementTypeEnumeration import create_schema_org_model
    from schorg.MeasurementTypeEnumeration import (
        create_measurementtypeenumeration_model,
    )
    from schorg.MeasurementTypeEnumeration import MeasurementTypeEnumeration

    a = create_schema_org_model(type_=MeasurementTypeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=MeasurementTypeEnumerationProperties)
    c = create_schema_org_model(type_=MeasurementTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MeasurementTypeEnumeration.schema()
    create_measurementtypeenumeration_model(
        MeasurementTypeEnumerationAllProperties
    ).schema()
    create_measurementtypeenumeration_model(
        MeasurementTypeEnumerationInheritedProperties
    ).schema()
    create_measurementtypeenumeration_model(
        MeasurementTypeEnumerationProperties
    ).schema()


def BodyMeasurementTypeEnumeration_test():
    from schorg.BodyMeasurementTypeEnumeration import (
        BodyMeasurementTypeEnumerationInheritedProperties,
    )
    from schorg.BodyMeasurementTypeEnumeration import (
        BodyMeasurementTypeEnumerationProperties,
    )
    from schorg.BodyMeasurementTypeEnumeration import (
        BodyMeasurementTypeEnumerationAllProperties,
    )
    from schorg.BodyMeasurementTypeEnumeration import create_schema_org_model
    from schorg.BodyMeasurementTypeEnumeration import (
        create_bodymeasurementtypeenumeration_model,
    )
    from schorg.BodyMeasurementTypeEnumeration import BodyMeasurementTypeEnumeration

    a = create_schema_org_model(type_=BodyMeasurementTypeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementTypeEnumerationProperties)
    c = create_schema_org_model(type_=BodyMeasurementTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementTypeEnumeration.schema()
    create_bodymeasurementtypeenumeration_model(
        BodyMeasurementTypeEnumerationAllProperties
    ).schema()
    create_bodymeasurementtypeenumeration_model(
        BodyMeasurementTypeEnumerationInheritedProperties
    ).schema()
    create_bodymeasurementtypeenumeration_model(
        BodyMeasurementTypeEnumerationProperties
    ).schema()


def BodyMeasurementWeight_test():
    from schorg.BodyMeasurementWeight import BodyMeasurementWeightInheritedProperties
    from schorg.BodyMeasurementWeight import BodyMeasurementWeightProperties
    from schorg.BodyMeasurementWeight import BodyMeasurementWeightAllProperties
    from schorg.BodyMeasurementWeight import create_schema_org_model
    from schorg.BodyMeasurementWeight import create_bodymeasurementweight_model
    from schorg.BodyMeasurementWeight import BodyMeasurementWeight

    a = create_schema_org_model(type_=BodyMeasurementWeightInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementWeightProperties)
    c = create_schema_org_model(type_=BodyMeasurementWeightAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementWeight.schema()
    create_bodymeasurementweight_model(BodyMeasurementWeightAllProperties).schema()
    create_bodymeasurementweight_model(
        BodyMeasurementWeightInheritedProperties
    ).schema()
    create_bodymeasurementweight_model(BodyMeasurementWeightProperties).schema()


def Reservation_test():
    from schorg.Reservation import ReservationInheritedProperties
    from schorg.Reservation import ReservationProperties
    from schorg.Reservation import ReservationAllProperties
    from schorg.Reservation import create_schema_org_model
    from schorg.Reservation import create_reservation_model
    from schorg.Reservation import Reservation

    a = create_schema_org_model(type_=ReservationInheritedProperties)
    b = create_schema_org_model(type_=ReservationProperties)
    c = create_schema_org_model(type_=ReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Reservation.schema()
    create_reservation_model(ReservationAllProperties).schema()
    create_reservation_model(ReservationInheritedProperties).schema()
    create_reservation_model(ReservationProperties).schema()


def FlightReservation_test():
    from schorg.FlightReservation import FlightReservationInheritedProperties
    from schorg.FlightReservation import FlightReservationProperties
    from schorg.FlightReservation import FlightReservationAllProperties
    from schorg.FlightReservation import create_schema_org_model
    from schorg.FlightReservation import create_flightreservation_model
    from schorg.FlightReservation import FlightReservation

    a = create_schema_org_model(type_=FlightReservationInheritedProperties)
    b = create_schema_org_model(type_=FlightReservationProperties)
    c = create_schema_org_model(type_=FlightReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FlightReservation.schema()
    create_flightreservation_model(FlightReservationAllProperties).schema()
    create_flightreservation_model(FlightReservationInheritedProperties).schema()
    create_flightreservation_model(FlightReservationProperties).schema()


def Grant_test():
    from schorg.Grant import GrantInheritedProperties
    from schorg.Grant import GrantProperties
    from schorg.Grant import GrantAllProperties
    from schorg.Grant import create_schema_org_model
    from schorg.Grant import create_grant_model
    from schorg.Grant import Grant

    a = create_schema_org_model(type_=GrantInheritedProperties)
    b = create_schema_org_model(type_=GrantProperties)
    c = create_schema_org_model(type_=GrantAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Grant.schema()
    create_grant_model(GrantAllProperties).schema()
    create_grant_model(GrantInheritedProperties).schema()
    create_grant_model(GrantProperties).schema()


def MonetaryGrant_test():
    from schorg.MonetaryGrant import MonetaryGrantInheritedProperties
    from schorg.MonetaryGrant import MonetaryGrantProperties
    from schorg.MonetaryGrant import MonetaryGrantAllProperties
    from schorg.MonetaryGrant import create_schema_org_model
    from schorg.MonetaryGrant import create_monetarygrant_model
    from schorg.MonetaryGrant import MonetaryGrant

    a = create_schema_org_model(type_=MonetaryGrantInheritedProperties)
    b = create_schema_org_model(type_=MonetaryGrantProperties)
    c = create_schema_org_model(type_=MonetaryGrantAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MonetaryGrant.schema()
    create_monetarygrant_model(MonetaryGrantAllProperties).schema()
    create_monetarygrant_model(MonetaryGrantInheritedProperties).schema()
    create_monetarygrant_model(MonetaryGrantProperties).schema()


def MedicalIndication_test():
    from schorg.MedicalIndication import MedicalIndicationInheritedProperties
    from schorg.MedicalIndication import MedicalIndicationProperties
    from schorg.MedicalIndication import MedicalIndicationAllProperties
    from schorg.MedicalIndication import create_schema_org_model
    from schorg.MedicalIndication import create_medicalindication_model
    from schorg.MedicalIndication import MedicalIndication

    a = create_schema_org_model(type_=MedicalIndicationInheritedProperties)
    b = create_schema_org_model(type_=MedicalIndicationProperties)
    c = create_schema_org_model(type_=MedicalIndicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalIndication.schema()
    create_medicalindication_model(MedicalIndicationAllProperties).schema()
    create_medicalindication_model(MedicalIndicationInheritedProperties).schema()
    create_medicalindication_model(MedicalIndicationProperties).schema()


def TreatmentIndication_test():
    from schorg.TreatmentIndication import TreatmentIndicationInheritedProperties
    from schorg.TreatmentIndication import TreatmentIndicationProperties
    from schorg.TreatmentIndication import TreatmentIndicationAllProperties
    from schorg.TreatmentIndication import create_schema_org_model
    from schorg.TreatmentIndication import create_treatmentindication_model
    from schorg.TreatmentIndication import TreatmentIndication

    a = create_schema_org_model(type_=TreatmentIndicationInheritedProperties)
    b = create_schema_org_model(type_=TreatmentIndicationProperties)
    c = create_schema_org_model(type_=TreatmentIndicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TreatmentIndication.schema()
    create_treatmentindication_model(TreatmentIndicationAllProperties).schema()
    create_treatmentindication_model(TreatmentIndicationInheritedProperties).schema()
    create_treatmentindication_model(TreatmentIndicationProperties).schema()


def Cemetery_test():
    from schorg.Cemetery import CemeteryInheritedProperties
    from schorg.Cemetery import CemeteryProperties
    from schorg.Cemetery import CemeteryAllProperties
    from schorg.Cemetery import create_schema_org_model
    from schorg.Cemetery import create_cemetery_model
    from schorg.Cemetery import Cemetery

    a = create_schema_org_model(type_=CemeteryInheritedProperties)
    b = create_schema_org_model(type_=CemeteryProperties)
    c = create_schema_org_model(type_=CemeteryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Cemetery.schema()
    create_cemetery_model(CemeteryAllProperties).schema()
    create_cemetery_model(CemeteryInheritedProperties).schema()
    create_cemetery_model(CemeteryProperties).schema()


def EnergyEfficiencyEnumeration_test():
    from schorg.EnergyEfficiencyEnumeration import (
        EnergyEfficiencyEnumerationInheritedProperties,
    )
    from schorg.EnergyEfficiencyEnumeration import EnergyEfficiencyEnumerationProperties
    from schorg.EnergyEfficiencyEnumeration import (
        EnergyEfficiencyEnumerationAllProperties,
    )
    from schorg.EnergyEfficiencyEnumeration import create_schema_org_model
    from schorg.EnergyEfficiencyEnumeration import (
        create_energyefficiencyenumeration_model,
    )
    from schorg.EnergyEfficiencyEnumeration import EnergyEfficiencyEnumeration

    a = create_schema_org_model(type_=EnergyEfficiencyEnumerationInheritedProperties)
    b = create_schema_org_model(type_=EnergyEfficiencyEnumerationProperties)
    c = create_schema_org_model(type_=EnergyEfficiencyEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EnergyEfficiencyEnumeration.schema()
    create_energyefficiencyenumeration_model(
        EnergyEfficiencyEnumerationAllProperties
    ).schema()
    create_energyefficiencyenumeration_model(
        EnergyEfficiencyEnumerationInheritedProperties
    ).schema()
    create_energyefficiencyenumeration_model(
        EnergyEfficiencyEnumerationProperties
    ).schema()


def EUEnergyEfficiencyEnumeration_test():
    from schorg.EUEnergyEfficiencyEnumeration import (
        EUEnergyEfficiencyEnumerationInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyEnumeration import (
        EUEnergyEfficiencyEnumerationProperties,
    )
    from schorg.EUEnergyEfficiencyEnumeration import (
        EUEnergyEfficiencyEnumerationAllProperties,
    )
    from schorg.EUEnergyEfficiencyEnumeration import create_schema_org_model
    from schorg.EUEnergyEfficiencyEnumeration import (
        create_euenergyefficiencyenumeration_model,
    )
    from schorg.EUEnergyEfficiencyEnumeration import EUEnergyEfficiencyEnumeration

    a = create_schema_org_model(type_=EUEnergyEfficiencyEnumerationInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyEnumerationProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyEnumeration.schema()
    create_euenergyefficiencyenumeration_model(
        EUEnergyEfficiencyEnumerationAllProperties
    ).schema()
    create_euenergyefficiencyenumeration_model(
        EUEnergyEfficiencyEnumerationInheritedProperties
    ).schema()
    create_euenergyefficiencyenumeration_model(
        EUEnergyEfficiencyEnumerationProperties
    ).schema()


def EUEnergyEfficiencyCategoryA3Plus_test():
    from schorg.EUEnergyEfficiencyCategoryA3Plus import (
        EUEnergyEfficiencyCategoryA3PlusInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA3Plus import (
        EUEnergyEfficiencyCategoryA3PlusProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA3Plus import (
        EUEnergyEfficiencyCategoryA3PlusAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA3Plus import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryA3Plus import (
        create_euenergyefficiencycategorya3plus_model,
    )
    from schorg.EUEnergyEfficiencyCategoryA3Plus import EUEnergyEfficiencyCategoryA3Plus

    a = create_schema_org_model(
        type_=EUEnergyEfficiencyCategoryA3PlusInheritedProperties
    )
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA3PlusProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA3PlusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryA3Plus.schema()
    create_euenergyefficiencycategorya3plus_model(
        EUEnergyEfficiencyCategoryA3PlusAllProperties
    ).schema()
    create_euenergyefficiencycategorya3plus_model(
        EUEnergyEfficiencyCategoryA3PlusInheritedProperties
    ).schema()
    create_euenergyefficiencycategorya3plus_model(
        EUEnergyEfficiencyCategoryA3PlusProperties
    ).schema()


def DigitalPlatformEnumeration_test():
    from schorg.DigitalPlatformEnumeration import (
        DigitalPlatformEnumerationInheritedProperties,
    )
    from schorg.DigitalPlatformEnumeration import DigitalPlatformEnumerationProperties
    from schorg.DigitalPlatformEnumeration import (
        DigitalPlatformEnumerationAllProperties,
    )
    from schorg.DigitalPlatformEnumeration import create_schema_org_model
    from schorg.DigitalPlatformEnumeration import (
        create_digitalplatformenumeration_model,
    )
    from schorg.DigitalPlatformEnumeration import DigitalPlatformEnumeration

    a = create_schema_org_model(type_=DigitalPlatformEnumerationInheritedProperties)
    b = create_schema_org_model(type_=DigitalPlatformEnumerationProperties)
    c = create_schema_org_model(type_=DigitalPlatformEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalPlatformEnumeration.schema()
    create_digitalplatformenumeration_model(
        DigitalPlatformEnumerationAllProperties
    ).schema()
    create_digitalplatformenumeration_model(
        DigitalPlatformEnumerationInheritedProperties
    ).schema()
    create_digitalplatformenumeration_model(
        DigitalPlatformEnumerationProperties
    ).schema()


def Specialty_test():
    from schorg.Specialty import SpecialtyInheritedProperties
    from schorg.Specialty import SpecialtyProperties
    from schorg.Specialty import SpecialtyAllProperties
    from schorg.Specialty import create_schema_org_model
    from schorg.Specialty import create_specialty_model
    from schorg.Specialty import Specialty

    a = create_schema_org_model(type_=SpecialtyInheritedProperties)
    b = create_schema_org_model(type_=SpecialtyProperties)
    c = create_schema_org_model(type_=SpecialtyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Specialty.schema()
    create_specialty_model(SpecialtyAllProperties).schema()
    create_specialty_model(SpecialtyInheritedProperties).schema()
    create_specialty_model(SpecialtyProperties).schema()


def MedicalSpecialty_test():
    from schorg.MedicalSpecialty import MedicalSpecialtyInheritedProperties
    from schorg.MedicalSpecialty import MedicalSpecialtyProperties
    from schorg.MedicalSpecialty import MedicalSpecialtyAllProperties
    from schorg.MedicalSpecialty import create_schema_org_model
    from schorg.MedicalSpecialty import create_medicalspecialty_model
    from schorg.MedicalSpecialty import MedicalSpecialty

    a = create_schema_org_model(type_=MedicalSpecialtyInheritedProperties)
    b = create_schema_org_model(type_=MedicalSpecialtyProperties)
    c = create_schema_org_model(type_=MedicalSpecialtyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalSpecialty.schema()
    create_medicalspecialty_model(MedicalSpecialtyAllProperties).schema()
    create_medicalspecialty_model(MedicalSpecialtyInheritedProperties).schema()
    create_medicalspecialty_model(MedicalSpecialtyProperties).schema()


def MedicalBusiness_test():
    from schorg.MedicalBusiness import MedicalBusinessInheritedProperties
    from schorg.MedicalBusiness import MedicalBusinessProperties
    from schorg.MedicalBusiness import MedicalBusinessAllProperties
    from schorg.MedicalBusiness import create_schema_org_model
    from schorg.MedicalBusiness import create_medicalbusiness_model
    from schorg.MedicalBusiness import MedicalBusiness

    a = create_schema_org_model(type_=MedicalBusinessInheritedProperties)
    b = create_schema_org_model(type_=MedicalBusinessProperties)
    c = create_schema_org_model(type_=MedicalBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalBusiness.schema()
    create_medicalbusiness_model(MedicalBusinessAllProperties).schema()
    create_medicalbusiness_model(MedicalBusinessInheritedProperties).schema()
    create_medicalbusiness_model(MedicalBusinessProperties).schema()


def PublicHealth_test():
    from schorg.PublicHealth import PublicHealthInheritedProperties
    from schorg.PublicHealth import PublicHealthProperties
    from schorg.PublicHealth import PublicHealthAllProperties
    from schorg.PublicHealth import create_schema_org_model
    from schorg.PublicHealth import create_publichealth_model
    from schorg.PublicHealth import PublicHealth

    a = create_schema_org_model(type_=PublicHealthInheritedProperties)
    b = create_schema_org_model(type_=PublicHealthProperties)
    c = create_schema_org_model(type_=PublicHealthAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicHealth.schema()
    create_publichealth_model(PublicHealthAllProperties).schema()
    create_publichealth_model(PublicHealthInheritedProperties).schema()
    create_publichealth_model(PublicHealthProperties).schema()


def WearableSizeSystemEN13402_test():
    from schorg.WearableSizeSystemEN13402 import (
        WearableSizeSystemEN13402InheritedProperties,
    )
    from schorg.WearableSizeSystemEN13402 import WearableSizeSystemEN13402Properties
    from schorg.WearableSizeSystemEN13402 import WearableSizeSystemEN13402AllProperties
    from schorg.WearableSizeSystemEN13402 import create_schema_org_model
    from schorg.WearableSizeSystemEN13402 import create_wearablesizesystemen13402_model
    from schorg.WearableSizeSystemEN13402 import WearableSizeSystemEN13402

    a = create_schema_org_model(type_=WearableSizeSystemEN13402InheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemEN13402Properties)
    c = create_schema_org_model(type_=WearableSizeSystemEN13402AllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemEN13402.schema()
    create_wearablesizesystemen13402_model(
        WearableSizeSystemEN13402AllProperties
    ).schema()
    create_wearablesizesystemen13402_model(
        WearableSizeSystemEN13402InheritedProperties
    ).schema()
    create_wearablesizesystemen13402_model(WearableSizeSystemEN13402Properties).schema()


def InteractAction_test():
    from schorg.InteractAction import InteractActionInheritedProperties
    from schorg.InteractAction import InteractActionProperties
    from schorg.InteractAction import InteractActionAllProperties
    from schorg.InteractAction import create_schema_org_model
    from schorg.InteractAction import create_interactaction_model
    from schorg.InteractAction import InteractAction

    a = create_schema_org_model(type_=InteractActionInheritedProperties)
    b = create_schema_org_model(type_=InteractActionProperties)
    c = create_schema_org_model(type_=InteractActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InteractAction.schema()
    create_interactaction_model(InteractActionAllProperties).schema()
    create_interactaction_model(InteractActionInheritedProperties).schema()
    create_interactaction_model(InteractActionProperties).schema()


def CommunicateAction_test():
    from schorg.CommunicateAction import CommunicateActionInheritedProperties
    from schorg.CommunicateAction import CommunicateActionProperties
    from schorg.CommunicateAction import CommunicateActionAllProperties
    from schorg.CommunicateAction import create_schema_org_model
    from schorg.CommunicateAction import create_communicateaction_model
    from schorg.CommunicateAction import CommunicateAction

    a = create_schema_org_model(type_=CommunicateActionInheritedProperties)
    b = create_schema_org_model(type_=CommunicateActionProperties)
    c = create_schema_org_model(type_=CommunicateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CommunicateAction.schema()
    create_communicateaction_model(CommunicateActionAllProperties).schema()
    create_communicateaction_model(CommunicateActionInheritedProperties).schema()
    create_communicateaction_model(CommunicateActionProperties).schema()


def CheckInAction_test():
    from schorg.CheckInAction import CheckInActionInheritedProperties
    from schorg.CheckInAction import CheckInActionProperties
    from schorg.CheckInAction import CheckInActionAllProperties
    from schorg.CheckInAction import create_schema_org_model
    from schorg.CheckInAction import create_checkinaction_model
    from schorg.CheckInAction import CheckInAction

    a = create_schema_org_model(type_=CheckInActionInheritedProperties)
    b = create_schema_org_model(type_=CheckInActionProperties)
    c = create_schema_org_model(type_=CheckInActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CheckInAction.schema()
    create_checkinaction_model(CheckInActionAllProperties).schema()
    create_checkinaction_model(CheckInActionInheritedProperties).schema()
    create_checkinaction_model(CheckInActionProperties).schema()


def PriceComponentTypeEnumeration_test():
    from schorg.PriceComponentTypeEnumeration import (
        PriceComponentTypeEnumerationInheritedProperties,
    )
    from schorg.PriceComponentTypeEnumeration import (
        PriceComponentTypeEnumerationProperties,
    )
    from schorg.PriceComponentTypeEnumeration import (
        PriceComponentTypeEnumerationAllProperties,
    )
    from schorg.PriceComponentTypeEnumeration import create_schema_org_model
    from schorg.PriceComponentTypeEnumeration import (
        create_pricecomponenttypeenumeration_model,
    )
    from schorg.PriceComponentTypeEnumeration import PriceComponentTypeEnumeration

    a = create_schema_org_model(type_=PriceComponentTypeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=PriceComponentTypeEnumerationProperties)
    c = create_schema_org_model(type_=PriceComponentTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PriceComponentTypeEnumeration.schema()
    create_pricecomponenttypeenumeration_model(
        PriceComponentTypeEnumerationAllProperties
    ).schema()
    create_pricecomponenttypeenumeration_model(
        PriceComponentTypeEnumerationInheritedProperties
    ).schema()
    create_pricecomponenttypeenumeration_model(
        PriceComponentTypeEnumerationProperties
    ).schema()


def DistanceFee_test():
    from schorg.DistanceFee import DistanceFeeInheritedProperties
    from schorg.DistanceFee import DistanceFeeProperties
    from schorg.DistanceFee import DistanceFeeAllProperties
    from schorg.DistanceFee import create_schema_org_model
    from schorg.DistanceFee import create_distancefee_model
    from schorg.DistanceFee import DistanceFee

    a = create_schema_org_model(type_=DistanceFeeInheritedProperties)
    b = create_schema_org_model(type_=DistanceFeeProperties)
    c = create_schema_org_model(type_=DistanceFeeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DistanceFee.schema()
    create_distancefee_model(DistanceFeeAllProperties).schema()
    create_distancefee_model(DistanceFeeInheritedProperties).schema()
    create_distancefee_model(DistanceFeeProperties).schema()


def WearableSizeGroupExtraShort_test():
    from schorg.WearableSizeGroupExtraShort import (
        WearableSizeGroupExtraShortInheritedProperties,
    )
    from schorg.WearableSizeGroupExtraShort import WearableSizeGroupExtraShortProperties
    from schorg.WearableSizeGroupExtraShort import (
        WearableSizeGroupExtraShortAllProperties,
    )
    from schorg.WearableSizeGroupExtraShort import create_schema_org_model
    from schorg.WearableSizeGroupExtraShort import (
        create_wearablesizegroupextrashort_model,
    )
    from schorg.WearableSizeGroupExtraShort import WearableSizeGroupExtraShort

    a = create_schema_org_model(type_=WearableSizeGroupExtraShortInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupExtraShortProperties)
    c = create_schema_org_model(type_=WearableSizeGroupExtraShortAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupExtraShort.schema()
    create_wearablesizegroupextrashort_model(
        WearableSizeGroupExtraShortAllProperties
    ).schema()
    create_wearablesizegroupextrashort_model(
        WearableSizeGroupExtraShortInheritedProperties
    ).schema()
    create_wearablesizegroupextrashort_model(
        WearableSizeGroupExtraShortProperties
    ).schema()


def EventAttendanceModeEnumeration_test():
    from schorg.EventAttendanceModeEnumeration import (
        EventAttendanceModeEnumerationInheritedProperties,
    )
    from schorg.EventAttendanceModeEnumeration import (
        EventAttendanceModeEnumerationProperties,
    )
    from schorg.EventAttendanceModeEnumeration import (
        EventAttendanceModeEnumerationAllProperties,
    )
    from schorg.EventAttendanceModeEnumeration import create_schema_org_model
    from schorg.EventAttendanceModeEnumeration import (
        create_eventattendancemodeenumeration_model,
    )
    from schorg.EventAttendanceModeEnumeration import EventAttendanceModeEnumeration

    a = create_schema_org_model(type_=EventAttendanceModeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=EventAttendanceModeEnumerationProperties)
    c = create_schema_org_model(type_=EventAttendanceModeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventAttendanceModeEnumeration.schema()
    create_eventattendancemodeenumeration_model(
        EventAttendanceModeEnumerationAllProperties
    ).schema()
    create_eventattendancemodeenumeration_model(
        EventAttendanceModeEnumerationInheritedProperties
    ).schema()
    create_eventattendancemodeenumeration_model(
        EventAttendanceModeEnumerationProperties
    ).schema()


def WearableSizeSystemJP_test():
    from schorg.WearableSizeSystemJP import WearableSizeSystemJPInheritedProperties
    from schorg.WearableSizeSystemJP import WearableSizeSystemJPProperties
    from schorg.WearableSizeSystemJP import WearableSizeSystemJPAllProperties
    from schorg.WearableSizeSystemJP import create_schema_org_model
    from schorg.WearableSizeSystemJP import create_wearablesizesystemjp_model
    from schorg.WearableSizeSystemJP import WearableSizeSystemJP

    a = create_schema_org_model(type_=WearableSizeSystemJPInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemJPProperties)
    c = create_schema_org_model(type_=WearableSizeSystemJPAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemJP.schema()
    create_wearablesizesystemjp_model(WearableSizeSystemJPAllProperties).schema()
    create_wearablesizesystemjp_model(WearableSizeSystemJPInheritedProperties).schema()
    create_wearablesizesystemjp_model(WearableSizeSystemJPProperties).schema()


def StatusEnumeration_test():
    from schorg.StatusEnumeration import StatusEnumerationInheritedProperties
    from schorg.StatusEnumeration import StatusEnumerationProperties
    from schorg.StatusEnumeration import StatusEnumerationAllProperties
    from schorg.StatusEnumeration import create_schema_org_model
    from schorg.StatusEnumeration import create_statusenumeration_model
    from schorg.StatusEnumeration import StatusEnumeration

    a = create_schema_org_model(type_=StatusEnumerationInheritedProperties)
    b = create_schema_org_model(type_=StatusEnumerationProperties)
    c = create_schema_org_model(type_=StatusEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StatusEnumeration.schema()
    create_statusenumeration_model(StatusEnumerationAllProperties).schema()
    create_statusenumeration_model(StatusEnumerationInheritedProperties).schema()
    create_statusenumeration_model(StatusEnumerationProperties).schema()


def OrderStatus_test():
    from schorg.OrderStatus import OrderStatusInheritedProperties
    from schorg.OrderStatus import OrderStatusProperties
    from schorg.OrderStatus import OrderStatusAllProperties
    from schorg.OrderStatus import create_schema_org_model
    from schorg.OrderStatus import create_orderstatus_model
    from schorg.OrderStatus import OrderStatus

    a = create_schema_org_model(type_=OrderStatusInheritedProperties)
    b = create_schema_org_model(type_=OrderStatusProperties)
    c = create_schema_org_model(type_=OrderStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderStatus.schema()
    create_orderstatus_model(OrderStatusAllProperties).schema()
    create_orderstatus_model(OrderStatusInheritedProperties).schema()
    create_orderstatus_model(OrderStatusProperties).schema()


def OrderCancelled_test():
    from schorg.OrderCancelled import OrderCancelledInheritedProperties
    from schorg.OrderCancelled import OrderCancelledProperties
    from schorg.OrderCancelled import OrderCancelledAllProperties
    from schorg.OrderCancelled import create_schema_org_model
    from schorg.OrderCancelled import create_ordercancelled_model
    from schorg.OrderCancelled import OrderCancelled

    a = create_schema_org_model(type_=OrderCancelledInheritedProperties)
    b = create_schema_org_model(type_=OrderCancelledProperties)
    c = create_schema_org_model(type_=OrderCancelledAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderCancelled.schema()
    create_ordercancelled_model(OrderCancelledAllProperties).schema()
    create_ordercancelled_model(OrderCancelledInheritedProperties).schema()
    create_ordercancelled_model(OrderCancelledProperties).schema()


def PhysicalActivityCategory_test():
    from schorg.PhysicalActivityCategory import (
        PhysicalActivityCategoryInheritedProperties,
    )
    from schorg.PhysicalActivityCategory import PhysicalActivityCategoryProperties
    from schorg.PhysicalActivityCategory import PhysicalActivityCategoryAllProperties
    from schorg.PhysicalActivityCategory import create_schema_org_model
    from schorg.PhysicalActivityCategory import create_physicalactivitycategory_model
    from schorg.PhysicalActivityCategory import PhysicalActivityCategory

    a = create_schema_org_model(type_=PhysicalActivityCategoryInheritedProperties)
    b = create_schema_org_model(type_=PhysicalActivityCategoryProperties)
    c = create_schema_org_model(type_=PhysicalActivityCategoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PhysicalActivityCategory.schema()
    create_physicalactivitycategory_model(
        PhysicalActivityCategoryAllProperties
    ).schema()
    create_physicalactivitycategory_model(
        PhysicalActivityCategoryInheritedProperties
    ).schema()
    create_physicalactivitycategory_model(PhysicalActivityCategoryProperties).schema()


def StrengthTraining_test():
    from schorg.StrengthTraining import StrengthTrainingInheritedProperties
    from schorg.StrengthTraining import StrengthTrainingProperties
    from schorg.StrengthTraining import StrengthTrainingAllProperties
    from schorg.StrengthTraining import create_schema_org_model
    from schorg.StrengthTraining import create_strengthtraining_model
    from schorg.StrengthTraining import StrengthTraining

    a = create_schema_org_model(type_=StrengthTrainingInheritedProperties)
    b = create_schema_org_model(type_=StrengthTrainingProperties)
    c = create_schema_org_model(type_=StrengthTrainingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StrengthTraining.schema()
    create_strengthtraining_model(StrengthTrainingAllProperties).schema()
    create_strengthtraining_model(StrengthTrainingInheritedProperties).schema()
    create_strengthtraining_model(StrengthTrainingProperties).schema()


def FoodEstablishmentReservation_test():
    from schorg.FoodEstablishmentReservation import (
        FoodEstablishmentReservationInheritedProperties,
    )
    from schorg.FoodEstablishmentReservation import (
        FoodEstablishmentReservationProperties,
    )
    from schorg.FoodEstablishmentReservation import (
        FoodEstablishmentReservationAllProperties,
    )
    from schorg.FoodEstablishmentReservation import create_schema_org_model
    from schorg.FoodEstablishmentReservation import (
        create_foodestablishmentreservation_model,
    )
    from schorg.FoodEstablishmentReservation import FoodEstablishmentReservation

    a = create_schema_org_model(type_=FoodEstablishmentReservationInheritedProperties)
    b = create_schema_org_model(type_=FoodEstablishmentReservationProperties)
    c = create_schema_org_model(type_=FoodEstablishmentReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FoodEstablishmentReservation.schema()
    create_foodestablishmentreservation_model(
        FoodEstablishmentReservationAllProperties
    ).schema()
    create_foodestablishmentreservation_model(
        FoodEstablishmentReservationInheritedProperties
    ).schema()
    create_foodestablishmentreservation_model(
        FoodEstablishmentReservationProperties
    ).schema()


def VisualArtwork_test():
    from schorg.VisualArtwork import VisualArtworkInheritedProperties
    from schorg.VisualArtwork import VisualArtworkProperties
    from schorg.VisualArtwork import VisualArtworkAllProperties
    from schorg.VisualArtwork import create_schema_org_model
    from schorg.VisualArtwork import create_visualartwork_model
    from schorg.VisualArtwork import VisualArtwork

    a = create_schema_org_model(type_=VisualArtworkInheritedProperties)
    b = create_schema_org_model(type_=VisualArtworkProperties)
    c = create_schema_org_model(type_=VisualArtworkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VisualArtwork.schema()
    create_visualartwork_model(VisualArtworkAllProperties).schema()
    create_visualartwork_model(VisualArtworkInheritedProperties).schema()
    create_visualartwork_model(VisualArtworkProperties).schema()


def CoverArt_test():
    from schorg.CoverArt import CoverArtInheritedProperties
    from schorg.CoverArt import CoverArtProperties
    from schorg.CoverArt import CoverArtAllProperties
    from schorg.CoverArt import create_schema_org_model
    from schorg.CoverArt import create_coverart_model
    from schorg.CoverArt import CoverArt

    a = create_schema_org_model(type_=CoverArtInheritedProperties)
    b = create_schema_org_model(type_=CoverArtProperties)
    c = create_schema_org_model(type_=CoverArtAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CoverArt.schema()
    create_coverart_model(CoverArtAllProperties).schema()
    create_coverart_model(CoverArtInheritedProperties).schema()
    create_coverart_model(CoverArtProperties).schema()


def MedicineSystem_test():
    from schorg.MedicineSystem import MedicineSystemInheritedProperties
    from schorg.MedicineSystem import MedicineSystemProperties
    from schorg.MedicineSystem import MedicineSystemAllProperties
    from schorg.MedicineSystem import create_schema_org_model
    from schorg.MedicineSystem import create_medicinesystem_model
    from schorg.MedicineSystem import MedicineSystem

    a = create_schema_org_model(type_=MedicineSystemInheritedProperties)
    b = create_schema_org_model(type_=MedicineSystemProperties)
    c = create_schema_org_model(type_=MedicineSystemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicineSystem.schema()
    create_medicinesystem_model(MedicineSystemAllProperties).schema()
    create_medicinesystem_model(MedicineSystemInheritedProperties).schema()
    create_medicinesystem_model(MedicineSystemProperties).schema()


def Osteopathic_test():
    from schorg.Osteopathic import OsteopathicInheritedProperties
    from schorg.Osteopathic import OsteopathicProperties
    from schorg.Osteopathic import OsteopathicAllProperties
    from schorg.Osteopathic import create_schema_org_model
    from schorg.Osteopathic import create_osteopathic_model
    from schorg.Osteopathic import Osteopathic

    a = create_schema_org_model(type_=OsteopathicInheritedProperties)
    b = create_schema_org_model(type_=OsteopathicProperties)
    c = create_schema_org_model(type_=OsteopathicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Osteopathic.schema()
    create_osteopathic_model(OsteopathicAllProperties).schema()
    create_osteopathic_model(OsteopathicInheritedProperties).schema()
    create_osteopathic_model(OsteopathicProperties).schema()


def MusicReleaseFormatType_test():
    from schorg.MusicReleaseFormatType import MusicReleaseFormatTypeInheritedProperties
    from schorg.MusicReleaseFormatType import MusicReleaseFormatTypeProperties
    from schorg.MusicReleaseFormatType import MusicReleaseFormatTypeAllProperties
    from schorg.MusicReleaseFormatType import create_schema_org_model
    from schorg.MusicReleaseFormatType import create_musicreleaseformattype_model
    from schorg.MusicReleaseFormatType import MusicReleaseFormatType

    a = create_schema_org_model(type_=MusicReleaseFormatTypeInheritedProperties)
    b = create_schema_org_model(type_=MusicReleaseFormatTypeProperties)
    c = create_schema_org_model(type_=MusicReleaseFormatTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicReleaseFormatType.schema()
    create_musicreleaseformattype_model(MusicReleaseFormatTypeAllProperties).schema()
    create_musicreleaseformattype_model(
        MusicReleaseFormatTypeInheritedProperties
    ).schema()
    create_musicreleaseformattype_model(MusicReleaseFormatTypeProperties).schema()


def DigitalAudioTapeFormat_test():
    from schorg.DigitalAudioTapeFormat import DigitalAudioTapeFormatInheritedProperties
    from schorg.DigitalAudioTapeFormat import DigitalAudioTapeFormatProperties
    from schorg.DigitalAudioTapeFormat import DigitalAudioTapeFormatAllProperties
    from schorg.DigitalAudioTapeFormat import create_schema_org_model
    from schorg.DigitalAudioTapeFormat import create_digitalaudiotapeformat_model
    from schorg.DigitalAudioTapeFormat import DigitalAudioTapeFormat

    a = create_schema_org_model(type_=DigitalAudioTapeFormatInheritedProperties)
    b = create_schema_org_model(type_=DigitalAudioTapeFormatProperties)
    c = create_schema_org_model(type_=DigitalAudioTapeFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalAudioTapeFormat.schema()
    create_digitalaudiotapeformat_model(DigitalAudioTapeFormatAllProperties).schema()
    create_digitalaudiotapeformat_model(
        DigitalAudioTapeFormatInheritedProperties
    ).schema()
    create_digitalaudiotapeformat_model(DigitalAudioTapeFormatProperties).schema()


def HealthInsurancePlan_test():
    from schorg.HealthInsurancePlan import HealthInsurancePlanInheritedProperties
    from schorg.HealthInsurancePlan import HealthInsurancePlanProperties
    from schorg.HealthInsurancePlan import HealthInsurancePlanAllProperties
    from schorg.HealthInsurancePlan import create_schema_org_model
    from schorg.HealthInsurancePlan import create_healthinsuranceplan_model
    from schorg.HealthInsurancePlan import HealthInsurancePlan

    a = create_schema_org_model(type_=HealthInsurancePlanInheritedProperties)
    b = create_schema_org_model(type_=HealthInsurancePlanProperties)
    c = create_schema_org_model(type_=HealthInsurancePlanAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthInsurancePlan.schema()
    create_healthinsuranceplan_model(HealthInsurancePlanAllProperties).schema()
    create_healthinsuranceplan_model(HealthInsurancePlanInheritedProperties).schema()
    create_healthinsuranceplan_model(HealthInsurancePlanProperties).schema()


def SportsOrganization_test():
    from schorg.SportsOrganization import SportsOrganizationInheritedProperties
    from schorg.SportsOrganization import SportsOrganizationProperties
    from schorg.SportsOrganization import SportsOrganizationAllProperties
    from schorg.SportsOrganization import create_schema_org_model
    from schorg.SportsOrganization import create_sportsorganization_model
    from schorg.SportsOrganization import SportsOrganization

    a = create_schema_org_model(type_=SportsOrganizationInheritedProperties)
    b = create_schema_org_model(type_=SportsOrganizationProperties)
    c = create_schema_org_model(type_=SportsOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportsOrganization.schema()
    create_sportsorganization_model(SportsOrganizationAllProperties).schema()
    create_sportsorganization_model(SportsOrganizationInheritedProperties).schema()
    create_sportsorganization_model(SportsOrganizationProperties).schema()


def AutomotiveBusiness_test():
    from schorg.AutomotiveBusiness import AutomotiveBusinessInheritedProperties
    from schorg.AutomotiveBusiness import AutomotiveBusinessProperties
    from schorg.AutomotiveBusiness import AutomotiveBusinessAllProperties
    from schorg.AutomotiveBusiness import create_schema_org_model
    from schorg.AutomotiveBusiness import create_automotivebusiness_model
    from schorg.AutomotiveBusiness import AutomotiveBusiness

    a = create_schema_org_model(type_=AutomotiveBusinessInheritedProperties)
    b = create_schema_org_model(type_=AutomotiveBusinessProperties)
    c = create_schema_org_model(type_=AutomotiveBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutomotiveBusiness.schema()
    create_automotivebusiness_model(AutomotiveBusinessAllProperties).schema()
    create_automotivebusiness_model(AutomotiveBusinessInheritedProperties).schema()
    create_automotivebusiness_model(AutomotiveBusinessProperties).schema()


def AutoRepair_test():
    from schorg.AutoRepair import AutoRepairInheritedProperties
    from schorg.AutoRepair import AutoRepairProperties
    from schorg.AutoRepair import AutoRepairAllProperties
    from schorg.AutoRepair import create_schema_org_model
    from schorg.AutoRepair import create_autorepair_model
    from schorg.AutoRepair import AutoRepair

    a = create_schema_org_model(type_=AutoRepairInheritedProperties)
    b = create_schema_org_model(type_=AutoRepairProperties)
    c = create_schema_org_model(type_=AutoRepairAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoRepair.schema()
    create_autorepair_model(AutoRepairAllProperties).schema()
    create_autorepair_model(AutoRepairInheritedProperties).schema()
    create_autorepair_model(AutoRepairProperties).schema()


def OnlineBusiness_test():
    from schorg.OnlineBusiness import OnlineBusinessInheritedProperties
    from schorg.OnlineBusiness import OnlineBusinessProperties
    from schorg.OnlineBusiness import OnlineBusinessAllProperties
    from schorg.OnlineBusiness import create_schema_org_model
    from schorg.OnlineBusiness import create_onlinebusiness_model
    from schorg.OnlineBusiness import OnlineBusiness

    a = create_schema_org_model(type_=OnlineBusinessInheritedProperties)
    b = create_schema_org_model(type_=OnlineBusinessProperties)
    c = create_schema_org_model(type_=OnlineBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnlineBusiness.schema()
    create_onlinebusiness_model(OnlineBusinessAllProperties).schema()
    create_onlinebusiness_model(OnlineBusinessInheritedProperties).schema()
    create_onlinebusiness_model(OnlineBusinessProperties).schema()


def MedicalStudyStatus_test():
    from schorg.MedicalStudyStatus import MedicalStudyStatusInheritedProperties
    from schorg.MedicalStudyStatus import MedicalStudyStatusProperties
    from schorg.MedicalStudyStatus import MedicalStudyStatusAllProperties
    from schorg.MedicalStudyStatus import create_schema_org_model
    from schorg.MedicalStudyStatus import create_medicalstudystatus_model
    from schorg.MedicalStudyStatus import MedicalStudyStatus

    a = create_schema_org_model(type_=MedicalStudyStatusInheritedProperties)
    b = create_schema_org_model(type_=MedicalStudyStatusProperties)
    c = create_schema_org_model(type_=MedicalStudyStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalStudyStatus.schema()
    create_medicalstudystatus_model(MedicalStudyStatusAllProperties).schema()
    create_medicalstudystatus_model(MedicalStudyStatusInheritedProperties).schema()
    create_medicalstudystatus_model(MedicalStudyStatusProperties).schema()


def ResultsAvailable_test():
    from schorg.ResultsAvailable import ResultsAvailableInheritedProperties
    from schorg.ResultsAvailable import ResultsAvailableProperties
    from schorg.ResultsAvailable import ResultsAvailableAllProperties
    from schorg.ResultsAvailable import create_schema_org_model
    from schorg.ResultsAvailable import create_resultsavailable_model
    from schorg.ResultsAvailable import ResultsAvailable

    a = create_schema_org_model(type_=ResultsAvailableInheritedProperties)
    b = create_schema_org_model(type_=ResultsAvailableProperties)
    c = create_schema_org_model(type_=ResultsAvailableAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ResultsAvailable.schema()
    create_resultsavailable_model(ResultsAvailableAllProperties).schema()
    create_resultsavailable_model(ResultsAvailableInheritedProperties).schema()
    create_resultsavailable_model(ResultsAvailableProperties).schema()


def Suite_test():
    from schorg.Suite import SuiteInheritedProperties
    from schorg.Suite import SuiteProperties
    from schorg.Suite import SuiteAllProperties
    from schorg.Suite import create_schema_org_model
    from schorg.Suite import create_suite_model
    from schorg.Suite import Suite

    a = create_schema_org_model(type_=SuiteInheritedProperties)
    b = create_schema_org_model(type_=SuiteProperties)
    c = create_schema_org_model(type_=SuiteAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Suite.schema()
    create_suite_model(SuiteAllProperties).schema()
    create_suite_model(SuiteInheritedProperties).schema()
    create_suite_model(SuiteProperties).schema()


def EUEnergyEfficiencyCategoryG_test():
    from schorg.EUEnergyEfficiencyCategoryG import (
        EUEnergyEfficiencyCategoryGInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryG import EUEnergyEfficiencyCategoryGProperties
    from schorg.EUEnergyEfficiencyCategoryG import (
        EUEnergyEfficiencyCategoryGAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryG import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryG import (
        create_euenergyefficiencycategoryg_model,
    )
    from schorg.EUEnergyEfficiencyCategoryG import EUEnergyEfficiencyCategoryG

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryGInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryGProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryGAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryG.schema()
    create_euenergyefficiencycategoryg_model(
        EUEnergyEfficiencyCategoryGAllProperties
    ).schema()
    create_euenergyefficiencycategoryg_model(
        EUEnergyEfficiencyCategoryGInheritedProperties
    ).schema()
    create_euenergyefficiencycategoryg_model(
        EUEnergyEfficiencyCategoryGProperties
    ).schema()


def DeliveryMethod_test():
    from schorg.DeliveryMethod import DeliveryMethodInheritedProperties
    from schorg.DeliveryMethod import DeliveryMethodProperties
    from schorg.DeliveryMethod import DeliveryMethodAllProperties
    from schorg.DeliveryMethod import create_schema_org_model
    from schorg.DeliveryMethod import create_deliverymethod_model
    from schorg.DeliveryMethod import DeliveryMethod

    a = create_schema_org_model(type_=DeliveryMethodInheritedProperties)
    b = create_schema_org_model(type_=DeliveryMethodProperties)
    c = create_schema_org_model(type_=DeliveryMethodAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeliveryMethod.schema()
    create_deliverymethod_model(DeliveryMethodAllProperties).schema()
    create_deliverymethod_model(DeliveryMethodInheritedProperties).schema()
    create_deliverymethod_model(DeliveryMethodProperties).schema()


def ParcelService_test():
    from schorg.ParcelService import ParcelServiceInheritedProperties
    from schorg.ParcelService import ParcelServiceProperties
    from schorg.ParcelService import ParcelServiceAllProperties
    from schorg.ParcelService import create_schema_org_model
    from schorg.ParcelService import create_parcelservice_model
    from schorg.ParcelService import ParcelService

    a = create_schema_org_model(type_=ParcelServiceInheritedProperties)
    b = create_schema_org_model(type_=ParcelServiceProperties)
    c = create_schema_org_model(type_=ParcelServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParcelService.schema()
    create_parcelservice_model(ParcelServiceAllProperties).schema()
    create_parcelservice_model(ParcelServiceInheritedProperties).schema()
    create_parcelservice_model(ParcelServiceProperties).schema()


def TradeAction_test():
    from schorg.TradeAction import TradeActionInheritedProperties
    from schorg.TradeAction import TradeActionProperties
    from schorg.TradeAction import TradeActionAllProperties
    from schorg.TradeAction import create_schema_org_model
    from schorg.TradeAction import create_tradeaction_model
    from schorg.TradeAction import TradeAction

    a = create_schema_org_model(type_=TradeActionInheritedProperties)
    b = create_schema_org_model(type_=TradeActionProperties)
    c = create_schema_org_model(type_=TradeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TradeAction.schema()
    create_tradeaction_model(TradeActionAllProperties).schema()
    create_tradeaction_model(TradeActionInheritedProperties).schema()
    create_tradeaction_model(TradeActionProperties).schema()


def TipAction_test():
    from schorg.TipAction import TipActionInheritedProperties
    from schorg.TipAction import TipActionProperties
    from schorg.TipAction import TipActionAllProperties
    from schorg.TipAction import create_schema_org_model
    from schorg.TipAction import create_tipaction_model
    from schorg.TipAction import TipAction

    a = create_schema_org_model(type_=TipActionInheritedProperties)
    b = create_schema_org_model(type_=TipActionProperties)
    c = create_schema_org_model(type_=TipActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TipAction.schema()
    create_tipaction_model(TipActionAllProperties).schema()
    create_tipaction_model(TipActionInheritedProperties).schema()
    create_tipaction_model(TipActionProperties).schema()


def LearningResource_test():
    from schorg.LearningResource import LearningResourceInheritedProperties
    from schorg.LearningResource import LearningResourceProperties
    from schorg.LearningResource import LearningResourceAllProperties
    from schorg.LearningResource import create_schema_org_model
    from schorg.LearningResource import create_learningresource_model
    from schorg.LearningResource import LearningResource

    a = create_schema_org_model(type_=LearningResourceInheritedProperties)
    b = create_schema_org_model(type_=LearningResourceProperties)
    c = create_schema_org_model(type_=LearningResourceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LearningResource.schema()
    create_learningresource_model(LearningResourceAllProperties).schema()
    create_learningresource_model(LearningResourceInheritedProperties).schema()
    create_learningresource_model(LearningResourceProperties).schema()


def MedicalAudienceType_test():
    from schorg.MedicalAudienceType import MedicalAudienceTypeInheritedProperties
    from schorg.MedicalAudienceType import MedicalAudienceTypeProperties
    from schorg.MedicalAudienceType import MedicalAudienceTypeAllProperties
    from schorg.MedicalAudienceType import create_schema_org_model
    from schorg.MedicalAudienceType import create_medicalaudiencetype_model
    from schorg.MedicalAudienceType import MedicalAudienceType

    a = create_schema_org_model(type_=MedicalAudienceTypeInheritedProperties)
    b = create_schema_org_model(type_=MedicalAudienceTypeProperties)
    c = create_schema_org_model(type_=MedicalAudienceTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalAudienceType.schema()
    create_medicalaudiencetype_model(MedicalAudienceTypeAllProperties).schema()
    create_medicalaudiencetype_model(MedicalAudienceTypeInheritedProperties).schema()
    create_medicalaudiencetype_model(MedicalAudienceTypeProperties).schema()


def LodgingBusiness_test():
    from schorg.LodgingBusiness import LodgingBusinessInheritedProperties
    from schorg.LodgingBusiness import LodgingBusinessProperties
    from schorg.LodgingBusiness import LodgingBusinessAllProperties
    from schorg.LodgingBusiness import create_schema_org_model
    from schorg.LodgingBusiness import create_lodgingbusiness_model
    from schorg.LodgingBusiness import LodgingBusiness

    a = create_schema_org_model(type_=LodgingBusinessInheritedProperties)
    b = create_schema_org_model(type_=LodgingBusinessProperties)
    c = create_schema_org_model(type_=LodgingBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LodgingBusiness.schema()
    create_lodgingbusiness_model(LodgingBusinessAllProperties).schema()
    create_lodgingbusiness_model(LodgingBusinessInheritedProperties).schema()
    create_lodgingbusiness_model(LodgingBusinessProperties).schema()


def BedAndBreakfast_test():
    from schorg.BedAndBreakfast import BedAndBreakfastInheritedProperties
    from schorg.BedAndBreakfast import BedAndBreakfastProperties
    from schorg.BedAndBreakfast import BedAndBreakfastAllProperties
    from schorg.BedAndBreakfast import create_schema_org_model
    from schorg.BedAndBreakfast import create_bedandbreakfast_model
    from schorg.BedAndBreakfast import BedAndBreakfast

    a = create_schema_org_model(type_=BedAndBreakfastInheritedProperties)
    b = create_schema_org_model(type_=BedAndBreakfastProperties)
    c = create_schema_org_model(type_=BedAndBreakfastAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BedAndBreakfast.schema()
    create_bedandbreakfast_model(BedAndBreakfastAllProperties).schema()
    create_bedandbreakfast_model(BedAndBreakfastInheritedProperties).schema()
    create_bedandbreakfast_model(BedAndBreakfastProperties).schema()


def EngineSpecification_test():
    from schorg.EngineSpecification import EngineSpecificationInheritedProperties
    from schorg.EngineSpecification import EngineSpecificationProperties
    from schorg.EngineSpecification import EngineSpecificationAllProperties
    from schorg.EngineSpecification import create_schema_org_model
    from schorg.EngineSpecification import create_enginespecification_model
    from schorg.EngineSpecification import EngineSpecification

    a = create_schema_org_model(type_=EngineSpecificationInheritedProperties)
    b = create_schema_org_model(type_=EngineSpecificationProperties)
    c = create_schema_org_model(type_=EngineSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EngineSpecification.schema()
    create_enginespecification_model(EngineSpecificationAllProperties).schema()
    create_enginespecification_model(EngineSpecificationInheritedProperties).schema()
    create_enginespecification_model(EngineSpecificationProperties).schema()


def Bridge_test():
    from schorg.Bridge import BridgeInheritedProperties
    from schorg.Bridge import BridgeProperties
    from schorg.Bridge import BridgeAllProperties
    from schorg.Bridge import create_schema_org_model
    from schorg.Bridge import create_bridge_model
    from schorg.Bridge import Bridge

    a = create_schema_org_model(type_=BridgeInheritedProperties)
    b = create_schema_org_model(type_=BridgeProperties)
    c = create_schema_org_model(type_=BridgeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Bridge.schema()
    create_bridge_model(BridgeAllProperties).schema()
    create_bridge_model(BridgeInheritedProperties).schema()
    create_bridge_model(BridgeProperties).schema()


def OnlineStore_test():
    from schorg.OnlineStore import OnlineStoreInheritedProperties
    from schorg.OnlineStore import OnlineStoreProperties
    from schorg.OnlineStore import OnlineStoreAllProperties
    from schorg.OnlineStore import create_schema_org_model
    from schorg.OnlineStore import create_onlinestore_model
    from schorg.OnlineStore import OnlineStore

    a = create_schema_org_model(type_=OnlineStoreInheritedProperties)
    b = create_schema_org_model(type_=OnlineStoreProperties)
    c = create_schema_org_model(type_=OnlineStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnlineStore.schema()
    create_onlinestore_model(OnlineStoreAllProperties).schema()
    create_onlinestore_model(OnlineStoreInheritedProperties).schema()
    create_onlinestore_model(OnlineStoreProperties).schema()


def ReservationStatusType_test():
    from schorg.ReservationStatusType import ReservationStatusTypeInheritedProperties
    from schorg.ReservationStatusType import ReservationStatusTypeProperties
    from schorg.ReservationStatusType import ReservationStatusTypeAllProperties
    from schorg.ReservationStatusType import create_schema_org_model
    from schorg.ReservationStatusType import create_reservationstatustype_model
    from schorg.ReservationStatusType import ReservationStatusType

    a = create_schema_org_model(type_=ReservationStatusTypeInheritedProperties)
    b = create_schema_org_model(type_=ReservationStatusTypeProperties)
    c = create_schema_org_model(type_=ReservationStatusTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationStatusType.schema()
    create_reservationstatustype_model(ReservationStatusTypeAllProperties).schema()
    create_reservationstatustype_model(
        ReservationStatusTypeInheritedProperties
    ).schema()
    create_reservationstatustype_model(ReservationStatusTypeProperties).schema()


def ReservationCancelled_test():
    from schorg.ReservationCancelled import ReservationCancelledInheritedProperties
    from schorg.ReservationCancelled import ReservationCancelledProperties
    from schorg.ReservationCancelled import ReservationCancelledAllProperties
    from schorg.ReservationCancelled import create_schema_org_model
    from schorg.ReservationCancelled import create_reservationcancelled_model
    from schorg.ReservationCancelled import ReservationCancelled

    a = create_schema_org_model(type_=ReservationCancelledInheritedProperties)
    b = create_schema_org_model(type_=ReservationCancelledProperties)
    c = create_schema_org_model(type_=ReservationCancelledAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationCancelled.schema()
    create_reservationcancelled_model(ReservationCancelledAllProperties).schema()
    create_reservationcancelled_model(ReservationCancelledInheritedProperties).schema()
    create_reservationcancelled_model(ReservationCancelledProperties).schema()


def Thesis_test():
    from schorg.Thesis import ThesisInheritedProperties
    from schorg.Thesis import ThesisProperties
    from schorg.Thesis import ThesisAllProperties
    from schorg.Thesis import create_schema_org_model
    from schorg.Thesis import create_thesis_model
    from schorg.Thesis import Thesis

    a = create_schema_org_model(type_=ThesisInheritedProperties)
    b = create_schema_org_model(type_=ThesisProperties)
    c = create_schema_org_model(type_=ThesisAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Thesis.schema()
    create_thesis_model(ThesisAllProperties).schema()
    create_thesis_model(ThesisInheritedProperties).schema()
    create_thesis_model(ThesisProperties).schema()


def BusinessAudience_test():
    from schorg.BusinessAudience import BusinessAudienceInheritedProperties
    from schorg.BusinessAudience import BusinessAudienceProperties
    from schorg.BusinessAudience import BusinessAudienceAllProperties
    from schorg.BusinessAudience import create_schema_org_model
    from schorg.BusinessAudience import create_businessaudience_model
    from schorg.BusinessAudience import BusinessAudience

    a = create_schema_org_model(type_=BusinessAudienceInheritedProperties)
    b = create_schema_org_model(type_=BusinessAudienceProperties)
    c = create_schema_org_model(type_=BusinessAudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusinessAudience.schema()
    create_businessaudience_model(BusinessAudienceAllProperties).schema()
    create_businessaudience_model(BusinessAudienceInheritedProperties).schema()
    create_businessaudience_model(BusinessAudienceProperties).schema()


def Service_test():
    from schorg.Service import ServiceInheritedProperties
    from schorg.Service import ServiceProperties
    from schorg.Service import ServiceAllProperties
    from schorg.Service import create_schema_org_model
    from schorg.Service import create_service_model
    from schorg.Service import Service

    a = create_schema_org_model(type_=ServiceInheritedProperties)
    b = create_schema_org_model(type_=ServiceProperties)
    c = create_schema_org_model(type_=ServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Service.schema()
    create_service_model(ServiceAllProperties).schema()
    create_service_model(ServiceInheritedProperties).schema()
    create_service_model(ServiceProperties).schema()


def FinancialProduct_test():
    from schorg.FinancialProduct import FinancialProductInheritedProperties
    from schorg.FinancialProduct import FinancialProductProperties
    from schorg.FinancialProduct import FinancialProductAllProperties
    from schorg.FinancialProduct import create_schema_org_model
    from schorg.FinancialProduct import create_financialproduct_model
    from schorg.FinancialProduct import FinancialProduct

    a = create_schema_org_model(type_=FinancialProductInheritedProperties)
    b = create_schema_org_model(type_=FinancialProductProperties)
    c = create_schema_org_model(type_=FinancialProductAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FinancialProduct.schema()
    create_financialproduct_model(FinancialProductAllProperties).schema()
    create_financialproduct_model(FinancialProductInheritedProperties).schema()
    create_financialproduct_model(FinancialProductProperties).schema()


def InvestmentOrDeposit_test():
    from schorg.InvestmentOrDeposit import InvestmentOrDepositInheritedProperties
    from schorg.InvestmentOrDeposit import InvestmentOrDepositProperties
    from schorg.InvestmentOrDeposit import InvestmentOrDepositAllProperties
    from schorg.InvestmentOrDeposit import create_schema_org_model
    from schorg.InvestmentOrDeposit import create_investmentordeposit_model
    from schorg.InvestmentOrDeposit import InvestmentOrDeposit

    a = create_schema_org_model(type_=InvestmentOrDepositInheritedProperties)
    b = create_schema_org_model(type_=InvestmentOrDepositProperties)
    c = create_schema_org_model(type_=InvestmentOrDepositAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InvestmentOrDeposit.schema()
    create_investmentordeposit_model(InvestmentOrDepositAllProperties).schema()
    create_investmentordeposit_model(InvestmentOrDepositInheritedProperties).schema()
    create_investmentordeposit_model(InvestmentOrDepositProperties).schema()


def BrokerageAccount_test():
    from schorg.BrokerageAccount import BrokerageAccountInheritedProperties
    from schorg.BrokerageAccount import BrokerageAccountProperties
    from schorg.BrokerageAccount import BrokerageAccountAllProperties
    from schorg.BrokerageAccount import create_schema_org_model
    from schorg.BrokerageAccount import create_brokerageaccount_model
    from schorg.BrokerageAccount import BrokerageAccount

    a = create_schema_org_model(type_=BrokerageAccountInheritedProperties)
    b = create_schema_org_model(type_=BrokerageAccountProperties)
    c = create_schema_org_model(type_=BrokerageAccountAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BrokerageAccount.schema()
    create_brokerageaccount_model(BrokerageAccountAllProperties).schema()
    create_brokerageaccount_model(BrokerageAccountInheritedProperties).schema()
    create_brokerageaccount_model(BrokerageAccountProperties).schema()


def FinancialService_test():
    from schorg.FinancialService import FinancialServiceInheritedProperties
    from schorg.FinancialService import FinancialServiceProperties
    from schorg.FinancialService import FinancialServiceAllProperties
    from schorg.FinancialService import create_schema_org_model
    from schorg.FinancialService import create_financialservice_model
    from schorg.FinancialService import FinancialService

    a = create_schema_org_model(type_=FinancialServiceInheritedProperties)
    b = create_schema_org_model(type_=FinancialServiceProperties)
    c = create_schema_org_model(type_=FinancialServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FinancialService.schema()
    create_financialservice_model(FinancialServiceAllProperties).schema()
    create_financialservice_model(FinancialServiceInheritedProperties).schema()
    create_financialservice_model(FinancialServiceProperties).schema()


def AutomatedTeller_test():
    from schorg.AutomatedTeller import AutomatedTellerInheritedProperties
    from schorg.AutomatedTeller import AutomatedTellerProperties
    from schorg.AutomatedTeller import AutomatedTellerAllProperties
    from schorg.AutomatedTeller import create_schema_org_model
    from schorg.AutomatedTeller import create_automatedteller_model
    from schorg.AutomatedTeller import AutomatedTeller

    a = create_schema_org_model(type_=AutomatedTellerInheritedProperties)
    b = create_schema_org_model(type_=AutomatedTellerProperties)
    c = create_schema_org_model(type_=AutomatedTellerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutomatedTeller.schema()
    create_automatedteller_model(AutomatedTellerAllProperties).schema()
    create_automatedteller_model(AutomatedTellerInheritedProperties).schema()
    create_automatedteller_model(AutomatedTellerProperties).schema()


def DayOfWeek_test():
    from schorg.DayOfWeek import DayOfWeekInheritedProperties
    from schorg.DayOfWeek import DayOfWeekProperties
    from schorg.DayOfWeek import DayOfWeekAllProperties
    from schorg.DayOfWeek import create_schema_org_model
    from schorg.DayOfWeek import create_dayofweek_model
    from schorg.DayOfWeek import DayOfWeek

    a = create_schema_org_model(type_=DayOfWeekInheritedProperties)
    b = create_schema_org_model(type_=DayOfWeekProperties)
    c = create_schema_org_model(type_=DayOfWeekAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DayOfWeek.schema()
    create_dayofweek_model(DayOfWeekAllProperties).schema()
    create_dayofweek_model(DayOfWeekInheritedProperties).schema()
    create_dayofweek_model(DayOfWeekProperties).schema()


def Thursday_test():
    from schorg.Thursday import ThursdayInheritedProperties
    from schorg.Thursday import ThursdayProperties
    from schorg.Thursday import ThursdayAllProperties
    from schorg.Thursday import create_schema_org_model
    from schorg.Thursday import create_thursday_model
    from schorg.Thursday import Thursday

    a = create_schema_org_model(type_=ThursdayInheritedProperties)
    b = create_schema_org_model(type_=ThursdayProperties)
    c = create_schema_org_model(type_=ThursdayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Thursday.schema()
    create_thursday_model(ThursdayAllProperties).schema()
    create_thursday_model(ThursdayInheritedProperties).schema()
    create_thursday_model(ThursdayProperties).schema()


def Crematorium_test():
    from schorg.Crematorium import CrematoriumInheritedProperties
    from schorg.Crematorium import CrematoriumProperties
    from schorg.Crematorium import CrematoriumAllProperties
    from schorg.Crematorium import create_schema_org_model
    from schorg.Crematorium import create_crematorium_model
    from schorg.Crematorium import Crematorium

    a = create_schema_org_model(type_=CrematoriumInheritedProperties)
    b = create_schema_org_model(type_=CrematoriumProperties)
    c = create_schema_org_model(type_=CrematoriumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Crematorium.schema()
    create_crematorium_model(CrematoriumAllProperties).schema()
    create_crematorium_model(CrematoriumInheritedProperties).schema()
    create_crematorium_model(CrematoriumProperties).schema()


def MedicalConditionStage_test():
    from schorg.MedicalConditionStage import MedicalConditionStageInheritedProperties
    from schorg.MedicalConditionStage import MedicalConditionStageProperties
    from schorg.MedicalConditionStage import MedicalConditionStageAllProperties
    from schorg.MedicalConditionStage import create_schema_org_model
    from schorg.MedicalConditionStage import create_medicalconditionstage_model
    from schorg.MedicalConditionStage import MedicalConditionStage

    a = create_schema_org_model(type_=MedicalConditionStageInheritedProperties)
    b = create_schema_org_model(type_=MedicalConditionStageProperties)
    c = create_schema_org_model(type_=MedicalConditionStageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalConditionStage.schema()
    create_medicalconditionstage_model(MedicalConditionStageAllProperties).schema()
    create_medicalconditionstage_model(
        MedicalConditionStageInheritedProperties
    ).schema()
    create_medicalconditionstage_model(MedicalConditionStageProperties).schema()


def DietNutrition_test():
    from schorg.DietNutrition import DietNutritionInheritedProperties
    from schorg.DietNutrition import DietNutritionProperties
    from schorg.DietNutrition import DietNutritionAllProperties
    from schorg.DietNutrition import create_schema_org_model
    from schorg.DietNutrition import create_dietnutrition_model
    from schorg.DietNutrition import DietNutrition

    a = create_schema_org_model(type_=DietNutritionInheritedProperties)
    b = create_schema_org_model(type_=DietNutritionProperties)
    c = create_schema_org_model(type_=DietNutritionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DietNutrition.schema()
    create_dietnutrition_model(DietNutritionAllProperties).schema()
    create_dietnutrition_model(DietNutritionInheritedProperties).schema()
    create_dietnutrition_model(DietNutritionProperties).schema()


def Rheumatologic_test():
    from schorg.Rheumatologic import RheumatologicInheritedProperties
    from schorg.Rheumatologic import RheumatologicProperties
    from schorg.Rheumatologic import RheumatologicAllProperties
    from schorg.Rheumatologic import create_schema_org_model
    from schorg.Rheumatologic import create_rheumatologic_model
    from schorg.Rheumatologic import Rheumatologic

    a = create_schema_org_model(type_=RheumatologicInheritedProperties)
    b = create_schema_org_model(type_=RheumatologicProperties)
    c = create_schema_org_model(type_=RheumatologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Rheumatologic.schema()
    create_rheumatologic_model(RheumatologicAllProperties).schema()
    create_rheumatologic_model(RheumatologicInheritedProperties).schema()
    create_rheumatologic_model(RheumatologicProperties).schema()


def AssessAction_test():
    from schorg.AssessAction import AssessActionInheritedProperties
    from schorg.AssessAction import AssessActionProperties
    from schorg.AssessAction import AssessActionAllProperties
    from schorg.AssessAction import create_schema_org_model
    from schorg.AssessAction import create_assessaction_model
    from schorg.AssessAction import AssessAction

    a = create_schema_org_model(type_=AssessActionInheritedProperties)
    b = create_schema_org_model(type_=AssessActionProperties)
    c = create_schema_org_model(type_=AssessActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AssessAction.schema()
    create_assessaction_model(AssessActionAllProperties).schema()
    create_assessaction_model(AssessActionInheritedProperties).schema()
    create_assessaction_model(AssessActionProperties).schema()


def EmergencyService_test():
    from schorg.EmergencyService import EmergencyServiceInheritedProperties
    from schorg.EmergencyService import EmergencyServiceProperties
    from schorg.EmergencyService import EmergencyServiceAllProperties
    from schorg.EmergencyService import create_schema_org_model
    from schorg.EmergencyService import create_emergencyservice_model
    from schorg.EmergencyService import EmergencyService

    a = create_schema_org_model(type_=EmergencyServiceInheritedProperties)
    b = create_schema_org_model(type_=EmergencyServiceProperties)
    c = create_schema_org_model(type_=EmergencyServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmergencyService.schema()
    create_emergencyservice_model(EmergencyServiceAllProperties).schema()
    create_emergencyservice_model(EmergencyServiceInheritedProperties).schema()
    create_emergencyservice_model(EmergencyServiceProperties).schema()


def FireStation_test():
    from schorg.FireStation import FireStationInheritedProperties
    from schorg.FireStation import FireStationProperties
    from schorg.FireStation import FireStationAllProperties
    from schorg.FireStation import create_schema_org_model
    from schorg.FireStation import create_firestation_model
    from schorg.FireStation import FireStation

    a = create_schema_org_model(type_=FireStationInheritedProperties)
    b = create_schema_org_model(type_=FireStationProperties)
    c = create_schema_org_model(type_=FireStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FireStation.schema()
    create_firestation_model(FireStationAllProperties).schema()
    create_firestation_model(FireStationInheritedProperties).schema()
    create_firestation_model(FireStationProperties).schema()


def Class_test():
    from schorg.Class import ClassInheritedProperties
    from schorg.Class import ClassProperties
    from schorg.Class import ClassAllProperties
    from schorg.Class import create_schema_org_model
    from schorg.Class import create_class_model
    from schorg.Class import Class

    a = create_schema_org_model(type_=ClassInheritedProperties)
    b = create_schema_org_model(type_=ClassProperties)
    c = create_schema_org_model(type_=ClassAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Class.schema()
    create_class_model(ClassAllProperties).schema()
    create_class_model(ClassInheritedProperties).schema()
    create_class_model(ClassProperties).schema()


def DataType_test():
    from schorg.DataType import DataTypeInheritedProperties
    from schorg.DataType import DataTypeProperties
    from schorg.DataType import DataTypeAllProperties
    from schorg.DataType import create_schema_org_model
    from schorg.DataType import create_datatype_model
    from schorg.DataType import DataType

    a = create_schema_org_model(type_=DataTypeInheritedProperties)
    b = create_schema_org_model(type_=DataTypeProperties)
    c = create_schema_org_model(type_=DataTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DataType.schema()
    create_datatype_model(DataTypeAllProperties).schema()
    create_datatype_model(DataTypeInheritedProperties).schema()
    create_datatype_model(DataTypeProperties).schema()


def Text_test():
    from schorg.Text import TextInheritedProperties
    from schorg.Text import TextProperties
    from schorg.Text import TextAllProperties
    from schorg.Text import create_schema_org_model
    from schorg.Text import create_text_model
    from schorg.Text import Text

    a = create_schema_org_model(type_=TextInheritedProperties)
    b = create_schema_org_model(type_=TextProperties)
    c = create_schema_org_model(type_=TextAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Text.schema()
    create_text_model(TextAllProperties).schema()
    create_text_model(TextInheritedProperties).schema()
    create_text_model(TextProperties).schema()


def CssSelectorType_test():
    from schorg.CssSelectorType import CssSelectorTypeInheritedProperties
    from schorg.CssSelectorType import CssSelectorTypeProperties
    from schorg.CssSelectorType import CssSelectorTypeAllProperties
    from schorg.CssSelectorType import create_schema_org_model
    from schorg.CssSelectorType import create_cssselectortype_model
    from schorg.CssSelectorType import CssSelectorType

    a = create_schema_org_model(type_=CssSelectorTypeInheritedProperties)
    b = create_schema_org_model(type_=CssSelectorTypeProperties)
    c = create_schema_org_model(type_=CssSelectorTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CssSelectorType.schema()
    create_cssselectortype_model(CssSelectorTypeAllProperties).schema()
    create_cssselectortype_model(CssSelectorTypeInheritedProperties).schema()
    create_cssselectortype_model(CssSelectorTypeProperties).schema()


def LaserDiscFormat_test():
    from schorg.LaserDiscFormat import LaserDiscFormatInheritedProperties
    from schorg.LaserDiscFormat import LaserDiscFormatProperties
    from schorg.LaserDiscFormat import LaserDiscFormatAllProperties
    from schorg.LaserDiscFormat import create_schema_org_model
    from schorg.LaserDiscFormat import create_laserdiscformat_model
    from schorg.LaserDiscFormat import LaserDiscFormat

    a = create_schema_org_model(type_=LaserDiscFormatInheritedProperties)
    b = create_schema_org_model(type_=LaserDiscFormatProperties)
    c = create_schema_org_model(type_=LaserDiscFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LaserDiscFormat.schema()
    create_laserdiscformat_model(LaserDiscFormatAllProperties).schema()
    create_laserdiscformat_model(LaserDiscFormatInheritedProperties).schema()
    create_laserdiscformat_model(LaserDiscFormatProperties).schema()


def Ticket_test():
    from schorg.Ticket import TicketInheritedProperties
    from schorg.Ticket import TicketProperties
    from schorg.Ticket import TicketAllProperties
    from schorg.Ticket import create_schema_org_model
    from schorg.Ticket import create_ticket_model
    from schorg.Ticket import Ticket

    a = create_schema_org_model(type_=TicketInheritedProperties)
    b = create_schema_org_model(type_=TicketProperties)
    c = create_schema_org_model(type_=TicketAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Ticket.schema()
    create_ticket_model(TicketAllProperties).schema()
    create_ticket_model(TicketInheritedProperties).schema()
    create_ticket_model(TicketProperties).schema()


def OfferItemCondition_test():
    from schorg.OfferItemCondition import OfferItemConditionInheritedProperties
    from schorg.OfferItemCondition import OfferItemConditionProperties
    from schorg.OfferItemCondition import OfferItemConditionAllProperties
    from schorg.OfferItemCondition import create_schema_org_model
    from schorg.OfferItemCondition import create_offeritemcondition_model
    from schorg.OfferItemCondition import OfferItemCondition

    a = create_schema_org_model(type_=OfferItemConditionInheritedProperties)
    b = create_schema_org_model(type_=OfferItemConditionProperties)
    c = create_schema_org_model(type_=OfferItemConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfferItemCondition.schema()
    create_offeritemcondition_model(OfferItemConditionAllProperties).schema()
    create_offeritemcondition_model(OfferItemConditionInheritedProperties).schema()
    create_offeritemcondition_model(OfferItemConditionProperties).schema()


def UsedCondition_test():
    from schorg.UsedCondition import UsedConditionInheritedProperties
    from schorg.UsedCondition import UsedConditionProperties
    from schorg.UsedCondition import UsedConditionAllProperties
    from schorg.UsedCondition import create_schema_org_model
    from schorg.UsedCondition import create_usedcondition_model
    from schorg.UsedCondition import UsedCondition

    a = create_schema_org_model(type_=UsedConditionInheritedProperties)
    b = create_schema_org_model(type_=UsedConditionProperties)
    c = create_schema_org_model(type_=UsedConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UsedCondition.schema()
    create_usedcondition_model(UsedConditionAllProperties).schema()
    create_usedcondition_model(UsedConditionInheritedProperties).schema()
    create_usedcondition_model(UsedConditionProperties).schema()


def WebPage_test():
    from schorg.WebPage import WebPageInheritedProperties
    from schorg.WebPage import WebPageProperties
    from schorg.WebPage import WebPageAllProperties
    from schorg.WebPage import create_schema_org_model
    from schorg.WebPage import create_webpage_model
    from schorg.WebPage import WebPage

    a = create_schema_org_model(type_=WebPageInheritedProperties)
    b = create_schema_org_model(type_=WebPageProperties)
    c = create_schema_org_model(type_=WebPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebPage.schema()
    create_webpage_model(WebPageAllProperties).schema()
    create_webpage_model(WebPageInheritedProperties).schema()
    create_webpage_model(WebPageProperties).schema()


def CollectionPage_test():
    from schorg.CollectionPage import CollectionPageInheritedProperties
    from schorg.CollectionPage import CollectionPageProperties
    from schorg.CollectionPage import CollectionPageAllProperties
    from schorg.CollectionPage import create_schema_org_model
    from schorg.CollectionPage import create_collectionpage_model
    from schorg.CollectionPage import CollectionPage

    a = create_schema_org_model(type_=CollectionPageInheritedProperties)
    b = create_schema_org_model(type_=CollectionPageProperties)
    c = create_schema_org_model(type_=CollectionPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CollectionPage.schema()
    create_collectionpage_model(CollectionPageAllProperties).schema()
    create_collectionpage_model(CollectionPageInheritedProperties).schema()
    create_collectionpage_model(CollectionPageProperties).schema()


def LifestyleModification_test():
    from schorg.LifestyleModification import LifestyleModificationInheritedProperties
    from schorg.LifestyleModification import LifestyleModificationProperties
    from schorg.LifestyleModification import LifestyleModificationAllProperties
    from schorg.LifestyleModification import create_schema_org_model
    from schorg.LifestyleModification import create_lifestylemodification_model
    from schorg.LifestyleModification import LifestyleModification

    a = create_schema_org_model(type_=LifestyleModificationInheritedProperties)
    b = create_schema_org_model(type_=LifestyleModificationProperties)
    c = create_schema_org_model(type_=LifestyleModificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LifestyleModification.schema()
    create_lifestylemodification_model(LifestyleModificationAllProperties).schema()
    create_lifestylemodification_model(
        LifestyleModificationInheritedProperties
    ).schema()
    create_lifestylemodification_model(LifestyleModificationProperties).schema()


def PhysicalActivity_test():
    from schorg.PhysicalActivity import PhysicalActivityInheritedProperties
    from schorg.PhysicalActivity import PhysicalActivityProperties
    from schorg.PhysicalActivity import PhysicalActivityAllProperties
    from schorg.PhysicalActivity import create_schema_org_model
    from schorg.PhysicalActivity import create_physicalactivity_model
    from schorg.PhysicalActivity import PhysicalActivity

    a = create_schema_org_model(type_=PhysicalActivityInheritedProperties)
    b = create_schema_org_model(type_=PhysicalActivityProperties)
    c = create_schema_org_model(type_=PhysicalActivityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PhysicalActivity.schema()
    create_physicalactivity_model(PhysicalActivityAllProperties).schema()
    create_physicalactivity_model(PhysicalActivityInheritedProperties).schema()
    create_physicalactivity_model(PhysicalActivityProperties).schema()


def LiquorStore_test():
    from schorg.LiquorStore import LiquorStoreInheritedProperties
    from schorg.LiquorStore import LiquorStoreProperties
    from schorg.LiquorStore import LiquorStoreAllProperties
    from schorg.LiquorStore import create_schema_org_model
    from schorg.LiquorStore import create_liquorstore_model
    from schorg.LiquorStore import LiquorStore

    a = create_schema_org_model(type_=LiquorStoreInheritedProperties)
    b = create_schema_org_model(type_=LiquorStoreProperties)
    c = create_schema_org_model(type_=LiquorStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LiquorStore.schema()
    create_liquorstore_model(LiquorStoreAllProperties).schema()
    create_liquorstore_model(LiquorStoreInheritedProperties).schema()
    create_liquorstore_model(LiquorStoreProperties).schema()


def DrugPregnancyCategory_test():
    from schorg.DrugPregnancyCategory import DrugPregnancyCategoryInheritedProperties
    from schorg.DrugPregnancyCategory import DrugPregnancyCategoryProperties
    from schorg.DrugPregnancyCategory import DrugPregnancyCategoryAllProperties
    from schorg.DrugPregnancyCategory import create_schema_org_model
    from schorg.DrugPregnancyCategory import create_drugpregnancycategory_model
    from schorg.DrugPregnancyCategory import DrugPregnancyCategory

    a = create_schema_org_model(type_=DrugPregnancyCategoryInheritedProperties)
    b = create_schema_org_model(type_=DrugPregnancyCategoryProperties)
    c = create_schema_org_model(type_=DrugPregnancyCategoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugPregnancyCategory.schema()
    create_drugpregnancycategory_model(DrugPregnancyCategoryAllProperties).schema()
    create_drugpregnancycategory_model(
        DrugPregnancyCategoryInheritedProperties
    ).schema()
    create_drugpregnancycategory_model(DrugPregnancyCategoryProperties).schema()


def FDAcategoryX_test():
    from schorg.FDAcategoryX import FDAcategoryXInheritedProperties
    from schorg.FDAcategoryX import FDAcategoryXProperties
    from schorg.FDAcategoryX import FDAcategoryXAllProperties
    from schorg.FDAcategoryX import create_schema_org_model
    from schorg.FDAcategoryX import create_fdacategoryx_model
    from schorg.FDAcategoryX import FDAcategoryX

    a = create_schema_org_model(type_=FDAcategoryXInheritedProperties)
    b = create_schema_org_model(type_=FDAcategoryXProperties)
    c = create_schema_org_model(type_=FDAcategoryXAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAcategoryX.schema()
    create_fdacategoryx_model(FDAcategoryXAllProperties).schema()
    create_fdacategoryx_model(FDAcategoryXInheritedProperties).schema()
    create_fdacategoryx_model(FDAcategoryXProperties).schema()


def EducationalOrganization_test():
    from schorg.EducationalOrganization import (
        EducationalOrganizationInheritedProperties,
    )
    from schorg.EducationalOrganization import EducationalOrganizationProperties
    from schorg.EducationalOrganization import EducationalOrganizationAllProperties
    from schorg.EducationalOrganization import create_schema_org_model
    from schorg.EducationalOrganization import create_educationalorganization_model
    from schorg.EducationalOrganization import EducationalOrganization

    a = create_schema_org_model(type_=EducationalOrganizationInheritedProperties)
    b = create_schema_org_model(type_=EducationalOrganizationProperties)
    c = create_schema_org_model(type_=EducationalOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EducationalOrganization.schema()
    create_educationalorganization_model(EducationalOrganizationAllProperties).schema()
    create_educationalorganization_model(
        EducationalOrganizationInheritedProperties
    ).schema()
    create_educationalorganization_model(EducationalOrganizationProperties).schema()


def Series_test():
    from schorg.Series import SeriesInheritedProperties
    from schorg.Series import SeriesProperties
    from schorg.Series import SeriesAllProperties
    from schorg.Series import create_schema_org_model
    from schorg.Series import create_series_model
    from schorg.Series import Series

    a = create_schema_org_model(type_=SeriesInheritedProperties)
    b = create_schema_org_model(type_=SeriesProperties)
    c = create_schema_org_model(type_=SeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Series.schema()
    create_series_model(SeriesAllProperties).schema()
    create_series_model(SeriesInheritedProperties).schema()
    create_series_model(SeriesProperties).schema()


def EventSeries_test():
    from schorg.EventSeries import EventSeriesInheritedProperties
    from schorg.EventSeries import EventSeriesProperties
    from schorg.EventSeries import EventSeriesAllProperties
    from schorg.EventSeries import create_schema_org_model
    from schorg.EventSeries import create_eventseries_model
    from schorg.EventSeries import EventSeries

    a = create_schema_org_model(type_=EventSeriesInheritedProperties)
    b = create_schema_org_model(type_=EventSeriesProperties)
    c = create_schema_org_model(type_=EventSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventSeries.schema()
    create_eventseries_model(EventSeriesAllProperties).schema()
    create_eventseries_model(EventSeriesInheritedProperties).schema()
    create_eventseries_model(EventSeriesProperties).schema()


def WearableSizeGroupPetite_test():
    from schorg.WearableSizeGroupPetite import (
        WearableSizeGroupPetiteInheritedProperties,
    )
    from schorg.WearableSizeGroupPetite import WearableSizeGroupPetiteProperties
    from schorg.WearableSizeGroupPetite import WearableSizeGroupPetiteAllProperties
    from schorg.WearableSizeGroupPetite import create_schema_org_model
    from schorg.WearableSizeGroupPetite import create_wearablesizegrouppetite_model
    from schorg.WearableSizeGroupPetite import WearableSizeGroupPetite

    a = create_schema_org_model(type_=WearableSizeGroupPetiteInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupPetiteProperties)
    c = create_schema_org_model(type_=WearableSizeGroupPetiteAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupPetite.schema()
    create_wearablesizegrouppetite_model(WearableSizeGroupPetiteAllProperties).schema()
    create_wearablesizegrouppetite_model(
        WearableSizeGroupPetiteInheritedProperties
    ).schema()
    create_wearablesizegrouppetite_model(WearableSizeGroupPetiteProperties).schema()


def HealthAspectEnumeration_test():
    from schorg.HealthAspectEnumeration import (
        HealthAspectEnumerationInheritedProperties,
    )
    from schorg.HealthAspectEnumeration import HealthAspectEnumerationProperties
    from schorg.HealthAspectEnumeration import HealthAspectEnumerationAllProperties
    from schorg.HealthAspectEnumeration import create_schema_org_model
    from schorg.HealthAspectEnumeration import create_healthaspectenumeration_model
    from schorg.HealthAspectEnumeration import HealthAspectEnumeration

    a = create_schema_org_model(type_=HealthAspectEnumerationInheritedProperties)
    b = create_schema_org_model(type_=HealthAspectEnumerationProperties)
    c = create_schema_org_model(type_=HealthAspectEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthAspectEnumeration.schema()
    create_healthaspectenumeration_model(HealthAspectEnumerationAllProperties).schema()
    create_healthaspectenumeration_model(
        HealthAspectEnumerationInheritedProperties
    ).schema()
    create_healthaspectenumeration_model(HealthAspectEnumerationProperties).schema()


def PrognosisHealthAspect_test():
    from schorg.PrognosisHealthAspect import PrognosisHealthAspectInheritedProperties
    from schorg.PrognosisHealthAspect import PrognosisHealthAspectProperties
    from schorg.PrognosisHealthAspect import PrognosisHealthAspectAllProperties
    from schorg.PrognosisHealthAspect import create_schema_org_model
    from schorg.PrognosisHealthAspect import create_prognosishealthaspect_model
    from schorg.PrognosisHealthAspect import PrognosisHealthAspect

    a = create_schema_org_model(type_=PrognosisHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=PrognosisHealthAspectProperties)
    c = create_schema_org_model(type_=PrognosisHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PrognosisHealthAspect.schema()
    create_prognosishealthaspect_model(PrognosisHealthAspectAllProperties).schema()
    create_prognosishealthaspect_model(
        PrognosisHealthAspectInheritedProperties
    ).schema()
    create_prognosishealthaspect_model(PrognosisHealthAspectProperties).schema()


def LegalForceStatus_test():
    from schorg.LegalForceStatus import LegalForceStatusInheritedProperties
    from schorg.LegalForceStatus import LegalForceStatusProperties
    from schorg.LegalForceStatus import LegalForceStatusAllProperties
    from schorg.LegalForceStatus import create_schema_org_model
    from schorg.LegalForceStatus import create_legalforcestatus_model
    from schorg.LegalForceStatus import LegalForceStatus

    a = create_schema_org_model(type_=LegalForceStatusInheritedProperties)
    b = create_schema_org_model(type_=LegalForceStatusProperties)
    c = create_schema_org_model(type_=LegalForceStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LegalForceStatus.schema()
    create_legalforcestatus_model(LegalForceStatusAllProperties).schema()
    create_legalforcestatus_model(LegalForceStatusInheritedProperties).schema()
    create_legalforcestatus_model(LegalForceStatusProperties).schema()


def PartiallyInForce_test():
    from schorg.PartiallyInForce import PartiallyInForceInheritedProperties
    from schorg.PartiallyInForce import PartiallyInForceProperties
    from schorg.PartiallyInForce import PartiallyInForceAllProperties
    from schorg.PartiallyInForce import create_schema_org_model
    from schorg.PartiallyInForce import create_partiallyinforce_model
    from schorg.PartiallyInForce import PartiallyInForce

    a = create_schema_org_model(type_=PartiallyInForceInheritedProperties)
    b = create_schema_org_model(type_=PartiallyInForceProperties)
    c = create_schema_org_model(type_=PartiallyInForceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PartiallyInForce.schema()
    create_partiallyinforce_model(PartiallyInForceAllProperties).schema()
    create_partiallyinforce_model(PartiallyInForceInheritedProperties).schema()
    create_partiallyinforce_model(PartiallyInForceProperties).schema()


def RestockingFees_test():
    from schorg.RestockingFees import RestockingFeesInheritedProperties
    from schorg.RestockingFees import RestockingFeesProperties
    from schorg.RestockingFees import RestockingFeesAllProperties
    from schorg.RestockingFees import create_schema_org_model
    from schorg.RestockingFees import create_restockingfees_model
    from schorg.RestockingFees import RestockingFees

    a = create_schema_org_model(type_=RestockingFeesInheritedProperties)
    b = create_schema_org_model(type_=RestockingFeesProperties)
    c = create_schema_org_model(type_=RestockingFeesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RestockingFees.schema()
    create_restockingfees_model(RestockingFeesAllProperties).schema()
    create_restockingfees_model(RestockingFeesInheritedProperties).schema()
    create_restockingfees_model(RestockingFeesProperties).schema()


def WearableMeasurementTypeEnumeration_test():
    from schorg.WearableMeasurementTypeEnumeration import (
        WearableMeasurementTypeEnumerationInheritedProperties,
    )
    from schorg.WearableMeasurementTypeEnumeration import (
        WearableMeasurementTypeEnumerationProperties,
    )
    from schorg.WearableMeasurementTypeEnumeration import (
        WearableMeasurementTypeEnumerationAllProperties,
    )
    from schorg.WearableMeasurementTypeEnumeration import create_schema_org_model
    from schorg.WearableMeasurementTypeEnumeration import (
        create_wearablemeasurementtypeenumeration_model,
    )
    from schorg.WearableMeasurementTypeEnumeration import (
        WearableMeasurementTypeEnumeration,
    )

    a = create_schema_org_model(
        type_=WearableMeasurementTypeEnumerationInheritedProperties
    )
    b = create_schema_org_model(type_=WearableMeasurementTypeEnumerationProperties)
    c = create_schema_org_model(type_=WearableMeasurementTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementTypeEnumeration.schema()
    create_wearablemeasurementtypeenumeration_model(
        WearableMeasurementTypeEnumerationAllProperties
    ).schema()
    create_wearablemeasurementtypeenumeration_model(
        WearableMeasurementTypeEnumerationInheritedProperties
    ).schema()
    create_wearablemeasurementtypeenumeration_model(
        WearableMeasurementTypeEnumerationProperties
    ).schema()


def WearableMeasurementHips_test():
    from schorg.WearableMeasurementHips import (
        WearableMeasurementHipsInheritedProperties,
    )
    from schorg.WearableMeasurementHips import WearableMeasurementHipsProperties
    from schorg.WearableMeasurementHips import WearableMeasurementHipsAllProperties
    from schorg.WearableMeasurementHips import create_schema_org_model
    from schorg.WearableMeasurementHips import create_wearablemeasurementhips_model
    from schorg.WearableMeasurementHips import WearableMeasurementHips

    a = create_schema_org_model(type_=WearableMeasurementHipsInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementHipsProperties)
    c = create_schema_org_model(type_=WearableMeasurementHipsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementHips.schema()
    create_wearablemeasurementhips_model(WearableMeasurementHipsAllProperties).schema()
    create_wearablemeasurementhips_model(
        WearableMeasurementHipsInheritedProperties
    ).schema()
    create_wearablemeasurementhips_model(WearableMeasurementHipsProperties).schema()


def UserInteraction_test():
    from schorg.UserInteraction import UserInteractionInheritedProperties
    from schorg.UserInteraction import UserInteractionProperties
    from schorg.UserInteraction import UserInteractionAllProperties
    from schorg.UserInteraction import create_schema_org_model
    from schorg.UserInteraction import create_userinteraction_model
    from schorg.UserInteraction import UserInteraction

    a = create_schema_org_model(type_=UserInteractionInheritedProperties)
    b = create_schema_org_model(type_=UserInteractionProperties)
    c = create_schema_org_model(type_=UserInteractionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserInteraction.schema()
    create_userinteraction_model(UserInteractionAllProperties).schema()
    create_userinteraction_model(UserInteractionInheritedProperties).schema()
    create_userinteraction_model(UserInteractionProperties).schema()


def UserPageVisits_test():
    from schorg.UserPageVisits import UserPageVisitsInheritedProperties
    from schorg.UserPageVisits import UserPageVisitsProperties
    from schorg.UserPageVisits import UserPageVisitsAllProperties
    from schorg.UserPageVisits import create_schema_org_model
    from schorg.UserPageVisits import create_userpagevisits_model
    from schorg.UserPageVisits import UserPageVisits

    a = create_schema_org_model(type_=UserPageVisitsInheritedProperties)
    b = create_schema_org_model(type_=UserPageVisitsProperties)
    c = create_schema_org_model(type_=UserPageVisitsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserPageVisits.schema()
    create_userpagevisits_model(UserPageVisitsAllProperties).schema()
    create_userpagevisits_model(UserPageVisitsInheritedProperties).schema()
    create_userpagevisits_model(UserPageVisitsProperties).schema()


def DigitalDocumentPermissionType_test():
    from schorg.DigitalDocumentPermissionType import (
        DigitalDocumentPermissionTypeInheritedProperties,
    )
    from schorg.DigitalDocumentPermissionType import (
        DigitalDocumentPermissionTypeProperties,
    )
    from schorg.DigitalDocumentPermissionType import (
        DigitalDocumentPermissionTypeAllProperties,
    )
    from schorg.DigitalDocumentPermissionType import create_schema_org_model
    from schorg.DigitalDocumentPermissionType import (
        create_digitaldocumentpermissiontype_model,
    )
    from schorg.DigitalDocumentPermissionType import DigitalDocumentPermissionType

    a = create_schema_org_model(type_=DigitalDocumentPermissionTypeInheritedProperties)
    b = create_schema_org_model(type_=DigitalDocumentPermissionTypeProperties)
    c = create_schema_org_model(type_=DigitalDocumentPermissionTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalDocumentPermissionType.schema()
    create_digitaldocumentpermissiontype_model(
        DigitalDocumentPermissionTypeAllProperties
    ).schema()
    create_digitaldocumentpermissiontype_model(
        DigitalDocumentPermissionTypeInheritedProperties
    ).schema()
    create_digitaldocumentpermissiontype_model(
        DigitalDocumentPermissionTypeProperties
    ).schema()


def CommentPermission_test():
    from schorg.CommentPermission import CommentPermissionInheritedProperties
    from schorg.CommentPermission import CommentPermissionProperties
    from schorg.CommentPermission import CommentPermissionAllProperties
    from schorg.CommentPermission import create_schema_org_model
    from schorg.CommentPermission import create_commentpermission_model
    from schorg.CommentPermission import CommentPermission

    a = create_schema_org_model(type_=CommentPermissionInheritedProperties)
    b = create_schema_org_model(type_=CommentPermissionProperties)
    c = create_schema_org_model(type_=CommentPermissionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CommentPermission.schema()
    create_commentpermission_model(CommentPermissionAllProperties).schema()
    create_commentpermission_model(CommentPermissionInheritedProperties).schema()
    create_commentpermission_model(CommentPermissionProperties).schema()


def MediaManipulationRatingEnumeration_test():
    from schorg.MediaManipulationRatingEnumeration import (
        MediaManipulationRatingEnumerationInheritedProperties,
    )
    from schorg.MediaManipulationRatingEnumeration import (
        MediaManipulationRatingEnumerationProperties,
    )
    from schorg.MediaManipulationRatingEnumeration import (
        MediaManipulationRatingEnumerationAllProperties,
    )
    from schorg.MediaManipulationRatingEnumeration import create_schema_org_model
    from schorg.MediaManipulationRatingEnumeration import (
        create_mediamanipulationratingenumeration_model,
    )
    from schorg.MediaManipulationRatingEnumeration import (
        MediaManipulationRatingEnumeration,
    )

    a = create_schema_org_model(
        type_=MediaManipulationRatingEnumerationInheritedProperties
    )
    b = create_schema_org_model(type_=MediaManipulationRatingEnumerationProperties)
    c = create_schema_org_model(type_=MediaManipulationRatingEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaManipulationRatingEnumeration.schema()
    create_mediamanipulationratingenumeration_model(
        MediaManipulationRatingEnumerationAllProperties
    ).schema()
    create_mediamanipulationratingenumeration_model(
        MediaManipulationRatingEnumerationInheritedProperties
    ).schema()
    create_mediamanipulationratingenumeration_model(
        MediaManipulationRatingEnumerationProperties
    ).schema()


def OriginalMediaContent_test():
    from schorg.OriginalMediaContent import OriginalMediaContentInheritedProperties
    from schorg.OriginalMediaContent import OriginalMediaContentProperties
    from schorg.OriginalMediaContent import OriginalMediaContentAllProperties
    from schorg.OriginalMediaContent import create_schema_org_model
    from schorg.OriginalMediaContent import create_originalmediacontent_model
    from schorg.OriginalMediaContent import OriginalMediaContent

    a = create_schema_org_model(type_=OriginalMediaContentInheritedProperties)
    b = create_schema_org_model(type_=OriginalMediaContentProperties)
    c = create_schema_org_model(type_=OriginalMediaContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OriginalMediaContent.schema()
    create_originalmediacontent_model(OriginalMediaContentAllProperties).schema()
    create_originalmediacontent_model(OriginalMediaContentInheritedProperties).schema()
    create_originalmediacontent_model(OriginalMediaContentProperties).schema()


def DVDFormat_test():
    from schorg.DVDFormat import DVDFormatInheritedProperties
    from schorg.DVDFormat import DVDFormatProperties
    from schorg.DVDFormat import DVDFormatAllProperties
    from schorg.DVDFormat import create_schema_org_model
    from schorg.DVDFormat import create_dvdformat_model
    from schorg.DVDFormat import DVDFormat

    a = create_schema_org_model(type_=DVDFormatInheritedProperties)
    b = create_schema_org_model(type_=DVDFormatProperties)
    c = create_schema_org_model(type_=DVDFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DVDFormat.schema()
    create_dvdformat_model(DVDFormatAllProperties).schema()
    create_dvdformat_model(DVDFormatInheritedProperties).schema()
    create_dvdformat_model(DVDFormatProperties).schema()


def UserDownloads_test():
    from schorg.UserDownloads import UserDownloadsInheritedProperties
    from schorg.UserDownloads import UserDownloadsProperties
    from schorg.UserDownloads import UserDownloadsAllProperties
    from schorg.UserDownloads import create_schema_org_model
    from schorg.UserDownloads import create_userdownloads_model
    from schorg.UserDownloads import UserDownloads

    a = create_schema_org_model(type_=UserDownloadsInheritedProperties)
    b = create_schema_org_model(type_=UserDownloadsProperties)
    c = create_schema_org_model(type_=UserDownloadsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserDownloads.schema()
    create_userdownloads_model(UserDownloadsAllProperties).schema()
    create_userdownloads_model(UserDownloadsInheritedProperties).schema()
    create_userdownloads_model(UserDownloadsProperties).schema()


def TrainReservation_test():
    from schorg.TrainReservation import TrainReservationInheritedProperties
    from schorg.TrainReservation import TrainReservationProperties
    from schorg.TrainReservation import TrainReservationAllProperties
    from schorg.TrainReservation import create_schema_org_model
    from schorg.TrainReservation import create_trainreservation_model
    from schorg.TrainReservation import TrainReservation

    a = create_schema_org_model(type_=TrainReservationInheritedProperties)
    b = create_schema_org_model(type_=TrainReservationProperties)
    c = create_schema_org_model(type_=TrainReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TrainReservation.schema()
    create_trainreservation_model(TrainReservationAllProperties).schema()
    create_trainreservation_model(TrainReservationInheritedProperties).schema()
    create_trainreservation_model(TrainReservationProperties).schema()


def MusicPlaylist_test():
    from schorg.MusicPlaylist import MusicPlaylistInheritedProperties
    from schorg.MusicPlaylist import MusicPlaylistProperties
    from schorg.MusicPlaylist import MusicPlaylistAllProperties
    from schorg.MusicPlaylist import create_schema_org_model
    from schorg.MusicPlaylist import create_musicplaylist_model
    from schorg.MusicPlaylist import MusicPlaylist

    a = create_schema_org_model(type_=MusicPlaylistInheritedProperties)
    b = create_schema_org_model(type_=MusicPlaylistProperties)
    c = create_schema_org_model(type_=MusicPlaylistAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicPlaylist.schema()
    create_musicplaylist_model(MusicPlaylistAllProperties).schema()
    create_musicplaylist_model(MusicPlaylistInheritedProperties).schema()
    create_musicplaylist_model(MusicPlaylistProperties).schema()


def VirtualLocation_test():
    from schorg.VirtualLocation import VirtualLocationInheritedProperties
    from schorg.VirtualLocation import VirtualLocationProperties
    from schorg.VirtualLocation import VirtualLocationAllProperties
    from schorg.VirtualLocation import create_schema_org_model
    from schorg.VirtualLocation import create_virtuallocation_model
    from schorg.VirtualLocation import VirtualLocation

    a = create_schema_org_model(type_=VirtualLocationInheritedProperties)
    b = create_schema_org_model(type_=VirtualLocationProperties)
    c = create_schema_org_model(type_=VirtualLocationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VirtualLocation.schema()
    create_virtuallocation_model(VirtualLocationAllProperties).schema()
    create_virtuallocation_model(VirtualLocationInheritedProperties).schema()
    create_virtuallocation_model(VirtualLocationProperties).schema()


def EntertainmentBusiness_test():
    from schorg.EntertainmentBusiness import EntertainmentBusinessInheritedProperties
    from schorg.EntertainmentBusiness import EntertainmentBusinessProperties
    from schorg.EntertainmentBusiness import EntertainmentBusinessAllProperties
    from schorg.EntertainmentBusiness import create_schema_org_model
    from schorg.EntertainmentBusiness import create_entertainmentbusiness_model
    from schorg.EntertainmentBusiness import EntertainmentBusiness

    a = create_schema_org_model(type_=EntertainmentBusinessInheritedProperties)
    b = create_schema_org_model(type_=EntertainmentBusinessProperties)
    c = create_schema_org_model(type_=EntertainmentBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EntertainmentBusiness.schema()
    create_entertainmentbusiness_model(EntertainmentBusinessAllProperties).schema()
    create_entertainmentbusiness_model(
        EntertainmentBusinessInheritedProperties
    ).schema()
    create_entertainmentbusiness_model(EntertainmentBusinessProperties).schema()


def AdultEntertainment_test():
    from schorg.AdultEntertainment import AdultEntertainmentInheritedProperties
    from schorg.AdultEntertainment import AdultEntertainmentProperties
    from schorg.AdultEntertainment import AdultEntertainmentAllProperties
    from schorg.AdultEntertainment import create_schema_org_model
    from schorg.AdultEntertainment import create_adultentertainment_model
    from schorg.AdultEntertainment import AdultEntertainment

    a = create_schema_org_model(type_=AdultEntertainmentInheritedProperties)
    b = create_schema_org_model(type_=AdultEntertainmentProperties)
    c = create_schema_org_model(type_=AdultEntertainmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AdultEntertainment.schema()
    create_adultentertainment_model(AdultEntertainmentAllProperties).schema()
    create_adultentertainment_model(AdultEntertainmentInheritedProperties).schema()
    create_adultentertainment_model(AdultEntertainmentProperties).schema()


def Review_test():
    from schorg.Review import ReviewInheritedProperties
    from schorg.Review import ReviewProperties
    from schorg.Review import ReviewAllProperties
    from schorg.Review import create_schema_org_model
    from schorg.Review import create_review_model
    from schorg.Review import Review

    a = create_schema_org_model(type_=ReviewInheritedProperties)
    b = create_schema_org_model(type_=ReviewProperties)
    c = create_schema_org_model(type_=ReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Review.schema()
    create_review_model(ReviewAllProperties).schema()
    create_review_model(ReviewInheritedProperties).schema()
    create_review_model(ReviewProperties).schema()


def Recommendation_test():
    from schorg.Recommendation import RecommendationInheritedProperties
    from schorg.Recommendation import RecommendationProperties
    from schorg.Recommendation import RecommendationAllProperties
    from schorg.Recommendation import create_schema_org_model
    from schorg.Recommendation import create_recommendation_model
    from schorg.Recommendation import Recommendation

    a = create_schema_org_model(type_=RecommendationInheritedProperties)
    b = create_schema_org_model(type_=RecommendationProperties)
    c = create_schema_org_model(type_=RecommendationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Recommendation.schema()
    create_recommendation_model(RecommendationAllProperties).schema()
    create_recommendation_model(RecommendationInheritedProperties).schema()
    create_recommendation_model(RecommendationProperties).schema()


def MediaObject_test():
    from schorg.MediaObject import MediaObjectInheritedProperties
    from schorg.MediaObject import MediaObjectProperties
    from schorg.MediaObject import MediaObjectAllProperties
    from schorg.MediaObject import create_schema_org_model
    from schorg.MediaObject import create_mediaobject_model
    from schorg.MediaObject import MediaObject

    a = create_schema_org_model(type_=MediaObjectInheritedProperties)
    b = create_schema_org_model(type_=MediaObjectProperties)
    c = create_schema_org_model(type_=MediaObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaObject.schema()
    create_mediaobject_model(MediaObjectAllProperties).schema()
    create_mediaobject_model(MediaObjectInheritedProperties).schema()
    create_mediaobject_model(MediaObjectProperties).schema()


def AudioObject_test():
    from schorg.AudioObject import AudioObjectInheritedProperties
    from schorg.AudioObject import AudioObjectProperties
    from schorg.AudioObject import AudioObjectAllProperties
    from schorg.AudioObject import create_schema_org_model
    from schorg.AudioObject import create_audioobject_model
    from schorg.AudioObject import AudioObject

    a = create_schema_org_model(type_=AudioObjectInheritedProperties)
    b = create_schema_org_model(type_=AudioObjectProperties)
    c = create_schema_org_model(type_=AudioObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AudioObject.schema()
    create_audioobject_model(AudioObjectAllProperties).schema()
    create_audioobject_model(AudioObjectInheritedProperties).schema()
    create_audioobject_model(AudioObjectProperties).schema()


def Book_test():
    from schorg.Book import BookInheritedProperties
    from schorg.Book import BookProperties
    from schorg.Book import BookAllProperties
    from schorg.Book import create_schema_org_model
    from schorg.Book import create_book_model
    from schorg.Book import Book

    a = create_schema_org_model(type_=BookInheritedProperties)
    b = create_schema_org_model(type_=BookProperties)
    c = create_schema_org_model(type_=BookAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Book.schema()
    create_book_model(BookAllProperties).schema()
    create_book_model(BookInheritedProperties).schema()
    create_book_model(BookProperties).schema()


def Audiobook_test():
    from schorg.Audiobook import AudiobookInheritedProperties
    from schorg.Audiobook import AudiobookProperties
    from schorg.Audiobook import AudiobookAllProperties
    from schorg.Audiobook import create_schema_org_model
    from schorg.Audiobook import create_audiobook_model
    from schorg.Audiobook import Audiobook

    a = create_schema_org_model(type_=AudiobookInheritedProperties)
    b = create_schema_org_model(type_=AudiobookProperties)
    c = create_schema_org_model(type_=AudiobookAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Audiobook.schema()
    create_audiobook_model(AudiobookAllProperties).schema()
    create_audiobook_model(AudiobookInheritedProperties).schema()
    create_audiobook_model(AudiobookProperties).schema()


def MedicalAudience_test():
    from schorg.MedicalAudience import MedicalAudienceInheritedProperties
    from schorg.MedicalAudience import MedicalAudienceProperties
    from schorg.MedicalAudience import MedicalAudienceAllProperties
    from schorg.MedicalAudience import create_schema_org_model
    from schorg.MedicalAudience import create_medicalaudience_model
    from schorg.MedicalAudience import MedicalAudience

    a = create_schema_org_model(type_=MedicalAudienceInheritedProperties)
    b = create_schema_org_model(type_=MedicalAudienceProperties)
    c = create_schema_org_model(type_=MedicalAudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalAudience.schema()
    create_medicalaudience_model(MedicalAudienceAllProperties).schema()
    create_medicalaudience_model(MedicalAudienceInheritedProperties).schema()
    create_medicalaudience_model(MedicalAudienceProperties).schema()


def Person_test():
    from schorg.Person import PersonInheritedProperties
    from schorg.Person import PersonProperties
    from schorg.Person import PersonAllProperties
    from schorg.Person import create_schema_org_model
    from schorg.Person import create_person_model
    from schorg.Person import Person

    a = create_schema_org_model(type_=PersonInheritedProperties)
    b = create_schema_org_model(type_=PersonProperties)
    c = create_schema_org_model(type_=PersonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Person.schema()
    create_person_model(PersonAllProperties).schema()
    create_person_model(PersonInheritedProperties).schema()
    create_person_model(PersonProperties).schema()


def Patient_test():
    from schorg.Patient import PatientInheritedProperties
    from schorg.Patient import PatientProperties
    from schorg.Patient import PatientAllProperties
    from schorg.Patient import create_schema_org_model
    from schorg.Patient import create_patient_model
    from schorg.Patient import Patient

    a = create_schema_org_model(type_=PatientInheritedProperties)
    b = create_schema_org_model(type_=PatientProperties)
    c = create_schema_org_model(type_=PatientAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Patient.schema()
    create_patient_model(PatientAllProperties).schema()
    create_patient_model(PatientInheritedProperties).schema()
    create_patient_model(PatientProperties).schema()


def GovernmentBenefitsType_test():
    from schorg.GovernmentBenefitsType import GovernmentBenefitsTypeInheritedProperties
    from schorg.GovernmentBenefitsType import GovernmentBenefitsTypeProperties
    from schorg.GovernmentBenefitsType import GovernmentBenefitsTypeAllProperties
    from schorg.GovernmentBenefitsType import create_schema_org_model
    from schorg.GovernmentBenefitsType import create_governmentbenefitstype_model
    from schorg.GovernmentBenefitsType import GovernmentBenefitsType

    a = create_schema_org_model(type_=GovernmentBenefitsTypeInheritedProperties)
    b = create_schema_org_model(type_=GovernmentBenefitsTypeProperties)
    c = create_schema_org_model(type_=GovernmentBenefitsTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentBenefitsType.schema()
    create_governmentbenefitstype_model(GovernmentBenefitsTypeAllProperties).schema()
    create_governmentbenefitstype_model(
        GovernmentBenefitsTypeInheritedProperties
    ).schema()
    create_governmentbenefitstype_model(GovernmentBenefitsTypeProperties).schema()


def BusinessSupport_test():
    from schorg.BusinessSupport import BusinessSupportInheritedProperties
    from schorg.BusinessSupport import BusinessSupportProperties
    from schorg.BusinessSupport import BusinessSupportAllProperties
    from schorg.BusinessSupport import create_schema_org_model
    from schorg.BusinessSupport import create_businesssupport_model
    from schorg.BusinessSupport import BusinessSupport

    a = create_schema_org_model(type_=BusinessSupportInheritedProperties)
    b = create_schema_org_model(type_=BusinessSupportProperties)
    c = create_schema_org_model(type_=BusinessSupportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusinessSupport.schema()
    create_businesssupport_model(BusinessSupportAllProperties).schema()
    create_businesssupport_model(BusinessSupportInheritedProperties).schema()
    create_businesssupport_model(BusinessSupportProperties).schema()


def SatireOrParodyContent_test():
    from schorg.SatireOrParodyContent import SatireOrParodyContentInheritedProperties
    from schorg.SatireOrParodyContent import SatireOrParodyContentProperties
    from schorg.SatireOrParodyContent import SatireOrParodyContentAllProperties
    from schorg.SatireOrParodyContent import create_schema_org_model
    from schorg.SatireOrParodyContent import create_satireorparodycontent_model
    from schorg.SatireOrParodyContent import SatireOrParodyContent

    a = create_schema_org_model(type_=SatireOrParodyContentInheritedProperties)
    b = create_schema_org_model(type_=SatireOrParodyContentProperties)
    c = create_schema_org_model(type_=SatireOrParodyContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SatireOrParodyContent.schema()
    create_satireorparodycontent_model(SatireOrParodyContentAllProperties).schema()
    create_satireorparodycontent_model(
        SatireOrParodyContentInheritedProperties
    ).schema()
    create_satireorparodycontent_model(SatireOrParodyContentProperties).schema()


def Genitourinary_test():
    from schorg.Genitourinary import GenitourinaryInheritedProperties
    from schorg.Genitourinary import GenitourinaryProperties
    from schorg.Genitourinary import GenitourinaryAllProperties
    from schorg.Genitourinary import create_schema_org_model
    from schorg.Genitourinary import create_genitourinary_model
    from schorg.Genitourinary import Genitourinary

    a = create_schema_org_model(type_=GenitourinaryInheritedProperties)
    b = create_schema_org_model(type_=GenitourinaryProperties)
    c = create_schema_org_model(type_=GenitourinaryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Genitourinary.schema()
    create_genitourinary_model(GenitourinaryAllProperties).schema()
    create_genitourinary_model(GenitourinaryInheritedProperties).schema()
    create_genitourinary_model(GenitourinaryProperties).schema()


def Collection_test():
    from schorg.Collection import CollectionInheritedProperties
    from schorg.Collection import CollectionProperties
    from schorg.Collection import CollectionAllProperties
    from schorg.Collection import create_schema_org_model
    from schorg.Collection import create_collection_model
    from schorg.Collection import Collection

    a = create_schema_org_model(type_=CollectionInheritedProperties)
    b = create_schema_org_model(type_=CollectionProperties)
    c = create_schema_org_model(type_=CollectionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Collection.schema()
    create_collection_model(CollectionAllProperties).schema()
    create_collection_model(CollectionInheritedProperties).schema()
    create_collection_model(CollectionProperties).schema()


def ProductCollection_test():
    from schorg.ProductCollection import ProductCollectionInheritedProperties
    from schorg.ProductCollection import ProductCollectionProperties
    from schorg.ProductCollection import ProductCollectionAllProperties
    from schorg.ProductCollection import create_schema_org_model
    from schorg.ProductCollection import create_productcollection_model
    from schorg.ProductCollection import ProductCollection

    a = create_schema_org_model(type_=ProductCollectionInheritedProperties)
    b = create_schema_org_model(type_=ProductCollectionProperties)
    c = create_schema_org_model(type_=ProductCollectionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProductCollection.schema()
    create_productcollection_model(ProductCollectionAllProperties).schema()
    create_productcollection_model(ProductCollectionInheritedProperties).schema()
    create_productcollection_model(ProductCollectionProperties).schema()


def Role_test():
    from schorg.Role import RoleInheritedProperties
    from schorg.Role import RoleProperties
    from schorg.Role import RoleAllProperties
    from schorg.Role import create_schema_org_model
    from schorg.Role import create_role_model
    from schorg.Role import Role

    a = create_schema_org_model(type_=RoleInheritedProperties)
    b = create_schema_org_model(type_=RoleProperties)
    c = create_schema_org_model(type_=RoleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Role.schema()
    create_role_model(RoleAllProperties).schema()
    create_role_model(RoleInheritedProperties).schema()
    create_role_model(RoleProperties).schema()


def OrganizationRole_test():
    from schorg.OrganizationRole import OrganizationRoleInheritedProperties
    from schorg.OrganizationRole import OrganizationRoleProperties
    from schorg.OrganizationRole import OrganizationRoleAllProperties
    from schorg.OrganizationRole import create_schema_org_model
    from schorg.OrganizationRole import create_organizationrole_model
    from schorg.OrganizationRole import OrganizationRole

    a = create_schema_org_model(type_=OrganizationRoleInheritedProperties)
    b = create_schema_org_model(type_=OrganizationRoleProperties)
    c = create_schema_org_model(type_=OrganizationRoleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrganizationRole.schema()
    create_organizationrole_model(OrganizationRoleAllProperties).schema()
    create_organizationrole_model(OrganizationRoleInheritedProperties).schema()
    create_organizationrole_model(OrganizationRoleProperties).schema()


def FindAction_test():
    from schorg.FindAction import FindActionInheritedProperties
    from schorg.FindAction import FindActionProperties
    from schorg.FindAction import FindActionAllProperties
    from schorg.FindAction import create_schema_org_model
    from schorg.FindAction import create_findaction_model
    from schorg.FindAction import FindAction

    a = create_schema_org_model(type_=FindActionInheritedProperties)
    b = create_schema_org_model(type_=FindActionProperties)
    c = create_schema_org_model(type_=FindActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FindAction.schema()
    create_findaction_model(FindActionAllProperties).schema()
    create_findaction_model(FindActionInheritedProperties).schema()
    create_findaction_model(FindActionProperties).schema()


def GeoCircle_test():
    from schorg.GeoCircle import GeoCircleInheritedProperties
    from schorg.GeoCircle import GeoCircleProperties
    from schorg.GeoCircle import GeoCircleAllProperties
    from schorg.GeoCircle import create_schema_org_model
    from schorg.GeoCircle import create_geocircle_model
    from schorg.GeoCircle import GeoCircle

    a = create_schema_org_model(type_=GeoCircleInheritedProperties)
    b = create_schema_org_model(type_=GeoCircleProperties)
    c = create_schema_org_model(type_=GeoCircleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GeoCircle.schema()
    create_geocircle_model(GeoCircleAllProperties).schema()
    create_geocircle_model(GeoCircleInheritedProperties).schema()
    create_geocircle_model(GeoCircleProperties).schema()


def SportsActivityLocation_test():
    from schorg.SportsActivityLocation import SportsActivityLocationInheritedProperties
    from schorg.SportsActivityLocation import SportsActivityLocationProperties
    from schorg.SportsActivityLocation import SportsActivityLocationAllProperties
    from schorg.SportsActivityLocation import create_schema_org_model
    from schorg.SportsActivityLocation import create_sportsactivitylocation_model
    from schorg.SportsActivityLocation import SportsActivityLocation

    a = create_schema_org_model(type_=SportsActivityLocationInheritedProperties)
    b = create_schema_org_model(type_=SportsActivityLocationProperties)
    c = create_schema_org_model(type_=SportsActivityLocationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportsActivityLocation.schema()
    create_sportsactivitylocation_model(SportsActivityLocationAllProperties).schema()
    create_sportsactivitylocation_model(
        SportsActivityLocationInheritedProperties
    ).schema()
    create_sportsactivitylocation_model(SportsActivityLocationProperties).schema()


def Room_test():
    from schorg.Room import RoomInheritedProperties
    from schorg.Room import RoomProperties
    from schorg.Room import RoomAllProperties
    from schorg.Room import create_schema_org_model
    from schorg.Room import create_room_model
    from schorg.Room import Room

    a = create_schema_org_model(type_=RoomInheritedProperties)
    b = create_schema_org_model(type_=RoomProperties)
    c = create_schema_org_model(type_=RoomAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Room.schema()
    create_room_model(RoomAllProperties).schema()
    create_room_model(RoomInheritedProperties).schema()
    create_room_model(RoomProperties).schema()


def MeetingRoom_test():
    from schorg.MeetingRoom import MeetingRoomInheritedProperties
    from schorg.MeetingRoom import MeetingRoomProperties
    from schorg.MeetingRoom import MeetingRoomAllProperties
    from schorg.MeetingRoom import create_schema_org_model
    from schorg.MeetingRoom import create_meetingroom_model
    from schorg.MeetingRoom import MeetingRoom

    a = create_schema_org_model(type_=MeetingRoomInheritedProperties)
    b = create_schema_org_model(type_=MeetingRoomProperties)
    c = create_schema_org_model(type_=MeetingRoomAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MeetingRoom.schema()
    create_meetingroom_model(MeetingRoomAllProperties).schema()
    create_meetingroom_model(MeetingRoomInheritedProperties).schema()
    create_meetingroom_model(MeetingRoomProperties).schema()


def UKNonprofitType_test():
    from schorg.UKNonprofitType import UKNonprofitTypeInheritedProperties
    from schorg.UKNonprofitType import UKNonprofitTypeProperties
    from schorg.UKNonprofitType import UKNonprofitTypeAllProperties
    from schorg.UKNonprofitType import create_schema_org_model
    from schorg.UKNonprofitType import create_uknonprofittype_model
    from schorg.UKNonprofitType import UKNonprofitType

    a = create_schema_org_model(type_=UKNonprofitTypeInheritedProperties)
    b = create_schema_org_model(type_=UKNonprofitTypeProperties)
    c = create_schema_org_model(type_=UKNonprofitTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UKNonprofitType.schema()
    create_uknonprofittype_model(UKNonprofitTypeAllProperties).schema()
    create_uknonprofittype_model(UKNonprofitTypeInheritedProperties).schema()
    create_uknonprofittype_model(UKNonprofitTypeProperties).schema()


def Trip_test():
    from schorg.Trip import TripInheritedProperties
    from schorg.Trip import TripProperties
    from schorg.Trip import TripAllProperties
    from schorg.Trip import create_schema_org_model
    from schorg.Trip import create_trip_model
    from schorg.Trip import Trip

    a = create_schema_org_model(type_=TripInheritedProperties)
    b = create_schema_org_model(type_=TripProperties)
    c = create_schema_org_model(type_=TripAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Trip.schema()
    create_trip_model(TripAllProperties).schema()
    create_trip_model(TripInheritedProperties).schema()
    create_trip_model(TripProperties).schema()


def BoatTrip_test():
    from schorg.BoatTrip import BoatTripInheritedProperties
    from schorg.BoatTrip import BoatTripProperties
    from schorg.BoatTrip import BoatTripAllProperties
    from schorg.BoatTrip import create_schema_org_model
    from schorg.BoatTrip import create_boattrip_model
    from schorg.BoatTrip import BoatTrip

    a = create_schema_org_model(type_=BoatTripInheritedProperties)
    b = create_schema_org_model(type_=BoatTripProperties)
    c = create_schema_org_model(type_=BoatTripAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BoatTrip.schema()
    create_boattrip_model(BoatTripAllProperties).schema()
    create_boattrip_model(BoatTripInheritedProperties).schema()
    create_boattrip_model(BoatTripProperties).schema()


def EmployeeRole_test():
    from schorg.EmployeeRole import EmployeeRoleInheritedProperties
    from schorg.EmployeeRole import EmployeeRoleProperties
    from schorg.EmployeeRole import EmployeeRoleAllProperties
    from schorg.EmployeeRole import create_schema_org_model
    from schorg.EmployeeRole import create_employeerole_model
    from schorg.EmployeeRole import EmployeeRole

    a = create_schema_org_model(type_=EmployeeRoleInheritedProperties)
    b = create_schema_org_model(type_=EmployeeRoleProperties)
    c = create_schema_org_model(type_=EmployeeRoleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmployeeRole.schema()
    create_employeerole_model(EmployeeRoleAllProperties).schema()
    create_employeerole_model(EmployeeRoleInheritedProperties).schema()
    create_employeerole_model(EmployeeRoleProperties).schema()


def BookStore_test():
    from schorg.BookStore import BookStoreInheritedProperties
    from schorg.BookStore import BookStoreProperties
    from schorg.BookStore import BookStoreAllProperties
    from schorg.BookStore import create_schema_org_model
    from schorg.BookStore import create_bookstore_model
    from schorg.BookStore import BookStore

    a = create_schema_org_model(type_=BookStoreInheritedProperties)
    b = create_schema_org_model(type_=BookStoreProperties)
    c = create_schema_org_model(type_=BookStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BookStore.schema()
    create_bookstore_model(BookStoreAllProperties).schema()
    create_bookstore_model(BookStoreInheritedProperties).schema()
    create_bookstore_model(BookStoreProperties).schema()


def Gastroenterologic_test():
    from schorg.Gastroenterologic import GastroenterologicInheritedProperties
    from schorg.Gastroenterologic import GastroenterologicProperties
    from schorg.Gastroenterologic import GastroenterologicAllProperties
    from schorg.Gastroenterologic import create_schema_org_model
    from schorg.Gastroenterologic import create_gastroenterologic_model
    from schorg.Gastroenterologic import Gastroenterologic

    a = create_schema_org_model(type_=GastroenterologicInheritedProperties)
    b = create_schema_org_model(type_=GastroenterologicProperties)
    c = create_schema_org_model(type_=GastroenterologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Gastroenterologic.schema()
    create_gastroenterologic_model(GastroenterologicAllProperties).schema()
    create_gastroenterologic_model(GastroenterologicInheritedProperties).schema()
    create_gastroenterologic_model(GastroenterologicProperties).schema()


def UpdateAction_test():
    from schorg.UpdateAction import UpdateActionInheritedProperties
    from schorg.UpdateAction import UpdateActionProperties
    from schorg.UpdateAction import UpdateActionAllProperties
    from schorg.UpdateAction import create_schema_org_model
    from schorg.UpdateAction import create_updateaction_model
    from schorg.UpdateAction import UpdateAction

    a = create_schema_org_model(type_=UpdateActionInheritedProperties)
    b = create_schema_org_model(type_=UpdateActionProperties)
    c = create_schema_org_model(type_=UpdateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UpdateAction.schema()
    create_updateaction_model(UpdateActionAllProperties).schema()
    create_updateaction_model(UpdateActionInheritedProperties).schema()
    create_updateaction_model(UpdateActionProperties).schema()


def SoftwareApplication_test():
    from schorg.SoftwareApplication import SoftwareApplicationInheritedProperties
    from schorg.SoftwareApplication import SoftwareApplicationProperties
    from schorg.SoftwareApplication import SoftwareApplicationAllProperties
    from schorg.SoftwareApplication import create_schema_org_model
    from schorg.SoftwareApplication import create_softwareapplication_model
    from schorg.SoftwareApplication import SoftwareApplication

    a = create_schema_org_model(type_=SoftwareApplicationInheritedProperties)
    b = create_schema_org_model(type_=SoftwareApplicationProperties)
    c = create_schema_org_model(type_=SoftwareApplicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SoftwareApplication.schema()
    create_softwareapplication_model(SoftwareApplicationAllProperties).schema()
    create_softwareapplication_model(SoftwareApplicationInheritedProperties).schema()
    create_softwareapplication_model(SoftwareApplicationProperties).schema()


def MobileApplication_test():
    from schorg.MobileApplication import MobileApplicationInheritedProperties
    from schorg.MobileApplication import MobileApplicationProperties
    from schorg.MobileApplication import MobileApplicationAllProperties
    from schorg.MobileApplication import create_schema_org_model
    from schorg.MobileApplication import create_mobileapplication_model
    from schorg.MobileApplication import MobileApplication

    a = create_schema_org_model(type_=MobileApplicationInheritedProperties)
    b = create_schema_org_model(type_=MobileApplicationProperties)
    c = create_schema_org_model(type_=MobileApplicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MobileApplication.schema()
    create_mobileapplication_model(MobileApplicationAllProperties).schema()
    create_mobileapplication_model(MobileApplicationInheritedProperties).schema()
    create_mobileapplication_model(MobileApplicationProperties).schema()


def DiagnosticProcedure_test():
    from schorg.DiagnosticProcedure import DiagnosticProcedureInheritedProperties
    from schorg.DiagnosticProcedure import DiagnosticProcedureProperties
    from schorg.DiagnosticProcedure import DiagnosticProcedureAllProperties
    from schorg.DiagnosticProcedure import create_schema_org_model
    from schorg.DiagnosticProcedure import create_diagnosticprocedure_model
    from schorg.DiagnosticProcedure import DiagnosticProcedure

    a = create_schema_org_model(type_=DiagnosticProcedureInheritedProperties)
    b = create_schema_org_model(type_=DiagnosticProcedureProperties)
    c = create_schema_org_model(type_=DiagnosticProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DiagnosticProcedure.schema()
    create_diagnosticprocedure_model(DiagnosticProcedureAllProperties).schema()
    create_diagnosticprocedure_model(DiagnosticProcedureInheritedProperties).schema()
    create_diagnosticprocedure_model(DiagnosticProcedureProperties).schema()


def LegalService_test():
    from schorg.LegalService import LegalServiceInheritedProperties
    from schorg.LegalService import LegalServiceProperties
    from schorg.LegalService import LegalServiceAllProperties
    from schorg.LegalService import create_schema_org_model
    from schorg.LegalService import create_legalservice_model
    from schorg.LegalService import LegalService

    a = create_schema_org_model(type_=LegalServiceInheritedProperties)
    b = create_schema_org_model(type_=LegalServiceProperties)
    c = create_schema_org_model(type_=LegalServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LegalService.schema()
    create_legalservice_model(LegalServiceAllProperties).schema()
    create_legalservice_model(LegalServiceInheritedProperties).schema()
    create_legalservice_model(LegalServiceProperties).schema()


def Attorney_test():
    from schorg.Attorney import AttorneyInheritedProperties
    from schorg.Attorney import AttorneyProperties
    from schorg.Attorney import AttorneyAllProperties
    from schorg.Attorney import create_schema_org_model
    from schorg.Attorney import create_attorney_model
    from schorg.Attorney import Attorney

    a = create_schema_org_model(type_=AttorneyInheritedProperties)
    b = create_schema_org_model(type_=AttorneyProperties)
    c = create_schema_org_model(type_=AttorneyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Attorney.schema()
    create_attorney_model(AttorneyAllProperties).schema()
    create_attorney_model(AttorneyInheritedProperties).schema()
    create_attorney_model(AttorneyProperties).schema()


def EUEnergyEfficiencyCategoryA_test():
    from schorg.EUEnergyEfficiencyCategoryA import (
        EUEnergyEfficiencyCategoryAInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA import EUEnergyEfficiencyCategoryAProperties
    from schorg.EUEnergyEfficiencyCategoryA import (
        EUEnergyEfficiencyCategoryAAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryA import (
        create_euenergyefficiencycategorya_model,
    )
    from schorg.EUEnergyEfficiencyCategoryA import EUEnergyEfficiencyCategoryA

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryAInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryAProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryAAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryA.schema()
    create_euenergyefficiencycategorya_model(
        EUEnergyEfficiencyCategoryAAllProperties
    ).schema()
    create_euenergyefficiencycategorya_model(
        EUEnergyEfficiencyCategoryAInheritedProperties
    ).schema()
    create_euenergyefficiencycategorya_model(
        EUEnergyEfficiencyCategoryAProperties
    ).schema()


def BloodTest_test():
    from schorg.BloodTest import BloodTestInheritedProperties
    from schorg.BloodTest import BloodTestProperties
    from schorg.BloodTest import BloodTestAllProperties
    from schorg.BloodTest import create_schema_org_model
    from schorg.BloodTest import create_bloodtest_model
    from schorg.BloodTest import BloodTest

    a = create_schema_org_model(type_=BloodTestInheritedProperties)
    b = create_schema_org_model(type_=BloodTestProperties)
    c = create_schema_org_model(type_=BloodTestAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BloodTest.schema()
    create_bloodtest_model(BloodTestAllProperties).schema()
    create_bloodtest_model(BloodTestInheritedProperties).schema()
    create_bloodtest_model(BloodTestProperties).schema()


def RadioStation_test():
    from schorg.RadioStation import RadioStationInheritedProperties
    from schorg.RadioStation import RadioStationProperties
    from schorg.RadioStation import RadioStationAllProperties
    from schorg.RadioStation import create_schema_org_model
    from schorg.RadioStation import create_radiostation_model
    from schorg.RadioStation import RadioStation

    a = create_schema_org_model(type_=RadioStationInheritedProperties)
    b = create_schema_org_model(type_=RadioStationProperties)
    c = create_schema_org_model(type_=RadioStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioStation.schema()
    create_radiostation_model(RadioStationAllProperties).schema()
    create_radiostation_model(RadioStationInheritedProperties).schema()
    create_radiostation_model(RadioStationProperties).schema()


def ComputerStore_test():
    from schorg.ComputerStore import ComputerStoreInheritedProperties
    from schorg.ComputerStore import ComputerStoreProperties
    from schorg.ComputerStore import ComputerStoreAllProperties
    from schorg.ComputerStore import create_schema_org_model
    from schorg.ComputerStore import create_computerstore_model
    from schorg.ComputerStore import ComputerStore

    a = create_schema_org_model(type_=ComputerStoreInheritedProperties)
    b = create_schema_org_model(type_=ComputerStoreProperties)
    c = create_schema_org_model(type_=ComputerStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComputerStore.schema()
    create_computerstore_model(ComputerStoreAllProperties).schema()
    create_computerstore_model(ComputerStoreInheritedProperties).schema()
    create_computerstore_model(ComputerStoreProperties).schema()


def RentalCarReservation_test():
    from schorg.RentalCarReservation import RentalCarReservationInheritedProperties
    from schorg.RentalCarReservation import RentalCarReservationProperties
    from schorg.RentalCarReservation import RentalCarReservationAllProperties
    from schorg.RentalCarReservation import create_schema_org_model
    from schorg.RentalCarReservation import create_rentalcarreservation_model
    from schorg.RentalCarReservation import RentalCarReservation

    a = create_schema_org_model(type_=RentalCarReservationInheritedProperties)
    b = create_schema_org_model(type_=RentalCarReservationProperties)
    c = create_schema_org_model(type_=RentalCarReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RentalCarReservation.schema()
    create_rentalcarreservation_model(RentalCarReservationAllProperties).schema()
    create_rentalcarreservation_model(RentalCarReservationInheritedProperties).schema()
    create_rentalcarreservation_model(RentalCarReservationProperties).schema()


def ItemList_test():
    from schorg.ItemList import ItemListInheritedProperties
    from schorg.ItemList import ItemListProperties
    from schorg.ItemList import ItemListAllProperties
    from schorg.ItemList import create_schema_org_model
    from schorg.ItemList import create_itemlist_model
    from schorg.ItemList import ItemList

    a = create_schema_org_model(type_=ItemListInheritedProperties)
    b = create_schema_org_model(type_=ItemListProperties)
    c = create_schema_org_model(type_=ItemListAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemList.schema()
    create_itemlist_model(ItemListAllProperties).schema()
    create_itemlist_model(ItemListInheritedProperties).schema()
    create_itemlist_model(ItemListProperties).schema()


def CausesHealthAspect_test():
    from schorg.CausesHealthAspect import CausesHealthAspectInheritedProperties
    from schorg.CausesHealthAspect import CausesHealthAspectProperties
    from schorg.CausesHealthAspect import CausesHealthAspectAllProperties
    from schorg.CausesHealthAspect import create_schema_org_model
    from schorg.CausesHealthAspect import create_causeshealthaspect_model
    from schorg.CausesHealthAspect import CausesHealthAspect

    a = create_schema_org_model(type_=CausesHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=CausesHealthAspectProperties)
    c = create_schema_org_model(type_=CausesHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CausesHealthAspect.schema()
    create_causeshealthaspect_model(CausesHealthAspectAllProperties).schema()
    create_causeshealthaspect_model(CausesHealthAspectInheritedProperties).schema()
    create_causeshealthaspect_model(CausesHealthAspectProperties).schema()


def RestrictedDiet_test():
    from schorg.RestrictedDiet import RestrictedDietInheritedProperties
    from schorg.RestrictedDiet import RestrictedDietProperties
    from schorg.RestrictedDiet import RestrictedDietAllProperties
    from schorg.RestrictedDiet import create_schema_org_model
    from schorg.RestrictedDiet import create_restricteddiet_model
    from schorg.RestrictedDiet import RestrictedDiet

    a = create_schema_org_model(type_=RestrictedDietInheritedProperties)
    b = create_schema_org_model(type_=RestrictedDietProperties)
    c = create_schema_org_model(type_=RestrictedDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RestrictedDiet.schema()
    create_restricteddiet_model(RestrictedDietAllProperties).schema()
    create_restricteddiet_model(RestrictedDietInheritedProperties).schema()
    create_restricteddiet_model(RestrictedDietProperties).schema()


def VegetarianDiet_test():
    from schorg.VegetarianDiet import VegetarianDietInheritedProperties
    from schorg.VegetarianDiet import VegetarianDietProperties
    from schorg.VegetarianDiet import VegetarianDietAllProperties
    from schorg.VegetarianDiet import create_schema_org_model
    from schorg.VegetarianDiet import create_vegetariandiet_model
    from schorg.VegetarianDiet import VegetarianDiet

    a = create_schema_org_model(type_=VegetarianDietInheritedProperties)
    b = create_schema_org_model(type_=VegetarianDietProperties)
    c = create_schema_org_model(type_=VegetarianDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VegetarianDiet.schema()
    create_vegetariandiet_model(VegetarianDietAllProperties).schema()
    create_vegetariandiet_model(VegetarianDietInheritedProperties).schema()
    create_vegetariandiet_model(VegetarianDietProperties).schema()


def MerchantReturnPolicySeasonalOverride_test():
    from schorg.MerchantReturnPolicySeasonalOverride import (
        MerchantReturnPolicySeasonalOverrideInheritedProperties,
    )
    from schorg.MerchantReturnPolicySeasonalOverride import (
        MerchantReturnPolicySeasonalOverrideProperties,
    )
    from schorg.MerchantReturnPolicySeasonalOverride import (
        MerchantReturnPolicySeasonalOverrideAllProperties,
    )
    from schorg.MerchantReturnPolicySeasonalOverride import create_schema_org_model
    from schorg.MerchantReturnPolicySeasonalOverride import (
        create_merchantreturnpolicyseasonaloverride_model,
    )
    from schorg.MerchantReturnPolicySeasonalOverride import (
        MerchantReturnPolicySeasonalOverride,
    )

    a = create_schema_org_model(
        type_=MerchantReturnPolicySeasonalOverrideInheritedProperties
    )
    b = create_schema_org_model(type_=MerchantReturnPolicySeasonalOverrideProperties)
    c = create_schema_org_model(type_=MerchantReturnPolicySeasonalOverrideAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnPolicySeasonalOverride.schema()
    create_merchantreturnpolicyseasonaloverride_model(
        MerchantReturnPolicySeasonalOverrideAllProperties
    ).schema()
    create_merchantreturnpolicyseasonaloverride_model(
        MerchantReturnPolicySeasonalOverrideInheritedProperties
    ).schema()
    create_merchantreturnpolicyseasonaloverride_model(
        MerchantReturnPolicySeasonalOverrideProperties
    ).schema()


def RearWheelDriveConfiguration_test():
    from schorg.RearWheelDriveConfiguration import (
        RearWheelDriveConfigurationInheritedProperties,
    )
    from schorg.RearWheelDriveConfiguration import RearWheelDriveConfigurationProperties
    from schorg.RearWheelDriveConfiguration import (
        RearWheelDriveConfigurationAllProperties,
    )
    from schorg.RearWheelDriveConfiguration import create_schema_org_model
    from schorg.RearWheelDriveConfiguration import (
        create_rearwheeldriveconfiguration_model,
    )
    from schorg.RearWheelDriveConfiguration import RearWheelDriveConfiguration

    a = create_schema_org_model(type_=RearWheelDriveConfigurationInheritedProperties)
    b = create_schema_org_model(type_=RearWheelDriveConfigurationProperties)
    c = create_schema_org_model(type_=RearWheelDriveConfigurationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RearWheelDriveConfiguration.schema()
    create_rearwheeldriveconfiguration_model(
        RearWheelDriveConfigurationAllProperties
    ).schema()
    create_rearwheeldriveconfiguration_model(
        RearWheelDriveConfigurationInheritedProperties
    ).schema()
    create_rearwheeldriveconfiguration_model(
        RearWheelDriveConfigurationProperties
    ).schema()


def ContactPointOption_test():
    from schorg.ContactPointOption import ContactPointOptionInheritedProperties
    from schorg.ContactPointOption import ContactPointOptionProperties
    from schorg.ContactPointOption import ContactPointOptionAllProperties
    from schorg.ContactPointOption import create_schema_org_model
    from schorg.ContactPointOption import create_contactpointoption_model
    from schorg.ContactPointOption import ContactPointOption

    a = create_schema_org_model(type_=ContactPointOptionInheritedProperties)
    b = create_schema_org_model(type_=ContactPointOptionProperties)
    c = create_schema_org_model(type_=ContactPointOptionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ContactPointOption.schema()
    create_contactpointoption_model(ContactPointOptionAllProperties).schema()
    create_contactpointoption_model(ContactPointOptionInheritedProperties).schema()
    create_contactpointoption_model(ContactPointOptionProperties).schema()


def IgnoreAction_test():
    from schorg.IgnoreAction import IgnoreActionInheritedProperties
    from schorg.IgnoreAction import IgnoreActionProperties
    from schorg.IgnoreAction import IgnoreActionAllProperties
    from schorg.IgnoreAction import create_schema_org_model
    from schorg.IgnoreAction import create_ignoreaction_model
    from schorg.IgnoreAction import IgnoreAction

    a = create_schema_org_model(type_=IgnoreActionInheritedProperties)
    b = create_schema_org_model(type_=IgnoreActionProperties)
    c = create_schema_org_model(type_=IgnoreActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    IgnoreAction.schema()
    create_ignoreaction_model(IgnoreActionAllProperties).schema()
    create_ignoreaction_model(IgnoreActionInheritedProperties).schema()
    create_ignoreaction_model(IgnoreActionProperties).schema()


def UserCheckins_test():
    from schorg.UserCheckins import UserCheckinsInheritedProperties
    from schorg.UserCheckins import UserCheckinsProperties
    from schorg.UserCheckins import UserCheckinsAllProperties
    from schorg.UserCheckins import create_schema_org_model
    from schorg.UserCheckins import create_usercheckins_model
    from schorg.UserCheckins import UserCheckins

    a = create_schema_org_model(type_=UserCheckinsInheritedProperties)
    b = create_schema_org_model(type_=UserCheckinsProperties)
    c = create_schema_org_model(type_=UserCheckinsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserCheckins.schema()
    create_usercheckins_model(UserCheckinsAllProperties).schema()
    create_usercheckins_model(UserCheckinsInheritedProperties).schema()
    create_usercheckins_model(UserCheckinsProperties).schema()


def MoveAction_test():
    from schorg.MoveAction import MoveActionInheritedProperties
    from schorg.MoveAction import MoveActionProperties
    from schorg.MoveAction import MoveActionAllProperties
    from schorg.MoveAction import create_schema_org_model
    from schorg.MoveAction import create_moveaction_model
    from schorg.MoveAction import MoveAction

    a = create_schema_org_model(type_=MoveActionInheritedProperties)
    b = create_schema_org_model(type_=MoveActionProperties)
    c = create_schema_org_model(type_=MoveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MoveAction.schema()
    create_moveaction_model(MoveActionAllProperties).schema()
    create_moveaction_model(MoveActionInheritedProperties).schema()
    create_moveaction_model(MoveActionProperties).schema()


def ArriveAction_test():
    from schorg.ArriveAction import ArriveActionInheritedProperties
    from schorg.ArriveAction import ArriveActionProperties
    from schorg.ArriveAction import ArriveActionAllProperties
    from schorg.ArriveAction import create_schema_org_model
    from schorg.ArriveAction import create_arriveaction_model
    from schorg.ArriveAction import ArriveAction

    a = create_schema_org_model(type_=ArriveActionInheritedProperties)
    b = create_schema_org_model(type_=ArriveActionProperties)
    c = create_schema_org_model(type_=ArriveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ArriveAction.schema()
    create_arriveaction_model(ArriveActionAllProperties).schema()
    create_arriveaction_model(ArriveActionInheritedProperties).schema()
    create_arriveaction_model(ArriveActionProperties).schema()


def RecyclingCenter_test():
    from schorg.RecyclingCenter import RecyclingCenterInheritedProperties
    from schorg.RecyclingCenter import RecyclingCenterProperties
    from schorg.RecyclingCenter import RecyclingCenterAllProperties
    from schorg.RecyclingCenter import create_schema_org_model
    from schorg.RecyclingCenter import create_recyclingcenter_model
    from schorg.RecyclingCenter import RecyclingCenter

    a = create_schema_org_model(type_=RecyclingCenterInheritedProperties)
    b = create_schema_org_model(type_=RecyclingCenterProperties)
    c = create_schema_org_model(type_=RecyclingCenterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RecyclingCenter.schema()
    create_recyclingcenter_model(RecyclingCenterAllProperties).schema()
    create_recyclingcenter_model(RecyclingCenterInheritedProperties).schema()
    create_recyclingcenter_model(RecyclingCenterProperties).schema()


def HomeAndConstructionBusiness_test():
    from schorg.HomeAndConstructionBusiness import (
        HomeAndConstructionBusinessInheritedProperties,
    )
    from schorg.HomeAndConstructionBusiness import HomeAndConstructionBusinessProperties
    from schorg.HomeAndConstructionBusiness import (
        HomeAndConstructionBusinessAllProperties,
    )
    from schorg.HomeAndConstructionBusiness import create_schema_org_model
    from schorg.HomeAndConstructionBusiness import (
        create_homeandconstructionbusiness_model,
    )
    from schorg.HomeAndConstructionBusiness import HomeAndConstructionBusiness

    a = create_schema_org_model(type_=HomeAndConstructionBusinessInheritedProperties)
    b = create_schema_org_model(type_=HomeAndConstructionBusinessProperties)
    c = create_schema_org_model(type_=HomeAndConstructionBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HomeAndConstructionBusiness.schema()
    create_homeandconstructionbusiness_model(
        HomeAndConstructionBusinessAllProperties
    ).schema()
    create_homeandconstructionbusiness_model(
        HomeAndConstructionBusinessInheritedProperties
    ).schema()
    create_homeandconstructionbusiness_model(
        HomeAndConstructionBusinessProperties
    ).schema()


def RoofingContractor_test():
    from schorg.RoofingContractor import RoofingContractorInheritedProperties
    from schorg.RoofingContractor import RoofingContractorProperties
    from schorg.RoofingContractor import RoofingContractorAllProperties
    from schorg.RoofingContractor import create_schema_org_model
    from schorg.RoofingContractor import create_roofingcontractor_model
    from schorg.RoofingContractor import RoofingContractor

    a = create_schema_org_model(type_=RoofingContractorInheritedProperties)
    b = create_schema_org_model(type_=RoofingContractorProperties)
    c = create_schema_org_model(type_=RoofingContractorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RoofingContractor.schema()
    create_roofingcontractor_model(RoofingContractorAllProperties).schema()
    create_roofingcontractor_model(RoofingContractorInheritedProperties).schema()
    create_roofingcontractor_model(RoofingContractorProperties).schema()


def WearableMeasurementLength_test():
    from schorg.WearableMeasurementLength import (
        WearableMeasurementLengthInheritedProperties,
    )
    from schorg.WearableMeasurementLength import WearableMeasurementLengthProperties
    from schorg.WearableMeasurementLength import WearableMeasurementLengthAllProperties
    from schorg.WearableMeasurementLength import create_schema_org_model
    from schorg.WearableMeasurementLength import create_wearablemeasurementlength_model
    from schorg.WearableMeasurementLength import WearableMeasurementLength

    a = create_schema_org_model(type_=WearableMeasurementLengthInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementLengthProperties)
    c = create_schema_org_model(type_=WearableMeasurementLengthAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementLength.schema()
    create_wearablemeasurementlength_model(
        WearableMeasurementLengthAllProperties
    ).schema()
    create_wearablemeasurementlength_model(
        WearableMeasurementLengthInheritedProperties
    ).schema()
    create_wearablemeasurementlength_model(WearableMeasurementLengthProperties).schema()


def ReservationConfirmed_test():
    from schorg.ReservationConfirmed import ReservationConfirmedInheritedProperties
    from schorg.ReservationConfirmed import ReservationConfirmedProperties
    from schorg.ReservationConfirmed import ReservationConfirmedAllProperties
    from schorg.ReservationConfirmed import create_schema_org_model
    from schorg.ReservationConfirmed import create_reservationconfirmed_model
    from schorg.ReservationConfirmed import ReservationConfirmed

    a = create_schema_org_model(type_=ReservationConfirmedInheritedProperties)
    b = create_schema_org_model(type_=ReservationConfirmedProperties)
    c = create_schema_org_model(type_=ReservationConfirmedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationConfirmed.schema()
    create_reservationconfirmed_model(ReservationConfirmedAllProperties).schema()
    create_reservationconfirmed_model(ReservationConfirmedInheritedProperties).schema()
    create_reservationconfirmed_model(ReservationConfirmedProperties).schema()


def EUEnergyEfficiencyCategoryC_test():
    from schorg.EUEnergyEfficiencyCategoryC import (
        EUEnergyEfficiencyCategoryCInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryC import EUEnergyEfficiencyCategoryCProperties
    from schorg.EUEnergyEfficiencyCategoryC import (
        EUEnergyEfficiencyCategoryCAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryC import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryC import (
        create_euenergyefficiencycategoryc_model,
    )
    from schorg.EUEnergyEfficiencyCategoryC import EUEnergyEfficiencyCategoryC

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryCInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryCProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryCAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryC.schema()
    create_euenergyefficiencycategoryc_model(
        EUEnergyEfficiencyCategoryCAllProperties
    ).schema()
    create_euenergyefficiencycategoryc_model(
        EUEnergyEfficiencyCategoryCInheritedProperties
    ).schema()
    create_euenergyefficiencycategoryc_model(
        EUEnergyEfficiencyCategoryCProperties
    ).schema()


def GeoCoordinates_test():
    from schorg.GeoCoordinates import GeoCoordinatesInheritedProperties
    from schorg.GeoCoordinates import GeoCoordinatesProperties
    from schorg.GeoCoordinates import GeoCoordinatesAllProperties
    from schorg.GeoCoordinates import create_schema_org_model
    from schorg.GeoCoordinates import create_geocoordinates_model
    from schorg.GeoCoordinates import GeoCoordinates

    a = create_schema_org_model(type_=GeoCoordinatesInheritedProperties)
    b = create_schema_org_model(type_=GeoCoordinatesProperties)
    c = create_schema_org_model(type_=GeoCoordinatesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GeoCoordinates.schema()
    create_geocoordinates_model(GeoCoordinatesAllProperties).schema()
    create_geocoordinates_model(GeoCoordinatesInheritedProperties).schema()
    create_geocoordinates_model(GeoCoordinatesProperties).schema()


def PriceTypeEnumeration_test():
    from schorg.PriceTypeEnumeration import PriceTypeEnumerationInheritedProperties
    from schorg.PriceTypeEnumeration import PriceTypeEnumerationProperties
    from schorg.PriceTypeEnumeration import PriceTypeEnumerationAllProperties
    from schorg.PriceTypeEnumeration import create_schema_org_model
    from schorg.PriceTypeEnumeration import create_pricetypeenumeration_model
    from schorg.PriceTypeEnumeration import PriceTypeEnumeration

    a = create_schema_org_model(type_=PriceTypeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=PriceTypeEnumerationProperties)
    c = create_schema_org_model(type_=PriceTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PriceTypeEnumeration.schema()
    create_pricetypeenumeration_model(PriceTypeEnumerationAllProperties).schema()
    create_pricetypeenumeration_model(PriceTypeEnumerationInheritedProperties).schema()
    create_pricetypeenumeration_model(PriceTypeEnumerationProperties).schema()


def SRP_test():
    from schorg.SRP import SRPInheritedProperties
    from schorg.SRP import SRPProperties
    from schorg.SRP import SRPAllProperties
    from schorg.SRP import create_schema_org_model
    from schorg.SRP import create_srp_model
    from schorg.SRP import SRP

    a = create_schema_org_model(type_=SRPInheritedProperties)
    b = create_schema_org_model(type_=SRPProperties)
    c = create_schema_org_model(type_=SRPAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SRP.schema()
    create_srp_model(SRPAllProperties).schema()
    create_srp_model(SRPInheritedProperties).schema()
    create_srp_model(SRPProperties).schema()


def TaxiStand_test():
    from schorg.TaxiStand import TaxiStandInheritedProperties
    from schorg.TaxiStand import TaxiStandProperties
    from schorg.TaxiStand import TaxiStandAllProperties
    from schorg.TaxiStand import create_schema_org_model
    from schorg.TaxiStand import create_taxistand_model
    from schorg.TaxiStand import TaxiStand

    a = create_schema_org_model(type_=TaxiStandInheritedProperties)
    b = create_schema_org_model(type_=TaxiStandProperties)
    c = create_schema_org_model(type_=TaxiStandAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TaxiStand.schema()
    create_taxistand_model(TaxiStandAllProperties).schema()
    create_taxistand_model(TaxiStandInheritedProperties).schema()
    create_taxistand_model(TaxiStandProperties).schema()


def Nonprofit501c2_test():
    from schorg.Nonprofit501c2 import Nonprofit501c2InheritedProperties
    from schorg.Nonprofit501c2 import Nonprofit501c2Properties
    from schorg.Nonprofit501c2 import Nonprofit501c2AllProperties
    from schorg.Nonprofit501c2 import create_schema_org_model
    from schorg.Nonprofit501c2 import create_nonprofit501c2_model
    from schorg.Nonprofit501c2 import Nonprofit501c2

    a = create_schema_org_model(type_=Nonprofit501c2InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c2Properties)
    c = create_schema_org_model(type_=Nonprofit501c2AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c2.schema()
    create_nonprofit501c2_model(Nonprofit501c2AllProperties).schema()
    create_nonprofit501c2_model(Nonprofit501c2InheritedProperties).schema()
    create_nonprofit501c2_model(Nonprofit501c2Properties).schema()


def ClothingStore_test():
    from schorg.ClothingStore import ClothingStoreInheritedProperties
    from schorg.ClothingStore import ClothingStoreProperties
    from schorg.ClothingStore import ClothingStoreAllProperties
    from schorg.ClothingStore import create_schema_org_model
    from schorg.ClothingStore import create_clothingstore_model
    from schorg.ClothingStore import ClothingStore

    a = create_schema_org_model(type_=ClothingStoreInheritedProperties)
    b = create_schema_org_model(type_=ClothingStoreProperties)
    c = create_schema_org_model(type_=ClothingStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ClothingStore.schema()
    create_clothingstore_model(ClothingStoreAllProperties).schema()
    create_clothingstore_model(ClothingStoreInheritedProperties).schema()
    create_clothingstore_model(ClothingStoreProperties).schema()


def VideoObject_test():
    from schorg.VideoObject import VideoObjectInheritedProperties
    from schorg.VideoObject import VideoObjectProperties
    from schorg.VideoObject import VideoObjectAllProperties
    from schorg.VideoObject import create_schema_org_model
    from schorg.VideoObject import create_videoobject_model
    from schorg.VideoObject import VideoObject

    a = create_schema_org_model(type_=VideoObjectInheritedProperties)
    b = create_schema_org_model(type_=VideoObjectProperties)
    c = create_schema_org_model(type_=VideoObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoObject.schema()
    create_videoobject_model(VideoObjectAllProperties).schema()
    create_videoobject_model(VideoObjectInheritedProperties).schema()
    create_videoobject_model(VideoObjectProperties).schema()


def VideoObjectSnapshot_test():
    from schorg.VideoObjectSnapshot import VideoObjectSnapshotInheritedProperties
    from schorg.VideoObjectSnapshot import VideoObjectSnapshotProperties
    from schorg.VideoObjectSnapshot import VideoObjectSnapshotAllProperties
    from schorg.VideoObjectSnapshot import create_schema_org_model
    from schorg.VideoObjectSnapshot import create_videoobjectsnapshot_model
    from schorg.VideoObjectSnapshot import VideoObjectSnapshot

    a = create_schema_org_model(type_=VideoObjectSnapshotInheritedProperties)
    b = create_schema_org_model(type_=VideoObjectSnapshotProperties)
    c = create_schema_org_model(type_=VideoObjectSnapshotAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoObjectSnapshot.schema()
    create_videoobjectsnapshot_model(VideoObjectSnapshotAllProperties).schema()
    create_videoobjectsnapshot_model(VideoObjectSnapshotInheritedProperties).schema()
    create_videoobjectsnapshot_model(VideoObjectSnapshotProperties).schema()


def OverviewHealthAspect_test():
    from schorg.OverviewHealthAspect import OverviewHealthAspectInheritedProperties
    from schorg.OverviewHealthAspect import OverviewHealthAspectProperties
    from schorg.OverviewHealthAspect import OverviewHealthAspectAllProperties
    from schorg.OverviewHealthAspect import create_schema_org_model
    from schorg.OverviewHealthAspect import create_overviewhealthaspect_model
    from schorg.OverviewHealthAspect import OverviewHealthAspect

    a = create_schema_org_model(type_=OverviewHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=OverviewHealthAspectProperties)
    c = create_schema_org_model(type_=OverviewHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OverviewHealthAspect.schema()
    create_overviewhealthaspect_model(OverviewHealthAspectAllProperties).schema()
    create_overviewhealthaspect_model(OverviewHealthAspectInheritedProperties).schema()
    create_overviewhealthaspect_model(OverviewHealthAspectProperties).schema()


def Guide_test():
    from schorg.Guide import GuideInheritedProperties
    from schorg.Guide import GuideProperties
    from schorg.Guide import GuideAllProperties
    from schorg.Guide import create_schema_org_model
    from schorg.Guide import create_guide_model
    from schorg.Guide import Guide

    a = create_schema_org_model(type_=GuideInheritedProperties)
    b = create_schema_org_model(type_=GuideProperties)
    c = create_schema_org_model(type_=GuideAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Guide.schema()
    create_guide_model(GuideAllProperties).schema()
    create_guide_model(GuideInheritedProperties).schema()
    create_guide_model(GuideProperties).schema()


def TransferAction_test():
    from schorg.TransferAction import TransferActionInheritedProperties
    from schorg.TransferAction import TransferActionProperties
    from schorg.TransferAction import TransferActionAllProperties
    from schorg.TransferAction import create_schema_org_model
    from schorg.TransferAction import create_transferaction_model
    from schorg.TransferAction import TransferAction

    a = create_schema_org_model(type_=TransferActionInheritedProperties)
    b = create_schema_org_model(type_=TransferActionProperties)
    c = create_schema_org_model(type_=TransferActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TransferAction.schema()
    create_transferaction_model(TransferActionAllProperties).schema()
    create_transferaction_model(TransferActionInheritedProperties).schema()
    create_transferaction_model(TransferActionProperties).schema()


def MoneyTransfer_test():
    from schorg.MoneyTransfer import MoneyTransferInheritedProperties
    from schorg.MoneyTransfer import MoneyTransferProperties
    from schorg.MoneyTransfer import MoneyTransferAllProperties
    from schorg.MoneyTransfer import create_schema_org_model
    from schorg.MoneyTransfer import create_moneytransfer_model
    from schorg.MoneyTransfer import MoneyTransfer

    a = create_schema_org_model(type_=MoneyTransferInheritedProperties)
    b = create_schema_org_model(type_=MoneyTransferProperties)
    c = create_schema_org_model(type_=MoneyTransferAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MoneyTransfer.schema()
    create_moneytransfer_model(MoneyTransferAllProperties).schema()
    create_moneytransfer_model(MoneyTransferInheritedProperties).schema()
    create_moneytransfer_model(MoneyTransferProperties).schema()


def Festival_test():
    from schorg.Festival import FestivalInheritedProperties
    from schorg.Festival import FestivalProperties
    from schorg.Festival import FestivalAllProperties
    from schorg.Festival import create_schema_org_model
    from schorg.Festival import create_festival_model
    from schorg.Festival import Festival

    a = create_schema_org_model(type_=FestivalInheritedProperties)
    b = create_schema_org_model(type_=FestivalProperties)
    c = create_schema_org_model(type_=FestivalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Festival.schema()
    create_festival_model(FestivalAllProperties).schema()
    create_festival_model(FestivalInheritedProperties).schema()
    create_festival_model(FestivalProperties).schema()


def Endocrine_test():
    from schorg.Endocrine import EndocrineInheritedProperties
    from schorg.Endocrine import EndocrineProperties
    from schorg.Endocrine import EndocrineAllProperties
    from schorg.Endocrine import create_schema_org_model
    from schorg.Endocrine import create_endocrine_model
    from schorg.Endocrine import Endocrine

    a = create_schema_org_model(type_=EndocrineInheritedProperties)
    b = create_schema_org_model(type_=EndocrineProperties)
    c = create_schema_org_model(type_=EndocrineAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Endocrine.schema()
    create_endocrine_model(EndocrineAllProperties).schema()
    create_endocrine_model(EndocrineInheritedProperties).schema()
    create_endocrine_model(EndocrineProperties).schema()


def WearableMeasurementOutsideLeg_test():
    from schorg.WearableMeasurementOutsideLeg import (
        WearableMeasurementOutsideLegInheritedProperties,
    )
    from schorg.WearableMeasurementOutsideLeg import (
        WearableMeasurementOutsideLegProperties,
    )
    from schorg.WearableMeasurementOutsideLeg import (
        WearableMeasurementOutsideLegAllProperties,
    )
    from schorg.WearableMeasurementOutsideLeg import create_schema_org_model
    from schorg.WearableMeasurementOutsideLeg import (
        create_wearablemeasurementoutsideleg_model,
    )
    from schorg.WearableMeasurementOutsideLeg import WearableMeasurementOutsideLeg

    a = create_schema_org_model(type_=WearableMeasurementOutsideLegInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementOutsideLegProperties)
    c = create_schema_org_model(type_=WearableMeasurementOutsideLegAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementOutsideLeg.schema()
    create_wearablemeasurementoutsideleg_model(
        WearableMeasurementOutsideLegAllProperties
    ).schema()
    create_wearablemeasurementoutsideleg_model(
        WearableMeasurementOutsideLegInheritedProperties
    ).schema()
    create_wearablemeasurementoutsideleg_model(
        WearableMeasurementOutsideLegProperties
    ).schema()


def MusicAlbum_test():
    from schorg.MusicAlbum import MusicAlbumInheritedProperties
    from schorg.MusicAlbum import MusicAlbumProperties
    from schorg.MusicAlbum import MusicAlbumAllProperties
    from schorg.MusicAlbum import create_schema_org_model
    from schorg.MusicAlbum import create_musicalbum_model
    from schorg.MusicAlbum import MusicAlbum

    a = create_schema_org_model(type_=MusicAlbumInheritedProperties)
    b = create_schema_org_model(type_=MusicAlbumProperties)
    c = create_schema_org_model(type_=MusicAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicAlbum.schema()
    create_musicalbum_model(MusicAlbumAllProperties).schema()
    create_musicalbum_model(MusicAlbumInheritedProperties).schema()
    create_musicalbum_model(MusicAlbumProperties).schema()


def Article_test():
    from schorg.Article import ArticleInheritedProperties
    from schorg.Article import ArticleProperties
    from schorg.Article import ArticleAllProperties
    from schorg.Article import create_schema_org_model
    from schorg.Article import create_article_model
    from schorg.Article import Article

    a = create_schema_org_model(type_=ArticleInheritedProperties)
    b = create_schema_org_model(type_=ArticleProperties)
    c = create_schema_org_model(type_=ArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Article.schema()
    create_article_model(ArticleAllProperties).schema()
    create_article_model(ArticleInheritedProperties).schema()
    create_article_model(ArticleProperties).schema()


def NewsArticle_test():
    from schorg.NewsArticle import NewsArticleInheritedProperties
    from schorg.NewsArticle import NewsArticleProperties
    from schorg.NewsArticle import NewsArticleAllProperties
    from schorg.NewsArticle import create_schema_org_model
    from schorg.NewsArticle import create_newsarticle_model
    from schorg.NewsArticle import NewsArticle

    a = create_schema_org_model(type_=NewsArticleInheritedProperties)
    b = create_schema_org_model(type_=NewsArticleProperties)
    c = create_schema_org_model(type_=NewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NewsArticle.schema()
    create_newsarticle_model(NewsArticleAllProperties).schema()
    create_newsarticle_model(NewsArticleInheritedProperties).schema()
    create_newsarticle_model(NewsArticleProperties).schema()


def AskPublicNewsArticle_test():
    from schorg.AskPublicNewsArticle import AskPublicNewsArticleInheritedProperties
    from schorg.AskPublicNewsArticle import AskPublicNewsArticleProperties
    from schorg.AskPublicNewsArticle import AskPublicNewsArticleAllProperties
    from schorg.AskPublicNewsArticle import create_schema_org_model
    from schorg.AskPublicNewsArticle import create_askpublicnewsarticle_model
    from schorg.AskPublicNewsArticle import AskPublicNewsArticle

    a = create_schema_org_model(type_=AskPublicNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=AskPublicNewsArticleProperties)
    c = create_schema_org_model(type_=AskPublicNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AskPublicNewsArticle.schema()
    create_askpublicnewsarticle_model(AskPublicNewsArticleAllProperties).schema()
    create_askpublicnewsarticle_model(AskPublicNewsArticleInheritedProperties).schema()
    create_askpublicnewsarticle_model(AskPublicNewsArticleProperties).schema()


def ServiceChannel_test():
    from schorg.ServiceChannel import ServiceChannelInheritedProperties
    from schorg.ServiceChannel import ServiceChannelProperties
    from schorg.ServiceChannel import ServiceChannelAllProperties
    from schorg.ServiceChannel import create_schema_org_model
    from schorg.ServiceChannel import create_servicechannel_model
    from schorg.ServiceChannel import ServiceChannel

    a = create_schema_org_model(type_=ServiceChannelInheritedProperties)
    b = create_schema_org_model(type_=ServiceChannelProperties)
    c = create_schema_org_model(type_=ServiceChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ServiceChannel.schema()
    create_servicechannel_model(ServiceChannelAllProperties).schema()
    create_servicechannel_model(ServiceChannelInheritedProperties).schema()
    create_servicechannel_model(ServiceChannelProperties).schema()


def Saturday_test():
    from schorg.Saturday import SaturdayInheritedProperties
    from schorg.Saturday import SaturdayProperties
    from schorg.Saturday import SaturdayAllProperties
    from schorg.Saturday import create_schema_org_model
    from schorg.Saturday import create_saturday_model
    from schorg.Saturday import Saturday

    a = create_schema_org_model(type_=SaturdayInheritedProperties)
    b = create_schema_org_model(type_=SaturdayProperties)
    c = create_schema_org_model(type_=SaturdayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Saturday.schema()
    create_saturday_model(SaturdayAllProperties).schema()
    create_saturday_model(SaturdayInheritedProperties).schema()
    create_saturday_model(SaturdayProperties).schema()


def OccupationalExperienceRequirements_test():
    from schorg.OccupationalExperienceRequirements import (
        OccupationalExperienceRequirementsInheritedProperties,
    )
    from schorg.OccupationalExperienceRequirements import (
        OccupationalExperienceRequirementsProperties,
    )
    from schorg.OccupationalExperienceRequirements import (
        OccupationalExperienceRequirementsAllProperties,
    )
    from schorg.OccupationalExperienceRequirements import create_schema_org_model
    from schorg.OccupationalExperienceRequirements import (
        create_occupationalexperiencerequirements_model,
    )
    from schorg.OccupationalExperienceRequirements import (
        OccupationalExperienceRequirements,
    )

    a = create_schema_org_model(
        type_=OccupationalExperienceRequirementsInheritedProperties
    )
    b = create_schema_org_model(type_=OccupationalExperienceRequirementsProperties)
    c = create_schema_org_model(type_=OccupationalExperienceRequirementsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OccupationalExperienceRequirements.schema()
    create_occupationalexperiencerequirements_model(
        OccupationalExperienceRequirementsAllProperties
    ).schema()
    create_occupationalexperiencerequirements_model(
        OccupationalExperienceRequirementsInheritedProperties
    ).schema()
    create_occupationalexperiencerequirements_model(
        OccupationalExperienceRequirementsProperties
    ).schema()


def HealthPlanNetwork_test():
    from schorg.HealthPlanNetwork import HealthPlanNetworkInheritedProperties
    from schorg.HealthPlanNetwork import HealthPlanNetworkProperties
    from schorg.HealthPlanNetwork import HealthPlanNetworkAllProperties
    from schorg.HealthPlanNetwork import create_schema_org_model
    from schorg.HealthPlanNetwork import create_healthplannetwork_model
    from schorg.HealthPlanNetwork import HealthPlanNetwork

    a = create_schema_org_model(type_=HealthPlanNetworkInheritedProperties)
    b = create_schema_org_model(type_=HealthPlanNetworkProperties)
    c = create_schema_org_model(type_=HealthPlanNetworkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthPlanNetwork.schema()
    create_healthplannetwork_model(HealthPlanNetworkAllProperties).schema()
    create_healthplannetwork_model(HealthPlanNetworkInheritedProperties).schema()
    create_healthplannetwork_model(HealthPlanNetworkProperties).schema()


def TouristTrip_test():
    from schorg.TouristTrip import TouristTripInheritedProperties
    from schorg.TouristTrip import TouristTripProperties
    from schorg.TouristTrip import TouristTripAllProperties
    from schorg.TouristTrip import create_schema_org_model
    from schorg.TouristTrip import create_touristtrip_model
    from schorg.TouristTrip import TouristTrip

    a = create_schema_org_model(type_=TouristTripInheritedProperties)
    b = create_schema_org_model(type_=TouristTripProperties)
    c = create_schema_org_model(type_=TouristTripAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TouristTrip.schema()
    create_touristtrip_model(TouristTripAllProperties).schema()
    create_touristtrip_model(TouristTripInheritedProperties).schema()
    create_touristtrip_model(TouristTripProperties).schema()


def SymptomsHealthAspect_test():
    from schorg.SymptomsHealthAspect import SymptomsHealthAspectInheritedProperties
    from schorg.SymptomsHealthAspect import SymptomsHealthAspectProperties
    from schorg.SymptomsHealthAspect import SymptomsHealthAspectAllProperties
    from schorg.SymptomsHealthAspect import create_schema_org_model
    from schorg.SymptomsHealthAspect import create_symptomshealthaspect_model
    from schorg.SymptomsHealthAspect import SymptomsHealthAspect

    a = create_schema_org_model(type_=SymptomsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=SymptomsHealthAspectProperties)
    c = create_schema_org_model(type_=SymptomsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SymptomsHealthAspect.schema()
    create_symptomshealthaspect_model(SymptomsHealthAspectAllProperties).schema()
    create_symptomshealthaspect_model(SymptomsHealthAspectInheritedProperties).schema()
    create_symptomshealthaspect_model(SymptomsHealthAspectProperties).schema()


def Neuro_test():
    from schorg.Neuro import NeuroInheritedProperties
    from schorg.Neuro import NeuroProperties
    from schorg.Neuro import NeuroAllProperties
    from schorg.Neuro import create_schema_org_model
    from schorg.Neuro import create_neuro_model
    from schorg.Neuro import Neuro

    a = create_schema_org_model(type_=NeuroInheritedProperties)
    b = create_schema_org_model(type_=NeuroProperties)
    c = create_schema_org_model(type_=NeuroAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Neuro.schema()
    create_neuro_model(NeuroAllProperties).schema()
    create_neuro_model(NeuroInheritedProperties).schema()
    create_neuro_model(NeuroProperties).schema()


def HobbyShop_test():
    from schorg.HobbyShop import HobbyShopInheritedProperties
    from schorg.HobbyShop import HobbyShopProperties
    from schorg.HobbyShop import HobbyShopAllProperties
    from schorg.HobbyShop import create_schema_org_model
    from schorg.HobbyShop import create_hobbyshop_model
    from schorg.HobbyShop import HobbyShop

    a = create_schema_org_model(type_=HobbyShopInheritedProperties)
    b = create_schema_org_model(type_=HobbyShopProperties)
    c = create_schema_org_model(type_=HobbyShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HobbyShop.schema()
    create_hobbyshop_model(HobbyShopAllProperties).schema()
    create_hobbyshop_model(HobbyShopInheritedProperties).schema()
    create_hobbyshop_model(HobbyShopProperties).schema()


def BodyMeasurementFoot_test():
    from schorg.BodyMeasurementFoot import BodyMeasurementFootInheritedProperties
    from schorg.BodyMeasurementFoot import BodyMeasurementFootProperties
    from schorg.BodyMeasurementFoot import BodyMeasurementFootAllProperties
    from schorg.BodyMeasurementFoot import create_schema_org_model
    from schorg.BodyMeasurementFoot import create_bodymeasurementfoot_model
    from schorg.BodyMeasurementFoot import BodyMeasurementFoot

    a = create_schema_org_model(type_=BodyMeasurementFootInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementFootProperties)
    c = create_schema_org_model(type_=BodyMeasurementFootAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementFoot.schema()
    create_bodymeasurementfoot_model(BodyMeasurementFootAllProperties).schema()
    create_bodymeasurementfoot_model(BodyMeasurementFootInheritedProperties).schema()
    create_bodymeasurementfoot_model(BodyMeasurementFootProperties).schema()


def Casino_test():
    from schorg.Casino import CasinoInheritedProperties
    from schorg.Casino import CasinoProperties
    from schorg.Casino import CasinoAllProperties
    from schorg.Casino import create_schema_org_model
    from schorg.Casino import create_casino_model
    from schorg.Casino import Casino

    a = create_schema_org_model(type_=CasinoInheritedProperties)
    b = create_schema_org_model(type_=CasinoProperties)
    c = create_schema_org_model(type_=CasinoAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Casino.schema()
    create_casino_model(CasinoAllProperties).schema()
    create_casino_model(CasinoInheritedProperties).schema()
    create_casino_model(CasinoProperties).schema()


def SoftwareSourceCode_test():
    from schorg.SoftwareSourceCode import SoftwareSourceCodeInheritedProperties
    from schorg.SoftwareSourceCode import SoftwareSourceCodeProperties
    from schorg.SoftwareSourceCode import SoftwareSourceCodeAllProperties
    from schorg.SoftwareSourceCode import create_schema_org_model
    from schorg.SoftwareSourceCode import create_softwaresourcecode_model
    from schorg.SoftwareSourceCode import SoftwareSourceCode

    a = create_schema_org_model(type_=SoftwareSourceCodeInheritedProperties)
    b = create_schema_org_model(type_=SoftwareSourceCodeProperties)
    c = create_schema_org_model(type_=SoftwareSourceCodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SoftwareSourceCode.schema()
    create_softwaresourcecode_model(SoftwareSourceCodeAllProperties).schema()
    create_softwaresourcecode_model(SoftwareSourceCodeInheritedProperties).schema()
    create_softwaresourcecode_model(SoftwareSourceCodeProperties).schema()


def MultiCenterTrial_test():
    from schorg.MultiCenterTrial import MultiCenterTrialInheritedProperties
    from schorg.MultiCenterTrial import MultiCenterTrialProperties
    from schorg.MultiCenterTrial import MultiCenterTrialAllProperties
    from schorg.MultiCenterTrial import create_schema_org_model
    from schorg.MultiCenterTrial import create_multicentertrial_model
    from schorg.MultiCenterTrial import MultiCenterTrial

    a = create_schema_org_model(type_=MultiCenterTrialInheritedProperties)
    b = create_schema_org_model(type_=MultiCenterTrialProperties)
    c = create_schema_org_model(type_=MultiCenterTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MultiCenterTrial.schema()
    create_multicentertrial_model(MultiCenterTrialAllProperties).schema()
    create_multicentertrial_model(MultiCenterTrialInheritedProperties).schema()
    create_multicentertrial_model(MultiCenterTrialProperties).schema()


def ItemAvailability_test():
    from schorg.ItemAvailability import ItemAvailabilityInheritedProperties
    from schorg.ItemAvailability import ItemAvailabilityProperties
    from schorg.ItemAvailability import ItemAvailabilityAllProperties
    from schorg.ItemAvailability import create_schema_org_model
    from schorg.ItemAvailability import create_itemavailability_model
    from schorg.ItemAvailability import ItemAvailability

    a = create_schema_org_model(type_=ItemAvailabilityInheritedProperties)
    b = create_schema_org_model(type_=ItemAvailabilityProperties)
    c = create_schema_org_model(type_=ItemAvailabilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemAvailability.schema()
    create_itemavailability_model(ItemAvailabilityAllProperties).schema()
    create_itemavailability_model(ItemAvailabilityInheritedProperties).schema()
    create_itemavailability_model(ItemAvailabilityProperties).schema()


def BackOrder_test():
    from schorg.BackOrder import BackOrderInheritedProperties
    from schorg.BackOrder import BackOrderProperties
    from schorg.BackOrder import BackOrderAllProperties
    from schorg.BackOrder import create_schema_org_model
    from schorg.BackOrder import create_backorder_model
    from schorg.BackOrder import BackOrder

    a = create_schema_org_model(type_=BackOrderInheritedProperties)
    b = create_schema_org_model(type_=BackOrderProperties)
    c = create_schema_org_model(type_=BackOrderAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BackOrder.schema()
    create_backorder_model(BackOrderAllProperties).schema()
    create_backorder_model(BackOrderInheritedProperties).schema()
    create_backorder_model(BackOrderProperties).schema()


def CreativeWorkSeason_test():
    from schorg.CreativeWorkSeason import CreativeWorkSeasonInheritedProperties
    from schorg.CreativeWorkSeason import CreativeWorkSeasonProperties
    from schorg.CreativeWorkSeason import CreativeWorkSeasonAllProperties
    from schorg.CreativeWorkSeason import create_schema_org_model
    from schorg.CreativeWorkSeason import create_creativeworkseason_model
    from schorg.CreativeWorkSeason import CreativeWorkSeason

    a = create_schema_org_model(type_=CreativeWorkSeasonInheritedProperties)
    b = create_schema_org_model(type_=CreativeWorkSeasonProperties)
    c = create_schema_org_model(type_=CreativeWorkSeasonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CreativeWorkSeason.schema()
    create_creativeworkseason_model(CreativeWorkSeasonAllProperties).schema()
    create_creativeworkseason_model(CreativeWorkSeasonInheritedProperties).schema()
    create_creativeworkseason_model(CreativeWorkSeasonProperties).schema()


def PodcastSeason_test():
    from schorg.PodcastSeason import PodcastSeasonInheritedProperties
    from schorg.PodcastSeason import PodcastSeasonProperties
    from schorg.PodcastSeason import PodcastSeasonAllProperties
    from schorg.PodcastSeason import create_schema_org_model
    from schorg.PodcastSeason import create_podcastseason_model
    from schorg.PodcastSeason import PodcastSeason

    a = create_schema_org_model(type_=PodcastSeasonInheritedProperties)
    b = create_schema_org_model(type_=PodcastSeasonProperties)
    c = create_schema_org_model(type_=PodcastSeasonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PodcastSeason.schema()
    create_podcastseason_model(PodcastSeasonAllProperties).schema()
    create_podcastseason_model(PodcastSeasonInheritedProperties).schema()
    create_podcastseason_model(PodcastSeasonProperties).schema()


def EventReservation_test():
    from schorg.EventReservation import EventReservationInheritedProperties
    from schorg.EventReservation import EventReservationProperties
    from schorg.EventReservation import EventReservationAllProperties
    from schorg.EventReservation import create_schema_org_model
    from schorg.EventReservation import create_eventreservation_model
    from schorg.EventReservation import EventReservation

    a = create_schema_org_model(type_=EventReservationInheritedProperties)
    b = create_schema_org_model(type_=EventReservationProperties)
    c = create_schema_org_model(type_=EventReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventReservation.schema()
    create_eventreservation_model(EventReservationAllProperties).schema()
    create_eventreservation_model(EventReservationInheritedProperties).schema()
    create_eventreservation_model(EventReservationProperties).schema()


def MedicalProcedureType_test():
    from schorg.MedicalProcedureType import MedicalProcedureTypeInheritedProperties
    from schorg.MedicalProcedureType import MedicalProcedureTypeProperties
    from schorg.MedicalProcedureType import MedicalProcedureTypeAllProperties
    from schorg.MedicalProcedureType import create_schema_org_model
    from schorg.MedicalProcedureType import create_medicalproceduretype_model
    from schorg.MedicalProcedureType import MedicalProcedureType

    a = create_schema_org_model(type_=MedicalProcedureTypeInheritedProperties)
    b = create_schema_org_model(type_=MedicalProcedureTypeProperties)
    c = create_schema_org_model(type_=MedicalProcedureTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalProcedureType.schema()
    create_medicalproceduretype_model(MedicalProcedureTypeAllProperties).schema()
    create_medicalproceduretype_model(MedicalProcedureTypeInheritedProperties).schema()
    create_medicalproceduretype_model(MedicalProcedureTypeProperties).schema()


def Rating_test():
    from schorg.Rating import RatingInheritedProperties
    from schorg.Rating import RatingProperties
    from schorg.Rating import RatingAllProperties
    from schorg.Rating import create_schema_org_model
    from schorg.Rating import create_rating_model
    from schorg.Rating import Rating

    a = create_schema_org_model(type_=RatingInheritedProperties)
    b = create_schema_org_model(type_=RatingProperties)
    c = create_schema_org_model(type_=RatingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Rating.schema()
    create_rating_model(RatingAllProperties).schema()
    create_rating_model(RatingInheritedProperties).schema()
    create_rating_model(RatingProperties).schema()


def AggregateRating_test():
    from schorg.AggregateRating import AggregateRatingInheritedProperties
    from schorg.AggregateRating import AggregateRatingProperties
    from schorg.AggregateRating import AggregateRatingAllProperties
    from schorg.AggregateRating import create_schema_org_model
    from schorg.AggregateRating import create_aggregaterating_model
    from schorg.AggregateRating import AggregateRating

    a = create_schema_org_model(type_=AggregateRatingInheritedProperties)
    b = create_schema_org_model(type_=AggregateRatingProperties)
    c = create_schema_org_model(type_=AggregateRatingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AggregateRating.schema()
    create_aggregaterating_model(AggregateRatingAllProperties).schema()
    create_aggregaterating_model(AggregateRatingInheritedProperties).schema()
    create_aggregaterating_model(AggregateRatingProperties).schema()


def DataDownload_test():
    from schorg.DataDownload import DataDownloadInheritedProperties
    from schorg.DataDownload import DataDownloadProperties
    from schorg.DataDownload import DataDownloadAllProperties
    from schorg.DataDownload import create_schema_org_model
    from schorg.DataDownload import create_datadownload_model
    from schorg.DataDownload import DataDownload

    a = create_schema_org_model(type_=DataDownloadInheritedProperties)
    b = create_schema_org_model(type_=DataDownloadProperties)
    c = create_schema_org_model(type_=DataDownloadAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DataDownload.schema()
    create_datadownload_model(DataDownloadAllProperties).schema()
    create_datadownload_model(DataDownloadInheritedProperties).schema()
    create_datadownload_model(DataDownloadProperties).schema()


def MerchantReturnEnumeration_test():
    from schorg.MerchantReturnEnumeration import (
        MerchantReturnEnumerationInheritedProperties,
    )
    from schorg.MerchantReturnEnumeration import MerchantReturnEnumerationProperties
    from schorg.MerchantReturnEnumeration import MerchantReturnEnumerationAllProperties
    from schorg.MerchantReturnEnumeration import create_schema_org_model
    from schorg.MerchantReturnEnumeration import create_merchantreturnenumeration_model
    from schorg.MerchantReturnEnumeration import MerchantReturnEnumeration

    a = create_schema_org_model(type_=MerchantReturnEnumerationInheritedProperties)
    b = create_schema_org_model(type_=MerchantReturnEnumerationProperties)
    c = create_schema_org_model(type_=MerchantReturnEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnEnumeration.schema()
    create_merchantreturnenumeration_model(
        MerchantReturnEnumerationAllProperties
    ).schema()
    create_merchantreturnenumeration_model(
        MerchantReturnEnumerationInheritedProperties
    ).schema()
    create_merchantreturnenumeration_model(MerchantReturnEnumerationProperties).schema()


def MerchantReturnUnlimitedWindow_test():
    from schorg.MerchantReturnUnlimitedWindow import (
        MerchantReturnUnlimitedWindowInheritedProperties,
    )
    from schorg.MerchantReturnUnlimitedWindow import (
        MerchantReturnUnlimitedWindowProperties,
    )
    from schorg.MerchantReturnUnlimitedWindow import (
        MerchantReturnUnlimitedWindowAllProperties,
    )
    from schorg.MerchantReturnUnlimitedWindow import create_schema_org_model
    from schorg.MerchantReturnUnlimitedWindow import (
        create_merchantreturnunlimitedwindow_model,
    )
    from schorg.MerchantReturnUnlimitedWindow import MerchantReturnUnlimitedWindow

    a = create_schema_org_model(type_=MerchantReturnUnlimitedWindowInheritedProperties)
    b = create_schema_org_model(type_=MerchantReturnUnlimitedWindowProperties)
    c = create_schema_org_model(type_=MerchantReturnUnlimitedWindowAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnUnlimitedWindow.schema()
    create_merchantreturnunlimitedwindow_model(
        MerchantReturnUnlimitedWindowAllProperties
    ).schema()
    create_merchantreturnunlimitedwindow_model(
        MerchantReturnUnlimitedWindowInheritedProperties
    ).schema()
    create_merchantreturnunlimitedwindow_model(
        MerchantReturnUnlimitedWindowProperties
    ).schema()


def CreativeWorkSeries_test():
    from schorg.CreativeWorkSeries import CreativeWorkSeriesInheritedProperties
    from schorg.CreativeWorkSeries import CreativeWorkSeriesProperties
    from schorg.CreativeWorkSeries import CreativeWorkSeriesAllProperties
    from schorg.CreativeWorkSeries import create_schema_org_model
    from schorg.CreativeWorkSeries import create_creativeworkseries_model
    from schorg.CreativeWorkSeries import CreativeWorkSeries

    a = create_schema_org_model(type_=CreativeWorkSeriesInheritedProperties)
    b = create_schema_org_model(type_=CreativeWorkSeriesProperties)
    c = create_schema_org_model(type_=CreativeWorkSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CreativeWorkSeries.schema()
    create_creativeworkseries_model(CreativeWorkSeriesAllProperties).schema()
    create_creativeworkseries_model(CreativeWorkSeriesInheritedProperties).schema()
    create_creativeworkseries_model(CreativeWorkSeriesProperties).schema()


def Periodical_test():
    from schorg.Periodical import PeriodicalInheritedProperties
    from schorg.Periodical import PeriodicalProperties
    from schorg.Periodical import PeriodicalAllProperties
    from schorg.Periodical import create_schema_org_model
    from schorg.Periodical import create_periodical_model
    from schorg.Periodical import Periodical

    a = create_schema_org_model(type_=PeriodicalInheritedProperties)
    b = create_schema_org_model(type_=PeriodicalProperties)
    c = create_schema_org_model(type_=PeriodicalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Periodical.schema()
    create_periodical_model(PeriodicalAllProperties).schema()
    create_periodical_model(PeriodicalInheritedProperties).schema()
    create_periodical_model(PeriodicalProperties).schema()


def ComicSeries_test():
    from schorg.ComicSeries import ComicSeriesInheritedProperties
    from schorg.ComicSeries import ComicSeriesProperties
    from schorg.ComicSeries import ComicSeriesAllProperties
    from schorg.ComicSeries import create_schema_org_model
    from schorg.ComicSeries import create_comicseries_model
    from schorg.ComicSeries import ComicSeries

    a = create_schema_org_model(type_=ComicSeriesInheritedProperties)
    b = create_schema_org_model(type_=ComicSeriesProperties)
    c = create_schema_org_model(type_=ComicSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComicSeries.schema()
    create_comicseries_model(ComicSeriesAllProperties).schema()
    create_comicseries_model(ComicSeriesInheritedProperties).schema()
    create_comicseries_model(ComicSeriesProperties).schema()


def AdultOrientedEnumeration_test():
    from schorg.AdultOrientedEnumeration import (
        AdultOrientedEnumerationInheritedProperties,
    )
    from schorg.AdultOrientedEnumeration import AdultOrientedEnumerationProperties
    from schorg.AdultOrientedEnumeration import AdultOrientedEnumerationAllProperties
    from schorg.AdultOrientedEnumeration import create_schema_org_model
    from schorg.AdultOrientedEnumeration import create_adultorientedenumeration_model
    from schorg.AdultOrientedEnumeration import AdultOrientedEnumeration

    a = create_schema_org_model(type_=AdultOrientedEnumerationInheritedProperties)
    b = create_schema_org_model(type_=AdultOrientedEnumerationProperties)
    c = create_schema_org_model(type_=AdultOrientedEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AdultOrientedEnumeration.schema()
    create_adultorientedenumeration_model(
        AdultOrientedEnumerationAllProperties
    ).schema()
    create_adultorientedenumeration_model(
        AdultOrientedEnumerationInheritedProperties
    ).schema()
    create_adultorientedenumeration_model(AdultOrientedEnumerationProperties).schema()


def SexualContentConsideration_test():
    from schorg.SexualContentConsideration import (
        SexualContentConsiderationInheritedProperties,
    )
    from schorg.SexualContentConsideration import SexualContentConsiderationProperties
    from schorg.SexualContentConsideration import (
        SexualContentConsiderationAllProperties,
    )
    from schorg.SexualContentConsideration import create_schema_org_model
    from schorg.SexualContentConsideration import (
        create_sexualcontentconsideration_model,
    )
    from schorg.SexualContentConsideration import SexualContentConsideration

    a = create_schema_org_model(type_=SexualContentConsiderationInheritedProperties)
    b = create_schema_org_model(type_=SexualContentConsiderationProperties)
    c = create_schema_org_model(type_=SexualContentConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SexualContentConsideration.schema()
    create_sexualcontentconsideration_model(
        SexualContentConsiderationAllProperties
    ).schema()
    create_sexualcontentconsideration_model(
        SexualContentConsiderationInheritedProperties
    ).schema()
    create_sexualcontentconsideration_model(
        SexualContentConsiderationProperties
    ).schema()


def GovernmentService_test():
    from schorg.GovernmentService import GovernmentServiceInheritedProperties
    from schorg.GovernmentService import GovernmentServiceProperties
    from schorg.GovernmentService import GovernmentServiceAllProperties
    from schorg.GovernmentService import create_schema_org_model
    from schorg.GovernmentService import create_governmentservice_model
    from schorg.GovernmentService import GovernmentService

    a = create_schema_org_model(type_=GovernmentServiceInheritedProperties)
    b = create_schema_org_model(type_=GovernmentServiceProperties)
    c = create_schema_org_model(type_=GovernmentServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentService.schema()
    create_governmentservice_model(GovernmentServiceAllProperties).schema()
    create_governmentservice_model(GovernmentServiceInheritedProperties).schema()
    create_governmentservice_model(GovernmentServiceProperties).schema()


def Landform_test():
    from schorg.Landform import LandformInheritedProperties
    from schorg.Landform import LandformProperties
    from schorg.Landform import LandformAllProperties
    from schorg.Landform import create_schema_org_model
    from schorg.Landform import create_landform_model
    from schorg.Landform import Landform

    a = create_schema_org_model(type_=LandformInheritedProperties)
    b = create_schema_org_model(type_=LandformProperties)
    c = create_schema_org_model(type_=LandformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Landform.schema()
    create_landform_model(LandformAllProperties).schema()
    create_landform_model(LandformInheritedProperties).schema()
    create_landform_model(LandformProperties).schema()


def Continent_test():
    from schorg.Continent import ContinentInheritedProperties
    from schorg.Continent import ContinentProperties
    from schorg.Continent import ContinentAllProperties
    from schorg.Continent import create_schema_org_model
    from schorg.Continent import create_continent_model
    from schorg.Continent import Continent

    a = create_schema_org_model(type_=ContinentInheritedProperties)
    b = create_schema_org_model(type_=ContinentProperties)
    c = create_schema_org_model(type_=ContinentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Continent.schema()
    create_continent_model(ContinentAllProperties).schema()
    create_continent_model(ContinentInheritedProperties).schema()
    create_continent_model(ContinentProperties).schema()


def EducationalOccupationalCredential_test():
    from schorg.EducationalOccupationalCredential import (
        EducationalOccupationalCredentialInheritedProperties,
    )
    from schorg.EducationalOccupationalCredential import (
        EducationalOccupationalCredentialProperties,
    )
    from schorg.EducationalOccupationalCredential import (
        EducationalOccupationalCredentialAllProperties,
    )
    from schorg.EducationalOccupationalCredential import create_schema_org_model
    from schorg.EducationalOccupationalCredential import (
        create_educationaloccupationalcredential_model,
    )
    from schorg.EducationalOccupationalCredential import (
        EducationalOccupationalCredential,
    )

    a = create_schema_org_model(
        type_=EducationalOccupationalCredentialInheritedProperties
    )
    b = create_schema_org_model(type_=EducationalOccupationalCredentialProperties)
    c = create_schema_org_model(type_=EducationalOccupationalCredentialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EducationalOccupationalCredential.schema()
    create_educationaloccupationalcredential_model(
        EducationalOccupationalCredentialAllProperties
    ).schema()
    create_educationaloccupationalcredential_model(
        EducationalOccupationalCredentialInheritedProperties
    ).schema()
    create_educationaloccupationalcredential_model(
        EducationalOccupationalCredentialProperties
    ).schema()


def MedicalCondition_test():
    from schorg.MedicalCondition import MedicalConditionInheritedProperties
    from schorg.MedicalCondition import MedicalConditionProperties
    from schorg.MedicalCondition import MedicalConditionAllProperties
    from schorg.MedicalCondition import create_schema_org_model
    from schorg.MedicalCondition import create_medicalcondition_model
    from schorg.MedicalCondition import MedicalCondition

    a = create_schema_org_model(type_=MedicalConditionInheritedProperties)
    b = create_schema_org_model(type_=MedicalConditionProperties)
    c = create_schema_org_model(type_=MedicalConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalCondition.schema()
    create_medicalcondition_model(MedicalConditionAllProperties).schema()
    create_medicalcondition_model(MedicalConditionInheritedProperties).schema()
    create_medicalcondition_model(MedicalConditionProperties).schema()


def InfectiousDisease_test():
    from schorg.InfectiousDisease import InfectiousDiseaseInheritedProperties
    from schorg.InfectiousDisease import InfectiousDiseaseProperties
    from schorg.InfectiousDisease import InfectiousDiseaseAllProperties
    from schorg.InfectiousDisease import create_schema_org_model
    from schorg.InfectiousDisease import create_infectiousdisease_model
    from schorg.InfectiousDisease import InfectiousDisease

    a = create_schema_org_model(type_=InfectiousDiseaseInheritedProperties)
    b = create_schema_org_model(type_=InfectiousDiseaseProperties)
    c = create_schema_org_model(type_=InfectiousDiseaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InfectiousDisease.schema()
    create_infectiousdisease_model(InfectiousDiseaseAllProperties).schema()
    create_infectiousdisease_model(InfectiousDiseaseInheritedProperties).schema()
    create_infectiousdisease_model(InfectiousDiseaseProperties).schema()


def ReturnMethodEnumeration_test():
    from schorg.ReturnMethodEnumeration import (
        ReturnMethodEnumerationInheritedProperties,
    )
    from schorg.ReturnMethodEnumeration import ReturnMethodEnumerationProperties
    from schorg.ReturnMethodEnumeration import ReturnMethodEnumerationAllProperties
    from schorg.ReturnMethodEnumeration import create_schema_org_model
    from schorg.ReturnMethodEnumeration import create_returnmethodenumeration_model
    from schorg.ReturnMethodEnumeration import ReturnMethodEnumeration

    a = create_schema_org_model(type_=ReturnMethodEnumerationInheritedProperties)
    b = create_schema_org_model(type_=ReturnMethodEnumerationProperties)
    c = create_schema_org_model(type_=ReturnMethodEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnMethodEnumeration.schema()
    create_returnmethodenumeration_model(ReturnMethodEnumerationAllProperties).schema()
    create_returnmethodenumeration_model(
        ReturnMethodEnumerationInheritedProperties
    ).schema()
    create_returnmethodenumeration_model(ReturnMethodEnumerationProperties).schema()


def ReturnByMail_test():
    from schorg.ReturnByMail import ReturnByMailInheritedProperties
    from schorg.ReturnByMail import ReturnByMailProperties
    from schorg.ReturnByMail import ReturnByMailAllProperties
    from schorg.ReturnByMail import create_schema_org_model
    from schorg.ReturnByMail import create_returnbymail_model
    from schorg.ReturnByMail import ReturnByMail

    a = create_schema_org_model(type_=ReturnByMailInheritedProperties)
    b = create_schema_org_model(type_=ReturnByMailProperties)
    c = create_schema_org_model(type_=ReturnByMailAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnByMail.schema()
    create_returnbymail_model(ReturnByMailAllProperties).schema()
    create_returnbymail_model(ReturnByMailInheritedProperties).schema()
    create_returnbymail_model(ReturnByMailProperties).schema()


def InfectiousAgentClass_test():
    from schorg.InfectiousAgentClass import InfectiousAgentClassInheritedProperties
    from schorg.InfectiousAgentClass import InfectiousAgentClassProperties
    from schorg.InfectiousAgentClass import InfectiousAgentClassAllProperties
    from schorg.InfectiousAgentClass import create_schema_org_model
    from schorg.InfectiousAgentClass import create_infectiousagentclass_model
    from schorg.InfectiousAgentClass import InfectiousAgentClass

    a = create_schema_org_model(type_=InfectiousAgentClassInheritedProperties)
    b = create_schema_org_model(type_=InfectiousAgentClassProperties)
    c = create_schema_org_model(type_=InfectiousAgentClassAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InfectiousAgentClass.schema()
    create_infectiousagentclass_model(InfectiousAgentClassAllProperties).schema()
    create_infectiousagentclass_model(InfectiousAgentClassInheritedProperties).schema()
    create_infectiousagentclass_model(InfectiousAgentClassProperties).schema()


def Prion_test():
    from schorg.Prion import PrionInheritedProperties
    from schorg.Prion import PrionProperties
    from schorg.Prion import PrionAllProperties
    from schorg.Prion import create_schema_org_model
    from schorg.Prion import create_prion_model
    from schorg.Prion import Prion

    a = create_schema_org_model(type_=PrionInheritedProperties)
    b = create_schema_org_model(type_=PrionProperties)
    c = create_schema_org_model(type_=PrionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Prion.schema()
    create_prion_model(PrionAllProperties).schema()
    create_prion_model(PrionInheritedProperties).schema()
    create_prion_model(PrionProperties).schema()


def PerformingGroup_test():
    from schorg.PerformingGroup import PerformingGroupInheritedProperties
    from schorg.PerformingGroup import PerformingGroupProperties
    from schorg.PerformingGroup import PerformingGroupAllProperties
    from schorg.PerformingGroup import create_schema_org_model
    from schorg.PerformingGroup import create_performinggroup_model
    from schorg.PerformingGroup import PerformingGroup

    a = create_schema_org_model(type_=PerformingGroupInheritedProperties)
    b = create_schema_org_model(type_=PerformingGroupProperties)
    c = create_schema_org_model(type_=PerformingGroupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PerformingGroup.schema()
    create_performinggroup_model(PerformingGroupAllProperties).schema()
    create_performinggroup_model(PerformingGroupInheritedProperties).schema()
    create_performinggroup_model(PerformingGroupProperties).schema()


def MusicGroup_test():
    from schorg.MusicGroup import MusicGroupInheritedProperties
    from schorg.MusicGroup import MusicGroupProperties
    from schorg.MusicGroup import MusicGroupAllProperties
    from schorg.MusicGroup import create_schema_org_model
    from schorg.MusicGroup import create_musicgroup_model
    from schorg.MusicGroup import MusicGroup

    a = create_schema_org_model(type_=MusicGroupInheritedProperties)
    b = create_schema_org_model(type_=MusicGroupProperties)
    c = create_schema_org_model(type_=MusicGroupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicGroup.schema()
    create_musicgroup_model(MusicGroupAllProperties).schema()
    create_musicgroup_model(MusicGroupInheritedProperties).schema()
    create_musicgroup_model(MusicGroupProperties).schema()


def SingleCenterTrial_test():
    from schorg.SingleCenterTrial import SingleCenterTrialInheritedProperties
    from schorg.SingleCenterTrial import SingleCenterTrialProperties
    from schorg.SingleCenterTrial import SingleCenterTrialAllProperties
    from schorg.SingleCenterTrial import create_schema_org_model
    from schorg.SingleCenterTrial import create_singlecentertrial_model
    from schorg.SingleCenterTrial import SingleCenterTrial

    a = create_schema_org_model(type_=SingleCenterTrialInheritedProperties)
    b = create_schema_org_model(type_=SingleCenterTrialProperties)
    c = create_schema_org_model(type_=SingleCenterTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SingleCenterTrial.schema()
    create_singlecentertrial_model(SingleCenterTrialAllProperties).schema()
    create_singlecentertrial_model(SingleCenterTrialInheritedProperties).schema()
    create_singlecentertrial_model(SingleCenterTrialProperties).schema()


def Nonprofit501c10_test():
    from schorg.Nonprofit501c10 import Nonprofit501c10InheritedProperties
    from schorg.Nonprofit501c10 import Nonprofit501c10Properties
    from schorg.Nonprofit501c10 import Nonprofit501c10AllProperties
    from schorg.Nonprofit501c10 import create_schema_org_model
    from schorg.Nonprofit501c10 import create_nonprofit501c10_model
    from schorg.Nonprofit501c10 import Nonprofit501c10

    a = create_schema_org_model(type_=Nonprofit501c10InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c10Properties)
    c = create_schema_org_model(type_=Nonprofit501c10AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c10.schema()
    create_nonprofit501c10_model(Nonprofit501c10AllProperties).schema()
    create_nonprofit501c10_model(Nonprofit501c10InheritedProperties).schema()
    create_nonprofit501c10_model(Nonprofit501c10Properties).schema()


def MedicalTestPanel_test():
    from schorg.MedicalTestPanel import MedicalTestPanelInheritedProperties
    from schorg.MedicalTestPanel import MedicalTestPanelProperties
    from schorg.MedicalTestPanel import MedicalTestPanelAllProperties
    from schorg.MedicalTestPanel import create_schema_org_model
    from schorg.MedicalTestPanel import create_medicaltestpanel_model
    from schorg.MedicalTestPanel import MedicalTestPanel

    a = create_schema_org_model(type_=MedicalTestPanelInheritedProperties)
    b = create_schema_org_model(type_=MedicalTestPanelProperties)
    c = create_schema_org_model(type_=MedicalTestPanelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalTestPanel.schema()
    create_medicaltestpanel_model(MedicalTestPanelAllProperties).schema()
    create_medicaltestpanel_model(MedicalTestPanelInheritedProperties).schema()
    create_medicaltestpanel_model(MedicalTestPanelProperties).schema()


def DrugStrength_test():
    from schorg.DrugStrength import DrugStrengthInheritedProperties
    from schorg.DrugStrength import DrugStrengthProperties
    from schorg.DrugStrength import DrugStrengthAllProperties
    from schorg.DrugStrength import create_schema_org_model
    from schorg.DrugStrength import create_drugstrength_model
    from schorg.DrugStrength import DrugStrength

    a = create_schema_org_model(type_=DrugStrengthInheritedProperties)
    b = create_schema_org_model(type_=DrugStrengthProperties)
    c = create_schema_org_model(type_=DrugStrengthAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugStrength.schema()
    create_drugstrength_model(DrugStrengthAllProperties).schema()
    create_drugstrength_model(DrugStrengthInheritedProperties).schema()
    create_drugstrength_model(DrugStrengthProperties).schema()


def TypeAndQuantityNode_test():
    from schorg.TypeAndQuantityNode import TypeAndQuantityNodeInheritedProperties
    from schorg.TypeAndQuantityNode import TypeAndQuantityNodeProperties
    from schorg.TypeAndQuantityNode import TypeAndQuantityNodeAllProperties
    from schorg.TypeAndQuantityNode import create_schema_org_model
    from schorg.TypeAndQuantityNode import create_typeandquantitynode_model
    from schorg.TypeAndQuantityNode import TypeAndQuantityNode

    a = create_schema_org_model(type_=TypeAndQuantityNodeInheritedProperties)
    b = create_schema_org_model(type_=TypeAndQuantityNodeProperties)
    c = create_schema_org_model(type_=TypeAndQuantityNodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TypeAndQuantityNode.schema()
    create_typeandquantitynode_model(TypeAndQuantityNodeAllProperties).schema()
    create_typeandquantitynode_model(TypeAndQuantityNodeInheritedProperties).schema()
    create_typeandquantitynode_model(TypeAndQuantityNodeProperties).schema()


def MediaSubscription_test():
    from schorg.MediaSubscription import MediaSubscriptionInheritedProperties
    from schorg.MediaSubscription import MediaSubscriptionProperties
    from schorg.MediaSubscription import MediaSubscriptionAllProperties
    from schorg.MediaSubscription import create_schema_org_model
    from schorg.MediaSubscription import create_mediasubscription_model
    from schorg.MediaSubscription import MediaSubscription

    a = create_schema_org_model(type_=MediaSubscriptionInheritedProperties)
    b = create_schema_org_model(type_=MediaSubscriptionProperties)
    c = create_schema_org_model(type_=MediaSubscriptionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaSubscription.schema()
    create_mediasubscription_model(MediaSubscriptionAllProperties).schema()
    create_mediasubscription_model(MediaSubscriptionInheritedProperties).schema()
    create_mediasubscription_model(MediaSubscriptionProperties).schema()


def DrugCostCategory_test():
    from schorg.DrugCostCategory import DrugCostCategoryInheritedProperties
    from schorg.DrugCostCategory import DrugCostCategoryProperties
    from schorg.DrugCostCategory import DrugCostCategoryAllProperties
    from schorg.DrugCostCategory import create_schema_org_model
    from schorg.DrugCostCategory import create_drugcostcategory_model
    from schorg.DrugCostCategory import DrugCostCategory

    a = create_schema_org_model(type_=DrugCostCategoryInheritedProperties)
    b = create_schema_org_model(type_=DrugCostCategoryProperties)
    c = create_schema_org_model(type_=DrugCostCategoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugCostCategory.schema()
    create_drugcostcategory_model(DrugCostCategoryAllProperties).schema()
    create_drugcostcategory_model(DrugCostCategoryInheritedProperties).schema()
    create_drugcostcategory_model(DrugCostCategoryProperties).schema()


def Retail_test():
    from schorg.Retail import RetailInheritedProperties
    from schorg.Retail import RetailProperties
    from schorg.Retail import RetailAllProperties
    from schorg.Retail import create_schema_org_model
    from schorg.Retail import create_retail_model
    from schorg.Retail import Retail

    a = create_schema_org_model(type_=RetailInheritedProperties)
    b = create_schema_org_model(type_=RetailProperties)
    c = create_schema_org_model(type_=RetailAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Retail.schema()
    create_retail_model(RetailAllProperties).schema()
    create_retail_model(RetailInheritedProperties).schema()
    create_retail_model(RetailProperties).schema()


def WearableSizeGroupHusky_test():
    from schorg.WearableSizeGroupHusky import WearableSizeGroupHuskyInheritedProperties
    from schorg.WearableSizeGroupHusky import WearableSizeGroupHuskyProperties
    from schorg.WearableSizeGroupHusky import WearableSizeGroupHuskyAllProperties
    from schorg.WearableSizeGroupHusky import create_schema_org_model
    from schorg.WearableSizeGroupHusky import create_wearablesizegrouphusky_model
    from schorg.WearableSizeGroupHusky import WearableSizeGroupHusky

    a = create_schema_org_model(type_=WearableSizeGroupHuskyInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupHuskyProperties)
    c = create_schema_org_model(type_=WearableSizeGroupHuskyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupHusky.schema()
    create_wearablesizegrouphusky_model(WearableSizeGroupHuskyAllProperties).schema()
    create_wearablesizegrouphusky_model(
        WearableSizeGroupHuskyInheritedProperties
    ).schema()
    create_wearablesizegrouphusky_model(WearableSizeGroupHuskyProperties).schema()


def DiabeticDiet_test():
    from schorg.DiabeticDiet import DiabeticDietInheritedProperties
    from schorg.DiabeticDiet import DiabeticDietProperties
    from schorg.DiabeticDiet import DiabeticDietAllProperties
    from schorg.DiabeticDiet import create_schema_org_model
    from schorg.DiabeticDiet import create_diabeticdiet_model
    from schorg.DiabeticDiet import DiabeticDiet

    a = create_schema_org_model(type_=DiabeticDietInheritedProperties)
    b = create_schema_org_model(type_=DiabeticDietProperties)
    c = create_schema_org_model(type_=DiabeticDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DiabeticDiet.schema()
    create_diabeticdiet_model(DiabeticDietAllProperties).schema()
    create_diabeticdiet_model(DiabeticDietInheritedProperties).schema()
    create_diabeticdiet_model(DiabeticDietProperties).schema()


def MedicalImagingTechnique_test():
    from schorg.MedicalImagingTechnique import (
        MedicalImagingTechniqueInheritedProperties,
    )
    from schorg.MedicalImagingTechnique import MedicalImagingTechniqueProperties
    from schorg.MedicalImagingTechnique import MedicalImagingTechniqueAllProperties
    from schorg.MedicalImagingTechnique import create_schema_org_model
    from schorg.MedicalImagingTechnique import create_medicalimagingtechnique_model
    from schorg.MedicalImagingTechnique import MedicalImagingTechnique

    a = create_schema_org_model(type_=MedicalImagingTechniqueInheritedProperties)
    b = create_schema_org_model(type_=MedicalImagingTechniqueProperties)
    c = create_schema_org_model(type_=MedicalImagingTechniqueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalImagingTechnique.schema()
    create_medicalimagingtechnique_model(MedicalImagingTechniqueAllProperties).schema()
    create_medicalimagingtechnique_model(
        MedicalImagingTechniqueInheritedProperties
    ).schema()
    create_medicalimagingtechnique_model(MedicalImagingTechniqueProperties).schema()


def XRay_test():
    from schorg.XRay import XRayInheritedProperties
    from schorg.XRay import XRayProperties
    from schorg.XRay import XRayAllProperties
    from schorg.XRay import create_schema_org_model
    from schorg.XRay import create_xray_model
    from schorg.XRay import XRay

    a = create_schema_org_model(type_=XRayInheritedProperties)
    b = create_schema_org_model(type_=XRayProperties)
    c = create_schema_org_model(type_=XRayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    XRay.schema()
    create_xray_model(XRayAllProperties).schema()
    create_xray_model(XRayInheritedProperties).schema()
    create_xray_model(XRayProperties).schema()


def WearableMeasurementInseam_test():
    from schorg.WearableMeasurementInseam import (
        WearableMeasurementInseamInheritedProperties,
    )
    from schorg.WearableMeasurementInseam import WearableMeasurementInseamProperties
    from schorg.WearableMeasurementInseam import WearableMeasurementInseamAllProperties
    from schorg.WearableMeasurementInseam import create_schema_org_model
    from schorg.WearableMeasurementInseam import create_wearablemeasurementinseam_model
    from schorg.WearableMeasurementInseam import WearableMeasurementInseam

    a = create_schema_org_model(type_=WearableMeasurementInseamInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementInseamProperties)
    c = create_schema_org_model(type_=WearableMeasurementInseamAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementInseam.schema()
    create_wearablemeasurementinseam_model(
        WearableMeasurementInseamAllProperties
    ).schema()
    create_wearablemeasurementinseam_model(
        WearableMeasurementInseamInheritedProperties
    ).schema()
    create_wearablemeasurementinseam_model(WearableMeasurementInseamProperties).schema()


def SeeDoctorHealthAspect_test():
    from schorg.SeeDoctorHealthAspect import SeeDoctorHealthAspectInheritedProperties
    from schorg.SeeDoctorHealthAspect import SeeDoctorHealthAspectProperties
    from schorg.SeeDoctorHealthAspect import SeeDoctorHealthAspectAllProperties
    from schorg.SeeDoctorHealthAspect import create_schema_org_model
    from schorg.SeeDoctorHealthAspect import create_seedoctorhealthaspect_model
    from schorg.SeeDoctorHealthAspect import SeeDoctorHealthAspect

    a = create_schema_org_model(type_=SeeDoctorHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=SeeDoctorHealthAspectProperties)
    c = create_schema_org_model(type_=SeeDoctorHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SeeDoctorHealthAspect.schema()
    create_seedoctorhealthaspect_model(SeeDoctorHealthAspectAllProperties).schema()
    create_seedoctorhealthaspect_model(
        SeeDoctorHealthAspectInheritedProperties
    ).schema()
    create_seedoctorhealthaspect_model(SeeDoctorHealthAspectProperties).schema()


def MusicEvent_test():
    from schorg.MusicEvent import MusicEventInheritedProperties
    from schorg.MusicEvent import MusicEventProperties
    from schorg.MusicEvent import MusicEventAllProperties
    from schorg.MusicEvent import create_schema_org_model
    from schorg.MusicEvent import create_musicevent_model
    from schorg.MusicEvent import MusicEvent

    a = create_schema_org_model(type_=MusicEventInheritedProperties)
    b = create_schema_org_model(type_=MusicEventProperties)
    c = create_schema_org_model(type_=MusicEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicEvent.schema()
    create_musicevent_model(MusicEventAllProperties).schema()
    create_musicevent_model(MusicEventInheritedProperties).schema()
    create_musicevent_model(MusicEventProperties).schema()


def MixedEventAttendanceMode_test():
    from schorg.MixedEventAttendanceMode import (
        MixedEventAttendanceModeInheritedProperties,
    )
    from schorg.MixedEventAttendanceMode import MixedEventAttendanceModeProperties
    from schorg.MixedEventAttendanceMode import MixedEventAttendanceModeAllProperties
    from schorg.MixedEventAttendanceMode import create_schema_org_model
    from schorg.MixedEventAttendanceMode import create_mixedeventattendancemode_model
    from schorg.MixedEventAttendanceMode import MixedEventAttendanceMode

    a = create_schema_org_model(type_=MixedEventAttendanceModeInheritedProperties)
    b = create_schema_org_model(type_=MixedEventAttendanceModeProperties)
    c = create_schema_org_model(type_=MixedEventAttendanceModeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MixedEventAttendanceMode.schema()
    create_mixedeventattendancemode_model(
        MixedEventAttendanceModeAllProperties
    ).schema()
    create_mixedeventattendancemode_model(
        MixedEventAttendanceModeInheritedProperties
    ).schema()
    create_mixedeventattendancemode_model(MixedEventAttendanceModeProperties).schema()


def Dermatology_test():
    from schorg.Dermatology import DermatologyInheritedProperties
    from schorg.Dermatology import DermatologyProperties
    from schorg.Dermatology import DermatologyAllProperties
    from schorg.Dermatology import create_schema_org_model
    from schorg.Dermatology import create_dermatology_model
    from schorg.Dermatology import Dermatology

    a = create_schema_org_model(type_=DermatologyInheritedProperties)
    b = create_schema_org_model(type_=DermatologyProperties)
    c = create_schema_org_model(type_=DermatologyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Dermatology.schema()
    create_dermatology_model(DermatologyAllProperties).schema()
    create_dermatology_model(DermatologyInheritedProperties).schema()
    create_dermatology_model(DermatologyProperties).schema()


def TherapeuticProcedure_test():
    from schorg.TherapeuticProcedure import TherapeuticProcedureInheritedProperties
    from schorg.TherapeuticProcedure import TherapeuticProcedureProperties
    from schorg.TherapeuticProcedure import TherapeuticProcedureAllProperties
    from schorg.TherapeuticProcedure import create_schema_org_model
    from schorg.TherapeuticProcedure import create_therapeuticprocedure_model
    from schorg.TherapeuticProcedure import TherapeuticProcedure

    a = create_schema_org_model(type_=TherapeuticProcedureInheritedProperties)
    b = create_schema_org_model(type_=TherapeuticProcedureProperties)
    c = create_schema_org_model(type_=TherapeuticProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TherapeuticProcedure.schema()
    create_therapeuticprocedure_model(TherapeuticProcedureAllProperties).schema()
    create_therapeuticprocedure_model(TherapeuticProcedureInheritedProperties).schema()
    create_therapeuticprocedure_model(TherapeuticProcedureProperties).schema()


def MedicalTherapy_test():
    from schorg.MedicalTherapy import MedicalTherapyInheritedProperties
    from schorg.MedicalTherapy import MedicalTherapyProperties
    from schorg.MedicalTherapy import MedicalTherapyAllProperties
    from schorg.MedicalTherapy import create_schema_org_model
    from schorg.MedicalTherapy import create_medicaltherapy_model
    from schorg.MedicalTherapy import MedicalTherapy

    a = create_schema_org_model(type_=MedicalTherapyInheritedProperties)
    b = create_schema_org_model(type_=MedicalTherapyProperties)
    c = create_schema_org_model(type_=MedicalTherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalTherapy.schema()
    create_medicaltherapy_model(MedicalTherapyAllProperties).schema()
    create_medicaltherapy_model(MedicalTherapyInheritedProperties).schema()
    create_medicaltherapy_model(MedicalTherapyProperties).schema()


def Episode_test():
    from schorg.Episode import EpisodeInheritedProperties
    from schorg.Episode import EpisodeProperties
    from schorg.Episode import EpisodeAllProperties
    from schorg.Episode import create_schema_org_model
    from schorg.Episode import create_episode_model
    from schorg.Episode import Episode

    a = create_schema_org_model(type_=EpisodeInheritedProperties)
    b = create_schema_org_model(type_=EpisodeProperties)
    c = create_schema_org_model(type_=EpisodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Episode.schema()
    create_episode_model(EpisodeAllProperties).schema()
    create_episode_model(EpisodeInheritedProperties).schema()
    create_episode_model(EpisodeProperties).schema()


def RadioEpisode_test():
    from schorg.RadioEpisode import RadioEpisodeInheritedProperties
    from schorg.RadioEpisode import RadioEpisodeProperties
    from schorg.RadioEpisode import RadioEpisodeAllProperties
    from schorg.RadioEpisode import create_schema_org_model
    from schorg.RadioEpisode import create_radioepisode_model
    from schorg.RadioEpisode import RadioEpisode

    a = create_schema_org_model(type_=RadioEpisodeInheritedProperties)
    b = create_schema_org_model(type_=RadioEpisodeProperties)
    c = create_schema_org_model(type_=RadioEpisodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioEpisode.schema()
    create_radioepisode_model(RadioEpisodeAllProperties).schema()
    create_radioepisode_model(RadioEpisodeInheritedProperties).schema()
    create_radioepisode_model(RadioEpisodeProperties).schema()


def MedicalSignOrSymptom_test():
    from schorg.MedicalSignOrSymptom import MedicalSignOrSymptomInheritedProperties
    from schorg.MedicalSignOrSymptom import MedicalSignOrSymptomProperties
    from schorg.MedicalSignOrSymptom import MedicalSignOrSymptomAllProperties
    from schorg.MedicalSignOrSymptom import create_schema_org_model
    from schorg.MedicalSignOrSymptom import create_medicalsignorsymptom_model
    from schorg.MedicalSignOrSymptom import MedicalSignOrSymptom

    a = create_schema_org_model(type_=MedicalSignOrSymptomInheritedProperties)
    b = create_schema_org_model(type_=MedicalSignOrSymptomProperties)
    c = create_schema_org_model(type_=MedicalSignOrSymptomAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalSignOrSymptom.schema()
    create_medicalsignorsymptom_model(MedicalSignOrSymptomAllProperties).schema()
    create_medicalsignorsymptom_model(MedicalSignOrSymptomInheritedProperties).schema()
    create_medicalsignorsymptom_model(MedicalSignOrSymptomProperties).schema()


def BodyMeasurementArm_test():
    from schorg.BodyMeasurementArm import BodyMeasurementArmInheritedProperties
    from schorg.BodyMeasurementArm import BodyMeasurementArmProperties
    from schorg.BodyMeasurementArm import BodyMeasurementArmAllProperties
    from schorg.BodyMeasurementArm import create_schema_org_model
    from schorg.BodyMeasurementArm import create_bodymeasurementarm_model
    from schorg.BodyMeasurementArm import BodyMeasurementArm

    a = create_schema_org_model(type_=BodyMeasurementArmInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementArmProperties)
    c = create_schema_org_model(type_=BodyMeasurementArmAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementArm.schema()
    create_bodymeasurementarm_model(BodyMeasurementArmAllProperties).schema()
    create_bodymeasurementarm_model(BodyMeasurementArmInheritedProperties).schema()
    create_bodymeasurementarm_model(BodyMeasurementArmProperties).schema()


def ChooseAction_test():
    from schorg.ChooseAction import ChooseActionInheritedProperties
    from schorg.ChooseAction import ChooseActionProperties
    from schorg.ChooseAction import ChooseActionAllProperties
    from schorg.ChooseAction import create_schema_org_model
    from schorg.ChooseAction import create_chooseaction_model
    from schorg.ChooseAction import ChooseAction

    a = create_schema_org_model(type_=ChooseActionInheritedProperties)
    b = create_schema_org_model(type_=ChooseActionProperties)
    c = create_schema_org_model(type_=ChooseActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ChooseAction.schema()
    create_chooseaction_model(ChooseActionAllProperties).schema()
    create_chooseaction_model(ChooseActionInheritedProperties).schema()
    create_chooseaction_model(ChooseActionProperties).schema()


def VoteAction_test():
    from schorg.VoteAction import VoteActionInheritedProperties
    from schorg.VoteAction import VoteActionProperties
    from schorg.VoteAction import VoteActionAllProperties
    from schorg.VoteAction import create_schema_org_model
    from schorg.VoteAction import create_voteaction_model
    from schorg.VoteAction import VoteAction

    a = create_schema_org_model(type_=VoteActionInheritedProperties)
    b = create_schema_org_model(type_=VoteActionProperties)
    c = create_schema_org_model(type_=VoteActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VoteAction.schema()
    create_voteaction_model(VoteActionAllProperties).schema()
    create_voteaction_model(VoteActionInheritedProperties).schema()
    create_voteaction_model(VoteActionProperties).schema()


def WPSideBar_test():
    from schorg.WPSideBar import WPSideBarInheritedProperties
    from schorg.WPSideBar import WPSideBarProperties
    from schorg.WPSideBar import WPSideBarAllProperties
    from schorg.WPSideBar import create_schema_org_model
    from schorg.WPSideBar import create_wpsidebar_model
    from schorg.WPSideBar import WPSideBar

    a = create_schema_org_model(type_=WPSideBarInheritedProperties)
    b = create_schema_org_model(type_=WPSideBarProperties)
    c = create_schema_org_model(type_=WPSideBarAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WPSideBar.schema()
    create_wpsidebar_model(WPSideBarAllProperties).schema()
    create_wpsidebar_model(WPSideBarInheritedProperties).schema()
    create_wpsidebar_model(WPSideBarProperties).schema()


def Residence_test():
    from schorg.Residence import ResidenceInheritedProperties
    from schorg.Residence import ResidenceProperties
    from schorg.Residence import ResidenceAllProperties
    from schorg.Residence import create_schema_org_model
    from schorg.Residence import create_residence_model
    from schorg.Residence import Residence

    a = create_schema_org_model(type_=ResidenceInheritedProperties)
    b = create_schema_org_model(type_=ResidenceProperties)
    c = create_schema_org_model(type_=ResidenceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Residence.schema()
    create_residence_model(ResidenceAllProperties).schema()
    create_residence_model(ResidenceInheritedProperties).schema()
    create_residence_model(ResidenceProperties).schema()


def ApartmentComplex_test():
    from schorg.ApartmentComplex import ApartmentComplexInheritedProperties
    from schorg.ApartmentComplex import ApartmentComplexProperties
    from schorg.ApartmentComplex import ApartmentComplexAllProperties
    from schorg.ApartmentComplex import create_schema_org_model
    from schorg.ApartmentComplex import create_apartmentcomplex_model
    from schorg.ApartmentComplex import ApartmentComplex

    a = create_schema_org_model(type_=ApartmentComplexInheritedProperties)
    b = create_schema_org_model(type_=ApartmentComplexProperties)
    c = create_schema_org_model(type_=ApartmentComplexAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ApartmentComplex.schema()
    create_apartmentcomplex_model(ApartmentComplexAllProperties).schema()
    create_apartmentcomplex_model(ApartmentComplexInheritedProperties).schema()
    create_apartmentcomplex_model(ApartmentComplexProperties).schema()


def Sculpture_test():
    from schorg.Sculpture import SculptureInheritedProperties
    from schorg.Sculpture import SculptureProperties
    from schorg.Sculpture import SculptureAllProperties
    from schorg.Sculpture import create_schema_org_model
    from schorg.Sculpture import create_sculpture_model
    from schorg.Sculpture import Sculpture

    a = create_schema_org_model(type_=SculptureInheritedProperties)
    b = create_schema_org_model(type_=SculptureProperties)
    c = create_schema_org_model(type_=SculptureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Sculpture.schema()
    create_sculpture_model(SculptureAllProperties).schema()
    create_sculpture_model(SculptureInheritedProperties).schema()
    create_sculpture_model(SculptureProperties).schema()


def Surgical_test():
    from schorg.Surgical import SurgicalInheritedProperties
    from schorg.Surgical import SurgicalProperties
    from schorg.Surgical import SurgicalAllProperties
    from schorg.Surgical import create_schema_org_model
    from schorg.Surgical import create_surgical_model
    from schorg.Surgical import Surgical

    a = create_schema_org_model(type_=SurgicalInheritedProperties)
    b = create_schema_org_model(type_=SurgicalProperties)
    c = create_schema_org_model(type_=SurgicalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Surgical.schema()
    create_surgical_model(SurgicalAllProperties).schema()
    create_surgical_model(SurgicalInheritedProperties).schema()
    create_surgical_model(SurgicalProperties).schema()


def Terminated_test():
    from schorg.Terminated import TerminatedInheritedProperties
    from schorg.Terminated import TerminatedProperties
    from schorg.Terminated import TerminatedAllProperties
    from schorg.Terminated import create_schema_org_model
    from schorg.Terminated import create_terminated_model
    from schorg.Terminated import Terminated

    a = create_schema_org_model(type_=TerminatedInheritedProperties)
    b = create_schema_org_model(type_=TerminatedProperties)
    c = create_schema_org_model(type_=TerminatedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Terminated.schema()
    create_terminated_model(TerminatedAllProperties).schema()
    create_terminated_model(TerminatedInheritedProperties).schema()
    create_terminated_model(TerminatedProperties).schema()


def EnergyStarEnergyEfficiencyEnumeration_test():
    from schorg.EnergyStarEnergyEfficiencyEnumeration import (
        EnergyStarEnergyEfficiencyEnumerationInheritedProperties,
    )
    from schorg.EnergyStarEnergyEfficiencyEnumeration import (
        EnergyStarEnergyEfficiencyEnumerationProperties,
    )
    from schorg.EnergyStarEnergyEfficiencyEnumeration import (
        EnergyStarEnergyEfficiencyEnumerationAllProperties,
    )
    from schorg.EnergyStarEnergyEfficiencyEnumeration import create_schema_org_model
    from schorg.EnergyStarEnergyEfficiencyEnumeration import (
        create_energystarenergyefficiencyenumeration_model,
    )
    from schorg.EnergyStarEnergyEfficiencyEnumeration import (
        EnergyStarEnergyEfficiencyEnumeration,
    )

    a = create_schema_org_model(
        type_=EnergyStarEnergyEfficiencyEnumerationInheritedProperties
    )
    b = create_schema_org_model(type_=EnergyStarEnergyEfficiencyEnumerationProperties)
    c = create_schema_org_model(
        type_=EnergyStarEnergyEfficiencyEnumerationAllProperties
    )
    a.schema()
    b.schema()
    c.schema()
    EnergyStarEnergyEfficiencyEnumeration.schema()
    create_energystarenergyefficiencyenumeration_model(
        EnergyStarEnergyEfficiencyEnumerationAllProperties
    ).schema()
    create_energystarenergyefficiencyenumeration_model(
        EnergyStarEnergyEfficiencyEnumerationInheritedProperties
    ).schema()
    create_energystarenergyefficiencyenumeration_model(
        EnergyStarEnergyEfficiencyEnumerationProperties
    ).schema()


def BankAccount_test():
    from schorg.BankAccount import BankAccountInheritedProperties
    from schorg.BankAccount import BankAccountProperties
    from schorg.BankAccount import BankAccountAllProperties
    from schorg.BankAccount import create_schema_org_model
    from schorg.BankAccount import create_bankaccount_model
    from schorg.BankAccount import BankAccount

    a = create_schema_org_model(type_=BankAccountInheritedProperties)
    b = create_schema_org_model(type_=BankAccountProperties)
    c = create_schema_org_model(type_=BankAccountAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BankAccount.schema()
    create_bankaccount_model(BankAccountAllProperties).schema()
    create_bankaccount_model(BankAccountInheritedProperties).schema()
    create_bankaccount_model(BankAccountProperties).schema()


def DepositAccount_test():
    from schorg.DepositAccount import DepositAccountInheritedProperties
    from schorg.DepositAccount import DepositAccountProperties
    from schorg.DepositAccount import DepositAccountAllProperties
    from schorg.DepositAccount import create_schema_org_model
    from schorg.DepositAccount import create_depositaccount_model
    from schorg.DepositAccount import DepositAccount

    a = create_schema_org_model(type_=DepositAccountInheritedProperties)
    b = create_schema_org_model(type_=DepositAccountProperties)
    c = create_schema_org_model(type_=DepositAccountAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DepositAccount.schema()
    create_depositaccount_model(DepositAccountAllProperties).schema()
    create_depositaccount_model(DepositAccountInheritedProperties).schema()
    create_depositaccount_model(DepositAccountProperties).schema()


def MovingCompany_test():
    from schorg.MovingCompany import MovingCompanyInheritedProperties
    from schorg.MovingCompany import MovingCompanyProperties
    from schorg.MovingCompany import MovingCompanyAllProperties
    from schorg.MovingCompany import create_schema_org_model
    from schorg.MovingCompany import create_movingcompany_model
    from schorg.MovingCompany import MovingCompany

    a = create_schema_org_model(type_=MovingCompanyInheritedProperties)
    b = create_schema_org_model(type_=MovingCompanyProperties)
    c = create_schema_org_model(type_=MovingCompanyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MovingCompany.schema()
    create_movingcompany_model(MovingCompanyAllProperties).schema()
    create_movingcompany_model(MovingCompanyInheritedProperties).schema()
    create_movingcompany_model(MovingCompanyProperties).schema()


def Offer_test():
    from schorg.Offer import OfferInheritedProperties
    from schorg.Offer import OfferProperties
    from schorg.Offer import OfferAllProperties
    from schorg.Offer import create_schema_org_model
    from schorg.Offer import create_offer_model
    from schorg.Offer import Offer

    a = create_schema_org_model(type_=OfferInheritedProperties)
    b = create_schema_org_model(type_=OfferProperties)
    c = create_schema_org_model(type_=OfferAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Offer.schema()
    create_offer_model(OfferAllProperties).schema()
    create_offer_model(OfferInheritedProperties).schema()
    create_offer_model(OfferProperties).schema()


def AggregateOffer_test():
    from schorg.AggregateOffer import AggregateOfferInheritedProperties
    from schorg.AggregateOffer import AggregateOfferProperties
    from schorg.AggregateOffer import AggregateOfferAllProperties
    from schorg.AggregateOffer import create_schema_org_model
    from schorg.AggregateOffer import create_aggregateoffer_model
    from schorg.AggregateOffer import AggregateOffer

    a = create_schema_org_model(type_=AggregateOfferInheritedProperties)
    b = create_schema_org_model(type_=AggregateOfferProperties)
    c = create_schema_org_model(type_=AggregateOfferAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AggregateOffer.schema()
    create_aggregateoffer_model(AggregateOfferAllProperties).schema()
    create_aggregateoffer_model(AggregateOfferInheritedProperties).schema()
    create_aggregateoffer_model(AggregateOfferProperties).schema()


def WearableSizeSystemGS1_test():
    from schorg.WearableSizeSystemGS1 import WearableSizeSystemGS1InheritedProperties
    from schorg.WearableSizeSystemGS1 import WearableSizeSystemGS1Properties
    from schorg.WearableSizeSystemGS1 import WearableSizeSystemGS1AllProperties
    from schorg.WearableSizeSystemGS1 import create_schema_org_model
    from schorg.WearableSizeSystemGS1 import create_wearablesizesystemgs1_model
    from schorg.WearableSizeSystemGS1 import WearableSizeSystemGS1

    a = create_schema_org_model(type_=WearableSizeSystemGS1InheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemGS1Properties)
    c = create_schema_org_model(type_=WearableSizeSystemGS1AllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemGS1.schema()
    create_wearablesizesystemgs1_model(WearableSizeSystemGS1AllProperties).schema()
    create_wearablesizesystemgs1_model(
        WearableSizeSystemGS1InheritedProperties
    ).schema()
    create_wearablesizesystemgs1_model(WearableSizeSystemGS1Properties).schema()


def EmploymentAgency_test():
    from schorg.EmploymentAgency import EmploymentAgencyInheritedProperties
    from schorg.EmploymentAgency import EmploymentAgencyProperties
    from schorg.EmploymentAgency import EmploymentAgencyAllProperties
    from schorg.EmploymentAgency import create_schema_org_model
    from schorg.EmploymentAgency import create_employmentagency_model
    from schorg.EmploymentAgency import EmploymentAgency

    a = create_schema_org_model(type_=EmploymentAgencyInheritedProperties)
    b = create_schema_org_model(type_=EmploymentAgencyProperties)
    c = create_schema_org_model(type_=EmploymentAgencyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmploymentAgency.schema()
    create_employmentagency_model(EmploymentAgencyAllProperties).schema()
    create_employmentagency_model(EmploymentAgencyInheritedProperties).schema()
    create_employmentagency_model(EmploymentAgencyProperties).schema()


def Ligament_test():
    from schorg.Ligament import LigamentInheritedProperties
    from schorg.Ligament import LigamentProperties
    from schorg.Ligament import LigamentAllProperties
    from schorg.Ligament import create_schema_org_model
    from schorg.Ligament import create_ligament_model
    from schorg.Ligament import Ligament

    a = create_schema_org_model(type_=LigamentInheritedProperties)
    b = create_schema_org_model(type_=LigamentProperties)
    c = create_schema_org_model(type_=LigamentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Ligament.schema()
    create_ligament_model(LigamentAllProperties).schema()
    create_ligament_model(LigamentInheritedProperties).schema()
    create_ligament_model(LigamentProperties).schema()


def FDAcategoryC_test():
    from schorg.FDAcategoryC import FDAcategoryCInheritedProperties
    from schorg.FDAcategoryC import FDAcategoryCProperties
    from schorg.FDAcategoryC import FDAcategoryCAllProperties
    from schorg.FDAcategoryC import create_schema_org_model
    from schorg.FDAcategoryC import create_fdacategoryc_model
    from schorg.FDAcategoryC import FDAcategoryC

    a = create_schema_org_model(type_=FDAcategoryCInheritedProperties)
    b = create_schema_org_model(type_=FDAcategoryCProperties)
    c = create_schema_org_model(type_=FDAcategoryCAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAcategoryC.schema()
    create_fdacategoryc_model(FDAcategoryCAllProperties).schema()
    create_fdacategoryc_model(FDAcategoryCInheritedProperties).schema()
    create_fdacategoryc_model(FDAcategoryCProperties).schema()


def Optometric_test():
    from schorg.Optometric import OptometricInheritedProperties
    from schorg.Optometric import OptometricProperties
    from schorg.Optometric import OptometricAllProperties
    from schorg.Optometric import create_schema_org_model
    from schorg.Optometric import create_optometric_model
    from schorg.Optometric import Optometric

    a = create_schema_org_model(type_=OptometricInheritedProperties)
    b = create_schema_org_model(type_=OptometricProperties)
    c = create_schema_org_model(type_=OptometricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Optometric.schema()
    create_optometric_model(OptometricAllProperties).schema()
    create_optometric_model(OptometricInheritedProperties).schema()
    create_optometric_model(OptometricProperties).schema()


def OutletStore_test():
    from schorg.OutletStore import OutletStoreInheritedProperties
    from schorg.OutletStore import OutletStoreProperties
    from schorg.OutletStore import OutletStoreAllProperties
    from schorg.OutletStore import create_schema_org_model
    from schorg.OutletStore import create_outletstore_model
    from schorg.OutletStore import OutletStore

    a = create_schema_org_model(type_=OutletStoreInheritedProperties)
    b = create_schema_org_model(type_=OutletStoreProperties)
    c = create_schema_org_model(type_=OutletStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OutletStore.schema()
    create_outletstore_model(OutletStoreAllProperties).schema()
    create_outletstore_model(OutletStoreInheritedProperties).schema()
    create_outletstore_model(OutletStoreProperties).schema()


def RefundTypeEnumeration_test():
    from schorg.RefundTypeEnumeration import RefundTypeEnumerationInheritedProperties
    from schorg.RefundTypeEnumeration import RefundTypeEnumerationProperties
    from schorg.RefundTypeEnumeration import RefundTypeEnumerationAllProperties
    from schorg.RefundTypeEnumeration import create_schema_org_model
    from schorg.RefundTypeEnumeration import create_refundtypeenumeration_model
    from schorg.RefundTypeEnumeration import RefundTypeEnumeration

    a = create_schema_org_model(type_=RefundTypeEnumerationInheritedProperties)
    b = create_schema_org_model(type_=RefundTypeEnumerationProperties)
    c = create_schema_org_model(type_=RefundTypeEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RefundTypeEnumeration.schema()
    create_refundtypeenumeration_model(RefundTypeEnumerationAllProperties).schema()
    create_refundtypeenumeration_model(
        RefundTypeEnumerationInheritedProperties
    ).schema()
    create_refundtypeenumeration_model(RefundTypeEnumerationProperties).schema()


def StoreCreditRefund_test():
    from schorg.StoreCreditRefund import StoreCreditRefundInheritedProperties
    from schorg.StoreCreditRefund import StoreCreditRefundProperties
    from schorg.StoreCreditRefund import StoreCreditRefundAllProperties
    from schorg.StoreCreditRefund import create_schema_org_model
    from schorg.StoreCreditRefund import create_storecreditrefund_model
    from schorg.StoreCreditRefund import StoreCreditRefund

    a = create_schema_org_model(type_=StoreCreditRefundInheritedProperties)
    b = create_schema_org_model(type_=StoreCreditRefundProperties)
    c = create_schema_org_model(type_=StoreCreditRefundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StoreCreditRefund.schema()
    create_storecreditrefund_model(StoreCreditRefundAllProperties).schema()
    create_storecreditrefund_model(StoreCreditRefundInheritedProperties).schema()
    create_storecreditrefund_model(StoreCreditRefundProperties).schema()


def InternetCafe_test():
    from schorg.InternetCafe import InternetCafeInheritedProperties
    from schorg.InternetCafe import InternetCafeProperties
    from schorg.InternetCafe import InternetCafeAllProperties
    from schorg.InternetCafe import create_schema_org_model
    from schorg.InternetCafe import create_internetcafe_model
    from schorg.InternetCafe import InternetCafe

    a = create_schema_org_model(type_=InternetCafeInheritedProperties)
    b = create_schema_org_model(type_=InternetCafeProperties)
    c = create_schema_org_model(type_=InternetCafeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InternetCafe.schema()
    create_internetcafe_model(InternetCafeAllProperties).schema()
    create_internetcafe_model(InternetCafeInheritedProperties).schema()
    create_internetcafe_model(InternetCafeProperties).schema()


def AdministrativeArea_test():
    from schorg.AdministrativeArea import AdministrativeAreaInheritedProperties
    from schorg.AdministrativeArea import AdministrativeAreaProperties
    from schorg.AdministrativeArea import AdministrativeAreaAllProperties
    from schorg.AdministrativeArea import create_schema_org_model
    from schorg.AdministrativeArea import create_administrativearea_model
    from schorg.AdministrativeArea import AdministrativeArea

    a = create_schema_org_model(type_=AdministrativeAreaInheritedProperties)
    b = create_schema_org_model(type_=AdministrativeAreaProperties)
    c = create_schema_org_model(type_=AdministrativeAreaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AdministrativeArea.schema()
    create_administrativearea_model(AdministrativeAreaAllProperties).schema()
    create_administrativearea_model(AdministrativeAreaInheritedProperties).schema()
    create_administrativearea_model(AdministrativeAreaProperties).schema()


def GameServerStatus_test():
    from schorg.GameServerStatus import GameServerStatusInheritedProperties
    from schorg.GameServerStatus import GameServerStatusProperties
    from schorg.GameServerStatus import GameServerStatusAllProperties
    from schorg.GameServerStatus import create_schema_org_model
    from schorg.GameServerStatus import create_gameserverstatus_model
    from schorg.GameServerStatus import GameServerStatus

    a = create_schema_org_model(type_=GameServerStatusInheritedProperties)
    b = create_schema_org_model(type_=GameServerStatusProperties)
    c = create_schema_org_model(type_=GameServerStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GameServerStatus.schema()
    create_gameserverstatus_model(GameServerStatusAllProperties).schema()
    create_gameserverstatus_model(GameServerStatusInheritedProperties).schema()
    create_gameserverstatus_model(GameServerStatusProperties).schema()


def OnlineFull_test():
    from schorg.OnlineFull import OnlineFullInheritedProperties
    from schorg.OnlineFull import OnlineFullProperties
    from schorg.OnlineFull import OnlineFullAllProperties
    from schorg.OnlineFull import create_schema_org_model
    from schorg.OnlineFull import create_onlinefull_model
    from schorg.OnlineFull import OnlineFull

    a = create_schema_org_model(type_=OnlineFullInheritedProperties)
    b = create_schema_org_model(type_=OnlineFullProperties)
    c = create_schema_org_model(type_=OnlineFullAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnlineFull.schema()
    create_onlinefull_model(OnlineFullAllProperties).schema()
    create_onlinefull_model(OnlineFullInheritedProperties).schema()
    create_onlinefull_model(OnlineFullProperties).schema()


def ConsumeAction_test():
    from schorg.ConsumeAction import ConsumeActionInheritedProperties
    from schorg.ConsumeAction import ConsumeActionProperties
    from schorg.ConsumeAction import ConsumeActionAllProperties
    from schorg.ConsumeAction import create_schema_org_model
    from schorg.ConsumeAction import create_consumeaction_model
    from schorg.ConsumeAction import ConsumeAction

    a = create_schema_org_model(type_=ConsumeActionInheritedProperties)
    b = create_schema_org_model(type_=ConsumeActionProperties)
    c = create_schema_org_model(type_=ConsumeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ConsumeAction.schema()
    create_consumeaction_model(ConsumeActionAllProperties).schema()
    create_consumeaction_model(ConsumeActionInheritedProperties).schema()
    create_consumeaction_model(ConsumeActionProperties).schema()


def ListenAction_test():
    from schorg.ListenAction import ListenActionInheritedProperties
    from schorg.ListenAction import ListenActionProperties
    from schorg.ListenAction import ListenActionAllProperties
    from schorg.ListenAction import create_schema_org_model
    from schorg.ListenAction import create_listenaction_model
    from schorg.ListenAction import ListenAction

    a = create_schema_org_model(type_=ListenActionInheritedProperties)
    b = create_schema_org_model(type_=ListenActionProperties)
    c = create_schema_org_model(type_=ListenActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ListenAction.schema()
    create_listenaction_model(ListenActionAllProperties).schema()
    create_listenaction_model(ListenActionInheritedProperties).schema()
    create_listenaction_model(ListenActionProperties).schema()


def SocialMediaPosting_test():
    from schorg.SocialMediaPosting import SocialMediaPostingInheritedProperties
    from schorg.SocialMediaPosting import SocialMediaPostingProperties
    from schorg.SocialMediaPosting import SocialMediaPostingAllProperties
    from schorg.SocialMediaPosting import create_schema_org_model
    from schorg.SocialMediaPosting import create_socialmediaposting_model
    from schorg.SocialMediaPosting import SocialMediaPosting

    a = create_schema_org_model(type_=SocialMediaPostingInheritedProperties)
    b = create_schema_org_model(type_=SocialMediaPostingProperties)
    c = create_schema_org_model(type_=SocialMediaPostingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SocialMediaPosting.schema()
    create_socialmediaposting_model(SocialMediaPostingAllProperties).schema()
    create_socialmediaposting_model(SocialMediaPostingInheritedProperties).schema()
    create_socialmediaposting_model(SocialMediaPostingProperties).schema()


def MusicVenue_test():
    from schorg.MusicVenue import MusicVenueInheritedProperties
    from schorg.MusicVenue import MusicVenueProperties
    from schorg.MusicVenue import MusicVenueAllProperties
    from schorg.MusicVenue import create_schema_org_model
    from schorg.MusicVenue import create_musicvenue_model
    from schorg.MusicVenue import MusicVenue

    a = create_schema_org_model(type_=MusicVenueInheritedProperties)
    b = create_schema_org_model(type_=MusicVenueProperties)
    c = create_schema_org_model(type_=MusicVenueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicVenue.schema()
    create_musicvenue_model(MusicVenueAllProperties).schema()
    create_musicvenue_model(MusicVenueInheritedProperties).schema()
    create_musicvenue_model(MusicVenueProperties).schema()


def Genetic_test():
    from schorg.Genetic import GeneticInheritedProperties
    from schorg.Genetic import GeneticProperties
    from schorg.Genetic import GeneticAllProperties
    from schorg.Genetic import create_schema_org_model
    from schorg.Genetic import create_genetic_model
    from schorg.Genetic import Genetic

    a = create_schema_org_model(type_=GeneticInheritedProperties)
    b = create_schema_org_model(type_=GeneticProperties)
    c = create_schema_org_model(type_=GeneticAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Genetic.schema()
    create_genetic_model(GeneticAllProperties).schema()
    create_genetic_model(GeneticInheritedProperties).schema()
    create_genetic_model(GeneticProperties).schema()


def Head_test():
    from schorg.Head import HeadInheritedProperties
    from schorg.Head import HeadProperties
    from schorg.Head import HeadAllProperties
    from schorg.Head import create_schema_org_model
    from schorg.Head import create_head_model
    from schorg.Head import Head

    a = create_schema_org_model(type_=HeadInheritedProperties)
    b = create_schema_org_model(type_=HeadProperties)
    c = create_schema_org_model(type_=HeadAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Head.schema()
    create_head_model(HeadAllProperties).schema()
    create_head_model(HeadInheritedProperties).schema()
    create_head_model(HeadProperties).schema()


def MSRP_test():
    from schorg.MSRP import MSRPInheritedProperties
    from schorg.MSRP import MSRPProperties
    from schorg.MSRP import MSRPAllProperties
    from schorg.MSRP import create_schema_org_model
    from schorg.MSRP import create_msrp_model
    from schorg.MSRP import MSRP

    a = create_schema_org_model(type_=MSRPInheritedProperties)
    b = create_schema_org_model(type_=MSRPProperties)
    c = create_schema_org_model(type_=MSRPAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MSRP.schema()
    create_msrp_model(MSRPAllProperties).schema()
    create_msrp_model(MSRPInheritedProperties).schema()
    create_msrp_model(MSRPProperties).schema()


def PoliceStation_test():
    from schorg.PoliceStation import PoliceStationInheritedProperties
    from schorg.PoliceStation import PoliceStationProperties
    from schorg.PoliceStation import PoliceStationAllProperties
    from schorg.PoliceStation import create_schema_org_model
    from schorg.PoliceStation import create_policestation_model
    from schorg.PoliceStation import PoliceStation

    a = create_schema_org_model(type_=PoliceStationInheritedProperties)
    b = create_schema_org_model(type_=PoliceStationProperties)
    c = create_schema_org_model(type_=PoliceStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PoliceStation.schema()
    create_policestation_model(PoliceStationAllProperties).schema()
    create_policestation_model(PoliceStationInheritedProperties).schema()
    create_policestation_model(PoliceStationProperties).schema()


def Friday_test():
    from schorg.Friday import FridayInheritedProperties
    from schorg.Friday import FridayProperties
    from schorg.Friday import FridayAllProperties
    from schorg.Friday import create_schema_org_model
    from schorg.Friday import create_friday_model
    from schorg.Friday import Friday

    a = create_schema_org_model(type_=FridayInheritedProperties)
    b = create_schema_org_model(type_=FridayProperties)
    c = create_schema_org_model(type_=FridayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Friday.schema()
    create_friday_model(FridayAllProperties).schema()
    create_friday_model(FridayInheritedProperties).schema()
    create_friday_model(FridayProperties).schema()


def PaymentStatusType_test():
    from schorg.PaymentStatusType import PaymentStatusTypeInheritedProperties
    from schorg.PaymentStatusType import PaymentStatusTypeProperties
    from schorg.PaymentStatusType import PaymentStatusTypeAllProperties
    from schorg.PaymentStatusType import create_schema_org_model
    from schorg.PaymentStatusType import create_paymentstatustype_model
    from schorg.PaymentStatusType import PaymentStatusType

    a = create_schema_org_model(type_=PaymentStatusTypeInheritedProperties)
    b = create_schema_org_model(type_=PaymentStatusTypeProperties)
    c = create_schema_org_model(type_=PaymentStatusTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentStatusType.schema()
    create_paymentstatustype_model(PaymentStatusTypeAllProperties).schema()
    create_paymentstatustype_model(PaymentStatusTypeInheritedProperties).schema()
    create_paymentstatustype_model(PaymentStatusTypeProperties).schema()


def PaymentComplete_test():
    from schorg.PaymentComplete import PaymentCompleteInheritedProperties
    from schorg.PaymentComplete import PaymentCompleteProperties
    from schorg.PaymentComplete import PaymentCompleteAllProperties
    from schorg.PaymentComplete import create_schema_org_model
    from schorg.PaymentComplete import create_paymentcomplete_model
    from schorg.PaymentComplete import PaymentComplete

    a = create_schema_org_model(type_=PaymentCompleteInheritedProperties)
    b = create_schema_org_model(type_=PaymentCompleteProperties)
    c = create_schema_org_model(type_=PaymentCompleteAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentComplete.schema()
    create_paymentcomplete_model(PaymentCompleteAllProperties).schema()
    create_paymentcomplete_model(PaymentCompleteInheritedProperties).schema()
    create_paymentcomplete_model(PaymentCompleteProperties).schema()


def CableOrSatelliteService_test():
    from schorg.CableOrSatelliteService import (
        CableOrSatelliteServiceInheritedProperties,
    )
    from schorg.CableOrSatelliteService import CableOrSatelliteServiceProperties
    from schorg.CableOrSatelliteService import CableOrSatelliteServiceAllProperties
    from schorg.CableOrSatelliteService import create_schema_org_model
    from schorg.CableOrSatelliteService import create_cableorsatelliteservice_model
    from schorg.CableOrSatelliteService import CableOrSatelliteService

    a = create_schema_org_model(type_=CableOrSatelliteServiceInheritedProperties)
    b = create_schema_org_model(type_=CableOrSatelliteServiceProperties)
    c = create_schema_org_model(type_=CableOrSatelliteServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CableOrSatelliteService.schema()
    create_cableorsatelliteservice_model(CableOrSatelliteServiceAllProperties).schema()
    create_cableorsatelliteservice_model(
        CableOrSatelliteServiceInheritedProperties
    ).schema()
    create_cableorsatelliteservice_model(CableOrSatelliteServiceProperties).schema()


def PayAction_test():
    from schorg.PayAction import PayActionInheritedProperties
    from schorg.PayAction import PayActionProperties
    from schorg.PayAction import PayActionAllProperties
    from schorg.PayAction import create_schema_org_model
    from schorg.PayAction import create_payaction_model
    from schorg.PayAction import PayAction

    a = create_schema_org_model(type_=PayActionInheritedProperties)
    b = create_schema_org_model(type_=PayActionProperties)
    c = create_schema_org_model(type_=PayActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PayAction.schema()
    create_payaction_model(PayActionAllProperties).schema()
    create_payaction_model(PayActionInheritedProperties).schema()
    create_payaction_model(PayActionProperties).schema()


def DeliveryTimeSettings_test():
    from schorg.DeliveryTimeSettings import DeliveryTimeSettingsInheritedProperties
    from schorg.DeliveryTimeSettings import DeliveryTimeSettingsProperties
    from schorg.DeliveryTimeSettings import DeliveryTimeSettingsAllProperties
    from schorg.DeliveryTimeSettings import create_schema_org_model
    from schorg.DeliveryTimeSettings import create_deliverytimesettings_model
    from schorg.DeliveryTimeSettings import DeliveryTimeSettings

    a = create_schema_org_model(type_=DeliveryTimeSettingsInheritedProperties)
    b = create_schema_org_model(type_=DeliveryTimeSettingsProperties)
    c = create_schema_org_model(type_=DeliveryTimeSettingsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeliveryTimeSettings.schema()
    create_deliverytimesettings_model(DeliveryTimeSettingsAllProperties).schema()
    create_deliverytimesettings_model(DeliveryTimeSettingsInheritedProperties).schema()
    create_deliverytimesettings_model(DeliveryTimeSettingsProperties).schema()


def WarrantyPromise_test():
    from schorg.WarrantyPromise import WarrantyPromiseInheritedProperties
    from schorg.WarrantyPromise import WarrantyPromiseProperties
    from schorg.WarrantyPromise import WarrantyPromiseAllProperties
    from schorg.WarrantyPromise import create_schema_org_model
    from schorg.WarrantyPromise import create_warrantypromise_model
    from schorg.WarrantyPromise import WarrantyPromise

    a = create_schema_org_model(type_=WarrantyPromiseInheritedProperties)
    b = create_schema_org_model(type_=WarrantyPromiseProperties)
    c = create_schema_org_model(type_=WarrantyPromiseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WarrantyPromise.schema()
    create_warrantypromise_model(WarrantyPromiseAllProperties).schema()
    create_warrantypromise_model(WarrantyPromiseInheritedProperties).schema()
    create_warrantypromise_model(WarrantyPromiseProperties).schema()


def MobilePhoneStore_test():
    from schorg.MobilePhoneStore import MobilePhoneStoreInheritedProperties
    from schorg.MobilePhoneStore import MobilePhoneStoreProperties
    from schorg.MobilePhoneStore import MobilePhoneStoreAllProperties
    from schorg.MobilePhoneStore import create_schema_org_model
    from schorg.MobilePhoneStore import create_mobilephonestore_model
    from schorg.MobilePhoneStore import MobilePhoneStore

    a = create_schema_org_model(type_=MobilePhoneStoreInheritedProperties)
    b = create_schema_org_model(type_=MobilePhoneStoreProperties)
    c = create_schema_org_model(type_=MobilePhoneStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MobilePhoneStore.schema()
    create_mobilephonestore_model(MobilePhoneStoreAllProperties).schema()
    create_mobilephonestore_model(MobilePhoneStoreInheritedProperties).schema()
    create_mobilephonestore_model(MobilePhoneStoreProperties).schema()


def Nonprofit501q_test():
    from schorg.Nonprofit501q import Nonprofit501qInheritedProperties
    from schorg.Nonprofit501q import Nonprofit501qProperties
    from schorg.Nonprofit501q import Nonprofit501qAllProperties
    from schorg.Nonprofit501q import create_schema_org_model
    from schorg.Nonprofit501q import create_nonprofit501q_model
    from schorg.Nonprofit501q import Nonprofit501q

    a = create_schema_org_model(type_=Nonprofit501qInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501qProperties)
    c = create_schema_org_model(type_=Nonprofit501qAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501q.schema()
    create_nonprofit501q_model(Nonprofit501qAllProperties).schema()
    create_nonprofit501q_model(Nonprofit501qInheritedProperties).schema()
    create_nonprofit501q_model(Nonprofit501qProperties).schema()


def DrugCost_test():
    from schorg.DrugCost import DrugCostInheritedProperties
    from schorg.DrugCost import DrugCostProperties
    from schorg.DrugCost import DrugCostAllProperties
    from schorg.DrugCost import create_schema_org_model
    from schorg.DrugCost import create_drugcost_model
    from schorg.DrugCost import DrugCost

    a = create_schema_org_model(type_=DrugCostInheritedProperties)
    b = create_schema_org_model(type_=DrugCostProperties)
    c = create_schema_org_model(type_=DrugCostAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugCost.schema()
    create_drugcost_model(DrugCostAllProperties).schema()
    create_drugcost_model(DrugCostInheritedProperties).schema()
    create_drugcost_model(DrugCostProperties).schema()


def ReadPermission_test():
    from schorg.ReadPermission import ReadPermissionInheritedProperties
    from schorg.ReadPermission import ReadPermissionProperties
    from schorg.ReadPermission import ReadPermissionAllProperties
    from schorg.ReadPermission import create_schema_org_model
    from schorg.ReadPermission import create_readpermission_model
    from schorg.ReadPermission import ReadPermission

    a = create_schema_org_model(type_=ReadPermissionInheritedProperties)
    b = create_schema_org_model(type_=ReadPermissionProperties)
    c = create_schema_org_model(type_=ReadPermissionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReadPermission.schema()
    create_readpermission_model(ReadPermissionAllProperties).schema()
    create_readpermission_model(ReadPermissionInheritedProperties).schema()
    create_readpermission_model(ReadPermissionProperties).schema()


def WearableSizeSystemContinental_test():
    from schorg.WearableSizeSystemContinental import (
        WearableSizeSystemContinentalInheritedProperties,
    )
    from schorg.WearableSizeSystemContinental import (
        WearableSizeSystemContinentalProperties,
    )
    from schorg.WearableSizeSystemContinental import (
        WearableSizeSystemContinentalAllProperties,
    )
    from schorg.WearableSizeSystemContinental import create_schema_org_model
    from schorg.WearableSizeSystemContinental import (
        create_wearablesizesystemcontinental_model,
    )
    from schorg.WearableSizeSystemContinental import WearableSizeSystemContinental

    a = create_schema_org_model(type_=WearableSizeSystemContinentalInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemContinentalProperties)
    c = create_schema_org_model(type_=WearableSizeSystemContinentalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemContinental.schema()
    create_wearablesizesystemcontinental_model(
        WearableSizeSystemContinentalAllProperties
    ).schema()
    create_wearablesizesystemcontinental_model(
        WearableSizeSystemContinentalInheritedProperties
    ).schema()
    create_wearablesizesystemcontinental_model(
        WearableSizeSystemContinentalProperties
    ).schema()


def RentAction_test():
    from schorg.RentAction import RentActionInheritedProperties
    from schorg.RentAction import RentActionProperties
    from schorg.RentAction import RentActionAllProperties
    from schorg.RentAction import create_schema_org_model
    from schorg.RentAction import create_rentaction_model
    from schorg.RentAction import RentAction

    a = create_schema_org_model(type_=RentActionInheritedProperties)
    b = create_schema_org_model(type_=RentActionProperties)
    c = create_schema_org_model(type_=RentActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RentAction.schema()
    create_rentaction_model(RentActionAllProperties).schema()
    create_rentaction_model(RentActionInheritedProperties).schema()
    create_rentaction_model(RentActionProperties).schema()


def ShortStory_test():
    from schorg.ShortStory import ShortStoryInheritedProperties
    from schorg.ShortStory import ShortStoryProperties
    from schorg.ShortStory import ShortStoryAllProperties
    from schorg.ShortStory import create_schema_org_model
    from schorg.ShortStory import create_shortstory_model
    from schorg.ShortStory import ShortStory

    a = create_schema_org_model(type_=ShortStoryInheritedProperties)
    b = create_schema_org_model(type_=ShortStoryProperties)
    c = create_schema_org_model(type_=ShortStoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShortStory.schema()
    create_shortstory_model(ShortStoryAllProperties).schema()
    create_shortstory_model(ShortStoryInheritedProperties).schema()
    create_shortstory_model(ShortStoryProperties).schema()


def BreadcrumbList_test():
    from schorg.BreadcrumbList import BreadcrumbListInheritedProperties
    from schorg.BreadcrumbList import BreadcrumbListProperties
    from schorg.BreadcrumbList import BreadcrumbListAllProperties
    from schorg.BreadcrumbList import create_schema_org_model
    from schorg.BreadcrumbList import create_breadcrumblist_model
    from schorg.BreadcrumbList import BreadcrumbList

    a = create_schema_org_model(type_=BreadcrumbListInheritedProperties)
    b = create_schema_org_model(type_=BreadcrumbListProperties)
    c = create_schema_org_model(type_=BreadcrumbListAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BreadcrumbList.schema()
    create_breadcrumblist_model(BreadcrumbListAllProperties).schema()
    create_breadcrumblist_model(BreadcrumbListInheritedProperties).schema()
    create_breadcrumblist_model(BreadcrumbListProperties).schema()


def MedicalObservationalStudyDesign_test():
    from schorg.MedicalObservationalStudyDesign import (
        MedicalObservationalStudyDesignInheritedProperties,
    )
    from schorg.MedicalObservationalStudyDesign import (
        MedicalObservationalStudyDesignProperties,
    )
    from schorg.MedicalObservationalStudyDesign import (
        MedicalObservationalStudyDesignAllProperties,
    )
    from schorg.MedicalObservationalStudyDesign import create_schema_org_model
    from schorg.MedicalObservationalStudyDesign import (
        create_medicalobservationalstudydesign_model,
    )
    from schorg.MedicalObservationalStudyDesign import MedicalObservationalStudyDesign

    a = create_schema_org_model(
        type_=MedicalObservationalStudyDesignInheritedProperties
    )
    b = create_schema_org_model(type_=MedicalObservationalStudyDesignProperties)
    c = create_schema_org_model(type_=MedicalObservationalStudyDesignAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalObservationalStudyDesign.schema()
    create_medicalobservationalstudydesign_model(
        MedicalObservationalStudyDesignAllProperties
    ).schema()
    create_medicalobservationalstudydesign_model(
        MedicalObservationalStudyDesignInheritedProperties
    ).schema()
    create_medicalobservationalstudydesign_model(
        MedicalObservationalStudyDesignProperties
    ).schema()


def Observational_test():
    from schorg.Observational import ObservationalInheritedProperties
    from schorg.Observational import ObservationalProperties
    from schorg.Observational import ObservationalAllProperties
    from schorg.Observational import create_schema_org_model
    from schorg.Observational import create_observational_model
    from schorg.Observational import Observational

    a = create_schema_org_model(type_=ObservationalInheritedProperties)
    b = create_schema_org_model(type_=ObservationalProperties)
    c = create_schema_org_model(type_=ObservationalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Observational.schema()
    create_observational_model(ObservationalAllProperties).schema()
    create_observational_model(ObservationalInheritedProperties).schema()
    create_observational_model(ObservationalProperties).schema()


def LandmarksOrHistoricalBuildings_test():
    from schorg.LandmarksOrHistoricalBuildings import (
        LandmarksOrHistoricalBuildingsInheritedProperties,
    )
    from schorg.LandmarksOrHistoricalBuildings import (
        LandmarksOrHistoricalBuildingsProperties,
    )
    from schorg.LandmarksOrHistoricalBuildings import (
        LandmarksOrHistoricalBuildingsAllProperties,
    )
    from schorg.LandmarksOrHistoricalBuildings import create_schema_org_model
    from schorg.LandmarksOrHistoricalBuildings import (
        create_landmarksorhistoricalbuildings_model,
    )
    from schorg.LandmarksOrHistoricalBuildings import LandmarksOrHistoricalBuildings

    a = create_schema_org_model(type_=LandmarksOrHistoricalBuildingsInheritedProperties)
    b = create_schema_org_model(type_=LandmarksOrHistoricalBuildingsProperties)
    c = create_schema_org_model(type_=LandmarksOrHistoricalBuildingsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LandmarksOrHistoricalBuildings.schema()
    create_landmarksorhistoricalbuildings_model(
        LandmarksOrHistoricalBuildingsAllProperties
    ).schema()
    create_landmarksorhistoricalbuildings_model(
        LandmarksOrHistoricalBuildingsInheritedProperties
    ).schema()
    create_landmarksorhistoricalbuildings_model(
        LandmarksOrHistoricalBuildingsProperties
    ).schema()


def Seat_test():
    from schorg.Seat import SeatInheritedProperties
    from schorg.Seat import SeatProperties
    from schorg.Seat import SeatAllProperties
    from schorg.Seat import create_schema_org_model
    from schorg.Seat import create_seat_model
    from schorg.Seat import Seat

    a = create_schema_org_model(type_=SeatInheritedProperties)
    b = create_schema_org_model(type_=SeatProperties)
    c = create_schema_org_model(type_=SeatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Seat.schema()
    create_seat_model(SeatAllProperties).schema()
    create_seat_model(SeatInheritedProperties).schema()
    create_seat_model(SeatProperties).schema()


def PaymentService_test():
    from schorg.PaymentService import PaymentServiceInheritedProperties
    from schorg.PaymentService import PaymentServiceProperties
    from schorg.PaymentService import PaymentServiceAllProperties
    from schorg.PaymentService import create_schema_org_model
    from schorg.PaymentService import create_paymentservice_model
    from schorg.PaymentService import PaymentService

    a = create_schema_org_model(type_=PaymentServiceInheritedProperties)
    b = create_schema_org_model(type_=PaymentServiceProperties)
    c = create_schema_org_model(type_=PaymentServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentService.schema()
    create_paymentservice_model(PaymentServiceAllProperties).schema()
    create_paymentservice_model(PaymentServiceInheritedProperties).schema()
    create_paymentservice_model(PaymentServiceProperties).schema()


def PercutaneousProcedure_test():
    from schorg.PercutaneousProcedure import PercutaneousProcedureInheritedProperties
    from schorg.PercutaneousProcedure import PercutaneousProcedureProperties
    from schorg.PercutaneousProcedure import PercutaneousProcedureAllProperties
    from schorg.PercutaneousProcedure import create_schema_org_model
    from schorg.PercutaneousProcedure import create_percutaneousprocedure_model
    from schorg.PercutaneousProcedure import PercutaneousProcedure

    a = create_schema_org_model(type_=PercutaneousProcedureInheritedProperties)
    b = create_schema_org_model(type_=PercutaneousProcedureProperties)
    c = create_schema_org_model(type_=PercutaneousProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PercutaneousProcedure.schema()
    create_percutaneousprocedure_model(PercutaneousProcedureAllProperties).schema()
    create_percutaneousprocedure_model(
        PercutaneousProcedureInheritedProperties
    ).schema()
    create_percutaneousprocedure_model(PercutaneousProcedureProperties).schema()


def OpenTrial_test():
    from schorg.OpenTrial import OpenTrialInheritedProperties
    from schorg.OpenTrial import OpenTrialProperties
    from schorg.OpenTrial import OpenTrialAllProperties
    from schorg.OpenTrial import create_schema_org_model
    from schorg.OpenTrial import create_opentrial_model
    from schorg.OpenTrial import OpenTrial

    a = create_schema_org_model(type_=OpenTrialInheritedProperties)
    b = create_schema_org_model(type_=OpenTrialProperties)
    c = create_schema_org_model(type_=OpenTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OpenTrial.schema()
    create_opentrial_model(OpenTrialAllProperties).schema()
    create_opentrial_model(OpenTrialInheritedProperties).schema()
    create_opentrial_model(OpenTrialProperties).schema()


def PaymentDeclined_test():
    from schorg.PaymentDeclined import PaymentDeclinedInheritedProperties
    from schorg.PaymentDeclined import PaymentDeclinedProperties
    from schorg.PaymentDeclined import PaymentDeclinedAllProperties
    from schorg.PaymentDeclined import create_schema_org_model
    from schorg.PaymentDeclined import create_paymentdeclined_model
    from schorg.PaymentDeclined import PaymentDeclined

    a = create_schema_org_model(type_=PaymentDeclinedInheritedProperties)
    b = create_schema_org_model(type_=PaymentDeclinedProperties)
    c = create_schema_org_model(type_=PaymentDeclinedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentDeclined.schema()
    create_paymentdeclined_model(PaymentDeclinedAllProperties).schema()
    create_paymentdeclined_model(PaymentDeclinedInheritedProperties).schema()
    create_paymentdeclined_model(PaymentDeclinedProperties).schema()


def MusicAlbumProductionType_test():
    from schorg.MusicAlbumProductionType import (
        MusicAlbumProductionTypeInheritedProperties,
    )
    from schorg.MusicAlbumProductionType import MusicAlbumProductionTypeProperties
    from schorg.MusicAlbumProductionType import MusicAlbumProductionTypeAllProperties
    from schorg.MusicAlbumProductionType import create_schema_org_model
    from schorg.MusicAlbumProductionType import create_musicalbumproductiontype_model
    from schorg.MusicAlbumProductionType import MusicAlbumProductionType

    a = create_schema_org_model(type_=MusicAlbumProductionTypeInheritedProperties)
    b = create_schema_org_model(type_=MusicAlbumProductionTypeProperties)
    c = create_schema_org_model(type_=MusicAlbumProductionTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicAlbumProductionType.schema()
    create_musicalbumproductiontype_model(
        MusicAlbumProductionTypeAllProperties
    ).schema()
    create_musicalbumproductiontype_model(
        MusicAlbumProductionTypeInheritedProperties
    ).schema()
    create_musicalbumproductiontype_model(MusicAlbumProductionTypeProperties).schema()


def Museum_test():
    from schorg.Museum import MuseumInheritedProperties
    from schorg.Museum import MuseumProperties
    from schorg.Museum import MuseumAllProperties
    from schorg.Museum import create_schema_org_model
    from schorg.Museum import create_museum_model
    from schorg.Museum import Museum

    a = create_schema_org_model(type_=MuseumInheritedProperties)
    b = create_schema_org_model(type_=MuseumProperties)
    c = create_schema_org_model(type_=MuseumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Museum.schema()
    create_museum_model(MuseumAllProperties).schema()
    create_museum_model(MuseumInheritedProperties).schema()
    create_museum_model(MuseumProperties).schema()


def Taxi_test():
    from schorg.Taxi import TaxiInheritedProperties
    from schorg.Taxi import TaxiProperties
    from schorg.Taxi import TaxiAllProperties
    from schorg.Taxi import create_schema_org_model
    from schorg.Taxi import create_taxi_model
    from schorg.Taxi import Taxi

    a = create_schema_org_model(type_=TaxiInheritedProperties)
    b = create_schema_org_model(type_=TaxiProperties)
    c = create_schema_org_model(type_=TaxiAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Taxi.schema()
    create_taxi_model(TaxiAllProperties).schema()
    create_taxi_model(TaxiInheritedProperties).schema()
    create_taxi_model(TaxiProperties).schema()


def TrainTrip_test():
    from schorg.TrainTrip import TrainTripInheritedProperties
    from schorg.TrainTrip import TrainTripProperties
    from schorg.TrainTrip import TrainTripAllProperties
    from schorg.TrainTrip import create_schema_org_model
    from schorg.TrainTrip import create_traintrip_model
    from schorg.TrainTrip import TrainTrip

    a = create_schema_org_model(type_=TrainTripInheritedProperties)
    b = create_schema_org_model(type_=TrainTripProperties)
    c = create_schema_org_model(type_=TrainTripAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TrainTrip.schema()
    create_traintrip_model(TrainTripAllProperties).schema()
    create_traintrip_model(TrainTripInheritedProperties).schema()
    create_traintrip_model(TrainTripProperties).schema()


def GeospatialGeometry_test():
    from schorg.GeospatialGeometry import GeospatialGeometryInheritedProperties
    from schorg.GeospatialGeometry import GeospatialGeometryProperties
    from schorg.GeospatialGeometry import GeospatialGeometryAllProperties
    from schorg.GeospatialGeometry import create_schema_org_model
    from schorg.GeospatialGeometry import create_geospatialgeometry_model
    from schorg.GeospatialGeometry import GeospatialGeometry

    a = create_schema_org_model(type_=GeospatialGeometryInheritedProperties)
    b = create_schema_org_model(type_=GeospatialGeometryProperties)
    c = create_schema_org_model(type_=GeospatialGeometryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GeospatialGeometry.schema()
    create_geospatialgeometry_model(GeospatialGeometryAllProperties).schema()
    create_geospatialgeometry_model(GeospatialGeometryInheritedProperties).schema()
    create_geospatialgeometry_model(GeospatialGeometryProperties).schema()


def HealthAndBeautyBusiness_test():
    from schorg.HealthAndBeautyBusiness import (
        HealthAndBeautyBusinessInheritedProperties,
    )
    from schorg.HealthAndBeautyBusiness import HealthAndBeautyBusinessProperties
    from schorg.HealthAndBeautyBusiness import HealthAndBeautyBusinessAllProperties
    from schorg.HealthAndBeautyBusiness import create_schema_org_model
    from schorg.HealthAndBeautyBusiness import create_healthandbeautybusiness_model
    from schorg.HealthAndBeautyBusiness import HealthAndBeautyBusiness

    a = create_schema_org_model(type_=HealthAndBeautyBusinessInheritedProperties)
    b = create_schema_org_model(type_=HealthAndBeautyBusinessProperties)
    c = create_schema_org_model(type_=HealthAndBeautyBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthAndBeautyBusiness.schema()
    create_healthandbeautybusiness_model(HealthAndBeautyBusinessAllProperties).schema()
    create_healthandbeautybusiness_model(
        HealthAndBeautyBusinessInheritedProperties
    ).schema()
    create_healthandbeautybusiness_model(HealthAndBeautyBusinessProperties).schema()


def Nonprofit501c24_test():
    from schorg.Nonprofit501c24 import Nonprofit501c24InheritedProperties
    from schorg.Nonprofit501c24 import Nonprofit501c24Properties
    from schorg.Nonprofit501c24 import Nonprofit501c24AllProperties
    from schorg.Nonprofit501c24 import create_schema_org_model
    from schorg.Nonprofit501c24 import create_nonprofit501c24_model
    from schorg.Nonprofit501c24 import Nonprofit501c24

    a = create_schema_org_model(type_=Nonprofit501c24InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c24Properties)
    c = create_schema_org_model(type_=Nonprofit501c24AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c24.schema()
    create_nonprofit501c24_model(Nonprofit501c24AllProperties).schema()
    create_nonprofit501c24_model(Nonprofit501c24InheritedProperties).schema()
    create_nonprofit501c24_model(Nonprofit501c24Properties).schema()


def Vessel_test():
    from schorg.Vessel import VesselInheritedProperties
    from schorg.Vessel import VesselProperties
    from schorg.Vessel import VesselAllProperties
    from schorg.Vessel import create_schema_org_model
    from schorg.Vessel import create_vessel_model
    from schorg.Vessel import Vessel

    a = create_schema_org_model(type_=VesselInheritedProperties)
    b = create_schema_org_model(type_=VesselProperties)
    c = create_schema_org_model(type_=VesselAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Vessel.schema()
    create_vessel_model(VesselAllProperties).schema()
    create_vessel_model(VesselInheritedProperties).schema()
    create_vessel_model(VesselProperties).schema()


def Vein_test():
    from schorg.Vein import VeinInheritedProperties
    from schorg.Vein import VeinProperties
    from schorg.Vein import VeinAllProperties
    from schorg.Vein import create_schema_org_model
    from schorg.Vein import create_vein_model
    from schorg.Vein import Vein

    a = create_schema_org_model(type_=VeinInheritedProperties)
    b = create_schema_org_model(type_=VeinProperties)
    c = create_schema_org_model(type_=VeinAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Vein.schema()
    create_vein_model(VeinAllProperties).schema()
    create_vein_model(VeinInheritedProperties).schema()
    create_vein_model(VeinProperties).schema()


def ItemListOrderType_test():
    from schorg.ItemListOrderType import ItemListOrderTypeInheritedProperties
    from schorg.ItemListOrderType import ItemListOrderTypeProperties
    from schorg.ItemListOrderType import ItemListOrderTypeAllProperties
    from schorg.ItemListOrderType import create_schema_org_model
    from schorg.ItemListOrderType import create_itemlistordertype_model
    from schorg.ItemListOrderType import ItemListOrderType

    a = create_schema_org_model(type_=ItemListOrderTypeInheritedProperties)
    b = create_schema_org_model(type_=ItemListOrderTypeProperties)
    c = create_schema_org_model(type_=ItemListOrderTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemListOrderType.schema()
    create_itemlistordertype_model(ItemListOrderTypeAllProperties).schema()
    create_itemlistordertype_model(ItemListOrderTypeInheritedProperties).schema()
    create_itemlistordertype_model(ItemListOrderTypeProperties).schema()


def ItemListOrderDescending_test():
    from schorg.ItemListOrderDescending import (
        ItemListOrderDescendingInheritedProperties,
    )
    from schorg.ItemListOrderDescending import ItemListOrderDescendingProperties
    from schorg.ItemListOrderDescending import ItemListOrderDescendingAllProperties
    from schorg.ItemListOrderDescending import create_schema_org_model
    from schorg.ItemListOrderDescending import create_itemlistorderdescending_model
    from schorg.ItemListOrderDescending import ItemListOrderDescending

    a = create_schema_org_model(type_=ItemListOrderDescendingInheritedProperties)
    b = create_schema_org_model(type_=ItemListOrderDescendingProperties)
    c = create_schema_org_model(type_=ItemListOrderDescendingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemListOrderDescending.schema()
    create_itemlistorderdescending_model(ItemListOrderDescendingAllProperties).schema()
    create_itemlistorderdescending_model(
        ItemListOrderDescendingInheritedProperties
    ).schema()
    create_itemlistorderdescending_model(ItemListOrderDescendingProperties).schema()


def MedicalEvidenceLevel_test():
    from schorg.MedicalEvidenceLevel import MedicalEvidenceLevelInheritedProperties
    from schorg.MedicalEvidenceLevel import MedicalEvidenceLevelProperties
    from schorg.MedicalEvidenceLevel import MedicalEvidenceLevelAllProperties
    from schorg.MedicalEvidenceLevel import create_schema_org_model
    from schorg.MedicalEvidenceLevel import create_medicalevidencelevel_model
    from schorg.MedicalEvidenceLevel import MedicalEvidenceLevel

    a = create_schema_org_model(type_=MedicalEvidenceLevelInheritedProperties)
    b = create_schema_org_model(type_=MedicalEvidenceLevelProperties)
    c = create_schema_org_model(type_=MedicalEvidenceLevelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalEvidenceLevel.schema()
    create_medicalevidencelevel_model(MedicalEvidenceLevelAllProperties).schema()
    create_medicalevidencelevel_model(MedicalEvidenceLevelInheritedProperties).schema()
    create_medicalevidencelevel_model(MedicalEvidenceLevelProperties).schema()


def EvidenceLevelC_test():
    from schorg.EvidenceLevelC import EvidenceLevelCInheritedProperties
    from schorg.EvidenceLevelC import EvidenceLevelCProperties
    from schorg.EvidenceLevelC import EvidenceLevelCAllProperties
    from schorg.EvidenceLevelC import create_schema_org_model
    from schorg.EvidenceLevelC import create_evidencelevelc_model
    from schorg.EvidenceLevelC import EvidenceLevelC

    a = create_schema_org_model(type_=EvidenceLevelCInheritedProperties)
    b = create_schema_org_model(type_=EvidenceLevelCProperties)
    c = create_schema_org_model(type_=EvidenceLevelCAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EvidenceLevelC.schema()
    create_evidencelevelc_model(EvidenceLevelCAllProperties).schema()
    create_evidencelevelc_model(EvidenceLevelCInheritedProperties).schema()
    create_evidencelevelc_model(EvidenceLevelCProperties).schema()


def Artery_test():
    from schorg.Artery import ArteryInheritedProperties
    from schorg.Artery import ArteryProperties
    from schorg.Artery import ArteryAllProperties
    from schorg.Artery import create_schema_org_model
    from schorg.Artery import create_artery_model
    from schorg.Artery import Artery

    a = create_schema_org_model(type_=ArteryInheritedProperties)
    b = create_schema_org_model(type_=ArteryProperties)
    c = create_schema_org_model(type_=ArteryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Artery.schema()
    create_artery_model(ArteryAllProperties).schema()
    create_artery_model(ArteryInheritedProperties).schema()
    create_artery_model(ArteryProperties).schema()


def NoninvasiveProcedure_test():
    from schorg.NoninvasiveProcedure import NoninvasiveProcedureInheritedProperties
    from schorg.NoninvasiveProcedure import NoninvasiveProcedureProperties
    from schorg.NoninvasiveProcedure import NoninvasiveProcedureAllProperties
    from schorg.NoninvasiveProcedure import create_schema_org_model
    from schorg.NoninvasiveProcedure import create_noninvasiveprocedure_model
    from schorg.NoninvasiveProcedure import NoninvasiveProcedure

    a = create_schema_org_model(type_=NoninvasiveProcedureInheritedProperties)
    b = create_schema_org_model(type_=NoninvasiveProcedureProperties)
    c = create_schema_org_model(type_=NoninvasiveProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NoninvasiveProcedure.schema()
    create_noninvasiveprocedure_model(NoninvasiveProcedureAllProperties).schema()
    create_noninvasiveprocedure_model(NoninvasiveProcedureInheritedProperties).schema()
    create_noninvasiveprocedure_model(NoninvasiveProcedureProperties).schema()


def SiteNavigationElement_test():
    from schorg.SiteNavigationElement import SiteNavigationElementInheritedProperties
    from schorg.SiteNavigationElement import SiteNavigationElementProperties
    from schorg.SiteNavigationElement import SiteNavigationElementAllProperties
    from schorg.SiteNavigationElement import create_schema_org_model
    from schorg.SiteNavigationElement import create_sitenavigationelement_model
    from schorg.SiteNavigationElement import SiteNavigationElement

    a = create_schema_org_model(type_=SiteNavigationElementInheritedProperties)
    b = create_schema_org_model(type_=SiteNavigationElementProperties)
    c = create_schema_org_model(type_=SiteNavigationElementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SiteNavigationElement.schema()
    create_sitenavigationelement_model(SiteNavigationElementAllProperties).schema()
    create_sitenavigationelement_model(
        SiteNavigationElementInheritedProperties
    ).schema()
    create_sitenavigationelement_model(SiteNavigationElementProperties).schema()


def Neck_test():
    from schorg.Neck import NeckInheritedProperties
    from schorg.Neck import NeckProperties
    from schorg.Neck import NeckAllProperties
    from schorg.Neck import create_schema_org_model
    from schorg.Neck import create_neck_model
    from schorg.Neck import Neck

    a = create_schema_org_model(type_=NeckInheritedProperties)
    b = create_schema_org_model(type_=NeckProperties)
    c = create_schema_org_model(type_=NeckAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Neck.schema()
    create_neck_model(NeckAllProperties).schema()
    create_neck_model(NeckInheritedProperties).schema()
    create_neck_model(NeckProperties).schema()


def DoseSchedule_test():
    from schorg.DoseSchedule import DoseScheduleInheritedProperties
    from schorg.DoseSchedule import DoseScheduleProperties
    from schorg.DoseSchedule import DoseScheduleAllProperties
    from schorg.DoseSchedule import create_schema_org_model
    from schorg.DoseSchedule import create_doseschedule_model
    from schorg.DoseSchedule import DoseSchedule

    a = create_schema_org_model(type_=DoseScheduleInheritedProperties)
    b = create_schema_org_model(type_=DoseScheduleProperties)
    c = create_schema_org_model(type_=DoseScheduleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DoseSchedule.schema()
    create_doseschedule_model(DoseScheduleAllProperties).schema()
    create_doseschedule_model(DoseScheduleInheritedProperties).schema()
    create_doseschedule_model(DoseScheduleProperties).schema()


def ReturnLabelSourceEnumeration_test():
    from schorg.ReturnLabelSourceEnumeration import (
        ReturnLabelSourceEnumerationInheritedProperties,
    )
    from schorg.ReturnLabelSourceEnumeration import (
        ReturnLabelSourceEnumerationProperties,
    )
    from schorg.ReturnLabelSourceEnumeration import (
        ReturnLabelSourceEnumerationAllProperties,
    )
    from schorg.ReturnLabelSourceEnumeration import create_schema_org_model
    from schorg.ReturnLabelSourceEnumeration import (
        create_returnlabelsourceenumeration_model,
    )
    from schorg.ReturnLabelSourceEnumeration import ReturnLabelSourceEnumeration

    a = create_schema_org_model(type_=ReturnLabelSourceEnumerationInheritedProperties)
    b = create_schema_org_model(type_=ReturnLabelSourceEnumerationProperties)
    c = create_schema_org_model(type_=ReturnLabelSourceEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnLabelSourceEnumeration.schema()
    create_returnlabelsourceenumeration_model(
        ReturnLabelSourceEnumerationAllProperties
    ).schema()
    create_returnlabelsourceenumeration_model(
        ReturnLabelSourceEnumerationInheritedProperties
    ).schema()
    create_returnlabelsourceenumeration_model(
        ReturnLabelSourceEnumerationProperties
    ).schema()


def ReturnLabelInBox_test():
    from schorg.ReturnLabelInBox import ReturnLabelInBoxInheritedProperties
    from schorg.ReturnLabelInBox import ReturnLabelInBoxProperties
    from schorg.ReturnLabelInBox import ReturnLabelInBoxAllProperties
    from schorg.ReturnLabelInBox import create_schema_org_model
    from schorg.ReturnLabelInBox import create_returnlabelinbox_model
    from schorg.ReturnLabelInBox import ReturnLabelInBox

    a = create_schema_org_model(type_=ReturnLabelInBoxInheritedProperties)
    b = create_schema_org_model(type_=ReturnLabelInBoxProperties)
    c = create_schema_org_model(type_=ReturnLabelInBoxAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnLabelInBox.schema()
    create_returnlabelinbox_model(ReturnLabelInBoxAllProperties).schema()
    create_returnlabelinbox_model(ReturnLabelInBoxInheritedProperties).schema()
    create_returnlabelinbox_model(ReturnLabelInBoxProperties).schema()


def HealthcareConsideration_test():
    from schorg.HealthcareConsideration import (
        HealthcareConsiderationInheritedProperties,
    )
    from schorg.HealthcareConsideration import HealthcareConsiderationProperties
    from schorg.HealthcareConsideration import HealthcareConsiderationAllProperties
    from schorg.HealthcareConsideration import create_schema_org_model
    from schorg.HealthcareConsideration import create_healthcareconsideration_model
    from schorg.HealthcareConsideration import HealthcareConsideration

    a = create_schema_org_model(type_=HealthcareConsiderationInheritedProperties)
    b = create_schema_org_model(type_=HealthcareConsiderationProperties)
    c = create_schema_org_model(type_=HealthcareConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthcareConsideration.schema()
    create_healthcareconsideration_model(HealthcareConsiderationAllProperties).schema()
    create_healthcareconsideration_model(
        HealthcareConsiderationInheritedProperties
    ).schema()
    create_healthcareconsideration_model(HealthcareConsiderationProperties).schema()


def InformAction_test():
    from schorg.InformAction import InformActionInheritedProperties
    from schorg.InformAction import InformActionProperties
    from schorg.InformAction import InformActionAllProperties
    from schorg.InformAction import create_schema_org_model
    from schorg.InformAction import create_informaction_model
    from schorg.InformAction import InformAction

    a = create_schema_org_model(type_=InformActionInheritedProperties)
    b = create_schema_org_model(type_=InformActionProperties)
    c = create_schema_org_model(type_=InformActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InformAction.schema()
    create_informaction_model(InformActionAllProperties).schema()
    create_informaction_model(InformActionInheritedProperties).schema()
    create_informaction_model(InformActionProperties).schema()


def ConfirmAction_test():
    from schorg.ConfirmAction import ConfirmActionInheritedProperties
    from schorg.ConfirmAction import ConfirmActionProperties
    from schorg.ConfirmAction import ConfirmActionAllProperties
    from schorg.ConfirmAction import create_schema_org_model
    from schorg.ConfirmAction import create_confirmaction_model
    from schorg.ConfirmAction import ConfirmAction

    a = create_schema_org_model(type_=ConfirmActionInheritedProperties)
    b = create_schema_org_model(type_=ConfirmActionProperties)
    c = create_schema_org_model(type_=ConfirmActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ConfirmAction.schema()
    create_confirmaction_model(ConfirmActionAllProperties).schema()
    create_confirmaction_model(ConfirmActionInheritedProperties).schema()
    create_confirmaction_model(ConfirmActionProperties).schema()


def FoodService_test():
    from schorg.FoodService import FoodServiceInheritedProperties
    from schorg.FoodService import FoodServiceProperties
    from schorg.FoodService import FoodServiceAllProperties
    from schorg.FoodService import create_schema_org_model
    from schorg.FoodService import create_foodservice_model
    from schorg.FoodService import FoodService

    a = create_schema_org_model(type_=FoodServiceInheritedProperties)
    b = create_schema_org_model(type_=FoodServiceProperties)
    c = create_schema_org_model(type_=FoodServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FoodService.schema()
    create_foodservice_model(FoodServiceAllProperties).schema()
    create_foodservice_model(FoodServiceInheritedProperties).schema()
    create_foodservice_model(FoodServiceProperties).schema()


def ControlAction_test():
    from schorg.ControlAction import ControlActionInheritedProperties
    from schorg.ControlAction import ControlActionProperties
    from schorg.ControlAction import ControlActionAllProperties
    from schorg.ControlAction import create_schema_org_model
    from schorg.ControlAction import create_controlaction_model
    from schorg.ControlAction import ControlAction

    a = create_schema_org_model(type_=ControlActionInheritedProperties)
    b = create_schema_org_model(type_=ControlActionProperties)
    c = create_schema_org_model(type_=ControlActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ControlAction.schema()
    create_controlaction_model(ControlActionAllProperties).schema()
    create_controlaction_model(ControlActionInheritedProperties).schema()
    create_controlaction_model(ControlActionProperties).schema()


def DeactivateAction_test():
    from schorg.DeactivateAction import DeactivateActionInheritedProperties
    from schorg.DeactivateAction import DeactivateActionProperties
    from schorg.DeactivateAction import DeactivateActionAllProperties
    from schorg.DeactivateAction import create_schema_org_model
    from schorg.DeactivateAction import create_deactivateaction_model
    from schorg.DeactivateAction import DeactivateAction

    a = create_schema_org_model(type_=DeactivateActionInheritedProperties)
    b = create_schema_org_model(type_=DeactivateActionProperties)
    c = create_schema_org_model(type_=DeactivateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeactivateAction.schema()
    create_deactivateaction_model(DeactivateActionAllProperties).schema()
    create_deactivateaction_model(DeactivateActionInheritedProperties).schema()
    create_deactivateaction_model(DeactivateActionProperties).schema()


def TheaterGroup_test():
    from schorg.TheaterGroup import TheaterGroupInheritedProperties
    from schorg.TheaterGroup import TheaterGroupProperties
    from schorg.TheaterGroup import TheaterGroupAllProperties
    from schorg.TheaterGroup import create_schema_org_model
    from schorg.TheaterGroup import create_theatergroup_model
    from schorg.TheaterGroup import TheaterGroup

    a = create_schema_org_model(type_=TheaterGroupInheritedProperties)
    b = create_schema_org_model(type_=TheaterGroupProperties)
    c = create_schema_org_model(type_=TheaterGroupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TheaterGroup.schema()
    create_theatergroup_model(TheaterGroupAllProperties).schema()
    create_theatergroup_model(TheaterGroupInheritedProperties).schema()
    create_theatergroup_model(TheaterGroupProperties).schema()


def OrderPaymentDue_test():
    from schorg.OrderPaymentDue import OrderPaymentDueInheritedProperties
    from schorg.OrderPaymentDue import OrderPaymentDueProperties
    from schorg.OrderPaymentDue import OrderPaymentDueAllProperties
    from schorg.OrderPaymentDue import create_schema_org_model
    from schorg.OrderPaymentDue import create_orderpaymentdue_model
    from schorg.OrderPaymentDue import OrderPaymentDue

    a = create_schema_org_model(type_=OrderPaymentDueInheritedProperties)
    b = create_schema_org_model(type_=OrderPaymentDueProperties)
    c = create_schema_org_model(type_=OrderPaymentDueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderPaymentDue.schema()
    create_orderpaymentdue_model(OrderPaymentDueAllProperties).schema()
    create_orderpaymentdue_model(OrderPaymentDueInheritedProperties).schema()
    create_orderpaymentdue_model(OrderPaymentDueProperties).schema()


def AutoRental_test():
    from schorg.AutoRental import AutoRentalInheritedProperties
    from schorg.AutoRental import AutoRentalProperties
    from schorg.AutoRental import AutoRentalAllProperties
    from schorg.AutoRental import create_schema_org_model
    from schorg.AutoRental import create_autorental_model
    from schorg.AutoRental import AutoRental

    a = create_schema_org_model(type_=AutoRentalInheritedProperties)
    b = create_schema_org_model(type_=AutoRentalProperties)
    c = create_schema_org_model(type_=AutoRentalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoRental.schema()
    create_autorental_model(AutoRentalAllProperties).schema()
    create_autorental_model(AutoRentalInheritedProperties).schema()
    create_autorental_model(AutoRentalProperties).schema()


def DigitalFormat_test():
    from schorg.DigitalFormat import DigitalFormatInheritedProperties
    from schorg.DigitalFormat import DigitalFormatProperties
    from schorg.DigitalFormat import DigitalFormatAllProperties
    from schorg.DigitalFormat import create_schema_org_model
    from schorg.DigitalFormat import create_digitalformat_model
    from schorg.DigitalFormat import DigitalFormat

    a = create_schema_org_model(type_=DigitalFormatInheritedProperties)
    b = create_schema_org_model(type_=DigitalFormatProperties)
    c = create_schema_org_model(type_=DigitalFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalFormat.schema()
    create_digitalformat_model(DigitalFormatAllProperties).schema()
    create_digitalformat_model(DigitalFormatInheritedProperties).schema()
    create_digitalformat_model(DigitalFormatProperties).schema()


def InviteAction_test():
    from schorg.InviteAction import InviteActionInheritedProperties
    from schorg.InviteAction import InviteActionProperties
    from schorg.InviteAction import InviteActionAllProperties
    from schorg.InviteAction import create_schema_org_model
    from schorg.InviteAction import create_inviteaction_model
    from schorg.InviteAction import InviteAction

    a = create_schema_org_model(type_=InviteActionInheritedProperties)
    b = create_schema_org_model(type_=InviteActionProperties)
    c = create_schema_org_model(type_=InviteActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InviteAction.schema()
    create_inviteaction_model(InviteActionAllProperties).schema()
    create_inviteaction_model(InviteActionInheritedProperties).schema()
    create_inviteaction_model(InviteActionProperties).schema()


def PodcastSeries_test():
    from schorg.PodcastSeries import PodcastSeriesInheritedProperties
    from schorg.PodcastSeries import PodcastSeriesProperties
    from schorg.PodcastSeries import PodcastSeriesAllProperties
    from schorg.PodcastSeries import create_schema_org_model
    from schorg.PodcastSeries import create_podcastseries_model
    from schorg.PodcastSeries import PodcastSeries

    a = create_schema_org_model(type_=PodcastSeriesInheritedProperties)
    b = create_schema_org_model(type_=PodcastSeriesProperties)
    c = create_schema_org_model(type_=PodcastSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PodcastSeries.schema()
    create_podcastseries_model(PodcastSeriesAllProperties).schema()
    create_podcastseries_model(PodcastSeriesInheritedProperties).schema()
    create_podcastseries_model(PodcastSeriesProperties).schema()


def SizeSpecification_test():
    from schorg.SizeSpecification import SizeSpecificationInheritedProperties
    from schorg.SizeSpecification import SizeSpecificationProperties
    from schorg.SizeSpecification import SizeSpecificationAllProperties
    from schorg.SizeSpecification import create_schema_org_model
    from schorg.SizeSpecification import create_sizespecification_model
    from schorg.SizeSpecification import SizeSpecification

    a = create_schema_org_model(type_=SizeSpecificationInheritedProperties)
    b = create_schema_org_model(type_=SizeSpecificationProperties)
    c = create_schema_org_model(type_=SizeSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SizeSpecification.schema()
    create_sizespecification_model(SizeSpecificationAllProperties).schema()
    create_sizespecification_model(SizeSpecificationInheritedProperties).schema()
    create_sizespecification_model(SizeSpecificationProperties).schema()


def WebContent_test():
    from schorg.WebContent import WebContentInheritedProperties
    from schorg.WebContent import WebContentProperties
    from schorg.WebContent import WebContentAllProperties
    from schorg.WebContent import create_schema_org_model
    from schorg.WebContent import create_webcontent_model
    from schorg.WebContent import WebContent

    a = create_schema_org_model(type_=WebContentInheritedProperties)
    b = create_schema_org_model(type_=WebContentProperties)
    c = create_schema_org_model(type_=WebContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebContent.schema()
    create_webcontent_model(WebContentAllProperties).schema()
    create_webcontent_model(WebContentInheritedProperties).schema()
    create_webcontent_model(WebContentProperties).schema()


def HealthTopicContent_test():
    from schorg.HealthTopicContent import HealthTopicContentInheritedProperties
    from schorg.HealthTopicContent import HealthTopicContentProperties
    from schorg.HealthTopicContent import HealthTopicContentAllProperties
    from schorg.HealthTopicContent import create_schema_org_model
    from schorg.HealthTopicContent import create_healthtopiccontent_model
    from schorg.HealthTopicContent import HealthTopicContent

    a = create_schema_org_model(type_=HealthTopicContentInheritedProperties)
    b = create_schema_org_model(type_=HealthTopicContentProperties)
    c = create_schema_org_model(type_=HealthTopicContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthTopicContent.schema()
    create_healthtopiccontent_model(HealthTopicContentAllProperties).schema()
    create_healthtopiccontent_model(HealthTopicContentInheritedProperties).schema()
    create_healthtopiccontent_model(HealthTopicContentProperties).schema()


def CriticReview_test():
    from schorg.CriticReview import CriticReviewInheritedProperties
    from schorg.CriticReview import CriticReviewProperties
    from schorg.CriticReview import CriticReviewAllProperties
    from schorg.CriticReview import create_schema_org_model
    from schorg.CriticReview import create_criticreview_model
    from schorg.CriticReview import CriticReview

    a = create_schema_org_model(type_=CriticReviewInheritedProperties)
    b = create_schema_org_model(type_=CriticReviewProperties)
    c = create_schema_org_model(type_=CriticReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CriticReview.schema()
    create_criticreview_model(CriticReviewAllProperties).schema()
    create_criticreview_model(CriticReviewInheritedProperties).schema()
    create_criticreview_model(CriticReviewProperties).schema()


def CleaningFee_test():
    from schorg.CleaningFee import CleaningFeeInheritedProperties
    from schorg.CleaningFee import CleaningFeeProperties
    from schorg.CleaningFee import CleaningFeeAllProperties
    from schorg.CleaningFee import create_schema_org_model
    from schorg.CleaningFee import create_cleaningfee_model
    from schorg.CleaningFee import CleaningFee

    a = create_schema_org_model(type_=CleaningFeeInheritedProperties)
    b = create_schema_org_model(type_=CleaningFeeProperties)
    c = create_schema_org_model(type_=CleaningFeeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CleaningFee.schema()
    create_cleaningfee_model(CleaningFeeAllProperties).schema()
    create_cleaningfee_model(CleaningFeeInheritedProperties).schema()
    create_cleaningfee_model(CleaningFeeProperties).schema()


def Aquarium_test():
    from schorg.Aquarium import AquariumInheritedProperties
    from schorg.Aquarium import AquariumProperties
    from schorg.Aquarium import AquariumAllProperties
    from schorg.Aquarium import create_schema_org_model
    from schorg.Aquarium import create_aquarium_model
    from schorg.Aquarium import Aquarium

    a = create_schema_org_model(type_=AquariumInheritedProperties)
    b = create_schema_org_model(type_=AquariumProperties)
    c = create_schema_org_model(type_=AquariumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Aquarium.schema()
    create_aquarium_model(AquariumAllProperties).schema()
    create_aquarium_model(AquariumInheritedProperties).schema()
    create_aquarium_model(AquariumProperties).schema()


def WearableSizeSystemIT_test():
    from schorg.WearableSizeSystemIT import WearableSizeSystemITInheritedProperties
    from schorg.WearableSizeSystemIT import WearableSizeSystemITProperties
    from schorg.WearableSizeSystemIT import WearableSizeSystemITAllProperties
    from schorg.WearableSizeSystemIT import create_schema_org_model
    from schorg.WearableSizeSystemIT import create_wearablesizesystemit_model
    from schorg.WearableSizeSystemIT import WearableSizeSystemIT

    a = create_schema_org_model(type_=WearableSizeSystemITInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemITProperties)
    c = create_schema_org_model(type_=WearableSizeSystemITAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemIT.schema()
    create_wearablesizesystemit_model(WearableSizeSystemITAllProperties).schema()
    create_wearablesizesystemit_model(WearableSizeSystemITInheritedProperties).schema()
    create_wearablesizesystemit_model(WearableSizeSystemITProperties).schema()


def PublicSwimmingPool_test():
    from schorg.PublicSwimmingPool import PublicSwimmingPoolInheritedProperties
    from schorg.PublicSwimmingPool import PublicSwimmingPoolProperties
    from schorg.PublicSwimmingPool import PublicSwimmingPoolAllProperties
    from schorg.PublicSwimmingPool import create_schema_org_model
    from schorg.PublicSwimmingPool import create_publicswimmingpool_model
    from schorg.PublicSwimmingPool import PublicSwimmingPool

    a = create_schema_org_model(type_=PublicSwimmingPoolInheritedProperties)
    b = create_schema_org_model(type_=PublicSwimmingPoolProperties)
    c = create_schema_org_model(type_=PublicSwimmingPoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicSwimmingPool.schema()
    create_publicswimmingpool_model(PublicSwimmingPoolAllProperties).schema()
    create_publicswimmingpool_model(PublicSwimmingPoolInheritedProperties).schema()
    create_publicswimmingpool_model(PublicSwimmingPoolProperties).schema()


def WearableSizeGroupPlus_test():
    from schorg.WearableSizeGroupPlus import WearableSizeGroupPlusInheritedProperties
    from schorg.WearableSizeGroupPlus import WearableSizeGroupPlusProperties
    from schorg.WearableSizeGroupPlus import WearableSizeGroupPlusAllProperties
    from schorg.WearableSizeGroupPlus import create_schema_org_model
    from schorg.WearableSizeGroupPlus import create_wearablesizegroupplus_model
    from schorg.WearableSizeGroupPlus import WearableSizeGroupPlus

    a = create_schema_org_model(type_=WearableSizeGroupPlusInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupPlusProperties)
    c = create_schema_org_model(type_=WearableSizeGroupPlusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupPlus.schema()
    create_wearablesizegroupplus_model(WearableSizeGroupPlusAllProperties).schema()
    create_wearablesizegroupplus_model(
        WearableSizeGroupPlusInheritedProperties
    ).schema()
    create_wearablesizegroupplus_model(WearableSizeGroupPlusProperties).schema()


def PodcastEpisode_test():
    from schorg.PodcastEpisode import PodcastEpisodeInheritedProperties
    from schorg.PodcastEpisode import PodcastEpisodeProperties
    from schorg.PodcastEpisode import PodcastEpisodeAllProperties
    from schorg.PodcastEpisode import create_schema_org_model
    from schorg.PodcastEpisode import create_podcastepisode_model
    from schorg.PodcastEpisode import PodcastEpisode

    a = create_schema_org_model(type_=PodcastEpisodeInheritedProperties)
    b = create_schema_org_model(type_=PodcastEpisodeProperties)
    c = create_schema_org_model(type_=PodcastEpisodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PodcastEpisode.schema()
    create_podcastepisode_model(PodcastEpisodeAllProperties).schema()
    create_podcastepisode_model(PodcastEpisodeInheritedProperties).schema()
    create_podcastepisode_model(PodcastEpisodeProperties).schema()


def Dataset_test():
    from schorg.Dataset import DatasetInheritedProperties
    from schorg.Dataset import DatasetProperties
    from schorg.Dataset import DatasetAllProperties
    from schorg.Dataset import create_schema_org_model
    from schorg.Dataset import create_dataset_model
    from schorg.Dataset import Dataset

    a = create_schema_org_model(type_=DatasetInheritedProperties)
    b = create_schema_org_model(type_=DatasetProperties)
    c = create_schema_org_model(type_=DatasetAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Dataset.schema()
    create_dataset_model(DatasetAllProperties).schema()
    create_dataset_model(DatasetInheritedProperties).schema()
    create_dataset_model(DatasetProperties).schema()


def Conversation_test():
    from schorg.Conversation import ConversationInheritedProperties
    from schorg.Conversation import ConversationProperties
    from schorg.Conversation import ConversationAllProperties
    from schorg.Conversation import create_schema_org_model
    from schorg.Conversation import create_conversation_model
    from schorg.Conversation import Conversation

    a = create_schema_org_model(type_=ConversationInheritedProperties)
    b = create_schema_org_model(type_=ConversationProperties)
    c = create_schema_org_model(type_=ConversationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Conversation.schema()
    create_conversation_model(ConversationAllProperties).schema()
    create_conversation_model(ConversationInheritedProperties).schema()
    create_conversation_model(ConversationProperties).schema()


def MedicalOrganization_test():
    from schorg.MedicalOrganization import MedicalOrganizationInheritedProperties
    from schorg.MedicalOrganization import MedicalOrganizationProperties
    from schorg.MedicalOrganization import MedicalOrganizationAllProperties
    from schorg.MedicalOrganization import create_schema_org_model
    from schorg.MedicalOrganization import create_medicalorganization_model
    from schorg.MedicalOrganization import MedicalOrganization

    a = create_schema_org_model(type_=MedicalOrganizationInheritedProperties)
    b = create_schema_org_model(type_=MedicalOrganizationProperties)
    c = create_schema_org_model(type_=MedicalOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalOrganization.schema()
    create_medicalorganization_model(MedicalOrganizationAllProperties).schema()
    create_medicalorganization_model(MedicalOrganizationInheritedProperties).schema()
    create_medicalorganization_model(MedicalOrganizationProperties).schema()


def MedicalClinic_test():
    from schorg.MedicalClinic import MedicalClinicInheritedProperties
    from schorg.MedicalClinic import MedicalClinicProperties
    from schorg.MedicalClinic import MedicalClinicAllProperties
    from schorg.MedicalClinic import create_schema_org_model
    from schorg.MedicalClinic import create_medicalclinic_model
    from schorg.MedicalClinic import MedicalClinic

    a = create_schema_org_model(type_=MedicalClinicInheritedProperties)
    b = create_schema_org_model(type_=MedicalClinicProperties)
    c = create_schema_org_model(type_=MedicalClinicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalClinic.schema()
    create_medicalclinic_model(MedicalClinicAllProperties).schema()
    create_medicalclinic_model(MedicalClinicInheritedProperties).schema()
    create_medicalclinic_model(MedicalClinicProperties).schema()


def CovidTestingFacility_test():
    from schorg.CovidTestingFacility import CovidTestingFacilityInheritedProperties
    from schorg.CovidTestingFacility import CovidTestingFacilityProperties
    from schorg.CovidTestingFacility import CovidTestingFacilityAllProperties
    from schorg.CovidTestingFacility import create_schema_org_model
    from schorg.CovidTestingFacility import create_covidtestingfacility_model
    from schorg.CovidTestingFacility import CovidTestingFacility

    a = create_schema_org_model(type_=CovidTestingFacilityInheritedProperties)
    b = create_schema_org_model(type_=CovidTestingFacilityProperties)
    c = create_schema_org_model(type_=CovidTestingFacilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CovidTestingFacility.schema()
    create_covidtestingfacility_model(CovidTestingFacilityAllProperties).schema()
    create_covidtestingfacility_model(CovidTestingFacilityInheritedProperties).schema()
    create_covidtestingfacility_model(CovidTestingFacilityProperties).schema()


def OutOfStock_test():
    from schorg.OutOfStock import OutOfStockInheritedProperties
    from schorg.OutOfStock import OutOfStockProperties
    from schorg.OutOfStock import OutOfStockAllProperties
    from schorg.OutOfStock import create_schema_org_model
    from schorg.OutOfStock import create_outofstock_model
    from schorg.OutOfStock import OutOfStock

    a = create_schema_org_model(type_=OutOfStockInheritedProperties)
    b = create_schema_org_model(type_=OutOfStockProperties)
    c = create_schema_org_model(type_=OutOfStockAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OutOfStock.schema()
    create_outofstock_model(OutOfStockAllProperties).schema()
    create_outofstock_model(OutOfStockInheritedProperties).schema()
    create_outofstock_model(OutOfStockProperties).schema()


def PostalCodeRangeSpecification_test():
    from schorg.PostalCodeRangeSpecification import (
        PostalCodeRangeSpecificationInheritedProperties,
    )
    from schorg.PostalCodeRangeSpecification import (
        PostalCodeRangeSpecificationProperties,
    )
    from schorg.PostalCodeRangeSpecification import (
        PostalCodeRangeSpecificationAllProperties,
    )
    from schorg.PostalCodeRangeSpecification import create_schema_org_model
    from schorg.PostalCodeRangeSpecification import (
        create_postalcoderangespecification_model,
    )
    from schorg.PostalCodeRangeSpecification import PostalCodeRangeSpecification

    a = create_schema_org_model(type_=PostalCodeRangeSpecificationInheritedProperties)
    b = create_schema_org_model(type_=PostalCodeRangeSpecificationProperties)
    c = create_schema_org_model(type_=PostalCodeRangeSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PostalCodeRangeSpecification.schema()
    create_postalcoderangespecification_model(
        PostalCodeRangeSpecificationAllProperties
    ).schema()
    create_postalcoderangespecification_model(
        PostalCodeRangeSpecificationInheritedProperties
    ).schema()
    create_postalcoderangespecification_model(
        PostalCodeRangeSpecificationProperties
    ).schema()


def Nonprofit501c18_test():
    from schorg.Nonprofit501c18 import Nonprofit501c18InheritedProperties
    from schorg.Nonprofit501c18 import Nonprofit501c18Properties
    from schorg.Nonprofit501c18 import Nonprofit501c18AllProperties
    from schorg.Nonprofit501c18 import create_schema_org_model
    from schorg.Nonprofit501c18 import create_nonprofit501c18_model
    from schorg.Nonprofit501c18 import Nonprofit501c18

    a = create_schema_org_model(type_=Nonprofit501c18InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c18Properties)
    c = create_schema_org_model(type_=Nonprofit501c18AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c18.schema()
    create_nonprofit501c18_model(Nonprofit501c18AllProperties).schema()
    create_nonprofit501c18_model(Nonprofit501c18InheritedProperties).schema()
    create_nonprofit501c18_model(Nonprofit501c18Properties).schema()


def ReactAction_test():
    from schorg.ReactAction import ReactActionInheritedProperties
    from schorg.ReactAction import ReactActionProperties
    from schorg.ReactAction import ReactActionAllProperties
    from schorg.ReactAction import create_schema_org_model
    from schorg.ReactAction import create_reactaction_model
    from schorg.ReactAction import ReactAction

    a = create_schema_org_model(type_=ReactActionInheritedProperties)
    b = create_schema_org_model(type_=ReactActionProperties)
    c = create_schema_org_model(type_=ReactActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReactAction.schema()
    create_reactaction_model(ReactActionAllProperties).schema()
    create_reactaction_model(ReactActionInheritedProperties).schema()
    create_reactaction_model(ReactActionProperties).schema()


def WantAction_test():
    from schorg.WantAction import WantActionInheritedProperties
    from schorg.WantAction import WantActionProperties
    from schorg.WantAction import WantActionAllProperties
    from schorg.WantAction import create_schema_org_model
    from schorg.WantAction import create_wantaction_model
    from schorg.WantAction import WantAction

    a = create_schema_org_model(type_=WantActionInheritedProperties)
    b = create_schema_org_model(type_=WantActionProperties)
    c = create_schema_org_model(type_=WantActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WantAction.schema()
    create_wantaction_model(WantActionAllProperties).schema()
    create_wantaction_model(WantActionInheritedProperties).schema()
    create_wantaction_model(WantActionProperties).schema()


def MixtapeAlbum_test():
    from schorg.MixtapeAlbum import MixtapeAlbumInheritedProperties
    from schorg.MixtapeAlbum import MixtapeAlbumProperties
    from schorg.MixtapeAlbum import MixtapeAlbumAllProperties
    from schorg.MixtapeAlbum import create_schema_org_model
    from schorg.MixtapeAlbum import create_mixtapealbum_model
    from schorg.MixtapeAlbum import MixtapeAlbum

    a = create_schema_org_model(type_=MixtapeAlbumInheritedProperties)
    b = create_schema_org_model(type_=MixtapeAlbumProperties)
    c = create_schema_org_model(type_=MixtapeAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MixtapeAlbum.schema()
    create_mixtapealbum_model(MixtapeAlbumAllProperties).schema()
    create_mixtapealbum_model(MixtapeAlbumInheritedProperties).schema()
    create_mixtapealbum_model(MixtapeAlbumProperties).schema()


def Nonprofit501c20_test():
    from schorg.Nonprofit501c20 import Nonprofit501c20InheritedProperties
    from schorg.Nonprofit501c20 import Nonprofit501c20Properties
    from schorg.Nonprofit501c20 import Nonprofit501c20AllProperties
    from schorg.Nonprofit501c20 import create_schema_org_model
    from schorg.Nonprofit501c20 import create_nonprofit501c20_model
    from schorg.Nonprofit501c20 import Nonprofit501c20

    a = create_schema_org_model(type_=Nonprofit501c20InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c20Properties)
    c = create_schema_org_model(type_=Nonprofit501c20AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c20.schema()
    create_nonprofit501c20_model(Nonprofit501c20AllProperties).schema()
    create_nonprofit501c20_model(Nonprofit501c20InheritedProperties).schema()
    create_nonprofit501c20_model(Nonprofit501c20Properties).schema()


def Nonprofit501c15_test():
    from schorg.Nonprofit501c15 import Nonprofit501c15InheritedProperties
    from schorg.Nonprofit501c15 import Nonprofit501c15Properties
    from schorg.Nonprofit501c15 import Nonprofit501c15AllProperties
    from schorg.Nonprofit501c15 import create_schema_org_model
    from schorg.Nonprofit501c15 import create_nonprofit501c15_model
    from schorg.Nonprofit501c15 import Nonprofit501c15

    a = create_schema_org_model(type_=Nonprofit501c15InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c15Properties)
    c = create_schema_org_model(type_=Nonprofit501c15AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c15.schema()
    create_nonprofit501c15_model(Nonprofit501c15AllProperties).schema()
    create_nonprofit501c15_model(Nonprofit501c15InheritedProperties).schema()
    create_nonprofit501c15_model(Nonprofit501c15Properties).schema()


def BookFormatType_test():
    from schorg.BookFormatType import BookFormatTypeInheritedProperties
    from schorg.BookFormatType import BookFormatTypeProperties
    from schorg.BookFormatType import BookFormatTypeAllProperties
    from schorg.BookFormatType import create_schema_org_model
    from schorg.BookFormatType import create_bookformattype_model
    from schorg.BookFormatType import BookFormatType

    a = create_schema_org_model(type_=BookFormatTypeInheritedProperties)
    b = create_schema_org_model(type_=BookFormatTypeProperties)
    c = create_schema_org_model(type_=BookFormatTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BookFormatType.schema()
    create_bookformattype_model(BookFormatTypeAllProperties).schema()
    create_bookformattype_model(BookFormatTypeInheritedProperties).schema()
    create_bookformattype_model(BookFormatTypeProperties).schema()


def GraphicNovel_test():
    from schorg.GraphicNovel import GraphicNovelInheritedProperties
    from schorg.GraphicNovel import GraphicNovelProperties
    from schorg.GraphicNovel import GraphicNovelAllProperties
    from schorg.GraphicNovel import create_schema_org_model
    from schorg.GraphicNovel import create_graphicnovel_model
    from schorg.GraphicNovel import GraphicNovel

    a = create_schema_org_model(type_=GraphicNovelInheritedProperties)
    b = create_schema_org_model(type_=GraphicNovelProperties)
    c = create_schema_org_model(type_=GraphicNovelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GraphicNovel.schema()
    create_graphicnovel_model(GraphicNovelAllProperties).schema()
    create_graphicnovel_model(GraphicNovelInheritedProperties).schema()
    create_graphicnovel_model(GraphicNovelProperties).schema()


def TaxiReservation_test():
    from schorg.TaxiReservation import TaxiReservationInheritedProperties
    from schorg.TaxiReservation import TaxiReservationProperties
    from schorg.TaxiReservation import TaxiReservationAllProperties
    from schorg.TaxiReservation import create_schema_org_model
    from schorg.TaxiReservation import create_taxireservation_model
    from schorg.TaxiReservation import TaxiReservation

    a = create_schema_org_model(type_=TaxiReservationInheritedProperties)
    b = create_schema_org_model(type_=TaxiReservationProperties)
    c = create_schema_org_model(type_=TaxiReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TaxiReservation.schema()
    create_taxireservation_model(TaxiReservationAllProperties).schema()
    create_taxireservation_model(TaxiReservationInheritedProperties).schema()
    create_taxireservation_model(TaxiReservationProperties).schema()


def Bacteria_test():
    from schorg.Bacteria import BacteriaInheritedProperties
    from schorg.Bacteria import BacteriaProperties
    from schorg.Bacteria import BacteriaAllProperties
    from schorg.Bacteria import create_schema_org_model
    from schorg.Bacteria import create_bacteria_model
    from schorg.Bacteria import Bacteria

    a = create_schema_org_model(type_=BacteriaInheritedProperties)
    b = create_schema_org_model(type_=BacteriaProperties)
    c = create_schema_org_model(type_=BacteriaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Bacteria.schema()
    create_bacteria_model(BacteriaAllProperties).schema()
    create_bacteria_model(BacteriaInheritedProperties).schema()
    create_bacteria_model(BacteriaProperties).schema()


def NightClub_test():
    from schorg.NightClub import NightClubInheritedProperties
    from schorg.NightClub import NightClubProperties
    from schorg.NightClub import NightClubAllProperties
    from schorg.NightClub import create_schema_org_model
    from schorg.NightClub import create_nightclub_model
    from schorg.NightClub import NightClub

    a = create_schema_org_model(type_=NightClubInheritedProperties)
    b = create_schema_org_model(type_=NightClubProperties)
    c = create_schema_org_model(type_=NightClubAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NightClub.schema()
    create_nightclub_model(NightClubAllProperties).schema()
    create_nightclub_model(NightClubInheritedProperties).schema()
    create_nightclub_model(NightClubProperties).schema()


def OrganizeAction_test():
    from schorg.OrganizeAction import OrganizeActionInheritedProperties
    from schorg.OrganizeAction import OrganizeActionProperties
    from schorg.OrganizeAction import OrganizeActionAllProperties
    from schorg.OrganizeAction import create_schema_org_model
    from schorg.OrganizeAction import create_organizeaction_model
    from schorg.OrganizeAction import OrganizeAction

    a = create_schema_org_model(type_=OrganizeActionInheritedProperties)
    b = create_schema_org_model(type_=OrganizeActionProperties)
    c = create_schema_org_model(type_=OrganizeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrganizeAction.schema()
    create_organizeaction_model(OrganizeActionAllProperties).schema()
    create_organizeaction_model(OrganizeActionInheritedProperties).schema()
    create_organizeaction_model(OrganizeActionProperties).schema()


def PlanAction_test():
    from schorg.PlanAction import PlanActionInheritedProperties
    from schorg.PlanAction import PlanActionProperties
    from schorg.PlanAction import PlanActionAllProperties
    from schorg.PlanAction import create_schema_org_model
    from schorg.PlanAction import create_planaction_model
    from schorg.PlanAction import PlanAction

    a = create_schema_org_model(type_=PlanActionInheritedProperties)
    b = create_schema_org_model(type_=PlanActionProperties)
    c = create_schema_org_model(type_=PlanActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlanAction.schema()
    create_planaction_model(PlanActionAllProperties).schema()
    create_planaction_model(PlanActionInheritedProperties).schema()
    create_planaction_model(PlanActionProperties).schema()


def ScheduleAction_test():
    from schorg.ScheduleAction import ScheduleActionInheritedProperties
    from schorg.ScheduleAction import ScheduleActionProperties
    from schorg.ScheduleAction import ScheduleActionAllProperties
    from schorg.ScheduleAction import create_schema_org_model
    from schorg.ScheduleAction import create_scheduleaction_model
    from schorg.ScheduleAction import ScheduleAction

    a = create_schema_org_model(type_=ScheduleActionInheritedProperties)
    b = create_schema_org_model(type_=ScheduleActionProperties)
    c = create_schema_org_model(type_=ScheduleActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ScheduleAction.schema()
    create_scheduleaction_model(ScheduleActionAllProperties).schema()
    create_scheduleaction_model(ScheduleActionInheritedProperties).schema()
    create_scheduleaction_model(ScheduleActionProperties).schema()


def ScholarlyArticle_test():
    from schorg.ScholarlyArticle import ScholarlyArticleInheritedProperties
    from schorg.ScholarlyArticle import ScholarlyArticleProperties
    from schorg.ScholarlyArticle import ScholarlyArticleAllProperties
    from schorg.ScholarlyArticle import create_schema_org_model
    from schorg.ScholarlyArticle import create_scholarlyarticle_model
    from schorg.ScholarlyArticle import ScholarlyArticle

    a = create_schema_org_model(type_=ScholarlyArticleInheritedProperties)
    b = create_schema_org_model(type_=ScholarlyArticleProperties)
    c = create_schema_org_model(type_=ScholarlyArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ScholarlyArticle.schema()
    create_scholarlyarticle_model(ScholarlyArticleAllProperties).schema()
    create_scholarlyarticle_model(ScholarlyArticleInheritedProperties).schema()
    create_scholarlyarticle_model(ScholarlyArticleProperties).schema()


def PlaceOfWorship_test():
    from schorg.PlaceOfWorship import PlaceOfWorshipInheritedProperties
    from schorg.PlaceOfWorship import PlaceOfWorshipProperties
    from schorg.PlaceOfWorship import PlaceOfWorshipAllProperties
    from schorg.PlaceOfWorship import create_schema_org_model
    from schorg.PlaceOfWorship import create_placeofworship_model
    from schorg.PlaceOfWorship import PlaceOfWorship

    a = create_schema_org_model(type_=PlaceOfWorshipInheritedProperties)
    b = create_schema_org_model(type_=PlaceOfWorshipProperties)
    c = create_schema_org_model(type_=PlaceOfWorshipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlaceOfWorship.schema()
    create_placeofworship_model(PlaceOfWorshipAllProperties).schema()
    create_placeofworship_model(PlaceOfWorshipInheritedProperties).schema()
    create_placeofworship_model(PlaceOfWorshipProperties).schema()


def BuddhistTemple_test():
    from schorg.BuddhistTemple import BuddhistTempleInheritedProperties
    from schorg.BuddhistTemple import BuddhistTempleProperties
    from schorg.BuddhistTemple import BuddhistTempleAllProperties
    from schorg.BuddhistTemple import create_schema_org_model
    from schorg.BuddhistTemple import create_buddhisttemple_model
    from schorg.BuddhistTemple import BuddhistTemple

    a = create_schema_org_model(type_=BuddhistTempleInheritedProperties)
    b = create_schema_org_model(type_=BuddhistTempleProperties)
    c = create_schema_org_model(type_=BuddhistTempleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BuddhistTemple.schema()
    create_buddhisttemple_model(BuddhistTempleAllProperties).schema()
    create_buddhisttemple_model(BuddhistTempleInheritedProperties).schema()
    create_buddhisttemple_model(BuddhistTempleProperties).schema()


def SatiricalArticle_test():
    from schorg.SatiricalArticle import SatiricalArticleInheritedProperties
    from schorg.SatiricalArticle import SatiricalArticleProperties
    from schorg.SatiricalArticle import SatiricalArticleAllProperties
    from schorg.SatiricalArticle import create_schema_org_model
    from schorg.SatiricalArticle import create_satiricalarticle_model
    from schorg.SatiricalArticle import SatiricalArticle

    a = create_schema_org_model(type_=SatiricalArticleInheritedProperties)
    b = create_schema_org_model(type_=SatiricalArticleProperties)
    c = create_schema_org_model(type_=SatiricalArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SatiricalArticle.schema()
    create_satiricalarticle_model(SatiricalArticleAllProperties).schema()
    create_satiricalarticle_model(SatiricalArticleInheritedProperties).schema()
    create_satiricalarticle_model(SatiricalArticleProperties).schema()


def FoodEstablishment_test():
    from schorg.FoodEstablishment import FoodEstablishmentInheritedProperties
    from schorg.FoodEstablishment import FoodEstablishmentProperties
    from schorg.FoodEstablishment import FoodEstablishmentAllProperties
    from schorg.FoodEstablishment import create_schema_org_model
    from schorg.FoodEstablishment import create_foodestablishment_model
    from schorg.FoodEstablishment import FoodEstablishment

    a = create_schema_org_model(type_=FoodEstablishmentInheritedProperties)
    b = create_schema_org_model(type_=FoodEstablishmentProperties)
    c = create_schema_org_model(type_=FoodEstablishmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FoodEstablishment.schema()
    create_foodestablishment_model(FoodEstablishmentAllProperties).schema()
    create_foodestablishment_model(FoodEstablishmentInheritedProperties).schema()
    create_foodestablishment_model(FoodEstablishmentProperties).schema()


def MarryAction_test():
    from schorg.MarryAction import MarryActionInheritedProperties
    from schorg.MarryAction import MarryActionProperties
    from schorg.MarryAction import MarryActionAllProperties
    from schorg.MarryAction import create_schema_org_model
    from schorg.MarryAction import create_marryaction_model
    from schorg.MarryAction import MarryAction

    a = create_schema_org_model(type_=MarryActionInheritedProperties)
    b = create_schema_org_model(type_=MarryActionProperties)
    c = create_schema_org_model(type_=MarryActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MarryAction.schema()
    create_marryaction_model(MarryActionAllProperties).schema()
    create_marryaction_model(MarryActionInheritedProperties).schema()
    create_marryaction_model(MarryActionProperties).schema()


def ProfilePage_test():
    from schorg.ProfilePage import ProfilePageInheritedProperties
    from schorg.ProfilePage import ProfilePageProperties
    from schorg.ProfilePage import ProfilePageAllProperties
    from schorg.ProfilePage import create_schema_org_model
    from schorg.ProfilePage import create_profilepage_model
    from schorg.ProfilePage import ProfilePage

    a = create_schema_org_model(type_=ProfilePageInheritedProperties)
    b = create_schema_org_model(type_=ProfilePageProperties)
    c = create_schema_org_model(type_=ProfilePageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProfilePage.schema()
    create_profilepage_model(ProfilePageAllProperties).schema()
    create_profilepage_model(ProfilePageInheritedProperties).schema()
    create_profilepage_model(ProfilePageProperties).schema()


def AmusementPark_test():
    from schorg.AmusementPark import AmusementParkInheritedProperties
    from schorg.AmusementPark import AmusementParkProperties
    from schorg.AmusementPark import AmusementParkAllProperties
    from schorg.AmusementPark import create_schema_org_model
    from schorg.AmusementPark import create_amusementpark_model
    from schorg.AmusementPark import AmusementPark

    a = create_schema_org_model(type_=AmusementParkInheritedProperties)
    b = create_schema_org_model(type_=AmusementParkProperties)
    c = create_schema_org_model(type_=AmusementParkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AmusementPark.schema()
    create_amusementpark_model(AmusementParkAllProperties).schema()
    create_amusementpark_model(AmusementParkInheritedProperties).schema()
    create_amusementpark_model(AmusementParkProperties).schema()


def BowlingAlley_test():
    from schorg.BowlingAlley import BowlingAlleyInheritedProperties
    from schorg.BowlingAlley import BowlingAlleyProperties
    from schorg.BowlingAlley import BowlingAlleyAllProperties
    from schorg.BowlingAlley import create_schema_org_model
    from schorg.BowlingAlley import create_bowlingalley_model
    from schorg.BowlingAlley import BowlingAlley

    a = create_schema_org_model(type_=BowlingAlleyInheritedProperties)
    b = create_schema_org_model(type_=BowlingAlleyProperties)
    c = create_schema_org_model(type_=BowlingAlleyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BowlingAlley.schema()
    create_bowlingalley_model(BowlingAlleyAllProperties).schema()
    create_bowlingalley_model(BowlingAlleyInheritedProperties).schema()
    create_bowlingalley_model(BowlingAlleyProperties).schema()


def Sunday_test():
    from schorg.Sunday import SundayInheritedProperties
    from schorg.Sunday import SundayProperties
    from schorg.Sunday import SundayAllProperties
    from schorg.Sunday import create_schema_org_model
    from schorg.Sunday import create_sunday_model
    from schorg.Sunday import Sunday

    a = create_schema_org_model(type_=SundayInheritedProperties)
    b = create_schema_org_model(type_=SundayProperties)
    c = create_schema_org_model(type_=SundayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Sunday.schema()
    create_sunday_model(SundayAllProperties).schema()
    create_sunday_model(SundayInheritedProperties).schema()
    create_sunday_model(SundayProperties).schema()


def ScreeningHealthAspect_test():
    from schorg.ScreeningHealthAspect import ScreeningHealthAspectInheritedProperties
    from schorg.ScreeningHealthAspect import ScreeningHealthAspectProperties
    from schorg.ScreeningHealthAspect import ScreeningHealthAspectAllProperties
    from schorg.ScreeningHealthAspect import create_schema_org_model
    from schorg.ScreeningHealthAspect import create_screeninghealthaspect_model
    from schorg.ScreeningHealthAspect import ScreeningHealthAspect

    a = create_schema_org_model(type_=ScreeningHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=ScreeningHealthAspectProperties)
    c = create_schema_org_model(type_=ScreeningHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ScreeningHealthAspect.schema()
    create_screeninghealthaspect_model(ScreeningHealthAspectAllProperties).schema()
    create_screeninghealthaspect_model(
        ScreeningHealthAspectInheritedProperties
    ).schema()
    create_screeninghealthaspect_model(ScreeningHealthAspectProperties).schema()


def PaymentMethod_test():
    from schorg.PaymentMethod import PaymentMethodInheritedProperties
    from schorg.PaymentMethod import PaymentMethodProperties
    from schorg.PaymentMethod import PaymentMethodAllProperties
    from schorg.PaymentMethod import create_schema_org_model
    from schorg.PaymentMethod import create_paymentmethod_model
    from schorg.PaymentMethod import PaymentMethod

    a = create_schema_org_model(type_=PaymentMethodInheritedProperties)
    b = create_schema_org_model(type_=PaymentMethodProperties)
    c = create_schema_org_model(type_=PaymentMethodAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentMethod.schema()
    create_paymentmethod_model(PaymentMethodAllProperties).schema()
    create_paymentmethod_model(PaymentMethodInheritedProperties).schema()
    create_paymentmethod_model(PaymentMethodProperties).schema()


def PaymentCard_test():
    from schorg.PaymentCard import PaymentCardInheritedProperties
    from schorg.PaymentCard import PaymentCardProperties
    from schorg.PaymentCard import PaymentCardAllProperties
    from schorg.PaymentCard import create_schema_org_model
    from schorg.PaymentCard import create_paymentcard_model
    from schorg.PaymentCard import PaymentCard

    a = create_schema_org_model(type_=PaymentCardInheritedProperties)
    b = create_schema_org_model(type_=PaymentCardProperties)
    c = create_schema_org_model(type_=PaymentCardAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentCard.schema()
    create_paymentcard_model(PaymentCardAllProperties).schema()
    create_paymentcard_model(PaymentCardInheritedProperties).schema()
    create_paymentcard_model(PaymentCardProperties).schema()


def RespiratoryTherapy_test():
    from schorg.RespiratoryTherapy import RespiratoryTherapyInheritedProperties
    from schorg.RespiratoryTherapy import RespiratoryTherapyProperties
    from schorg.RespiratoryTherapy import RespiratoryTherapyAllProperties
    from schorg.RespiratoryTherapy import create_schema_org_model
    from schorg.RespiratoryTherapy import create_respiratorytherapy_model
    from schorg.RespiratoryTherapy import RespiratoryTherapy

    a = create_schema_org_model(type_=RespiratoryTherapyInheritedProperties)
    b = create_schema_org_model(type_=RespiratoryTherapyProperties)
    c = create_schema_org_model(type_=RespiratoryTherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RespiratoryTherapy.schema()
    create_respiratorytherapy_model(RespiratoryTherapyAllProperties).schema()
    create_respiratorytherapy_model(RespiratoryTherapyInheritedProperties).schema()
    create_respiratorytherapy_model(RespiratoryTherapyProperties).schema()


def DataFeed_test():
    from schorg.DataFeed import DataFeedInheritedProperties
    from schorg.DataFeed import DataFeedProperties
    from schorg.DataFeed import DataFeedAllProperties
    from schorg.DataFeed import create_schema_org_model
    from schorg.DataFeed import create_datafeed_model
    from schorg.DataFeed import DataFeed

    a = create_schema_org_model(type_=DataFeedInheritedProperties)
    b = create_schema_org_model(type_=DataFeedProperties)
    c = create_schema_org_model(type_=DataFeedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DataFeed.schema()
    create_datafeed_model(DataFeedAllProperties).schema()
    create_datafeed_model(DataFeedInheritedProperties).schema()
    create_datafeed_model(DataFeedProperties).schema()


def CarUsageType_test():
    from schorg.CarUsageType import CarUsageTypeInheritedProperties
    from schorg.CarUsageType import CarUsageTypeProperties
    from schorg.CarUsageType import CarUsageTypeAllProperties
    from schorg.CarUsageType import create_schema_org_model
    from schorg.CarUsageType import create_carusagetype_model
    from schorg.CarUsageType import CarUsageType

    a = create_schema_org_model(type_=CarUsageTypeInheritedProperties)
    b = create_schema_org_model(type_=CarUsageTypeProperties)
    c = create_schema_org_model(type_=CarUsageTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CarUsageType.schema()
    create_carusagetype_model(CarUsageTypeAllProperties).schema()
    create_carusagetype_model(CarUsageTypeInheritedProperties).schema()
    create_carusagetype_model(CarUsageTypeProperties).schema()


def TaxiVehicleUsage_test():
    from schorg.TaxiVehicleUsage import TaxiVehicleUsageInheritedProperties
    from schorg.TaxiVehicleUsage import TaxiVehicleUsageProperties
    from schorg.TaxiVehicleUsage import TaxiVehicleUsageAllProperties
    from schorg.TaxiVehicleUsage import create_schema_org_model
    from schorg.TaxiVehicleUsage import create_taxivehicleusage_model
    from schorg.TaxiVehicleUsage import TaxiVehicleUsage

    a = create_schema_org_model(type_=TaxiVehicleUsageInheritedProperties)
    b = create_schema_org_model(type_=TaxiVehicleUsageProperties)
    c = create_schema_org_model(type_=TaxiVehicleUsageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TaxiVehicleUsage.schema()
    create_taxivehicleusage_model(TaxiVehicleUsageAllProperties).schema()
    create_taxivehicleusage_model(TaxiVehicleUsageInheritedProperties).schema()
    create_taxivehicleusage_model(TaxiVehicleUsageProperties).schema()


def ElectronicsStore_test():
    from schorg.ElectronicsStore import ElectronicsStoreInheritedProperties
    from schorg.ElectronicsStore import ElectronicsStoreProperties
    from schorg.ElectronicsStore import ElectronicsStoreAllProperties
    from schorg.ElectronicsStore import create_schema_org_model
    from schorg.ElectronicsStore import create_electronicsstore_model
    from schorg.ElectronicsStore import ElectronicsStore

    a = create_schema_org_model(type_=ElectronicsStoreInheritedProperties)
    b = create_schema_org_model(type_=ElectronicsStoreProperties)
    c = create_schema_org_model(type_=ElectronicsStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ElectronicsStore.schema()
    create_electronicsstore_model(ElectronicsStoreAllProperties).schema()
    create_electronicsstore_model(ElectronicsStoreInheritedProperties).schema()
    create_electronicsstore_model(ElectronicsStoreProperties).schema()


def Toxicologic_test():
    from schorg.Toxicologic import ToxicologicInheritedProperties
    from schorg.Toxicologic import ToxicologicProperties
    from schorg.Toxicologic import ToxicologicAllProperties
    from schorg.Toxicologic import create_schema_org_model
    from schorg.Toxicologic import create_toxicologic_model
    from schorg.Toxicologic import Toxicologic

    a = create_schema_org_model(type_=ToxicologicInheritedProperties)
    b = create_schema_org_model(type_=ToxicologicProperties)
    c = create_schema_org_model(type_=ToxicologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Toxicologic.schema()
    create_toxicologic_model(ToxicologicAllProperties).schema()
    create_toxicologic_model(ToxicologicInheritedProperties).schema()
    create_toxicologic_model(ToxicologicProperties).schema()


def CDFormat_test():
    from schorg.CDFormat import CDFormatInheritedProperties
    from schorg.CDFormat import CDFormatProperties
    from schorg.CDFormat import CDFormatAllProperties
    from schorg.CDFormat import create_schema_org_model
    from schorg.CDFormat import create_cdformat_model
    from schorg.CDFormat import CDFormat

    a = create_schema_org_model(type_=CDFormatInheritedProperties)
    b = create_schema_org_model(type_=CDFormatProperties)
    c = create_schema_org_model(type_=CDFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CDFormat.schema()
    create_cdformat_model(CDFormatAllProperties).schema()
    create_cdformat_model(CDFormatInheritedProperties).schema()
    create_cdformat_model(CDFormatProperties).schema()


def VideoGameClip_test():
    from schorg.VideoGameClip import VideoGameClipInheritedProperties
    from schorg.VideoGameClip import VideoGameClipProperties
    from schorg.VideoGameClip import VideoGameClipAllProperties
    from schorg.VideoGameClip import create_schema_org_model
    from schorg.VideoGameClip import create_videogameclip_model
    from schorg.VideoGameClip import VideoGameClip

    a = create_schema_org_model(type_=VideoGameClipInheritedProperties)
    b = create_schema_org_model(type_=VideoGameClipProperties)
    c = create_schema_org_model(type_=VideoGameClipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoGameClip.schema()
    create_videogameclip_model(VideoGameClipAllProperties).schema()
    create_videogameclip_model(VideoGameClipInheritedProperties).schema()
    create_videogameclip_model(VideoGameClipProperties).schema()


def AchieveAction_test():
    from schorg.AchieveAction import AchieveActionInheritedProperties
    from schorg.AchieveAction import AchieveActionProperties
    from schorg.AchieveAction import AchieveActionAllProperties
    from schorg.AchieveAction import create_schema_org_model
    from schorg.AchieveAction import create_achieveaction_model
    from schorg.AchieveAction import AchieveAction

    a = create_schema_org_model(type_=AchieveActionInheritedProperties)
    b = create_schema_org_model(type_=AchieveActionProperties)
    c = create_schema_org_model(type_=AchieveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AchieveAction.schema()
    create_achieveaction_model(AchieveActionAllProperties).schema()
    create_achieveaction_model(AchieveActionInheritedProperties).schema()
    create_achieveaction_model(AchieveActionProperties).schema()


def TieAction_test():
    from schorg.TieAction import TieActionInheritedProperties
    from schorg.TieAction import TieActionProperties
    from schorg.TieAction import TieActionAllProperties
    from schorg.TieAction import create_schema_org_model
    from schorg.TieAction import create_tieaction_model
    from schorg.TieAction import TieAction

    a = create_schema_org_model(type_=TieActionInheritedProperties)
    b = create_schema_org_model(type_=TieActionProperties)
    c = create_schema_org_model(type_=TieActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TieAction.schema()
    create_tieaction_model(TieActionAllProperties).schema()
    create_tieaction_model(TieActionInheritedProperties).schema()
    create_tieaction_model(TieActionProperties).schema()


def AllWheelDriveConfiguration_test():
    from schorg.AllWheelDriveConfiguration import (
        AllWheelDriveConfigurationInheritedProperties,
    )
    from schorg.AllWheelDriveConfiguration import AllWheelDriveConfigurationProperties
    from schorg.AllWheelDriveConfiguration import (
        AllWheelDriveConfigurationAllProperties,
    )
    from schorg.AllWheelDriveConfiguration import create_schema_org_model
    from schorg.AllWheelDriveConfiguration import (
        create_allwheeldriveconfiguration_model,
    )
    from schorg.AllWheelDriveConfiguration import AllWheelDriveConfiguration

    a = create_schema_org_model(type_=AllWheelDriveConfigurationInheritedProperties)
    b = create_schema_org_model(type_=AllWheelDriveConfigurationProperties)
    c = create_schema_org_model(type_=AllWheelDriveConfigurationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AllWheelDriveConfiguration.schema()
    create_allwheeldriveconfiguration_model(
        AllWheelDriveConfigurationAllProperties
    ).schema()
    create_allwheeldriveconfiguration_model(
        AllWheelDriveConfigurationInheritedProperties
    ).schema()
    create_allwheeldriveconfiguration_model(
        AllWheelDriveConfigurationProperties
    ).schema()


def Bone_test():
    from schorg.Bone import BoneInheritedProperties
    from schorg.Bone import BoneProperties
    from schorg.Bone import BoneAllProperties
    from schorg.Bone import create_schema_org_model
    from schorg.Bone import create_bone_model
    from schorg.Bone import Bone

    a = create_schema_org_model(type_=BoneInheritedProperties)
    b = create_schema_org_model(type_=BoneProperties)
    c = create_schema_org_model(type_=BoneAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Bone.schema()
    create_bone_model(BoneAllProperties).schema()
    create_bone_model(BoneInheritedProperties).schema()
    create_bone_model(BoneProperties).schema()


def BroadcastChannel_test():
    from schorg.BroadcastChannel import BroadcastChannelInheritedProperties
    from schorg.BroadcastChannel import BroadcastChannelProperties
    from schorg.BroadcastChannel import BroadcastChannelAllProperties
    from schorg.BroadcastChannel import create_schema_org_model
    from schorg.BroadcastChannel import create_broadcastchannel_model
    from schorg.BroadcastChannel import BroadcastChannel

    a = create_schema_org_model(type_=BroadcastChannelInheritedProperties)
    b = create_schema_org_model(type_=BroadcastChannelProperties)
    c = create_schema_org_model(type_=BroadcastChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BroadcastChannel.schema()
    create_broadcastchannel_model(BroadcastChannelAllProperties).schema()
    create_broadcastchannel_model(BroadcastChannelInheritedProperties).schema()
    create_broadcastchannel_model(BroadcastChannelProperties).schema()


def RadioChannel_test():
    from schorg.RadioChannel import RadioChannelInheritedProperties
    from schorg.RadioChannel import RadioChannelProperties
    from schorg.RadioChannel import RadioChannelAllProperties
    from schorg.RadioChannel import create_schema_org_model
    from schorg.RadioChannel import create_radiochannel_model
    from schorg.RadioChannel import RadioChannel

    a = create_schema_org_model(type_=RadioChannelInheritedProperties)
    b = create_schema_org_model(type_=RadioChannelProperties)
    c = create_schema_org_model(type_=RadioChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioChannel.schema()
    create_radiochannel_model(RadioChannelAllProperties).schema()
    create_radiochannel_model(RadioChannelInheritedProperties).schema()
    create_radiochannel_model(RadioChannelProperties).schema()


def AMRadioChannel_test():
    from schorg.AMRadioChannel import AMRadioChannelInheritedProperties
    from schorg.AMRadioChannel import AMRadioChannelProperties
    from schorg.AMRadioChannel import AMRadioChannelAllProperties
    from schorg.AMRadioChannel import create_schema_org_model
    from schorg.AMRadioChannel import create_amradiochannel_model
    from schorg.AMRadioChannel import AMRadioChannel

    a = create_schema_org_model(type_=AMRadioChannelInheritedProperties)
    b = create_schema_org_model(type_=AMRadioChannelProperties)
    c = create_schema_org_model(type_=AMRadioChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AMRadioChannel.schema()
    create_amradiochannel_model(AMRadioChannelAllProperties).schema()
    create_amradiochannel_model(AMRadioChannelInheritedProperties).schema()
    create_amradiochannel_model(AMRadioChannelProperties).schema()


def PET_test():
    from schorg.PET import PETInheritedProperties
    from schorg.PET import PETProperties
    from schorg.PET import PETAllProperties
    from schorg.PET import create_schema_org_model
    from schorg.PET import create_pet_model
    from schorg.PET import PET

    a = create_schema_org_model(type_=PETInheritedProperties)
    b = create_schema_org_model(type_=PETProperties)
    c = create_schema_org_model(type_=PETAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PET.schema()
    create_pet_model(PETAllProperties).schema()
    create_pet_model(PETInheritedProperties).schema()
    create_pet_model(PETProperties).schema()


def MusicAlbumReleaseType_test():
    from schorg.MusicAlbumReleaseType import MusicAlbumReleaseTypeInheritedProperties
    from schorg.MusicAlbumReleaseType import MusicAlbumReleaseTypeProperties
    from schorg.MusicAlbumReleaseType import MusicAlbumReleaseTypeAllProperties
    from schorg.MusicAlbumReleaseType import create_schema_org_model
    from schorg.MusicAlbumReleaseType import create_musicalbumreleasetype_model
    from schorg.MusicAlbumReleaseType import MusicAlbumReleaseType

    a = create_schema_org_model(type_=MusicAlbumReleaseTypeInheritedProperties)
    b = create_schema_org_model(type_=MusicAlbumReleaseTypeProperties)
    c = create_schema_org_model(type_=MusicAlbumReleaseTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicAlbumReleaseType.schema()
    create_musicalbumreleasetype_model(MusicAlbumReleaseTypeAllProperties).schema()
    create_musicalbumreleasetype_model(
        MusicAlbumReleaseTypeInheritedProperties
    ).schema()
    create_musicalbumreleasetype_model(MusicAlbumReleaseTypeProperties).schema()


def Nonprofit501n_test():
    from schorg.Nonprofit501n import Nonprofit501nInheritedProperties
    from schorg.Nonprofit501n import Nonprofit501nProperties
    from schorg.Nonprofit501n import Nonprofit501nAllProperties
    from schorg.Nonprofit501n import create_schema_org_model
    from schorg.Nonprofit501n import create_nonprofit501n_model
    from schorg.Nonprofit501n import Nonprofit501n

    a = create_schema_org_model(type_=Nonprofit501nInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501nProperties)
    c = create_schema_org_model(type_=Nonprofit501nAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501n.schema()
    create_nonprofit501n_model(Nonprofit501nAllProperties).schema()
    create_nonprofit501n_model(Nonprofit501nInheritedProperties).schema()
    create_nonprofit501n_model(Nonprofit501nProperties).schema()


def Project_test():
    from schorg.Project import ProjectInheritedProperties
    from schorg.Project import ProjectProperties
    from schorg.Project import ProjectAllProperties
    from schorg.Project import create_schema_org_model
    from schorg.Project import create_project_model
    from schorg.Project import Project

    a = create_schema_org_model(type_=ProjectInheritedProperties)
    b = create_schema_org_model(type_=ProjectProperties)
    c = create_schema_org_model(type_=ProjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Project.schema()
    create_project_model(ProjectAllProperties).schema()
    create_project_model(ProjectInheritedProperties).schema()
    create_project_model(ProjectProperties).schema()


def ResearchProject_test():
    from schorg.ResearchProject import ResearchProjectInheritedProperties
    from schorg.ResearchProject import ResearchProjectProperties
    from schorg.ResearchProject import ResearchProjectAllProperties
    from schorg.ResearchProject import create_schema_org_model
    from schorg.ResearchProject import create_researchproject_model
    from schorg.ResearchProject import ResearchProject

    a = create_schema_org_model(type_=ResearchProjectInheritedProperties)
    b = create_schema_org_model(type_=ResearchProjectProperties)
    c = create_schema_org_model(type_=ResearchProjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ResearchProject.schema()
    create_researchproject_model(ResearchProjectAllProperties).schema()
    create_researchproject_model(ResearchProjectInheritedProperties).schema()
    create_researchproject_model(ResearchProjectProperties).schema()


def DislikeAction_test():
    from schorg.DislikeAction import DislikeActionInheritedProperties
    from schorg.DislikeAction import DislikeActionProperties
    from schorg.DislikeAction import DislikeActionAllProperties
    from schorg.DislikeAction import create_schema_org_model
    from schorg.DislikeAction import create_dislikeaction_model
    from schorg.DislikeAction import DislikeAction

    a = create_schema_org_model(type_=DislikeActionInheritedProperties)
    b = create_schema_org_model(type_=DislikeActionProperties)
    c = create_schema_org_model(type_=DislikeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DislikeAction.schema()
    create_dislikeaction_model(DislikeActionAllProperties).schema()
    create_dislikeaction_model(DislikeActionInheritedProperties).schema()
    create_dislikeaction_model(DislikeActionProperties).schema()


def Schedule_test():
    from schorg.Schedule import ScheduleInheritedProperties
    from schorg.Schedule import ScheduleProperties
    from schorg.Schedule import ScheduleAllProperties
    from schorg.Schedule import create_schema_org_model
    from schorg.Schedule import create_schedule_model
    from schorg.Schedule import Schedule

    a = create_schema_org_model(type_=ScheduleInheritedProperties)
    b = create_schema_org_model(type_=ScheduleProperties)
    c = create_schema_org_model(type_=ScheduleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Schedule.schema()
    create_schedule_model(ScheduleAllProperties).schema()
    create_schedule_model(ScheduleInheritedProperties).schema()
    create_schedule_model(ScheduleProperties).schema()


def ContactPage_test():
    from schorg.ContactPage import ContactPageInheritedProperties
    from schorg.ContactPage import ContactPageProperties
    from schorg.ContactPage import ContactPageAllProperties
    from schorg.ContactPage import create_schema_org_model
    from schorg.ContactPage import create_contactpage_model
    from schorg.ContactPage import ContactPage

    a = create_schema_org_model(type_=ContactPageInheritedProperties)
    b = create_schema_org_model(type_=ContactPageProperties)
    c = create_schema_org_model(type_=ContactPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ContactPage.schema()
    create_contactpage_model(ContactPageAllProperties).schema()
    create_contactpage_model(ContactPageInheritedProperties).schema()
    create_contactpage_model(ContactPageProperties).schema()


def AlignmentObject_test():
    from schorg.AlignmentObject import AlignmentObjectInheritedProperties
    from schorg.AlignmentObject import AlignmentObjectProperties
    from schorg.AlignmentObject import AlignmentObjectAllProperties
    from schorg.AlignmentObject import create_schema_org_model
    from schorg.AlignmentObject import create_alignmentobject_model
    from schorg.AlignmentObject import AlignmentObject

    a = create_schema_org_model(type_=AlignmentObjectInheritedProperties)
    b = create_schema_org_model(type_=AlignmentObjectProperties)
    c = create_schema_org_model(type_=AlignmentObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AlignmentObject.schema()
    create_alignmentobject_model(AlignmentObjectAllProperties).schema()
    create_alignmentobject_model(AlignmentObjectInheritedProperties).schema()
    create_alignmentobject_model(AlignmentObjectProperties).schema()


def PriceSpecification_test():
    from schorg.PriceSpecification import PriceSpecificationInheritedProperties
    from schorg.PriceSpecification import PriceSpecificationProperties
    from schorg.PriceSpecification import PriceSpecificationAllProperties
    from schorg.PriceSpecification import create_schema_org_model
    from schorg.PriceSpecification import create_pricespecification_model
    from schorg.PriceSpecification import PriceSpecification

    a = create_schema_org_model(type_=PriceSpecificationInheritedProperties)
    b = create_schema_org_model(type_=PriceSpecificationProperties)
    c = create_schema_org_model(type_=PriceSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PriceSpecification.schema()
    create_pricespecification_model(PriceSpecificationAllProperties).schema()
    create_pricespecification_model(PriceSpecificationInheritedProperties).schema()
    create_pricespecification_model(PriceSpecificationProperties).schema()


def PaymentChargeSpecification_test():
    from schorg.PaymentChargeSpecification import (
        PaymentChargeSpecificationInheritedProperties,
    )
    from schorg.PaymentChargeSpecification import PaymentChargeSpecificationProperties
    from schorg.PaymentChargeSpecification import (
        PaymentChargeSpecificationAllProperties,
    )
    from schorg.PaymentChargeSpecification import create_schema_org_model
    from schorg.PaymentChargeSpecification import (
        create_paymentchargespecification_model,
    )
    from schorg.PaymentChargeSpecification import PaymentChargeSpecification

    a = create_schema_org_model(type_=PaymentChargeSpecificationInheritedProperties)
    b = create_schema_org_model(type_=PaymentChargeSpecificationProperties)
    c = create_schema_org_model(type_=PaymentChargeSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentChargeSpecification.schema()
    create_paymentchargespecification_model(
        PaymentChargeSpecificationAllProperties
    ).schema()
    create_paymentchargespecification_model(
        PaymentChargeSpecificationInheritedProperties
    ).schema()
    create_paymentchargespecification_model(
        PaymentChargeSpecificationProperties
    ).schema()


def WebAPI_test():
    from schorg.WebAPI import WebAPIInheritedProperties
    from schorg.WebAPI import WebAPIProperties
    from schorg.WebAPI import WebAPIAllProperties
    from schorg.WebAPI import create_schema_org_model
    from schorg.WebAPI import create_webapi_model
    from schorg.WebAPI import WebAPI

    a = create_schema_org_model(type_=WebAPIInheritedProperties)
    b = create_schema_org_model(type_=WebAPIProperties)
    c = create_schema_org_model(type_=WebAPIAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebAPI.schema()
    create_webapi_model(WebAPIAllProperties).schema()
    create_webapi_model(WebAPIInheritedProperties).schema()
    create_webapi_model(WebAPIProperties).schema()


def TVClip_test():
    from schorg.TVClip import TVClipInheritedProperties
    from schorg.TVClip import TVClipProperties
    from schorg.TVClip import TVClipAllProperties
    from schorg.TVClip import create_schema_org_model
    from schorg.TVClip import create_tvclip_model
    from schorg.TVClip import TVClip

    a = create_schema_org_model(type_=TVClipInheritedProperties)
    b = create_schema_org_model(type_=TVClipProperties)
    c = create_schema_org_model(type_=TVClipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TVClip.schema()
    create_tvclip_model(TVClipAllProperties).schema()
    create_tvclip_model(TVClipInheritedProperties).schema()
    create_tvclip_model(TVClipProperties).schema()


def Quantity_test():
    from schorg.Quantity import QuantityInheritedProperties
    from schorg.Quantity import QuantityProperties
    from schorg.Quantity import QuantityAllProperties
    from schorg.Quantity import create_schema_org_model
    from schorg.Quantity import create_quantity_model
    from schorg.Quantity import Quantity

    a = create_schema_org_model(type_=QuantityInheritedProperties)
    b = create_schema_org_model(type_=QuantityProperties)
    c = create_schema_org_model(type_=QuantityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Quantity.schema()
    create_quantity_model(QuantityAllProperties).schema()
    create_quantity_model(QuantityInheritedProperties).schema()
    create_quantity_model(QuantityProperties).schema()


def Mass_test():
    from schorg.Mass import MassInheritedProperties
    from schorg.Mass import MassProperties
    from schorg.Mass import MassAllProperties
    from schorg.Mass import create_schema_org_model
    from schorg.Mass import create_mass_model
    from schorg.Mass import Mass

    a = create_schema_org_model(type_=MassInheritedProperties)
    b = create_schema_org_model(type_=MassProperties)
    c = create_schema_org_model(type_=MassAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Mass.schema()
    create_mass_model(MassAllProperties).schema()
    create_mass_model(MassInheritedProperties).schema()
    create_mass_model(MassProperties).schema()


def GenderType_test():
    from schorg.GenderType import GenderTypeInheritedProperties
    from schorg.GenderType import GenderTypeProperties
    from schorg.GenderType import GenderTypeAllProperties
    from schorg.GenderType import create_schema_org_model
    from schorg.GenderType import create_gendertype_model
    from schorg.GenderType import GenderType

    a = create_schema_org_model(type_=GenderTypeInheritedProperties)
    b = create_schema_org_model(type_=GenderTypeProperties)
    c = create_schema_org_model(type_=GenderTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GenderType.schema()
    create_gendertype_model(GenderTypeAllProperties).schema()
    create_gendertype_model(GenderTypeInheritedProperties).schema()
    create_gendertype_model(GenderTypeProperties).schema()


def Male_test():
    from schorg.Male import MaleInheritedProperties
    from schorg.Male import MaleProperties
    from schorg.Male import MaleAllProperties
    from schorg.Male import create_schema_org_model
    from schorg.Male import create_male_model
    from schorg.Male import Male

    a = create_schema_org_model(type_=MaleInheritedProperties)
    b = create_schema_org_model(type_=MaleProperties)
    c = create_schema_org_model(type_=MaleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Male.schema()
    create_male_model(MaleAllProperties).schema()
    create_male_model(MaleInheritedProperties).schema()
    create_male_model(MaleProperties).schema()


def DangerousGoodConsideration_test():
    from schorg.DangerousGoodConsideration import (
        DangerousGoodConsiderationInheritedProperties,
    )
    from schorg.DangerousGoodConsideration import DangerousGoodConsiderationProperties
    from schorg.DangerousGoodConsideration import (
        DangerousGoodConsiderationAllProperties,
    )
    from schorg.DangerousGoodConsideration import create_schema_org_model
    from schorg.DangerousGoodConsideration import (
        create_dangerousgoodconsideration_model,
    )
    from schorg.DangerousGoodConsideration import DangerousGoodConsideration

    a = create_schema_org_model(type_=DangerousGoodConsiderationInheritedProperties)
    b = create_schema_org_model(type_=DangerousGoodConsiderationProperties)
    c = create_schema_org_model(type_=DangerousGoodConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DangerousGoodConsideration.schema()
    create_dangerousgoodconsideration_model(
        DangerousGoodConsiderationAllProperties
    ).schema()
    create_dangerousgoodconsideration_model(
        DangerousGoodConsiderationInheritedProperties
    ).schema()
    create_dangerousgoodconsideration_model(
        DangerousGoodConsiderationProperties
    ).schema()


def HyperToc_test():
    from schorg.HyperToc import HyperTocInheritedProperties
    from schorg.HyperToc import HyperTocProperties
    from schorg.HyperToc import HyperTocAllProperties
    from schorg.HyperToc import create_schema_org_model
    from schorg.HyperToc import create_hypertoc_model
    from schorg.HyperToc import HyperToc

    a = create_schema_org_model(type_=HyperTocInheritedProperties)
    b = create_schema_org_model(type_=HyperTocProperties)
    c = create_schema_org_model(type_=HyperTocAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HyperToc.schema()
    create_hypertoc_model(HyperTocAllProperties).schema()
    create_hypertoc_model(HyperTocInheritedProperties).schema()
    create_hypertoc_model(HyperTocProperties).schema()


def Restaurant_test():
    from schorg.Restaurant import RestaurantInheritedProperties
    from schorg.Restaurant import RestaurantProperties
    from schorg.Restaurant import RestaurantAllProperties
    from schorg.Restaurant import create_schema_org_model
    from schorg.Restaurant import create_restaurant_model
    from schorg.Restaurant import Restaurant

    a = create_schema_org_model(type_=RestaurantInheritedProperties)
    b = create_schema_org_model(type_=RestaurantProperties)
    c = create_schema_org_model(type_=RestaurantAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Restaurant.schema()
    create_restaurant_model(RestaurantAllProperties).schema()
    create_restaurant_model(RestaurantInheritedProperties).schema()
    create_restaurant_model(RestaurantProperties).schema()


def Permit_test():
    from schorg.Permit import PermitInheritedProperties
    from schorg.Permit import PermitProperties
    from schorg.Permit import PermitAllProperties
    from schorg.Permit import create_schema_org_model
    from schorg.Permit import create_permit_model
    from schorg.Permit import Permit

    a = create_schema_org_model(type_=PermitInheritedProperties)
    b = create_schema_org_model(type_=PermitProperties)
    c = create_schema_org_model(type_=PermitAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Permit.schema()
    create_permit_model(PermitAllProperties).schema()
    create_permit_model(PermitInheritedProperties).schema()
    create_permit_model(PermitProperties).schema()


def GovernmentPermit_test():
    from schorg.GovernmentPermit import GovernmentPermitInheritedProperties
    from schorg.GovernmentPermit import GovernmentPermitProperties
    from schorg.GovernmentPermit import GovernmentPermitAllProperties
    from schorg.GovernmentPermit import create_schema_org_model
    from schorg.GovernmentPermit import create_governmentpermit_model
    from schorg.GovernmentPermit import GovernmentPermit

    a = create_schema_org_model(type_=GovernmentPermitInheritedProperties)
    b = create_schema_org_model(type_=GovernmentPermitProperties)
    c = create_schema_org_model(type_=GovernmentPermitAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentPermit.schema()
    create_governmentpermit_model(GovernmentPermitAllProperties).schema()
    create_governmentpermit_model(GovernmentPermitInheritedProperties).schema()
    create_governmentpermit_model(GovernmentPermitProperties).schema()


def SportsClub_test():
    from schorg.SportsClub import SportsClubInheritedProperties
    from schorg.SportsClub import SportsClubProperties
    from schorg.SportsClub import SportsClubAllProperties
    from schorg.SportsClub import create_schema_org_model
    from schorg.SportsClub import create_sportsclub_model
    from schorg.SportsClub import SportsClub

    a = create_schema_org_model(type_=SportsClubInheritedProperties)
    b = create_schema_org_model(type_=SportsClubProperties)
    c = create_schema_org_model(type_=SportsClubAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportsClub.schema()
    create_sportsclub_model(SportsClubAllProperties).schema()
    create_sportsclub_model(SportsClubInheritedProperties).schema()
    create_sportsclub_model(SportsClubProperties).schema()


def PublicationEvent_test():
    from schorg.PublicationEvent import PublicationEventInheritedProperties
    from schorg.PublicationEvent import PublicationEventProperties
    from schorg.PublicationEvent import PublicationEventAllProperties
    from schorg.PublicationEvent import create_schema_org_model
    from schorg.PublicationEvent import create_publicationevent_model
    from schorg.PublicationEvent import PublicationEvent

    a = create_schema_org_model(type_=PublicationEventInheritedProperties)
    b = create_schema_org_model(type_=PublicationEventProperties)
    c = create_schema_org_model(type_=PublicationEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicationEvent.schema()
    create_publicationevent_model(PublicationEventAllProperties).schema()
    create_publicationevent_model(PublicationEventInheritedProperties).schema()
    create_publicationevent_model(PublicationEventProperties).schema()


def TravelAgency_test():
    from schorg.TravelAgency import TravelAgencyInheritedProperties
    from schorg.TravelAgency import TravelAgencyProperties
    from schorg.TravelAgency import TravelAgencyAllProperties
    from schorg.TravelAgency import create_schema_org_model
    from schorg.TravelAgency import create_travelagency_model
    from schorg.TravelAgency import TravelAgency

    a = create_schema_org_model(type_=TravelAgencyInheritedProperties)
    b = create_schema_org_model(type_=TravelAgencyProperties)
    c = create_schema_org_model(type_=TravelAgencyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TravelAgency.schema()
    create_travelagency_model(TravelAgencyAllProperties).schema()
    create_travelagency_model(TravelAgencyInheritedProperties).schema()
    create_travelagency_model(TravelAgencyProperties).schema()


def NailSalon_test():
    from schorg.NailSalon import NailSalonInheritedProperties
    from schorg.NailSalon import NailSalonProperties
    from schorg.NailSalon import NailSalonAllProperties
    from schorg.NailSalon import create_schema_org_model
    from schorg.NailSalon import create_nailsalon_model
    from schorg.NailSalon import NailSalon

    a = create_schema_org_model(type_=NailSalonInheritedProperties)
    b = create_schema_org_model(type_=NailSalonProperties)
    c = create_schema_org_model(type_=NailSalonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NailSalon.schema()
    create_nailsalon_model(NailSalonAllProperties).schema()
    create_nailsalon_model(NailSalonInheritedProperties).schema()
    create_nailsalon_model(NailSalonProperties).schema()


def RefurbishedCondition_test():
    from schorg.RefurbishedCondition import RefurbishedConditionInheritedProperties
    from schorg.RefurbishedCondition import RefurbishedConditionProperties
    from schorg.RefurbishedCondition import RefurbishedConditionAllProperties
    from schorg.RefurbishedCondition import create_schema_org_model
    from schorg.RefurbishedCondition import create_refurbishedcondition_model
    from schorg.RefurbishedCondition import RefurbishedCondition

    a = create_schema_org_model(type_=RefurbishedConditionInheritedProperties)
    b = create_schema_org_model(type_=RefurbishedConditionProperties)
    c = create_schema_org_model(type_=RefurbishedConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RefurbishedCondition.schema()
    create_refurbishedcondition_model(RefurbishedConditionAllProperties).schema()
    create_refurbishedcondition_model(RefurbishedConditionInheritedProperties).schema()
    create_refurbishedcondition_model(RefurbishedConditionProperties).schema()


def Plumber_test():
    from schorg.Plumber import PlumberInheritedProperties
    from schorg.Plumber import PlumberProperties
    from schorg.Plumber import PlumberAllProperties
    from schorg.Plumber import create_schema_org_model
    from schorg.Plumber import create_plumber_model
    from schorg.Plumber import Plumber

    a = create_schema_org_model(type_=PlumberInheritedProperties)
    b = create_schema_org_model(type_=PlumberProperties)
    c = create_schema_org_model(type_=PlumberAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Plumber.schema()
    create_plumber_model(PlumberAllProperties).schema()
    create_plumber_model(PlumberInheritedProperties).schema()
    create_plumber_model(PlumberProperties).schema()


def TouristInformationCenter_test():
    from schorg.TouristInformationCenter import (
        TouristInformationCenterInheritedProperties,
    )
    from schorg.TouristInformationCenter import TouristInformationCenterProperties
    from schorg.TouristInformationCenter import TouristInformationCenterAllProperties
    from schorg.TouristInformationCenter import create_schema_org_model
    from schorg.TouristInformationCenter import create_touristinformationcenter_model
    from schorg.TouristInformationCenter import TouristInformationCenter

    a = create_schema_org_model(type_=TouristInformationCenterInheritedProperties)
    b = create_schema_org_model(type_=TouristInformationCenterProperties)
    c = create_schema_org_model(type_=TouristInformationCenterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TouristInformationCenter.schema()
    create_touristinformationcenter_model(
        TouristInformationCenterAllProperties
    ).schema()
    create_touristinformationcenter_model(
        TouristInformationCenterInheritedProperties
    ).schema()
    create_touristinformationcenter_model(TouristInformationCenterProperties).schema()


def QuoteAction_test():
    from schorg.QuoteAction import QuoteActionInheritedProperties
    from schorg.QuoteAction import QuoteActionProperties
    from schorg.QuoteAction import QuoteActionAllProperties
    from schorg.QuoteAction import create_schema_org_model
    from schorg.QuoteAction import create_quoteaction_model
    from schorg.QuoteAction import QuoteAction

    a = create_schema_org_model(type_=QuoteActionInheritedProperties)
    b = create_schema_org_model(type_=QuoteActionProperties)
    c = create_schema_org_model(type_=QuoteActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    QuoteAction.schema()
    create_quoteaction_model(QuoteActionAllProperties).schema()
    create_quoteaction_model(QuoteActionInheritedProperties).schema()
    create_quoteaction_model(QuoteActionProperties).schema()


def WearableSizeGroupBoys_test():
    from schorg.WearableSizeGroupBoys import WearableSizeGroupBoysInheritedProperties
    from schorg.WearableSizeGroupBoys import WearableSizeGroupBoysProperties
    from schorg.WearableSizeGroupBoys import WearableSizeGroupBoysAllProperties
    from schorg.WearableSizeGroupBoys import create_schema_org_model
    from schorg.WearableSizeGroupBoys import create_wearablesizegroupboys_model
    from schorg.WearableSizeGroupBoys import WearableSizeGroupBoys

    a = create_schema_org_model(type_=WearableSizeGroupBoysInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupBoysProperties)
    c = create_schema_org_model(type_=WearableSizeGroupBoysAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupBoys.schema()
    create_wearablesizegroupboys_model(WearableSizeGroupBoysAllProperties).schema()
    create_wearablesizegroupboys_model(
        WearableSizeGroupBoysInheritedProperties
    ).schema()
    create_wearablesizegroupboys_model(WearableSizeGroupBoysProperties).schema()


def ActionStatusType_test():
    from schorg.ActionStatusType import ActionStatusTypeInheritedProperties
    from schorg.ActionStatusType import ActionStatusTypeProperties
    from schorg.ActionStatusType import ActionStatusTypeAllProperties
    from schorg.ActionStatusType import create_schema_org_model
    from schorg.ActionStatusType import create_actionstatustype_model
    from schorg.ActionStatusType import ActionStatusType

    a = create_schema_org_model(type_=ActionStatusTypeInheritedProperties)
    b = create_schema_org_model(type_=ActionStatusTypeProperties)
    c = create_schema_org_model(type_=ActionStatusTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActionStatusType.schema()
    create_actionstatustype_model(ActionStatusTypeAllProperties).schema()
    create_actionstatustype_model(ActionStatusTypeInheritedProperties).schema()
    create_actionstatustype_model(ActionStatusTypeProperties).schema()


def CompletedActionStatus_test():
    from schorg.CompletedActionStatus import CompletedActionStatusInheritedProperties
    from schorg.CompletedActionStatus import CompletedActionStatusProperties
    from schorg.CompletedActionStatus import CompletedActionStatusAllProperties
    from schorg.CompletedActionStatus import create_schema_org_model
    from schorg.CompletedActionStatus import create_completedactionstatus_model
    from schorg.CompletedActionStatus import CompletedActionStatus

    a = create_schema_org_model(type_=CompletedActionStatusInheritedProperties)
    b = create_schema_org_model(type_=CompletedActionStatusProperties)
    c = create_schema_org_model(type_=CompletedActionStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CompletedActionStatus.schema()
    create_completedactionstatus_model(CompletedActionStatusAllProperties).schema()
    create_completedactionstatus_model(
        CompletedActionStatusInheritedProperties
    ).schema()
    create_completedactionstatus_model(CompletedActionStatusProperties).schema()


def BodyOfWater_test():
    from schorg.BodyOfWater import BodyOfWaterInheritedProperties
    from schorg.BodyOfWater import BodyOfWaterProperties
    from schorg.BodyOfWater import BodyOfWaterAllProperties
    from schorg.BodyOfWater import create_schema_org_model
    from schorg.BodyOfWater import create_bodyofwater_model
    from schorg.BodyOfWater import BodyOfWater

    a = create_schema_org_model(type_=BodyOfWaterInheritedProperties)
    b = create_schema_org_model(type_=BodyOfWaterProperties)
    c = create_schema_org_model(type_=BodyOfWaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyOfWater.schema()
    create_bodyofwater_model(BodyOfWaterAllProperties).schema()
    create_bodyofwater_model(BodyOfWaterInheritedProperties).schema()
    create_bodyofwater_model(BodyOfWaterProperties).schema()


def OceanBodyOfWater_test():
    from schorg.OceanBodyOfWater import OceanBodyOfWaterInheritedProperties
    from schorg.OceanBodyOfWater import OceanBodyOfWaterProperties
    from schorg.OceanBodyOfWater import OceanBodyOfWaterAllProperties
    from schorg.OceanBodyOfWater import create_schema_org_model
    from schorg.OceanBodyOfWater import create_oceanbodyofwater_model
    from schorg.OceanBodyOfWater import OceanBodyOfWater

    a = create_schema_org_model(type_=OceanBodyOfWaterInheritedProperties)
    b = create_schema_org_model(type_=OceanBodyOfWaterProperties)
    c = create_schema_org_model(type_=OceanBodyOfWaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OceanBodyOfWater.schema()
    create_oceanbodyofwater_model(OceanBodyOfWaterAllProperties).schema()
    create_oceanbodyofwater_model(OceanBodyOfWaterInheritedProperties).schema()
    create_oceanbodyofwater_model(OceanBodyOfWaterProperties).schema()


def PlayGameAction_test():
    from schorg.PlayGameAction import PlayGameActionInheritedProperties
    from schorg.PlayGameAction import PlayGameActionProperties
    from schorg.PlayGameAction import PlayGameActionAllProperties
    from schorg.PlayGameAction import create_schema_org_model
    from schorg.PlayGameAction import create_playgameaction_model
    from schorg.PlayGameAction import PlayGameAction

    a = create_schema_org_model(type_=PlayGameActionInheritedProperties)
    b = create_schema_org_model(type_=PlayGameActionProperties)
    c = create_schema_org_model(type_=PlayGameActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlayGameAction.schema()
    create_playgameaction_model(PlayGameActionAllProperties).schema()
    create_playgameaction_model(PlayGameActionInheritedProperties).schema()
    create_playgameaction_model(PlayGameActionProperties).schema()


def ActivateAction_test():
    from schorg.ActivateAction import ActivateActionInheritedProperties
    from schorg.ActivateAction import ActivateActionProperties
    from schorg.ActivateAction import ActivateActionAllProperties
    from schorg.ActivateAction import create_schema_org_model
    from schorg.ActivateAction import create_activateaction_model
    from schorg.ActivateAction import ActivateAction

    a = create_schema_org_model(type_=ActivateActionInheritedProperties)
    b = create_schema_org_model(type_=ActivateActionProperties)
    c = create_schema_org_model(type_=ActivateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActivateAction.schema()
    create_activateaction_model(ActivateActionAllProperties).schema()
    create_activateaction_model(ActivateActionInheritedProperties).schema()
    create_activateaction_model(ActivateActionProperties).schema()


def MenuSection_test():
    from schorg.MenuSection import MenuSectionInheritedProperties
    from schorg.MenuSection import MenuSectionProperties
    from schorg.MenuSection import MenuSectionAllProperties
    from schorg.MenuSection import create_schema_org_model
    from schorg.MenuSection import create_menusection_model
    from schorg.MenuSection import MenuSection

    a = create_schema_org_model(type_=MenuSectionInheritedProperties)
    b = create_schema_org_model(type_=MenuSectionProperties)
    c = create_schema_org_model(type_=MenuSectionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MenuSection.schema()
    create_menusection_model(MenuSectionAllProperties).schema()
    create_menusection_model(MenuSectionInheritedProperties).schema()
    create_menusection_model(MenuSectionProperties).schema()


def MovieRentalStore_test():
    from schorg.MovieRentalStore import MovieRentalStoreInheritedProperties
    from schorg.MovieRentalStore import MovieRentalStoreProperties
    from schorg.MovieRentalStore import MovieRentalStoreAllProperties
    from schorg.MovieRentalStore import create_schema_org_model
    from schorg.MovieRentalStore import create_movierentalstore_model
    from schorg.MovieRentalStore import MovieRentalStore

    a = create_schema_org_model(type_=MovieRentalStoreInheritedProperties)
    b = create_schema_org_model(type_=MovieRentalStoreProperties)
    c = create_schema_org_model(type_=MovieRentalStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MovieRentalStore.schema()
    create_movierentalstore_model(MovieRentalStoreAllProperties).schema()
    create_movierentalstore_model(MovieRentalStoreInheritedProperties).schema()
    create_movierentalstore_model(MovieRentalStoreProperties).schema()


def Chapter_test():
    from schorg.Chapter import ChapterInheritedProperties
    from schorg.Chapter import ChapterProperties
    from schorg.Chapter import ChapterAllProperties
    from schorg.Chapter import create_schema_org_model
    from schorg.Chapter import create_chapter_model
    from schorg.Chapter import Chapter

    a = create_schema_org_model(type_=ChapterInheritedProperties)
    b = create_schema_org_model(type_=ChapterProperties)
    c = create_schema_org_model(type_=ChapterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Chapter.schema()
    create_chapter_model(ChapterAllProperties).schema()
    create_chapter_model(ChapterInheritedProperties).schema()
    create_chapter_model(ChapterProperties).schema()


def BodyMeasurementUnderbust_test():
    from schorg.BodyMeasurementUnderbust import (
        BodyMeasurementUnderbustInheritedProperties,
    )
    from schorg.BodyMeasurementUnderbust import BodyMeasurementUnderbustProperties
    from schorg.BodyMeasurementUnderbust import BodyMeasurementUnderbustAllProperties
    from schorg.BodyMeasurementUnderbust import create_schema_org_model
    from schorg.BodyMeasurementUnderbust import create_bodymeasurementunderbust_model
    from schorg.BodyMeasurementUnderbust import BodyMeasurementUnderbust

    a = create_schema_org_model(type_=BodyMeasurementUnderbustInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementUnderbustProperties)
    c = create_schema_org_model(type_=BodyMeasurementUnderbustAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementUnderbust.schema()
    create_bodymeasurementunderbust_model(
        BodyMeasurementUnderbustAllProperties
    ).schema()
    create_bodymeasurementunderbust_model(
        BodyMeasurementUnderbustInheritedProperties
    ).schema()
    create_bodymeasurementunderbust_model(BodyMeasurementUnderbustProperties).schema()


def Order_test():
    from schorg.Order import OrderInheritedProperties
    from schorg.Order import OrderProperties
    from schorg.Order import OrderAllProperties
    from schorg.Order import create_schema_org_model
    from schorg.Order import create_order_model
    from schorg.Order import Order

    a = create_schema_org_model(type_=OrderInheritedProperties)
    b = create_schema_org_model(type_=OrderProperties)
    c = create_schema_org_model(type_=OrderAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Order.schema()
    create_order_model(OrderAllProperties).schema()
    create_order_model(OrderInheritedProperties).schema()
    create_order_model(OrderProperties).schema()


def ArtGallery_test():
    from schorg.ArtGallery import ArtGalleryInheritedProperties
    from schorg.ArtGallery import ArtGalleryProperties
    from schorg.ArtGallery import ArtGalleryAllProperties
    from schorg.ArtGallery import create_schema_org_model
    from schorg.ArtGallery import create_artgallery_model
    from schorg.ArtGallery import ArtGallery

    a = create_schema_org_model(type_=ArtGalleryInheritedProperties)
    b = create_schema_org_model(type_=ArtGalleryProperties)
    c = create_schema_org_model(type_=ArtGalleryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ArtGallery.schema()
    create_artgallery_model(ArtGalleryAllProperties).schema()
    create_artgallery_model(ArtGalleryInheritedProperties).schema()
    create_artgallery_model(ArtGalleryProperties).schema()


def Nonprofit501c8_test():
    from schorg.Nonprofit501c8 import Nonprofit501c8InheritedProperties
    from schorg.Nonprofit501c8 import Nonprofit501c8Properties
    from schorg.Nonprofit501c8 import Nonprofit501c8AllProperties
    from schorg.Nonprofit501c8 import create_schema_org_model
    from schorg.Nonprofit501c8 import create_nonprofit501c8_model
    from schorg.Nonprofit501c8 import Nonprofit501c8

    a = create_schema_org_model(type_=Nonprofit501c8InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c8Properties)
    c = create_schema_org_model(type_=Nonprofit501c8AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c8.schema()
    create_nonprofit501c8_model(Nonprofit501c8AllProperties).schema()
    create_nonprofit501c8_model(Nonprofit501c8InheritedProperties).schema()
    create_nonprofit501c8_model(Nonprofit501c8Properties).schema()


def SteeringPositionValue_test():
    from schorg.SteeringPositionValue import SteeringPositionValueInheritedProperties
    from schorg.SteeringPositionValue import SteeringPositionValueProperties
    from schorg.SteeringPositionValue import SteeringPositionValueAllProperties
    from schorg.SteeringPositionValue import create_schema_org_model
    from schorg.SteeringPositionValue import create_steeringpositionvalue_model
    from schorg.SteeringPositionValue import SteeringPositionValue

    a = create_schema_org_model(type_=SteeringPositionValueInheritedProperties)
    b = create_schema_org_model(type_=SteeringPositionValueProperties)
    c = create_schema_org_model(type_=SteeringPositionValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SteeringPositionValue.schema()
    create_steeringpositionvalue_model(SteeringPositionValueAllProperties).schema()
    create_steeringpositionvalue_model(
        SteeringPositionValueInheritedProperties
    ).schema()
    create_steeringpositionvalue_model(SteeringPositionValueProperties).schema()


def LeftHandDriving_test():
    from schorg.LeftHandDriving import LeftHandDrivingInheritedProperties
    from schorg.LeftHandDriving import LeftHandDrivingProperties
    from schorg.LeftHandDriving import LeftHandDrivingAllProperties
    from schorg.LeftHandDriving import create_schema_org_model
    from schorg.LeftHandDriving import create_lefthanddriving_model
    from schorg.LeftHandDriving import LeftHandDriving

    a = create_schema_org_model(type_=LeftHandDrivingInheritedProperties)
    b = create_schema_org_model(type_=LeftHandDrivingProperties)
    c = create_schema_org_model(type_=LeftHandDrivingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LeftHandDriving.schema()
    create_lefthanddriving_model(LeftHandDrivingAllProperties).schema()
    create_lefthanddriving_model(LeftHandDrivingInheritedProperties).schema()
    create_lefthanddriving_model(LeftHandDrivingProperties).schema()


def ComicStory_test():
    from schorg.ComicStory import ComicStoryInheritedProperties
    from schorg.ComicStory import ComicStoryProperties
    from schorg.ComicStory import ComicStoryAllProperties
    from schorg.ComicStory import create_schema_org_model
    from schorg.ComicStory import create_comicstory_model
    from schorg.ComicStory import ComicStory

    a = create_schema_org_model(type_=ComicStoryInheritedProperties)
    b = create_schema_org_model(type_=ComicStoryProperties)
    c = create_schema_org_model(type_=ComicStoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComicStory.schema()
    create_comicstory_model(ComicStoryAllProperties).schema()
    create_comicstory_model(ComicStoryInheritedProperties).schema()
    create_comicstory_model(ComicStoryProperties).schema()


def ComicCoverArt_test():
    from schorg.ComicCoverArt import ComicCoverArtInheritedProperties
    from schorg.ComicCoverArt import ComicCoverArtProperties
    from schorg.ComicCoverArt import ComicCoverArtAllProperties
    from schorg.ComicCoverArt import create_schema_org_model
    from schorg.ComicCoverArt import create_comiccoverart_model
    from schorg.ComicCoverArt import ComicCoverArt

    a = create_schema_org_model(type_=ComicCoverArtInheritedProperties)
    b = create_schema_org_model(type_=ComicCoverArtProperties)
    c = create_schema_org_model(type_=ComicCoverArtAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComicCoverArt.schema()
    create_comiccoverart_model(ComicCoverArtAllProperties).schema()
    create_comiccoverart_model(ComicCoverArtInheritedProperties).schema()
    create_comiccoverart_model(ComicCoverArtProperties).schema()


def LikeAction_test():
    from schorg.LikeAction import LikeActionInheritedProperties
    from schorg.LikeAction import LikeActionProperties
    from schorg.LikeAction import LikeActionAllProperties
    from schorg.LikeAction import create_schema_org_model
    from schorg.LikeAction import create_likeaction_model
    from schorg.LikeAction import LikeAction

    a = create_schema_org_model(type_=LikeActionInheritedProperties)
    b = create_schema_org_model(type_=LikeActionProperties)
    c = create_schema_org_model(type_=LikeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LikeAction.schema()
    create_likeaction_model(LikeActionAllProperties).schema()
    create_likeaction_model(LikeActionInheritedProperties).schema()
    create_likeaction_model(LikeActionProperties).schema()


def WearableMeasurementCollar_test():
    from schorg.WearableMeasurementCollar import (
        WearableMeasurementCollarInheritedProperties,
    )
    from schorg.WearableMeasurementCollar import WearableMeasurementCollarProperties
    from schorg.WearableMeasurementCollar import WearableMeasurementCollarAllProperties
    from schorg.WearableMeasurementCollar import create_schema_org_model
    from schorg.WearableMeasurementCollar import create_wearablemeasurementcollar_model
    from schorg.WearableMeasurementCollar import WearableMeasurementCollar

    a = create_schema_org_model(type_=WearableMeasurementCollarInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementCollarProperties)
    c = create_schema_org_model(type_=WearableMeasurementCollarAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementCollar.schema()
    create_wearablemeasurementcollar_model(
        WearableMeasurementCollarAllProperties
    ).schema()
    create_wearablemeasurementcollar_model(
        WearableMeasurementCollarInheritedProperties
    ).schema()
    create_wearablemeasurementcollar_model(WearableMeasurementCollarProperties).schema()


def ItemListUnordered_test():
    from schorg.ItemListUnordered import ItemListUnorderedInheritedProperties
    from schorg.ItemListUnordered import ItemListUnorderedProperties
    from schorg.ItemListUnordered import ItemListUnorderedAllProperties
    from schorg.ItemListUnordered import create_schema_org_model
    from schorg.ItemListUnordered import create_itemlistunordered_model
    from schorg.ItemListUnordered import ItemListUnordered

    a = create_schema_org_model(type_=ItemListUnorderedInheritedProperties)
    b = create_schema_org_model(type_=ItemListUnorderedProperties)
    c = create_schema_org_model(type_=ItemListUnorderedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemListUnordered.schema()
    create_itemlistunordered_model(ItemListUnorderedAllProperties).schema()
    create_itemlistunordered_model(ItemListUnorderedInheritedProperties).schema()
    create_itemlistunordered_model(ItemListUnorderedProperties).schema()


def GameAvailabilityEnumeration_test():
    from schorg.GameAvailabilityEnumeration import (
        GameAvailabilityEnumerationInheritedProperties,
    )
    from schorg.GameAvailabilityEnumeration import GameAvailabilityEnumerationProperties
    from schorg.GameAvailabilityEnumeration import (
        GameAvailabilityEnumerationAllProperties,
    )
    from schorg.GameAvailabilityEnumeration import create_schema_org_model
    from schorg.GameAvailabilityEnumeration import (
        create_gameavailabilityenumeration_model,
    )
    from schorg.GameAvailabilityEnumeration import GameAvailabilityEnumeration

    a = create_schema_org_model(type_=GameAvailabilityEnumerationInheritedProperties)
    b = create_schema_org_model(type_=GameAvailabilityEnumerationProperties)
    c = create_schema_org_model(type_=GameAvailabilityEnumerationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GameAvailabilityEnumeration.schema()
    create_gameavailabilityenumeration_model(
        GameAvailabilityEnumerationAllProperties
    ).schema()
    create_gameavailabilityenumeration_model(
        GameAvailabilityEnumerationInheritedProperties
    ).schema()
    create_gameavailabilityenumeration_model(
        GameAvailabilityEnumerationProperties
    ).schema()


def DemoGameAvailability_test():
    from schorg.DemoGameAvailability import DemoGameAvailabilityInheritedProperties
    from schorg.DemoGameAvailability import DemoGameAvailabilityProperties
    from schorg.DemoGameAvailability import DemoGameAvailabilityAllProperties
    from schorg.DemoGameAvailability import create_schema_org_model
    from schorg.DemoGameAvailability import create_demogameavailability_model
    from schorg.DemoGameAvailability import DemoGameAvailability

    a = create_schema_org_model(type_=DemoGameAvailabilityInheritedProperties)
    b = create_schema_org_model(type_=DemoGameAvailabilityProperties)
    c = create_schema_org_model(type_=DemoGameAvailabilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DemoGameAvailability.schema()
    create_demogameavailability_model(DemoGameAvailabilityAllProperties).schema()
    create_demogameavailability_model(DemoGameAvailabilityInheritedProperties).schema()
    create_demogameavailability_model(DemoGameAvailabilityProperties).schema()


def Canal_test():
    from schorg.Canal import CanalInheritedProperties
    from schorg.Canal import CanalProperties
    from schorg.Canal import CanalAllProperties
    from schorg.Canal import create_schema_org_model
    from schorg.Canal import create_canal_model
    from schorg.Canal import Canal

    a = create_schema_org_model(type_=CanalInheritedProperties)
    b = create_schema_org_model(type_=CanalProperties)
    c = create_schema_org_model(type_=CanalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Canal.schema()
    create_canal_model(CanalAllProperties).schema()
    create_canal_model(CanalInheritedProperties).schema()
    create_canal_model(CanalProperties).schema()


def SideEffectsHealthAspect_test():
    from schorg.SideEffectsHealthAspect import (
        SideEffectsHealthAspectInheritedProperties,
    )
    from schorg.SideEffectsHealthAspect import SideEffectsHealthAspectProperties
    from schorg.SideEffectsHealthAspect import SideEffectsHealthAspectAllProperties
    from schorg.SideEffectsHealthAspect import create_schema_org_model
    from schorg.SideEffectsHealthAspect import create_sideeffectshealthaspect_model
    from schorg.SideEffectsHealthAspect import SideEffectsHealthAspect

    a = create_schema_org_model(type_=SideEffectsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=SideEffectsHealthAspectProperties)
    c = create_schema_org_model(type_=SideEffectsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SideEffectsHealthAspect.schema()
    create_sideeffectshealthaspect_model(SideEffectsHealthAspectAllProperties).schema()
    create_sideeffectshealthaspect_model(
        SideEffectsHealthAspectInheritedProperties
    ).schema()
    create_sideeffectshealthaspect_model(SideEffectsHealthAspectProperties).schema()


def AudiobookFormat_test():
    from schorg.AudiobookFormat import AudiobookFormatInheritedProperties
    from schorg.AudiobookFormat import AudiobookFormatProperties
    from schorg.AudiobookFormat import AudiobookFormatAllProperties
    from schorg.AudiobookFormat import create_schema_org_model
    from schorg.AudiobookFormat import create_audiobookformat_model
    from schorg.AudiobookFormat import AudiobookFormat

    a = create_schema_org_model(type_=AudiobookFormatInheritedProperties)
    b = create_schema_org_model(type_=AudiobookFormatProperties)
    c = create_schema_org_model(type_=AudiobookFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AudiobookFormat.schema()
    create_audiobookformat_model(AudiobookFormatAllProperties).schema()
    create_audiobookformat_model(AudiobookFormatInheritedProperties).schema()
    create_audiobookformat_model(AudiobookFormatProperties).schema()


def MathSolver_test():
    from schorg.MathSolver import MathSolverInheritedProperties
    from schorg.MathSolver import MathSolverProperties
    from schorg.MathSolver import MathSolverAllProperties
    from schorg.MathSolver import create_schema_org_model
    from schorg.MathSolver import create_mathsolver_model
    from schorg.MathSolver import MathSolver

    a = create_schema_org_model(type_=MathSolverInheritedProperties)
    b = create_schema_org_model(type_=MathSolverProperties)
    c = create_schema_org_model(type_=MathSolverAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MathSolver.schema()
    create_mathsolver_model(MathSolverAllProperties).schema()
    create_mathsolver_model(MathSolverInheritedProperties).schema()
    create_mathsolver_model(MathSolverProperties).schema()


def EUEnergyEfficiencyCategoryB_test():
    from schorg.EUEnergyEfficiencyCategoryB import (
        EUEnergyEfficiencyCategoryBInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryB import EUEnergyEfficiencyCategoryBProperties
    from schorg.EUEnergyEfficiencyCategoryB import (
        EUEnergyEfficiencyCategoryBAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryB import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryB import (
        create_euenergyefficiencycategoryb_model,
    )
    from schorg.EUEnergyEfficiencyCategoryB import EUEnergyEfficiencyCategoryB

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryBInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryBProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryBAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryB.schema()
    create_euenergyefficiencycategoryb_model(
        EUEnergyEfficiencyCategoryBAllProperties
    ).schema()
    create_euenergyefficiencycategoryb_model(
        EUEnergyEfficiencyCategoryBInheritedProperties
    ).schema()
    create_euenergyefficiencycategoryb_model(
        EUEnergyEfficiencyCategoryBProperties
    ).schema()


def PlayAction_test():
    from schorg.PlayAction import PlayActionInheritedProperties
    from schorg.PlayAction import PlayActionProperties
    from schorg.PlayAction import PlayActionAllProperties
    from schorg.PlayAction import create_schema_org_model
    from schorg.PlayAction import create_playaction_model
    from schorg.PlayAction import PlayAction

    a = create_schema_org_model(type_=PlayActionInheritedProperties)
    b = create_schema_org_model(type_=PlayActionProperties)
    c = create_schema_org_model(type_=PlayActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlayAction.schema()
    create_playaction_model(PlayActionAllProperties).schema()
    create_playaction_model(PlayActionInheritedProperties).schema()
    create_playaction_model(PlayActionProperties).schema()


def ExerciseAction_test():
    from schorg.ExerciseAction import ExerciseActionInheritedProperties
    from schorg.ExerciseAction import ExerciseActionProperties
    from schorg.ExerciseAction import ExerciseActionAllProperties
    from schorg.ExerciseAction import create_schema_org_model
    from schorg.ExerciseAction import create_exerciseaction_model
    from schorg.ExerciseAction import ExerciseAction

    a = create_schema_org_model(type_=ExerciseActionInheritedProperties)
    b = create_schema_org_model(type_=ExerciseActionProperties)
    c = create_schema_org_model(type_=ExerciseActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExerciseAction.schema()
    create_exerciseaction_model(ExerciseActionAllProperties).schema()
    create_exerciseaction_model(ExerciseActionInheritedProperties).schema()
    create_exerciseaction_model(ExerciseActionProperties).schema()


def BioChemEntity_test():
    from schorg.BioChemEntity import BioChemEntityInheritedProperties
    from schorg.BioChemEntity import BioChemEntityProperties
    from schorg.BioChemEntity import BioChemEntityAllProperties
    from schorg.BioChemEntity import create_schema_org_model
    from schorg.BioChemEntity import create_biochementity_model
    from schorg.BioChemEntity import BioChemEntity

    a = create_schema_org_model(type_=BioChemEntityInheritedProperties)
    b = create_schema_org_model(type_=BioChemEntityProperties)
    c = create_schema_org_model(type_=BioChemEntityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BioChemEntity.schema()
    create_biochementity_model(BioChemEntityAllProperties).schema()
    create_biochementity_model(BioChemEntityInheritedProperties).schema()
    create_biochementity_model(BioChemEntityProperties).schema()


def Gene_test():
    from schorg.Gene import GeneInheritedProperties
    from schorg.Gene import GeneProperties
    from schorg.Gene import GeneAllProperties
    from schorg.Gene import create_schema_org_model
    from schorg.Gene import create_gene_model
    from schorg.Gene import Gene

    a = create_schema_org_model(type_=GeneInheritedProperties)
    b = create_schema_org_model(type_=GeneProperties)
    c = create_schema_org_model(type_=GeneAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Gene.schema()
    create_gene_model(GeneAllProperties).schema()
    create_gene_model(GeneInheritedProperties).schema()
    create_gene_model(GeneProperties).schema()


def Downpayment_test():
    from schorg.Downpayment import DownpaymentInheritedProperties
    from schorg.Downpayment import DownpaymentProperties
    from schorg.Downpayment import DownpaymentAllProperties
    from schorg.Downpayment import create_schema_org_model
    from schorg.Downpayment import create_downpayment_model
    from schorg.Downpayment import Downpayment

    a = create_schema_org_model(type_=DownpaymentInheritedProperties)
    b = create_schema_org_model(type_=DownpaymentProperties)
    c = create_schema_org_model(type_=DownpaymentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Downpayment.schema()
    create_downpayment_model(DownpaymentAllProperties).schema()
    create_downpayment_model(DownpaymentInheritedProperties).schema()
    create_downpayment_model(DownpaymentProperties).schema()


def Invoice_test():
    from schorg.Invoice import InvoiceInheritedProperties
    from schorg.Invoice import InvoiceProperties
    from schorg.Invoice import InvoiceAllProperties
    from schorg.Invoice import create_schema_org_model
    from schorg.Invoice import create_invoice_model
    from schorg.Invoice import Invoice

    a = create_schema_org_model(type_=InvoiceInheritedProperties)
    b = create_schema_org_model(type_=InvoiceProperties)
    c = create_schema_org_model(type_=InvoiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Invoice.schema()
    create_invoice_model(InvoiceAllProperties).schema()
    create_invoice_model(InvoiceInheritedProperties).schema()
    create_invoice_model(InvoiceProperties).schema()


def GovernmentOffice_test():
    from schorg.GovernmentOffice import GovernmentOfficeInheritedProperties
    from schorg.GovernmentOffice import GovernmentOfficeProperties
    from schorg.GovernmentOffice import GovernmentOfficeAllProperties
    from schorg.GovernmentOffice import create_schema_org_model
    from schorg.GovernmentOffice import create_governmentoffice_model
    from schorg.GovernmentOffice import GovernmentOffice

    a = create_schema_org_model(type_=GovernmentOfficeInheritedProperties)
    b = create_schema_org_model(type_=GovernmentOfficeProperties)
    c = create_schema_org_model(type_=GovernmentOfficeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentOffice.schema()
    create_governmentoffice_model(GovernmentOfficeAllProperties).schema()
    create_governmentoffice_model(GovernmentOfficeInheritedProperties).schema()
    create_governmentoffice_model(GovernmentOfficeProperties).schema()


def PostOffice_test():
    from schorg.PostOffice import PostOfficeInheritedProperties
    from schorg.PostOffice import PostOfficeProperties
    from schorg.PostOffice import PostOfficeAllProperties
    from schorg.PostOffice import create_schema_org_model
    from schorg.PostOffice import create_postoffice_model
    from schorg.PostOffice import PostOffice

    a = create_schema_org_model(type_=PostOfficeInheritedProperties)
    b = create_schema_org_model(type_=PostOfficeProperties)
    c = create_schema_org_model(type_=PostOfficeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PostOffice.schema()
    create_postoffice_model(PostOfficeAllProperties).schema()
    create_postoffice_model(PostOfficeInheritedProperties).schema()
    create_postoffice_model(PostOfficeProperties).schema()


def DigitalDocument_test():
    from schorg.DigitalDocument import DigitalDocumentInheritedProperties
    from schorg.DigitalDocument import DigitalDocumentProperties
    from schorg.DigitalDocument import DigitalDocumentAllProperties
    from schorg.DigitalDocument import create_schema_org_model
    from schorg.DigitalDocument import create_digitaldocument_model
    from schorg.DigitalDocument import DigitalDocument

    a = create_schema_org_model(type_=DigitalDocumentInheritedProperties)
    b = create_schema_org_model(type_=DigitalDocumentProperties)
    c = create_schema_org_model(type_=DigitalDocumentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalDocument.schema()
    create_digitaldocument_model(DigitalDocumentAllProperties).schema()
    create_digitaldocument_model(DigitalDocumentInheritedProperties).schema()
    create_digitaldocument_model(DigitalDocumentProperties).schema()


def TextDigitalDocument_test():
    from schorg.TextDigitalDocument import TextDigitalDocumentInheritedProperties
    from schorg.TextDigitalDocument import TextDigitalDocumentProperties
    from schorg.TextDigitalDocument import TextDigitalDocumentAllProperties
    from schorg.TextDigitalDocument import create_schema_org_model
    from schorg.TextDigitalDocument import create_textdigitaldocument_model
    from schorg.TextDigitalDocument import TextDigitalDocument

    a = create_schema_org_model(type_=TextDigitalDocumentInheritedProperties)
    b = create_schema_org_model(type_=TextDigitalDocumentProperties)
    c = create_schema_org_model(type_=TextDigitalDocumentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TextDigitalDocument.schema()
    create_textdigitaldocument_model(TextDigitalDocumentAllProperties).schema()
    create_textdigitaldocument_model(TextDigitalDocumentInheritedProperties).schema()
    create_textdigitaldocument_model(TextDigitalDocumentProperties).schema()


def Flight_test():
    from schorg.Flight import FlightInheritedProperties
    from schorg.Flight import FlightProperties
    from schorg.Flight import FlightAllProperties
    from schorg.Flight import create_schema_org_model
    from schorg.Flight import create_flight_model
    from schorg.Flight import Flight

    a = create_schema_org_model(type_=FlightInheritedProperties)
    b = create_schema_org_model(type_=FlightProperties)
    c = create_schema_org_model(type_=FlightAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Flight.schema()
    create_flight_model(FlightAllProperties).schema()
    create_flight_model(FlightInheritedProperties).schema()
    create_flight_model(FlightProperties).schema()


def DecontextualizedContent_test():
    from schorg.DecontextualizedContent import (
        DecontextualizedContentInheritedProperties,
    )
    from schorg.DecontextualizedContent import DecontextualizedContentProperties
    from schorg.DecontextualizedContent import DecontextualizedContentAllProperties
    from schorg.DecontextualizedContent import create_schema_org_model
    from schorg.DecontextualizedContent import create_decontextualizedcontent_model
    from schorg.DecontextualizedContent import DecontextualizedContent

    a = create_schema_org_model(type_=DecontextualizedContentInheritedProperties)
    b = create_schema_org_model(type_=DecontextualizedContentProperties)
    c = create_schema_org_model(type_=DecontextualizedContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DecontextualizedContent.schema()
    create_decontextualizedcontent_model(DecontextualizedContentAllProperties).schema()
    create_decontextualizedcontent_model(
        DecontextualizedContentInheritedProperties
    ).schema()
    create_decontextualizedcontent_model(DecontextualizedContentProperties).schema()


def BedType_test():
    from schorg.BedType import BedTypeInheritedProperties
    from schorg.BedType import BedTypeProperties
    from schorg.BedType import BedTypeAllProperties
    from schorg.BedType import create_schema_org_model
    from schorg.BedType import create_bedtype_model
    from schorg.BedType import BedType

    a = create_schema_org_model(type_=BedTypeInheritedProperties)
    b = create_schema_org_model(type_=BedTypeProperties)
    c = create_schema_org_model(type_=BedTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BedType.schema()
    create_bedtype_model(BedTypeAllProperties).schema()
    create_bedtype_model(BedTypeInheritedProperties).schema()
    create_bedtype_model(BedTypeProperties).schema()


def BlogPosting_test():
    from schorg.BlogPosting import BlogPostingInheritedProperties
    from schorg.BlogPosting import BlogPostingProperties
    from schorg.BlogPosting import BlogPostingAllProperties
    from schorg.BlogPosting import create_schema_org_model
    from schorg.BlogPosting import create_blogposting_model
    from schorg.BlogPosting import BlogPosting

    a = create_schema_org_model(type_=BlogPostingInheritedProperties)
    b = create_schema_org_model(type_=BlogPostingProperties)
    c = create_schema_org_model(type_=BlogPostingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BlogPosting.schema()
    create_blogposting_model(BlogPostingAllProperties).schema()
    create_blogposting_model(BlogPostingInheritedProperties).schema()
    create_blogposting_model(BlogPostingProperties).schema()


def Distance_test():
    from schorg.Distance import DistanceInheritedProperties
    from schorg.Distance import DistanceProperties
    from schorg.Distance import DistanceAllProperties
    from schorg.Distance import create_schema_org_model
    from schorg.Distance import create_distance_model
    from schorg.Distance import Distance

    a = create_schema_org_model(type_=DistanceInheritedProperties)
    b = create_schema_org_model(type_=DistanceProperties)
    c = create_schema_org_model(type_=DistanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Distance.schema()
    create_distance_model(DistanceAllProperties).schema()
    create_distance_model(DistanceInheritedProperties).schema()
    create_distance_model(DistanceProperties).schema()


def ReservationPending_test():
    from schorg.ReservationPending import ReservationPendingInheritedProperties
    from schorg.ReservationPending import ReservationPendingProperties
    from schorg.ReservationPending import ReservationPendingAllProperties
    from schorg.ReservationPending import create_schema_org_model
    from schorg.ReservationPending import create_reservationpending_model
    from schorg.ReservationPending import ReservationPending

    a = create_schema_org_model(type_=ReservationPendingInheritedProperties)
    b = create_schema_org_model(type_=ReservationPendingProperties)
    c = create_schema_org_model(type_=ReservationPendingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationPending.schema()
    create_reservationpending_model(ReservationPendingAllProperties).schema()
    create_reservationpending_model(ReservationPendingInheritedProperties).schema()
    create_reservationpending_model(ReservationPendingProperties).schema()


def LodgingReservation_test():
    from schorg.LodgingReservation import LodgingReservationInheritedProperties
    from schorg.LodgingReservation import LodgingReservationProperties
    from schorg.LodgingReservation import LodgingReservationAllProperties
    from schorg.LodgingReservation import create_schema_org_model
    from schorg.LodgingReservation import create_lodgingreservation_model
    from schorg.LodgingReservation import LodgingReservation

    a = create_schema_org_model(type_=LodgingReservationInheritedProperties)
    b = create_schema_org_model(type_=LodgingReservationProperties)
    c = create_schema_org_model(type_=LodgingReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LodgingReservation.schema()
    create_lodgingreservation_model(LodgingReservationAllProperties).schema()
    create_lodgingreservation_model(LodgingReservationInheritedProperties).schema()
    create_lodgingreservation_model(LodgingReservationProperties).schema()


def SearchResultsPage_test():
    from schorg.SearchResultsPage import SearchResultsPageInheritedProperties
    from schorg.SearchResultsPage import SearchResultsPageProperties
    from schorg.SearchResultsPage import SearchResultsPageAllProperties
    from schorg.SearchResultsPage import create_schema_org_model
    from schorg.SearchResultsPage import create_searchresultspage_model
    from schorg.SearchResultsPage import SearchResultsPage

    a = create_schema_org_model(type_=SearchResultsPageInheritedProperties)
    b = create_schema_org_model(type_=SearchResultsPageProperties)
    c = create_schema_org_model(type_=SearchResultsPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SearchResultsPage.schema()
    create_searchresultspage_model(SearchResultsPageAllProperties).schema()
    create_searchresultspage_model(SearchResultsPageInheritedProperties).schema()
    create_searchresultspage_model(SearchResultsPageProperties).schema()


def TennisComplex_test():
    from schorg.TennisComplex import TennisComplexInheritedProperties
    from schorg.TennisComplex import TennisComplexProperties
    from schorg.TennisComplex import TennisComplexAllProperties
    from schorg.TennisComplex import create_schema_org_model
    from schorg.TennisComplex import create_tenniscomplex_model
    from schorg.TennisComplex import TennisComplex

    a = create_schema_org_model(type_=TennisComplexInheritedProperties)
    b = create_schema_org_model(type_=TennisComplexProperties)
    c = create_schema_org_model(type_=TennisComplexAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TennisComplex.schema()
    create_tenniscomplex_model(TennisComplexAllProperties).schema()
    create_tenniscomplex_model(TennisComplexInheritedProperties).schema()
    create_tenniscomplex_model(TennisComplexProperties).schema()


def GovernmentBuilding_test():
    from schorg.GovernmentBuilding import GovernmentBuildingInheritedProperties
    from schorg.GovernmentBuilding import GovernmentBuildingProperties
    from schorg.GovernmentBuilding import GovernmentBuildingAllProperties
    from schorg.GovernmentBuilding import create_schema_org_model
    from schorg.GovernmentBuilding import create_governmentbuilding_model
    from schorg.GovernmentBuilding import GovernmentBuilding

    a = create_schema_org_model(type_=GovernmentBuildingInheritedProperties)
    b = create_schema_org_model(type_=GovernmentBuildingProperties)
    c = create_schema_org_model(type_=GovernmentBuildingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentBuilding.schema()
    create_governmentbuilding_model(GovernmentBuildingAllProperties).schema()
    create_governmentbuilding_model(GovernmentBuildingInheritedProperties).schema()
    create_governmentbuilding_model(GovernmentBuildingProperties).schema()


def Embassy_test():
    from schorg.Embassy import EmbassyInheritedProperties
    from schorg.Embassy import EmbassyProperties
    from schorg.Embassy import EmbassyAllProperties
    from schorg.Embassy import create_schema_org_model
    from schorg.Embassy import create_embassy_model
    from schorg.Embassy import Embassy

    a = create_schema_org_model(type_=EmbassyInheritedProperties)
    b = create_schema_org_model(type_=EmbassyProperties)
    c = create_schema_org_model(type_=EmbassyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Embassy.schema()
    create_embassy_model(EmbassyAllProperties).schema()
    create_embassy_model(EmbassyInheritedProperties).schema()
    create_embassy_model(EmbassyProperties).schema()


def DamagedCondition_test():
    from schorg.DamagedCondition import DamagedConditionInheritedProperties
    from schorg.DamagedCondition import DamagedConditionProperties
    from schorg.DamagedCondition import DamagedConditionAllProperties
    from schorg.DamagedCondition import create_schema_org_model
    from schorg.DamagedCondition import create_damagedcondition_model
    from schorg.DamagedCondition import DamagedCondition

    a = create_schema_org_model(type_=DamagedConditionInheritedProperties)
    b = create_schema_org_model(type_=DamagedConditionProperties)
    c = create_schema_org_model(type_=DamagedConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DamagedCondition.schema()
    create_damagedcondition_model(DamagedConditionAllProperties).schema()
    create_damagedcondition_model(DamagedConditionInheritedProperties).schema()
    create_damagedcondition_model(DamagedConditionProperties).schema()


def LegalValueLevel_test():
    from schorg.LegalValueLevel import LegalValueLevelInheritedProperties
    from schorg.LegalValueLevel import LegalValueLevelProperties
    from schorg.LegalValueLevel import LegalValueLevelAllProperties
    from schorg.LegalValueLevel import create_schema_org_model
    from schorg.LegalValueLevel import create_legalvaluelevel_model
    from schorg.LegalValueLevel import LegalValueLevel

    a = create_schema_org_model(type_=LegalValueLevelInheritedProperties)
    b = create_schema_org_model(type_=LegalValueLevelProperties)
    c = create_schema_org_model(type_=LegalValueLevelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LegalValueLevel.schema()
    create_legalvaluelevel_model(LegalValueLevelAllProperties).schema()
    create_legalvaluelevel_model(LegalValueLevelInheritedProperties).schema()
    create_legalvaluelevel_model(LegalValueLevelProperties).schema()


def UnofficialLegalValue_test():
    from schorg.UnofficialLegalValue import UnofficialLegalValueInheritedProperties
    from schorg.UnofficialLegalValue import UnofficialLegalValueProperties
    from schorg.UnofficialLegalValue import UnofficialLegalValueAllProperties
    from schorg.UnofficialLegalValue import create_schema_org_model
    from schorg.UnofficialLegalValue import create_unofficiallegalvalue_model
    from schorg.UnofficialLegalValue import UnofficialLegalValue

    a = create_schema_org_model(type_=UnofficialLegalValueInheritedProperties)
    b = create_schema_org_model(type_=UnofficialLegalValueProperties)
    c = create_schema_org_model(type_=UnofficialLegalValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnofficialLegalValue.schema()
    create_unofficiallegalvalue_model(UnofficialLegalValueAllProperties).schema()
    create_unofficiallegalvalue_model(UnofficialLegalValueInheritedProperties).schema()
    create_unofficiallegalvalue_model(UnofficialLegalValueProperties).schema()


def MedicalGuideline_test():
    from schorg.MedicalGuideline import MedicalGuidelineInheritedProperties
    from schorg.MedicalGuideline import MedicalGuidelineProperties
    from schorg.MedicalGuideline import MedicalGuidelineAllProperties
    from schorg.MedicalGuideline import create_schema_org_model
    from schorg.MedicalGuideline import create_medicalguideline_model
    from schorg.MedicalGuideline import MedicalGuideline

    a = create_schema_org_model(type_=MedicalGuidelineInheritedProperties)
    b = create_schema_org_model(type_=MedicalGuidelineProperties)
    c = create_schema_org_model(type_=MedicalGuidelineAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalGuideline.schema()
    create_medicalguideline_model(MedicalGuidelineAllProperties).schema()
    create_medicalguideline_model(MedicalGuidelineInheritedProperties).schema()
    create_medicalguideline_model(MedicalGuidelineProperties).schema()


def CampingPitch_test():
    from schorg.CampingPitch import CampingPitchInheritedProperties
    from schorg.CampingPitch import CampingPitchProperties
    from schorg.CampingPitch import CampingPitchAllProperties
    from schorg.CampingPitch import create_schema_org_model
    from schorg.CampingPitch import create_campingpitch_model
    from schorg.CampingPitch import CampingPitch

    a = create_schema_org_model(type_=CampingPitchInheritedProperties)
    b = create_schema_org_model(type_=CampingPitchProperties)
    c = create_schema_org_model(type_=CampingPitchAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CampingPitch.schema()
    create_campingpitch_model(CampingPitchAllProperties).schema()
    create_campingpitch_model(CampingPitchInheritedProperties).schema()
    create_campingpitch_model(CampingPitchProperties).schema()


def LoseAction_test():
    from schorg.LoseAction import LoseActionInheritedProperties
    from schorg.LoseAction import LoseActionProperties
    from schorg.LoseAction import LoseActionAllProperties
    from schorg.LoseAction import create_schema_org_model
    from schorg.LoseAction import create_loseaction_model
    from schorg.LoseAction import LoseAction

    a = create_schema_org_model(type_=LoseActionInheritedProperties)
    b = create_schema_org_model(type_=LoseActionProperties)
    c = create_schema_org_model(type_=LoseActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LoseAction.schema()
    create_loseaction_model(LoseActionAllProperties).schema()
    create_loseaction_model(LoseActionInheritedProperties).schema()
    create_loseaction_model(LoseActionProperties).schema()


def WearableSizeGroupTall_test():
    from schorg.WearableSizeGroupTall import WearableSizeGroupTallInheritedProperties
    from schorg.WearableSizeGroupTall import WearableSizeGroupTallProperties
    from schorg.WearableSizeGroupTall import WearableSizeGroupTallAllProperties
    from schorg.WearableSizeGroupTall import create_schema_org_model
    from schorg.WearableSizeGroupTall import create_wearablesizegrouptall_model
    from schorg.WearableSizeGroupTall import WearableSizeGroupTall

    a = create_schema_org_model(type_=WearableSizeGroupTallInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupTallProperties)
    c = create_schema_org_model(type_=WearableSizeGroupTallAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupTall.schema()
    create_wearablesizegrouptall_model(WearableSizeGroupTallAllProperties).schema()
    create_wearablesizegrouptall_model(
        WearableSizeGroupTallInheritedProperties
    ).schema()
    create_wearablesizegrouptall_model(WearableSizeGroupTallProperties).schema()


def KosherDiet_test():
    from schorg.KosherDiet import KosherDietInheritedProperties
    from schorg.KosherDiet import KosherDietProperties
    from schorg.KosherDiet import KosherDietAllProperties
    from schorg.KosherDiet import create_schema_org_model
    from schorg.KosherDiet import create_kosherdiet_model
    from schorg.KosherDiet import KosherDiet

    a = create_schema_org_model(type_=KosherDietInheritedProperties)
    b = create_schema_org_model(type_=KosherDietProperties)
    c = create_schema_org_model(type_=KosherDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    KosherDiet.schema()
    create_kosherdiet_model(KosherDietAllProperties).schema()
    create_kosherdiet_model(KosherDietInheritedProperties).schema()
    create_kosherdiet_model(KosherDietProperties).schema()


def FDAcategoryB_test():
    from schorg.FDAcategoryB import FDAcategoryBInheritedProperties
    from schorg.FDAcategoryB import FDAcategoryBProperties
    from schorg.FDAcategoryB import FDAcategoryBAllProperties
    from schorg.FDAcategoryB import create_schema_org_model
    from schorg.FDAcategoryB import create_fdacategoryb_model
    from schorg.FDAcategoryB import FDAcategoryB

    a = create_schema_org_model(type_=FDAcategoryBInheritedProperties)
    b = create_schema_org_model(type_=FDAcategoryBProperties)
    c = create_schema_org_model(type_=FDAcategoryBAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAcategoryB.schema()
    create_fdacategoryb_model(FDAcategoryBAllProperties).schema()
    create_fdacategoryb_model(FDAcategoryBInheritedProperties).schema()
    create_fdacategoryb_model(FDAcategoryBProperties).schema()


def WearableSizeGroupJuniors_test():
    from schorg.WearableSizeGroupJuniors import (
        WearableSizeGroupJuniorsInheritedProperties,
    )
    from schorg.WearableSizeGroupJuniors import WearableSizeGroupJuniorsProperties
    from schorg.WearableSizeGroupJuniors import WearableSizeGroupJuniorsAllProperties
    from schorg.WearableSizeGroupJuniors import create_schema_org_model
    from schorg.WearableSizeGroupJuniors import create_wearablesizegroupjuniors_model
    from schorg.WearableSizeGroupJuniors import WearableSizeGroupJuniors

    a = create_schema_org_model(type_=WearableSizeGroupJuniorsInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupJuniorsProperties)
    c = create_schema_org_model(type_=WearableSizeGroupJuniorsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupJuniors.schema()
    create_wearablesizegroupjuniors_model(
        WearableSizeGroupJuniorsAllProperties
    ).schema()
    create_wearablesizegroupjuniors_model(
        WearableSizeGroupJuniorsInheritedProperties
    ).schema()
    create_wearablesizegroupjuniors_model(WearableSizeGroupJuniorsProperties).schema()


def ElementarySchool_test():
    from schorg.ElementarySchool import ElementarySchoolInheritedProperties
    from schorg.ElementarySchool import ElementarySchoolProperties
    from schorg.ElementarySchool import ElementarySchoolAllProperties
    from schorg.ElementarySchool import create_schema_org_model
    from schorg.ElementarySchool import create_elementaryschool_model
    from schorg.ElementarySchool import ElementarySchool

    a = create_schema_org_model(type_=ElementarySchoolInheritedProperties)
    b = create_schema_org_model(type_=ElementarySchoolProperties)
    c = create_schema_org_model(type_=ElementarySchoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ElementarySchool.schema()
    create_elementaryschool_model(ElementarySchoolAllProperties).schema()
    create_elementaryschool_model(ElementarySchoolInheritedProperties).schema()
    create_elementaryschool_model(ElementarySchoolProperties).schema()


def Message_test():
    from schorg.Message import MessageInheritedProperties
    from schorg.Message import MessageProperties
    from schorg.Message import MessageAllProperties
    from schorg.Message import create_schema_org_model
    from schorg.Message import create_message_model
    from schorg.Message import Message

    a = create_schema_org_model(type_=MessageInheritedProperties)
    b = create_schema_org_model(type_=MessageProperties)
    c = create_schema_org_model(type_=MessageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Message.schema()
    create_message_model(MessageAllProperties).schema()
    create_message_model(MessageInheritedProperties).schema()
    create_message_model(MessageProperties).schema()


def EmailMessage_test():
    from schorg.EmailMessage import EmailMessageInheritedProperties
    from schorg.EmailMessage import EmailMessageProperties
    from schorg.EmailMessage import EmailMessageAllProperties
    from schorg.EmailMessage import create_schema_org_model
    from schorg.EmailMessage import create_emailmessage_model
    from schorg.EmailMessage import EmailMessage

    a = create_schema_org_model(type_=EmailMessageInheritedProperties)
    b = create_schema_org_model(type_=EmailMessageProperties)
    c = create_schema_org_model(type_=EmailMessageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmailMessage.schema()
    create_emailmessage_model(EmailMessageAllProperties).schema()
    create_emailmessage_model(EmailMessageInheritedProperties).schema()
    create_emailmessage_model(EmailMessageProperties).schema()


def SaleEvent_test():
    from schorg.SaleEvent import SaleEventInheritedProperties
    from schorg.SaleEvent import SaleEventProperties
    from schorg.SaleEvent import SaleEventAllProperties
    from schorg.SaleEvent import create_schema_org_model
    from schorg.SaleEvent import create_saleevent_model
    from schorg.SaleEvent import SaleEvent

    a = create_schema_org_model(type_=SaleEventInheritedProperties)
    b = create_schema_org_model(type_=SaleEventProperties)
    c = create_schema_org_model(type_=SaleEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SaleEvent.schema()
    create_saleevent_model(SaleEventAllProperties).schema()
    create_saleevent_model(SaleEventInheritedProperties).schema()
    create_saleevent_model(SaleEventProperties).schema()


def MediaReviewItem_test():
    from schorg.MediaReviewItem import MediaReviewItemInheritedProperties
    from schorg.MediaReviewItem import MediaReviewItemProperties
    from schorg.MediaReviewItem import MediaReviewItemAllProperties
    from schorg.MediaReviewItem import create_schema_org_model
    from schorg.MediaReviewItem import create_mediareviewitem_model
    from schorg.MediaReviewItem import MediaReviewItem

    a = create_schema_org_model(type_=MediaReviewItemInheritedProperties)
    b = create_schema_org_model(type_=MediaReviewItemProperties)
    c = create_schema_org_model(type_=MediaReviewItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaReviewItem.schema()
    create_mediareviewitem_model(MediaReviewItemAllProperties).schema()
    create_mediareviewitem_model(MediaReviewItemInheritedProperties).schema()
    create_mediareviewitem_model(MediaReviewItemProperties).schema()


def ImageObject_test():
    from schorg.ImageObject import ImageObjectInheritedProperties
    from schorg.ImageObject import ImageObjectProperties
    from schorg.ImageObject import ImageObjectAllProperties
    from schorg.ImageObject import create_schema_org_model
    from schorg.ImageObject import create_imageobject_model
    from schorg.ImageObject import ImageObject

    a = create_schema_org_model(type_=ImageObjectInheritedProperties)
    b = create_schema_org_model(type_=ImageObjectProperties)
    c = create_schema_org_model(type_=ImageObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ImageObject.schema()
    create_imageobject_model(ImageObjectAllProperties).schema()
    create_imageobject_model(ImageObjectInheritedProperties).schema()
    create_imageobject_model(ImageObjectProperties).schema()


def ImageObjectSnapshot_test():
    from schorg.ImageObjectSnapshot import ImageObjectSnapshotInheritedProperties
    from schorg.ImageObjectSnapshot import ImageObjectSnapshotProperties
    from schorg.ImageObjectSnapshot import ImageObjectSnapshotAllProperties
    from schorg.ImageObjectSnapshot import create_schema_org_model
    from schorg.ImageObjectSnapshot import create_imageobjectsnapshot_model
    from schorg.ImageObjectSnapshot import ImageObjectSnapshot

    a = create_schema_org_model(type_=ImageObjectSnapshotInheritedProperties)
    b = create_schema_org_model(type_=ImageObjectSnapshotProperties)
    c = create_schema_org_model(type_=ImageObjectSnapshotAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ImageObjectSnapshot.schema()
    create_imageobjectsnapshot_model(ImageObjectSnapshotAllProperties).schema()
    create_imageobjectsnapshot_model(ImageObjectSnapshotInheritedProperties).schema()
    create_imageobjectsnapshot_model(ImageObjectSnapshotProperties).schema()


def Pharmacy_test():
    from schorg.Pharmacy import PharmacyInheritedProperties
    from schorg.Pharmacy import PharmacyProperties
    from schorg.Pharmacy import PharmacyAllProperties
    from schorg.Pharmacy import create_schema_org_model
    from schorg.Pharmacy import create_pharmacy_model
    from schorg.Pharmacy import Pharmacy

    a = create_schema_org_model(type_=PharmacyInheritedProperties)
    b = create_schema_org_model(type_=PharmacyProperties)
    c = create_schema_org_model(type_=PharmacyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Pharmacy.schema()
    create_pharmacy_model(PharmacyAllProperties).schema()
    create_pharmacy_model(PharmacyInheritedProperties).schema()
    create_pharmacy_model(PharmacyProperties).schema()


def ContactPoint_test():
    from schorg.ContactPoint import ContactPointInheritedProperties
    from schorg.ContactPoint import ContactPointProperties
    from schorg.ContactPoint import ContactPointAllProperties
    from schorg.ContactPoint import create_schema_org_model
    from schorg.ContactPoint import create_contactpoint_model
    from schorg.ContactPoint import ContactPoint

    a = create_schema_org_model(type_=ContactPointInheritedProperties)
    b = create_schema_org_model(type_=ContactPointProperties)
    c = create_schema_org_model(type_=ContactPointAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ContactPoint.schema()
    create_contactpoint_model(ContactPointAllProperties).schema()
    create_contactpoint_model(ContactPointInheritedProperties).schema()
    create_contactpoint_model(ContactPointProperties).schema()


def PublicHolidays_test():
    from schorg.PublicHolidays import PublicHolidaysInheritedProperties
    from schorg.PublicHolidays import PublicHolidaysProperties
    from schorg.PublicHolidays import PublicHolidaysAllProperties
    from schorg.PublicHolidays import create_schema_org_model
    from schorg.PublicHolidays import create_publicholidays_model
    from schorg.PublicHolidays import PublicHolidays

    a = create_schema_org_model(type_=PublicHolidaysInheritedProperties)
    b = create_schema_org_model(type_=PublicHolidaysProperties)
    c = create_schema_org_model(type_=PublicHolidaysAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicHolidays.schema()
    create_publicholidays_model(PublicHolidaysAllProperties).schema()
    create_publicholidays_model(PublicHolidaysInheritedProperties).schema()
    create_publicholidays_model(PublicHolidaysProperties).schema()


def BusTrip_test():
    from schorg.BusTrip import BusTripInheritedProperties
    from schorg.BusTrip import BusTripProperties
    from schorg.BusTrip import BusTripAllProperties
    from schorg.BusTrip import create_schema_org_model
    from schorg.BusTrip import create_bustrip_model
    from schorg.BusTrip import BusTrip

    a = create_schema_org_model(type_=BusTripInheritedProperties)
    b = create_schema_org_model(type_=BusTripProperties)
    c = create_schema_org_model(type_=BusTripAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusTrip.schema()
    create_bustrip_model(BusTripAllProperties).schema()
    create_bustrip_model(BusTripInheritedProperties).schema()
    create_bustrip_model(BusTripProperties).schema()


def Physician_test():
    from schorg.Physician import PhysicianInheritedProperties
    from schorg.Physician import PhysicianProperties
    from schorg.Physician import PhysicianAllProperties
    from schorg.Physician import create_schema_org_model
    from schorg.Physician import create_physician_model
    from schorg.Physician import Physician

    a = create_schema_org_model(type_=PhysicianInheritedProperties)
    b = create_schema_org_model(type_=PhysicianProperties)
    c = create_schema_org_model(type_=PhysicianAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Physician.schema()
    create_physician_model(PhysicianAllProperties).schema()
    create_physician_model(PhysicianInheritedProperties).schema()
    create_physician_model(PhysicianProperties).schema()


def EventStatusType_test():
    from schorg.EventStatusType import EventStatusTypeInheritedProperties
    from schorg.EventStatusType import EventStatusTypeProperties
    from schorg.EventStatusType import EventStatusTypeAllProperties
    from schorg.EventStatusType import create_schema_org_model
    from schorg.EventStatusType import create_eventstatustype_model
    from schorg.EventStatusType import EventStatusType

    a = create_schema_org_model(type_=EventStatusTypeInheritedProperties)
    b = create_schema_org_model(type_=EventStatusTypeProperties)
    c = create_schema_org_model(type_=EventStatusTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventStatusType.schema()
    create_eventstatustype_model(EventStatusTypeAllProperties).schema()
    create_eventstatustype_model(EventStatusTypeInheritedProperties).schema()
    create_eventstatustype_model(EventStatusTypeProperties).schema()


def EventCancelled_test():
    from schorg.EventCancelled import EventCancelledInheritedProperties
    from schorg.EventCancelled import EventCancelledProperties
    from schorg.EventCancelled import EventCancelledAllProperties
    from schorg.EventCancelled import create_schema_org_model
    from schorg.EventCancelled import create_eventcancelled_model
    from schorg.EventCancelled import EventCancelled

    a = create_schema_org_model(type_=EventCancelledInheritedProperties)
    b = create_schema_org_model(type_=EventCancelledProperties)
    c = create_schema_org_model(type_=EventCancelledAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventCancelled.schema()
    create_eventcancelled_model(EventCancelledAllProperties).schema()
    create_eventcancelled_model(EventCancelledInheritedProperties).schema()
    create_eventcancelled_model(EventCancelledProperties).schema()


def ResultsNotAvailable_test():
    from schorg.ResultsNotAvailable import ResultsNotAvailableInheritedProperties
    from schorg.ResultsNotAvailable import ResultsNotAvailableProperties
    from schorg.ResultsNotAvailable import ResultsNotAvailableAllProperties
    from schorg.ResultsNotAvailable import create_schema_org_model
    from schorg.ResultsNotAvailable import create_resultsnotavailable_model
    from schorg.ResultsNotAvailable import ResultsNotAvailable

    a = create_schema_org_model(type_=ResultsNotAvailableInheritedProperties)
    b = create_schema_org_model(type_=ResultsNotAvailableProperties)
    c = create_schema_org_model(type_=ResultsNotAvailableAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ResultsNotAvailable.schema()
    create_resultsnotavailable_model(ResultsNotAvailableAllProperties).schema()
    create_resultsnotavailable_model(ResultsNotAvailableInheritedProperties).schema()
    create_resultsnotavailable_model(ResultsNotAvailableProperties).schema()


def Campground_test():
    from schorg.Campground import CampgroundInheritedProperties
    from schorg.Campground import CampgroundProperties
    from schorg.Campground import CampgroundAllProperties
    from schorg.Campground import create_schema_org_model
    from schorg.Campground import create_campground_model
    from schorg.Campground import Campground

    a = create_schema_org_model(type_=CampgroundInheritedProperties)
    b = create_schema_org_model(type_=CampgroundProperties)
    c = create_schema_org_model(type_=CampgroundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Campground.schema()
    create_campground_model(CampgroundAllProperties).schema()
    create_campground_model(CampgroundInheritedProperties).schema()
    create_campground_model(CampgroundProperties).schema()


def Joint_test():
    from schorg.Joint import JointInheritedProperties
    from schorg.Joint import JointProperties
    from schorg.Joint import JointAllProperties
    from schorg.Joint import create_schema_org_model
    from schorg.Joint import create_joint_model
    from schorg.Joint import Joint

    a = create_schema_org_model(type_=JointInheritedProperties)
    b = create_schema_org_model(type_=JointProperties)
    c = create_schema_org_model(type_=JointAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Joint.schema()
    create_joint_model(JointAllProperties).schema()
    create_joint_model(JointInheritedProperties).schema()
    create_joint_model(JointProperties).schema()


def MerchantReturnPolicy_test():
    from schorg.MerchantReturnPolicy import MerchantReturnPolicyInheritedProperties
    from schorg.MerchantReturnPolicy import MerchantReturnPolicyProperties
    from schorg.MerchantReturnPolicy import MerchantReturnPolicyAllProperties
    from schorg.MerchantReturnPolicy import create_schema_org_model
    from schorg.MerchantReturnPolicy import create_merchantreturnpolicy_model
    from schorg.MerchantReturnPolicy import MerchantReturnPolicy

    a = create_schema_org_model(type_=MerchantReturnPolicyInheritedProperties)
    b = create_schema_org_model(type_=MerchantReturnPolicyProperties)
    c = create_schema_org_model(type_=MerchantReturnPolicyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnPolicy.schema()
    create_merchantreturnpolicy_model(MerchantReturnPolicyAllProperties).schema()
    create_merchantreturnpolicy_model(MerchantReturnPolicyInheritedProperties).schema()
    create_merchantreturnpolicy_model(MerchantReturnPolicyProperties).schema()


def CompleteDataFeed_test():
    from schorg.CompleteDataFeed import CompleteDataFeedInheritedProperties
    from schorg.CompleteDataFeed import CompleteDataFeedProperties
    from schorg.CompleteDataFeed import CompleteDataFeedAllProperties
    from schorg.CompleteDataFeed import create_schema_org_model
    from schorg.CompleteDataFeed import create_completedatafeed_model
    from schorg.CompleteDataFeed import CompleteDataFeed

    a = create_schema_org_model(type_=CompleteDataFeedInheritedProperties)
    b = create_schema_org_model(type_=CompleteDataFeedProperties)
    c = create_schema_org_model(type_=CompleteDataFeedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CompleteDataFeed.schema()
    create_completedatafeed_model(CompleteDataFeedAllProperties).schema()
    create_completedatafeed_model(CompleteDataFeedInheritedProperties).schema()
    create_completedatafeed_model(CompleteDataFeedProperties).schema()


def PrimaryCare_test():
    from schorg.PrimaryCare import PrimaryCareInheritedProperties
    from schorg.PrimaryCare import PrimaryCareProperties
    from schorg.PrimaryCare import PrimaryCareAllProperties
    from schorg.PrimaryCare import create_schema_org_model
    from schorg.PrimaryCare import create_primarycare_model
    from schorg.PrimaryCare import PrimaryCare

    a = create_schema_org_model(type_=PrimaryCareInheritedProperties)
    b = create_schema_org_model(type_=PrimaryCareProperties)
    c = create_schema_org_model(type_=PrimaryCareAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PrimaryCare.schema()
    create_primarycare_model(PrimaryCareAllProperties).schema()
    create_primarycare_model(PrimaryCareInheritedProperties).schema()
    create_primarycare_model(PrimaryCareProperties).schema()


def City_test():
    from schorg.City import CityInheritedProperties
    from schorg.City import CityProperties
    from schorg.City import CityAllProperties
    from schorg.City import create_schema_org_model
    from schorg.City import create_city_model
    from schorg.City import City

    a = create_schema_org_model(type_=CityInheritedProperties)
    b = create_schema_org_model(type_=CityProperties)
    c = create_schema_org_model(type_=CityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    City.schema()
    create_city_model(CityAllProperties).schema()
    create_city_model(CityInheritedProperties).schema()
    create_city_model(CityProperties).schema()


def HealthPlanCostSharingSpecification_test():
    from schorg.HealthPlanCostSharingSpecification import (
        HealthPlanCostSharingSpecificationInheritedProperties,
    )
    from schorg.HealthPlanCostSharingSpecification import (
        HealthPlanCostSharingSpecificationProperties,
    )
    from schorg.HealthPlanCostSharingSpecification import (
        HealthPlanCostSharingSpecificationAllProperties,
    )
    from schorg.HealthPlanCostSharingSpecification import create_schema_org_model
    from schorg.HealthPlanCostSharingSpecification import (
        create_healthplancostsharingspecification_model,
    )
    from schorg.HealthPlanCostSharingSpecification import (
        HealthPlanCostSharingSpecification,
    )

    a = create_schema_org_model(
        type_=HealthPlanCostSharingSpecificationInheritedProperties
    )
    b = create_schema_org_model(type_=HealthPlanCostSharingSpecificationProperties)
    c = create_schema_org_model(type_=HealthPlanCostSharingSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthPlanCostSharingSpecification.schema()
    create_healthplancostsharingspecification_model(
        HealthPlanCostSharingSpecificationAllProperties
    ).schema()
    create_healthplancostsharingspecification_model(
        HealthPlanCostSharingSpecificationInheritedProperties
    ).schema()
    create_healthplancostsharingspecification_model(
        HealthPlanCostSharingSpecificationProperties
    ).schema()


def MedicalStudy_test():
    from schorg.MedicalStudy import MedicalStudyInheritedProperties
    from schorg.MedicalStudy import MedicalStudyProperties
    from schorg.MedicalStudy import MedicalStudyAllProperties
    from schorg.MedicalStudy import create_schema_org_model
    from schorg.MedicalStudy import create_medicalstudy_model
    from schorg.MedicalStudy import MedicalStudy

    a = create_schema_org_model(type_=MedicalStudyInheritedProperties)
    b = create_schema_org_model(type_=MedicalStudyProperties)
    c = create_schema_org_model(type_=MedicalStudyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalStudy.schema()
    create_medicalstudy_model(MedicalStudyAllProperties).schema()
    create_medicalstudy_model(MedicalStudyInheritedProperties).schema()
    create_medicalstudy_model(MedicalStudyProperties).schema()


def MedicalObservationalStudy_test():
    from schorg.MedicalObservationalStudy import (
        MedicalObservationalStudyInheritedProperties,
    )
    from schorg.MedicalObservationalStudy import MedicalObservationalStudyProperties
    from schorg.MedicalObservationalStudy import MedicalObservationalStudyAllProperties
    from schorg.MedicalObservationalStudy import create_schema_org_model
    from schorg.MedicalObservationalStudy import create_medicalobservationalstudy_model
    from schorg.MedicalObservationalStudy import MedicalObservationalStudy

    a = create_schema_org_model(type_=MedicalObservationalStudyInheritedProperties)
    b = create_schema_org_model(type_=MedicalObservationalStudyProperties)
    c = create_schema_org_model(type_=MedicalObservationalStudyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalObservationalStudy.schema()
    create_medicalobservationalstudy_model(
        MedicalObservationalStudyAllProperties
    ).schema()
    create_medicalobservationalstudy_model(
        MedicalObservationalStudyInheritedProperties
    ).schema()
    create_medicalobservationalstudy_model(MedicalObservationalStudyProperties).schema()


def LockerDelivery_test():
    from schorg.LockerDelivery import LockerDeliveryInheritedProperties
    from schorg.LockerDelivery import LockerDeliveryProperties
    from schorg.LockerDelivery import LockerDeliveryAllProperties
    from schorg.LockerDelivery import create_schema_org_model
    from schorg.LockerDelivery import create_lockerdelivery_model
    from schorg.LockerDelivery import LockerDelivery

    a = create_schema_org_model(type_=LockerDeliveryInheritedProperties)
    b = create_schema_org_model(type_=LockerDeliveryProperties)
    c = create_schema_org_model(type_=LockerDeliveryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LockerDelivery.schema()
    create_lockerdelivery_model(LockerDeliveryAllProperties).schema()
    create_lockerdelivery_model(LockerDeliveryInheritedProperties).schema()
    create_lockerdelivery_model(LockerDeliveryProperties).schema()


def ItemListOrderAscending_test():
    from schorg.ItemListOrderAscending import ItemListOrderAscendingInheritedProperties
    from schorg.ItemListOrderAscending import ItemListOrderAscendingProperties
    from schorg.ItemListOrderAscending import ItemListOrderAscendingAllProperties
    from schorg.ItemListOrderAscending import create_schema_org_model
    from schorg.ItemListOrderAscending import create_itemlistorderascending_model
    from schorg.ItemListOrderAscending import ItemListOrderAscending

    a = create_schema_org_model(type_=ItemListOrderAscendingInheritedProperties)
    b = create_schema_org_model(type_=ItemListOrderAscendingProperties)
    c = create_schema_org_model(type_=ItemListOrderAscendingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemListOrderAscending.schema()
    create_itemlistorderascending_model(ItemListOrderAscendingAllProperties).schema()
    create_itemlistorderascending_model(
        ItemListOrderAscendingInheritedProperties
    ).schema()
    create_itemlistorderascending_model(ItemListOrderAscendingProperties).schema()


def AudioObjectSnapshot_test():
    from schorg.AudioObjectSnapshot import AudioObjectSnapshotInheritedProperties
    from schorg.AudioObjectSnapshot import AudioObjectSnapshotProperties
    from schorg.AudioObjectSnapshot import AudioObjectSnapshotAllProperties
    from schorg.AudioObjectSnapshot import create_schema_org_model
    from schorg.AudioObjectSnapshot import create_audioobjectsnapshot_model
    from schorg.AudioObjectSnapshot import AudioObjectSnapshot

    a = create_schema_org_model(type_=AudioObjectSnapshotInheritedProperties)
    b = create_schema_org_model(type_=AudioObjectSnapshotProperties)
    c = create_schema_org_model(type_=AudioObjectSnapshotAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AudioObjectSnapshot.schema()
    create_audioobjectsnapshot_model(AudioObjectSnapshotAllProperties).schema()
    create_audioobjectsnapshot_model(AudioObjectSnapshotInheritedProperties).schema()
    create_audioobjectsnapshot_model(AudioObjectSnapshotProperties).schema()


def Statement_test():
    from schorg.Statement import StatementInheritedProperties
    from schorg.Statement import StatementProperties
    from schorg.Statement import StatementAllProperties
    from schorg.Statement import create_schema_org_model
    from schorg.Statement import create_statement_model
    from schorg.Statement import Statement

    a = create_schema_org_model(type_=StatementInheritedProperties)
    b = create_schema_org_model(type_=StatementProperties)
    c = create_schema_org_model(type_=StatementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Statement.schema()
    create_statement_model(StatementAllProperties).schema()
    create_statement_model(StatementInheritedProperties).schema()
    create_statement_model(StatementProperties).schema()


def WearableMeasurementWaist_test():
    from schorg.WearableMeasurementWaist import (
        WearableMeasurementWaistInheritedProperties,
    )
    from schorg.WearableMeasurementWaist import WearableMeasurementWaistProperties
    from schorg.WearableMeasurementWaist import WearableMeasurementWaistAllProperties
    from schorg.WearableMeasurementWaist import create_schema_org_model
    from schorg.WearableMeasurementWaist import create_wearablemeasurementwaist_model
    from schorg.WearableMeasurementWaist import WearableMeasurementWaist

    a = create_schema_org_model(type_=WearableMeasurementWaistInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementWaistProperties)
    c = create_schema_org_model(type_=WearableMeasurementWaistAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementWaist.schema()
    create_wearablemeasurementwaist_model(
        WearableMeasurementWaistAllProperties
    ).schema()
    create_wearablemeasurementwaist_model(
        WearableMeasurementWaistInheritedProperties
    ).schema()
    create_wearablemeasurementwaist_model(WearableMeasurementWaistProperties).schema()


def WearableMeasurementBack_test():
    from schorg.WearableMeasurementBack import (
        WearableMeasurementBackInheritedProperties,
    )
    from schorg.WearableMeasurementBack import WearableMeasurementBackProperties
    from schorg.WearableMeasurementBack import WearableMeasurementBackAllProperties
    from schorg.WearableMeasurementBack import create_schema_org_model
    from schorg.WearableMeasurementBack import create_wearablemeasurementback_model
    from schorg.WearableMeasurementBack import WearableMeasurementBack

    a = create_schema_org_model(type_=WearableMeasurementBackInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementBackProperties)
    c = create_schema_org_model(type_=WearableMeasurementBackAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementBack.schema()
    create_wearablemeasurementback_model(WearableMeasurementBackAllProperties).schema()
    create_wearablemeasurementback_model(
        WearableMeasurementBackInheritedProperties
    ).schema()
    create_wearablemeasurementback_model(WearableMeasurementBackProperties).schema()


def AnaerobicActivity_test():
    from schorg.AnaerobicActivity import AnaerobicActivityInheritedProperties
    from schorg.AnaerobicActivity import AnaerobicActivityProperties
    from schorg.AnaerobicActivity import AnaerobicActivityAllProperties
    from schorg.AnaerobicActivity import create_schema_org_model
    from schorg.AnaerobicActivity import create_anaerobicactivity_model
    from schorg.AnaerobicActivity import AnaerobicActivity

    a = create_schema_org_model(type_=AnaerobicActivityInheritedProperties)
    b = create_schema_org_model(type_=AnaerobicActivityProperties)
    c = create_schema_org_model(type_=AnaerobicActivityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AnaerobicActivity.schema()
    create_anaerobicactivity_model(AnaerobicActivityAllProperties).schema()
    create_anaerobicactivity_model(AnaerobicActivityInheritedProperties).schema()
    create_anaerobicactivity_model(AnaerobicActivityProperties).schema()


def ReducedRelevanceForChildrenConsideration_test():
    from schorg.ReducedRelevanceForChildrenConsideration import (
        ReducedRelevanceForChildrenConsiderationInheritedProperties,
    )
    from schorg.ReducedRelevanceForChildrenConsideration import (
        ReducedRelevanceForChildrenConsiderationProperties,
    )
    from schorg.ReducedRelevanceForChildrenConsideration import (
        ReducedRelevanceForChildrenConsiderationAllProperties,
    )
    from schorg.ReducedRelevanceForChildrenConsideration import create_schema_org_model
    from schorg.ReducedRelevanceForChildrenConsideration import (
        create_reducedrelevanceforchildrenconsideration_model,
    )
    from schorg.ReducedRelevanceForChildrenConsideration import (
        ReducedRelevanceForChildrenConsideration,
    )

    a = create_schema_org_model(
        type_=ReducedRelevanceForChildrenConsiderationInheritedProperties
    )
    b = create_schema_org_model(
        type_=ReducedRelevanceForChildrenConsiderationProperties
    )
    c = create_schema_org_model(
        type_=ReducedRelevanceForChildrenConsiderationAllProperties
    )
    a.schema()
    b.schema()
    c.schema()
    ReducedRelevanceForChildrenConsideration.schema()
    create_reducedrelevanceforchildrenconsideration_model(
        ReducedRelevanceForChildrenConsiderationAllProperties
    ).schema()
    create_reducedrelevanceforchildrenconsideration_model(
        ReducedRelevanceForChildrenConsiderationInheritedProperties
    ).schema()
    create_reducedrelevanceforchildrenconsideration_model(
        ReducedRelevanceForChildrenConsiderationProperties
    ).schema()


def ResearchOrganization_test():
    from schorg.ResearchOrganization import ResearchOrganizationInheritedProperties
    from schorg.ResearchOrganization import ResearchOrganizationProperties
    from schorg.ResearchOrganization import ResearchOrganizationAllProperties
    from schorg.ResearchOrganization import create_schema_org_model
    from schorg.ResearchOrganization import create_researchorganization_model
    from schorg.ResearchOrganization import ResearchOrganization

    a = create_schema_org_model(type_=ResearchOrganizationInheritedProperties)
    b = create_schema_org_model(type_=ResearchOrganizationProperties)
    c = create_schema_org_model(type_=ResearchOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ResearchOrganization.schema()
    create_researchorganization_model(ResearchOrganizationAllProperties).schema()
    create_researchorganization_model(ResearchOrganizationInheritedProperties).schema()
    create_researchorganization_model(ResearchOrganizationProperties).schema()


def Eye_test():
    from schorg.Eye import EyeInheritedProperties
    from schorg.Eye import EyeProperties
    from schorg.Eye import EyeAllProperties
    from schorg.Eye import create_schema_org_model
    from schorg.Eye import create_eye_model
    from schorg.Eye import Eye

    a = create_schema_org_model(type_=EyeInheritedProperties)
    b = create_schema_org_model(type_=EyeProperties)
    c = create_schema_org_model(type_=EyeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Eye.schema()
    create_eye_model(EyeAllProperties).schema()
    create_eye_model(EyeInheritedProperties).schema()
    create_eye_model(EyeProperties).schema()


def QAPage_test():
    from schorg.QAPage import QAPageInheritedProperties
    from schorg.QAPage import QAPageProperties
    from schorg.QAPage import QAPageAllProperties
    from schorg.QAPage import create_schema_org_model
    from schorg.QAPage import create_qapage_model
    from schorg.QAPage import QAPage

    a = create_schema_org_model(type_=QAPageInheritedProperties)
    b = create_schema_org_model(type_=QAPageProperties)
    c = create_schema_org_model(type_=QAPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    QAPage.schema()
    create_qapage_model(QAPageAllProperties).schema()
    create_qapage_model(QAPageInheritedProperties).schema()
    create_qapage_model(QAPageProperties).schema()


def Playground_test():
    from schorg.Playground import PlaygroundInheritedProperties
    from schorg.Playground import PlaygroundProperties
    from schorg.Playground import PlaygroundAllProperties
    from schorg.Playground import create_schema_org_model
    from schorg.Playground import create_playground_model
    from schorg.Playground import Playground

    a = create_schema_org_model(type_=PlaygroundInheritedProperties)
    b = create_schema_org_model(type_=PlaygroundProperties)
    c = create_schema_org_model(type_=PlaygroundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Playground.schema()
    create_playground_model(PlaygroundAllProperties).schema()
    create_playground_model(PlaygroundInheritedProperties).schema()
    create_playground_model(PlaygroundProperties).schema()


def ChemicalSubstance_test():
    from schorg.ChemicalSubstance import ChemicalSubstanceInheritedProperties
    from schorg.ChemicalSubstance import ChemicalSubstanceProperties
    from schorg.ChemicalSubstance import ChemicalSubstanceAllProperties
    from schorg.ChemicalSubstance import create_schema_org_model
    from schorg.ChemicalSubstance import create_chemicalsubstance_model
    from schorg.ChemicalSubstance import ChemicalSubstance

    a = create_schema_org_model(type_=ChemicalSubstanceInheritedProperties)
    b = create_schema_org_model(type_=ChemicalSubstanceProperties)
    c = create_schema_org_model(type_=ChemicalSubstanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ChemicalSubstance.schema()
    create_chemicalsubstance_model(ChemicalSubstanceAllProperties).schema()
    create_chemicalsubstance_model(ChemicalSubstanceInheritedProperties).schema()
    create_chemicalsubstance_model(ChemicalSubstanceProperties).schema()


def WearableSizeGroupRegular_test():
    from schorg.WearableSizeGroupRegular import (
        WearableSizeGroupRegularInheritedProperties,
    )
    from schorg.WearableSizeGroupRegular import WearableSizeGroupRegularProperties
    from schorg.WearableSizeGroupRegular import WearableSizeGroupRegularAllProperties
    from schorg.WearableSizeGroupRegular import create_schema_org_model
    from schorg.WearableSizeGroupRegular import create_wearablesizegroupregular_model
    from schorg.WearableSizeGroupRegular import WearableSizeGroupRegular

    a = create_schema_org_model(type_=WearableSizeGroupRegularInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupRegularProperties)
    c = create_schema_org_model(type_=WearableSizeGroupRegularAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupRegular.schema()
    create_wearablesizegroupregular_model(
        WearableSizeGroupRegularAllProperties
    ).schema()
    create_wearablesizegroupregular_model(
        WearableSizeGroupRegularInheritedProperties
    ).schema()
    create_wearablesizegroupregular_model(WearableSizeGroupRegularProperties).schema()


def SubwayStation_test():
    from schorg.SubwayStation import SubwayStationInheritedProperties
    from schorg.SubwayStation import SubwayStationProperties
    from schorg.SubwayStation import SubwayStationAllProperties
    from schorg.SubwayStation import create_schema_org_model
    from schorg.SubwayStation import create_subwaystation_model
    from schorg.SubwayStation import SubwayStation

    a = create_schema_org_model(type_=SubwayStationInheritedProperties)
    b = create_schema_org_model(type_=SubwayStationProperties)
    c = create_schema_org_model(type_=SubwayStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SubwayStation.schema()
    create_subwaystation_model(SubwayStationAllProperties).schema()
    create_subwaystation_model(SubwayStationInheritedProperties).schema()
    create_subwaystation_model(SubwayStationProperties).schema()


def SomeProducts_test():
    from schorg.SomeProducts import SomeProductsInheritedProperties
    from schorg.SomeProducts import SomeProductsProperties
    from schorg.SomeProducts import SomeProductsAllProperties
    from schorg.SomeProducts import create_schema_org_model
    from schorg.SomeProducts import create_someproducts_model
    from schorg.SomeProducts import SomeProducts

    a = create_schema_org_model(type_=SomeProductsInheritedProperties)
    b = create_schema_org_model(type_=SomeProductsProperties)
    c = create_schema_org_model(type_=SomeProductsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SomeProducts.schema()
    create_someproducts_model(SomeProductsAllProperties).schema()
    create_someproducts_model(SomeProductsInheritedProperties).schema()
    create_someproducts_model(SomeProductsProperties).schema()


def MonetaryAmount_test():
    from schorg.MonetaryAmount import MonetaryAmountInheritedProperties
    from schorg.MonetaryAmount import MonetaryAmountProperties
    from schorg.MonetaryAmount import MonetaryAmountAllProperties
    from schorg.MonetaryAmount import create_schema_org_model
    from schorg.MonetaryAmount import create_monetaryamount_model
    from schorg.MonetaryAmount import MonetaryAmount

    a = create_schema_org_model(type_=MonetaryAmountInheritedProperties)
    b = create_schema_org_model(type_=MonetaryAmountProperties)
    c = create_schema_org_model(type_=MonetaryAmountAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MonetaryAmount.schema()
    create_monetaryamount_model(MonetaryAmountAllProperties).schema()
    create_monetaryamount_model(MonetaryAmountInheritedProperties).schema()
    create_monetaryamount_model(MonetaryAmountProperties).schema()


def AddAction_test():
    from schorg.AddAction import AddActionInheritedProperties
    from schorg.AddAction import AddActionProperties
    from schorg.AddAction import AddActionAllProperties
    from schorg.AddAction import create_schema_org_model
    from schorg.AddAction import create_addaction_model
    from schorg.AddAction import AddAction

    a = create_schema_org_model(type_=AddActionInheritedProperties)
    b = create_schema_org_model(type_=AddActionProperties)
    c = create_schema_org_model(type_=AddActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AddAction.schema()
    create_addaction_model(AddActionAllProperties).schema()
    create_addaction_model(AddActionInheritedProperties).schema()
    create_addaction_model(AddActionProperties).schema()


def InsertAction_test():
    from schorg.InsertAction import InsertActionInheritedProperties
    from schorg.InsertAction import InsertActionProperties
    from schorg.InsertAction import InsertActionAllProperties
    from schorg.InsertAction import create_schema_org_model
    from schorg.InsertAction import create_insertaction_model
    from schorg.InsertAction import InsertAction

    a = create_schema_org_model(type_=InsertActionInheritedProperties)
    b = create_schema_org_model(type_=InsertActionProperties)
    c = create_schema_org_model(type_=InsertActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InsertAction.schema()
    create_insertaction_model(InsertActionAllProperties).schema()
    create_insertaction_model(InsertActionInheritedProperties).schema()
    create_insertaction_model(InsertActionProperties).schema()


def ProductGroup_test():
    from schorg.ProductGroup import ProductGroupInheritedProperties
    from schorg.ProductGroup import ProductGroupProperties
    from schorg.ProductGroup import ProductGroupAllProperties
    from schorg.ProductGroup import create_schema_org_model
    from schorg.ProductGroup import create_productgroup_model
    from schorg.ProductGroup import ProductGroup

    a = create_schema_org_model(type_=ProductGroupInheritedProperties)
    b = create_schema_org_model(type_=ProductGroupProperties)
    c = create_schema_org_model(type_=ProductGroupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProductGroup.schema()
    create_productgroup_model(ProductGroupAllProperties).schema()
    create_productgroup_model(ProductGroupInheritedProperties).schema()
    create_productgroup_model(ProductGroupProperties).schema()


def LivingWithHealthAspect_test():
    from schorg.LivingWithHealthAspect import LivingWithHealthAspectInheritedProperties
    from schorg.LivingWithHealthAspect import LivingWithHealthAspectProperties
    from schorg.LivingWithHealthAspect import LivingWithHealthAspectAllProperties
    from schorg.LivingWithHealthAspect import create_schema_org_model
    from schorg.LivingWithHealthAspect import create_livingwithhealthaspect_model
    from schorg.LivingWithHealthAspect import LivingWithHealthAspect

    a = create_schema_org_model(type_=LivingWithHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=LivingWithHealthAspectProperties)
    c = create_schema_org_model(type_=LivingWithHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LivingWithHealthAspect.schema()
    create_livingwithhealthaspect_model(LivingWithHealthAspectAllProperties).schema()
    create_livingwithhealthaspect_model(
        LivingWithHealthAspectInheritedProperties
    ).schema()
    create_livingwithhealthaspect_model(LivingWithHealthAspectProperties).schema()


def RecommendedDoseSchedule_test():
    from schorg.RecommendedDoseSchedule import (
        RecommendedDoseScheduleInheritedProperties,
    )
    from schorg.RecommendedDoseSchedule import RecommendedDoseScheduleProperties
    from schorg.RecommendedDoseSchedule import RecommendedDoseScheduleAllProperties
    from schorg.RecommendedDoseSchedule import create_schema_org_model
    from schorg.RecommendedDoseSchedule import create_recommendeddoseschedule_model
    from schorg.RecommendedDoseSchedule import RecommendedDoseSchedule

    a = create_schema_org_model(type_=RecommendedDoseScheduleInheritedProperties)
    b = create_schema_org_model(type_=RecommendedDoseScheduleProperties)
    c = create_schema_org_model(type_=RecommendedDoseScheduleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RecommendedDoseSchedule.schema()
    create_recommendeddoseschedule_model(RecommendedDoseScheduleAllProperties).schema()
    create_recommendeddoseschedule_model(
        RecommendedDoseScheduleInheritedProperties
    ).schema()
    create_recommendeddoseschedule_model(RecommendedDoseScheduleProperties).schema()


def ActionAccessSpecification_test():
    from schorg.ActionAccessSpecification import (
        ActionAccessSpecificationInheritedProperties,
    )
    from schorg.ActionAccessSpecification import ActionAccessSpecificationProperties
    from schorg.ActionAccessSpecification import ActionAccessSpecificationAllProperties
    from schorg.ActionAccessSpecification import create_schema_org_model
    from schorg.ActionAccessSpecification import create_actionaccessspecification_model
    from schorg.ActionAccessSpecification import ActionAccessSpecification

    a = create_schema_org_model(type_=ActionAccessSpecificationInheritedProperties)
    b = create_schema_org_model(type_=ActionAccessSpecificationProperties)
    c = create_schema_org_model(type_=ActionAccessSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActionAccessSpecification.schema()
    create_actionaccessspecification_model(
        ActionAccessSpecificationAllProperties
    ).schema()
    create_actionaccessspecification_model(
        ActionAccessSpecificationInheritedProperties
    ).schema()
    create_actionaccessspecification_model(ActionAccessSpecificationProperties).schema()


def Beach_test():
    from schorg.Beach import BeachInheritedProperties
    from schorg.Beach import BeachProperties
    from schorg.Beach import BeachAllProperties
    from schorg.Beach import create_schema_org_model
    from schorg.Beach import create_beach_model
    from schorg.Beach import Beach

    a = create_schema_org_model(type_=BeachInheritedProperties)
    b = create_schema_org_model(type_=BeachProperties)
    c = create_schema_org_model(type_=BeachAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Beach.schema()
    create_beach_model(BeachAllProperties).schema()
    create_beach_model(BeachInheritedProperties).schema()
    create_beach_model(BeachProperties).schema()


def OccupationalActivity_test():
    from schorg.OccupationalActivity import OccupationalActivityInheritedProperties
    from schorg.OccupationalActivity import OccupationalActivityProperties
    from schorg.OccupationalActivity import OccupationalActivityAllProperties
    from schorg.OccupationalActivity import create_schema_org_model
    from schorg.OccupationalActivity import create_occupationalactivity_model
    from schorg.OccupationalActivity import OccupationalActivity

    a = create_schema_org_model(type_=OccupationalActivityInheritedProperties)
    b = create_schema_org_model(type_=OccupationalActivityProperties)
    c = create_schema_org_model(type_=OccupationalActivityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OccupationalActivity.schema()
    create_occupationalactivity_model(OccupationalActivityAllProperties).schema()
    create_occupationalactivity_model(OccupationalActivityInheritedProperties).schema()
    create_occupationalactivity_model(OccupationalActivityProperties).schema()


def FDAcategoryD_test():
    from schorg.FDAcategoryD import FDAcategoryDInheritedProperties
    from schorg.FDAcategoryD import FDAcategoryDProperties
    from schorg.FDAcategoryD import FDAcategoryDAllProperties
    from schorg.FDAcategoryD import create_schema_org_model
    from schorg.FDAcategoryD import create_fdacategoryd_model
    from schorg.FDAcategoryD import FDAcategoryD

    a = create_schema_org_model(type_=FDAcategoryDInheritedProperties)
    b = create_schema_org_model(type_=FDAcategoryDProperties)
    c = create_schema_org_model(type_=FDAcategoryDAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAcategoryD.schema()
    create_fdacategoryd_model(FDAcategoryDAllProperties).schema()
    create_fdacategoryd_model(FDAcategoryDInheritedProperties).schema()
    create_fdacategoryd_model(FDAcategoryDProperties).schema()


def Podiatric_test():
    from schorg.Podiatric import PodiatricInheritedProperties
    from schorg.Podiatric import PodiatricProperties
    from schorg.Podiatric import PodiatricAllProperties
    from schorg.Podiatric import create_schema_org_model
    from schorg.Podiatric import create_podiatric_model
    from schorg.Podiatric import Podiatric

    a = create_schema_org_model(type_=PodiatricInheritedProperties)
    b = create_schema_org_model(type_=PodiatricProperties)
    c = create_schema_org_model(type_=PodiatricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Podiatric.schema()
    create_podiatric_model(PodiatricAllProperties).schema()
    create_podiatric_model(PodiatricInheritedProperties).schema()
    create_podiatric_model(PodiatricProperties).schema()


def MedicalScholarlyArticle_test():
    from schorg.MedicalScholarlyArticle import (
        MedicalScholarlyArticleInheritedProperties,
    )
    from schorg.MedicalScholarlyArticle import MedicalScholarlyArticleProperties
    from schorg.MedicalScholarlyArticle import MedicalScholarlyArticleAllProperties
    from schorg.MedicalScholarlyArticle import create_schema_org_model
    from schorg.MedicalScholarlyArticle import create_medicalscholarlyarticle_model
    from schorg.MedicalScholarlyArticle import MedicalScholarlyArticle

    a = create_schema_org_model(type_=MedicalScholarlyArticleInheritedProperties)
    b = create_schema_org_model(type_=MedicalScholarlyArticleProperties)
    c = create_schema_org_model(type_=MedicalScholarlyArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalScholarlyArticle.schema()
    create_medicalscholarlyarticle_model(MedicalScholarlyArticleAllProperties).schema()
    create_medicalscholarlyarticle_model(
        MedicalScholarlyArticleInheritedProperties
    ).schema()
    create_medicalscholarlyarticle_model(MedicalScholarlyArticleProperties).schema()


def OfferForLease_test():
    from schorg.OfferForLease import OfferForLeaseInheritedProperties
    from schorg.OfferForLease import OfferForLeaseProperties
    from schorg.OfferForLease import OfferForLeaseAllProperties
    from schorg.OfferForLease import create_schema_org_model
    from schorg.OfferForLease import create_offerforlease_model
    from schorg.OfferForLease import OfferForLease

    a = create_schema_org_model(type_=OfferForLeaseInheritedProperties)
    b = create_schema_org_model(type_=OfferForLeaseProperties)
    c = create_schema_org_model(type_=OfferForLeaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfferForLease.schema()
    create_offerforlease_model(OfferForLeaseAllProperties).schema()
    create_offerforlease_model(OfferForLeaseInheritedProperties).schema()
    create_offerforlease_model(OfferForLeaseProperties).schema()


def Church_test():
    from schorg.Church import ChurchInheritedProperties
    from schorg.Church import ChurchProperties
    from schorg.Church import ChurchAllProperties
    from schorg.Church import create_schema_org_model
    from schorg.Church import create_church_model
    from schorg.Church import Church

    a = create_schema_org_model(type_=ChurchInheritedProperties)
    b = create_schema_org_model(type_=ChurchProperties)
    c = create_schema_org_model(type_=ChurchAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Church.schema()
    create_church_model(ChurchAllProperties).schema()
    create_church_model(ChurchInheritedProperties).schema()
    create_church_model(ChurchProperties).schema()


def CatholicChurch_test():
    from schorg.CatholicChurch import CatholicChurchInheritedProperties
    from schorg.CatholicChurch import CatholicChurchProperties
    from schorg.CatholicChurch import CatholicChurchAllProperties
    from schorg.CatholicChurch import create_schema_org_model
    from schorg.CatholicChurch import create_catholicchurch_model
    from schorg.CatholicChurch import CatholicChurch

    a = create_schema_org_model(type_=CatholicChurchInheritedProperties)
    b = create_schema_org_model(type_=CatholicChurchProperties)
    c = create_schema_org_model(type_=CatholicChurchAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CatholicChurch.schema()
    create_catholicchurch_model(CatholicChurchAllProperties).schema()
    create_catholicchurch_model(CatholicChurchInheritedProperties).schema()
    create_catholicchurch_model(CatholicChurchProperties).schema()


def ReservationHold_test():
    from schorg.ReservationHold import ReservationHoldInheritedProperties
    from schorg.ReservationHold import ReservationHoldProperties
    from schorg.ReservationHold import ReservationHoldAllProperties
    from schorg.ReservationHold import create_schema_org_model
    from schorg.ReservationHold import create_reservationhold_model
    from schorg.ReservationHold import ReservationHold

    a = create_schema_org_model(type_=ReservationHoldInheritedProperties)
    b = create_schema_org_model(type_=ReservationHoldProperties)
    c = create_schema_org_model(type_=ReservationHoldAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationHold.schema()
    create_reservationhold_model(ReservationHoldAllProperties).schema()
    create_reservationhold_model(ReservationHoldInheritedProperties).schema()
    create_reservationhold_model(ReservationHoldProperties).schema()


def Nonprofit501c6_test():
    from schorg.Nonprofit501c6 import Nonprofit501c6InheritedProperties
    from schorg.Nonprofit501c6 import Nonprofit501c6Properties
    from schorg.Nonprofit501c6 import Nonprofit501c6AllProperties
    from schorg.Nonprofit501c6 import create_schema_org_model
    from schorg.Nonprofit501c6 import create_nonprofit501c6_model
    from schorg.Nonprofit501c6 import Nonprofit501c6

    a = create_schema_org_model(type_=Nonprofit501c6InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c6Properties)
    c = create_schema_org_model(type_=Nonprofit501c6AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c6.schema()
    create_nonprofit501c6_model(Nonprofit501c6AllProperties).schema()
    create_nonprofit501c6_model(Nonprofit501c6InheritedProperties).schema()
    create_nonprofit501c6_model(Nonprofit501c6Properties).schema()


def Midwifery_test():
    from schorg.Midwifery import MidwiferyInheritedProperties
    from schorg.Midwifery import MidwiferyProperties
    from schorg.Midwifery import MidwiferyAllProperties
    from schorg.Midwifery import create_schema_org_model
    from schorg.Midwifery import create_midwifery_model
    from schorg.Midwifery import Midwifery

    a = create_schema_org_model(type_=MidwiferyInheritedProperties)
    b = create_schema_org_model(type_=MidwiferyProperties)
    c = create_schema_org_model(type_=MidwiferyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Midwifery.schema()
    create_midwifery_model(MidwiferyAllProperties).schema()
    create_midwifery_model(MidwiferyInheritedProperties).schema()
    create_midwifery_model(MidwiferyProperties).schema()


def LiveAlbum_test():
    from schorg.LiveAlbum import LiveAlbumInheritedProperties
    from schorg.LiveAlbum import LiveAlbumProperties
    from schorg.LiveAlbum import LiveAlbumAllProperties
    from schorg.LiveAlbum import create_schema_org_model
    from schorg.LiveAlbum import create_livealbum_model
    from schorg.LiveAlbum import LiveAlbum

    a = create_schema_org_model(type_=LiveAlbumInheritedProperties)
    b = create_schema_org_model(type_=LiveAlbumProperties)
    c = create_schema_org_model(type_=LiveAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LiveAlbum.schema()
    create_livealbum_model(LiveAlbumAllProperties).schema()
    create_livealbum_model(LiveAlbumInheritedProperties).schema()
    create_livealbum_model(LiveAlbumProperties).schema()


def ExhibitionEvent_test():
    from schorg.ExhibitionEvent import ExhibitionEventInheritedProperties
    from schorg.ExhibitionEvent import ExhibitionEventProperties
    from schorg.ExhibitionEvent import ExhibitionEventAllProperties
    from schorg.ExhibitionEvent import create_schema_org_model
    from schorg.ExhibitionEvent import create_exhibitionevent_model
    from schorg.ExhibitionEvent import ExhibitionEvent

    a = create_schema_org_model(type_=ExhibitionEventInheritedProperties)
    b = create_schema_org_model(type_=ExhibitionEventProperties)
    c = create_schema_org_model(type_=ExhibitionEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExhibitionEvent.schema()
    create_exhibitionevent_model(ExhibitionEventAllProperties).schema()
    create_exhibitionevent_model(ExhibitionEventInheritedProperties).schema()
    create_exhibitionevent_model(ExhibitionEventProperties).schema()


def FullGameAvailability_test():
    from schorg.FullGameAvailability import FullGameAvailabilityInheritedProperties
    from schorg.FullGameAvailability import FullGameAvailabilityProperties
    from schorg.FullGameAvailability import FullGameAvailabilityAllProperties
    from schorg.FullGameAvailability import create_schema_org_model
    from schorg.FullGameAvailability import create_fullgameavailability_model
    from schorg.FullGameAvailability import FullGameAvailability

    a = create_schema_org_model(type_=FullGameAvailabilityInheritedProperties)
    b = create_schema_org_model(type_=FullGameAvailabilityProperties)
    c = create_schema_org_model(type_=FullGameAvailabilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FullGameAvailability.schema()
    create_fullgameavailability_model(FullGameAvailabilityAllProperties).schema()
    create_fullgameavailability_model(FullGameAvailabilityInheritedProperties).schema()
    create_fullgameavailability_model(FullGameAvailabilityProperties).schema()


def ResumeAction_test():
    from schorg.ResumeAction import ResumeActionInheritedProperties
    from schorg.ResumeAction import ResumeActionProperties
    from schorg.ResumeAction import ResumeActionAllProperties
    from schorg.ResumeAction import create_schema_org_model
    from schorg.ResumeAction import create_resumeaction_model
    from schorg.ResumeAction import ResumeAction

    a = create_schema_org_model(type_=ResumeActionInheritedProperties)
    b = create_schema_org_model(type_=ResumeActionProperties)
    c = create_schema_org_model(type_=ResumeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ResumeAction.schema()
    create_resumeaction_model(ResumeActionAllProperties).schema()
    create_resumeaction_model(ResumeActionInheritedProperties).schema()
    create_resumeaction_model(ResumeActionProperties).schema()


def ProgramMembership_test():
    from schorg.ProgramMembership import ProgramMembershipInheritedProperties
    from schorg.ProgramMembership import ProgramMembershipProperties
    from schorg.ProgramMembership import ProgramMembershipAllProperties
    from schorg.ProgramMembership import create_schema_org_model
    from schorg.ProgramMembership import create_programmembership_model
    from schorg.ProgramMembership import ProgramMembership

    a = create_schema_org_model(type_=ProgramMembershipInheritedProperties)
    b = create_schema_org_model(type_=ProgramMembershipProperties)
    c = create_schema_org_model(type_=ProgramMembershipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProgramMembership.schema()
    create_programmembership_model(ProgramMembershipAllProperties).schema()
    create_programmembership_model(ProgramMembershipInheritedProperties).schema()
    create_programmembership_model(ProgramMembershipProperties).schema()


def DiscoverAction_test():
    from schorg.DiscoverAction import DiscoverActionInheritedProperties
    from schorg.DiscoverAction import DiscoverActionProperties
    from schorg.DiscoverAction import DiscoverActionAllProperties
    from schorg.DiscoverAction import create_schema_org_model
    from schorg.DiscoverAction import create_discoveraction_model
    from schorg.DiscoverAction import DiscoverAction

    a = create_schema_org_model(type_=DiscoverActionInheritedProperties)
    b = create_schema_org_model(type_=DiscoverActionProperties)
    c = create_schema_org_model(type_=DiscoverActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DiscoverAction.schema()
    create_discoveraction_model(DiscoverActionAllProperties).schema()
    create_discoveraction_model(DiscoverActionInheritedProperties).schema()
    create_discoveraction_model(DiscoverActionProperties).schema()


def OfflinePermanently_test():
    from schorg.OfflinePermanently import OfflinePermanentlyInheritedProperties
    from schorg.OfflinePermanently import OfflinePermanentlyProperties
    from schorg.OfflinePermanently import OfflinePermanentlyAllProperties
    from schorg.OfflinePermanently import create_schema_org_model
    from schorg.OfflinePermanently import create_offlinepermanently_model
    from schorg.OfflinePermanently import OfflinePermanently

    a = create_schema_org_model(type_=OfflinePermanentlyInheritedProperties)
    b = create_schema_org_model(type_=OfflinePermanentlyProperties)
    c = create_schema_org_model(type_=OfflinePermanentlyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfflinePermanently.schema()
    create_offlinepermanently_model(OfflinePermanentlyAllProperties).schema()
    create_offlinepermanently_model(OfflinePermanentlyInheritedProperties).schema()
    create_offlinepermanently_model(OfflinePermanentlyProperties).schema()


def CafeOrCoffeeShop_test():
    from schorg.CafeOrCoffeeShop import CafeOrCoffeeShopInheritedProperties
    from schorg.CafeOrCoffeeShop import CafeOrCoffeeShopProperties
    from schorg.CafeOrCoffeeShop import CafeOrCoffeeShopAllProperties
    from schorg.CafeOrCoffeeShop import create_schema_org_model
    from schorg.CafeOrCoffeeShop import create_cafeorcoffeeshop_model
    from schorg.CafeOrCoffeeShop import CafeOrCoffeeShop

    a = create_schema_org_model(type_=CafeOrCoffeeShopInheritedProperties)
    b = create_schema_org_model(type_=CafeOrCoffeeShopProperties)
    c = create_schema_org_model(type_=CafeOrCoffeeShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CafeOrCoffeeShop.schema()
    create_cafeorcoffeeshop_model(CafeOrCoffeeShopAllProperties).schema()
    create_cafeorcoffeeshop_model(CafeOrCoffeeShopInheritedProperties).schema()
    create_cafeorcoffeeshop_model(CafeOrCoffeeShopProperties).schema()


def ReimbursementCap_test():
    from schorg.ReimbursementCap import ReimbursementCapInheritedProperties
    from schorg.ReimbursementCap import ReimbursementCapProperties
    from schorg.ReimbursementCap import ReimbursementCapAllProperties
    from schorg.ReimbursementCap import create_schema_org_model
    from schorg.ReimbursementCap import create_reimbursementcap_model
    from schorg.ReimbursementCap import ReimbursementCap

    a = create_schema_org_model(type_=ReimbursementCapInheritedProperties)
    b = create_schema_org_model(type_=ReimbursementCapProperties)
    c = create_schema_org_model(type_=ReimbursementCapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReimbursementCap.schema()
    create_reimbursementcap_model(ReimbursementCapAllProperties).schema()
    create_reimbursementcap_model(ReimbursementCapInheritedProperties).schema()
    create_reimbursementcap_model(ReimbursementCapProperties).schema()


def DryCleaningOrLaundry_test():
    from schorg.DryCleaningOrLaundry import DryCleaningOrLaundryInheritedProperties
    from schorg.DryCleaningOrLaundry import DryCleaningOrLaundryProperties
    from schorg.DryCleaningOrLaundry import DryCleaningOrLaundryAllProperties
    from schorg.DryCleaningOrLaundry import create_schema_org_model
    from schorg.DryCleaningOrLaundry import create_drycleaningorlaundry_model
    from schorg.DryCleaningOrLaundry import DryCleaningOrLaundry

    a = create_schema_org_model(type_=DryCleaningOrLaundryInheritedProperties)
    b = create_schema_org_model(type_=DryCleaningOrLaundryProperties)
    c = create_schema_org_model(type_=DryCleaningOrLaundryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DryCleaningOrLaundry.schema()
    create_drycleaningorlaundry_model(DryCleaningOrLaundryAllProperties).schema()
    create_drycleaningorlaundry_model(DryCleaningOrLaundryInheritedProperties).schema()
    create_drycleaningorlaundry_model(DryCleaningOrLaundryProperties).schema()


def ContagiousnessHealthAspect_test():
    from schorg.ContagiousnessHealthAspect import (
        ContagiousnessHealthAspectInheritedProperties,
    )
    from schorg.ContagiousnessHealthAspect import ContagiousnessHealthAspectProperties
    from schorg.ContagiousnessHealthAspect import (
        ContagiousnessHealthAspectAllProperties,
    )
    from schorg.ContagiousnessHealthAspect import create_schema_org_model
    from schorg.ContagiousnessHealthAspect import (
        create_contagiousnesshealthaspect_model,
    )
    from schorg.ContagiousnessHealthAspect import ContagiousnessHealthAspect

    a = create_schema_org_model(type_=ContagiousnessHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=ContagiousnessHealthAspectProperties)
    c = create_schema_org_model(type_=ContagiousnessHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ContagiousnessHealthAspect.schema()
    create_contagiousnesshealthaspect_model(
        ContagiousnessHealthAspectAllProperties
    ).schema()
    create_contagiousnesshealthaspect_model(
        ContagiousnessHealthAspectInheritedProperties
    ).schema()
    create_contagiousnesshealthaspect_model(
        ContagiousnessHealthAspectProperties
    ).schema()


def RVPark_test():
    from schorg.RVPark import RVParkInheritedProperties
    from schorg.RVPark import RVParkProperties
    from schorg.RVPark import RVParkAllProperties
    from schorg.RVPark import create_schema_org_model
    from schorg.RVPark import create_rvpark_model
    from schorg.RVPark import RVPark

    a = create_schema_org_model(type_=RVParkInheritedProperties)
    b = create_schema_org_model(type_=RVParkProperties)
    c = create_schema_org_model(type_=RVParkAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RVPark.schema()
    create_rvpark_model(RVParkAllProperties).schema()
    create_rvpark_model(RVParkInheritedProperties).schema()
    create_rvpark_model(RVParkProperties).schema()


def LymphaticVessel_test():
    from schorg.LymphaticVessel import LymphaticVesselInheritedProperties
    from schorg.LymphaticVessel import LymphaticVesselProperties
    from schorg.LymphaticVessel import LymphaticVesselAllProperties
    from schorg.LymphaticVessel import create_schema_org_model
    from schorg.LymphaticVessel import create_lymphaticvessel_model
    from schorg.LymphaticVessel import LymphaticVessel

    a = create_schema_org_model(type_=LymphaticVesselInheritedProperties)
    b = create_schema_org_model(type_=LymphaticVesselProperties)
    c = create_schema_org_model(type_=LymphaticVesselAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LymphaticVessel.schema()
    create_lymphaticvessel_model(LymphaticVesselAllProperties).schema()
    create_lymphaticvessel_model(LymphaticVesselInheritedProperties).schema()
    create_lymphaticvessel_model(LymphaticVesselProperties).schema()


def ExchangeRefund_test():
    from schorg.ExchangeRefund import ExchangeRefundInheritedProperties
    from schorg.ExchangeRefund import ExchangeRefundProperties
    from schorg.ExchangeRefund import ExchangeRefundAllProperties
    from schorg.ExchangeRefund import create_schema_org_model
    from schorg.ExchangeRefund import create_exchangerefund_model
    from schorg.ExchangeRefund import ExchangeRefund

    a = create_schema_org_model(type_=ExchangeRefundInheritedProperties)
    b = create_schema_org_model(type_=ExchangeRefundProperties)
    c = create_schema_org_model(type_=ExchangeRefundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExchangeRefund.schema()
    create_exchangerefund_model(ExchangeRefundAllProperties).schema()
    create_exchangerefund_model(ExchangeRefundInheritedProperties).schema()
    create_exchangerefund_model(ExchangeRefundProperties).schema()


def CharitableIncorporatedOrganization_test():
    from schorg.CharitableIncorporatedOrganization import (
        CharitableIncorporatedOrganizationInheritedProperties,
    )
    from schorg.CharitableIncorporatedOrganization import (
        CharitableIncorporatedOrganizationProperties,
    )
    from schorg.CharitableIncorporatedOrganization import (
        CharitableIncorporatedOrganizationAllProperties,
    )
    from schorg.CharitableIncorporatedOrganization import create_schema_org_model
    from schorg.CharitableIncorporatedOrganization import (
        create_charitableincorporatedorganization_model,
    )
    from schorg.CharitableIncorporatedOrganization import (
        CharitableIncorporatedOrganization,
    )

    a = create_schema_org_model(
        type_=CharitableIncorporatedOrganizationInheritedProperties
    )
    b = create_schema_org_model(type_=CharitableIncorporatedOrganizationProperties)
    c = create_schema_org_model(type_=CharitableIncorporatedOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CharitableIncorporatedOrganization.schema()
    create_charitableincorporatedorganization_model(
        CharitableIncorporatedOrganizationAllProperties
    ).schema()
    create_charitableincorporatedorganization_model(
        CharitableIncorporatedOrganizationInheritedProperties
    ).schema()
    create_charitableincorporatedorganization_model(
        CharitableIncorporatedOrganizationProperties
    ).schema()


def Discontinued_test():
    from schorg.Discontinued import DiscontinuedInheritedProperties
    from schorg.Discontinued import DiscontinuedProperties
    from schorg.Discontinued import DiscontinuedAllProperties
    from schorg.Discontinued import create_schema_org_model
    from schorg.Discontinued import create_discontinued_model
    from schorg.Discontinued import Discontinued

    a = create_schema_org_model(type_=DiscontinuedInheritedProperties)
    b = create_schema_org_model(type_=DiscontinuedProperties)
    c = create_schema_org_model(type_=DiscontinuedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Discontinued.schema()
    create_discontinued_model(DiscontinuedAllProperties).schema()
    create_discontinued_model(DiscontinuedInheritedProperties).schema()
    create_discontinued_model(DiscontinuedProperties).schema()


def BodyMeasurementNeck_test():
    from schorg.BodyMeasurementNeck import BodyMeasurementNeckInheritedProperties
    from schorg.BodyMeasurementNeck import BodyMeasurementNeckProperties
    from schorg.BodyMeasurementNeck import BodyMeasurementNeckAllProperties
    from schorg.BodyMeasurementNeck import create_schema_org_model
    from schorg.BodyMeasurementNeck import create_bodymeasurementneck_model
    from schorg.BodyMeasurementNeck import BodyMeasurementNeck

    a = create_schema_org_model(type_=BodyMeasurementNeckInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementNeckProperties)
    c = create_schema_org_model(type_=BodyMeasurementNeckAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementNeck.schema()
    create_bodymeasurementneck_model(BodyMeasurementNeckAllProperties).schema()
    create_bodymeasurementneck_model(BodyMeasurementNeckInheritedProperties).schema()
    create_bodymeasurementneck_model(BodyMeasurementNeckProperties).schema()


def EvidenceLevelA_test():
    from schorg.EvidenceLevelA import EvidenceLevelAInheritedProperties
    from schorg.EvidenceLevelA import EvidenceLevelAProperties
    from schorg.EvidenceLevelA import EvidenceLevelAAllProperties
    from schorg.EvidenceLevelA import create_schema_org_model
    from schorg.EvidenceLevelA import create_evidencelevela_model
    from schorg.EvidenceLevelA import EvidenceLevelA

    a = create_schema_org_model(type_=EvidenceLevelAInheritedProperties)
    b = create_schema_org_model(type_=EvidenceLevelAProperties)
    c = create_schema_org_model(type_=EvidenceLevelAAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EvidenceLevelA.schema()
    create_evidencelevela_model(EvidenceLevelAAllProperties).schema()
    create_evidencelevela_model(EvidenceLevelAInheritedProperties).schema()
    create_evidencelevela_model(EvidenceLevelAProperties).schema()


def SpeechPathology_test():
    from schorg.SpeechPathology import SpeechPathologyInheritedProperties
    from schorg.SpeechPathology import SpeechPathologyProperties
    from schorg.SpeechPathology import SpeechPathologyAllProperties
    from schorg.SpeechPathology import create_schema_org_model
    from schorg.SpeechPathology import create_speechpathology_model
    from schorg.SpeechPathology import SpeechPathology

    a = create_schema_org_model(type_=SpeechPathologyInheritedProperties)
    b = create_schema_org_model(type_=SpeechPathologyProperties)
    c = create_schema_org_model(type_=SpeechPathologyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SpeechPathology.schema()
    create_speechpathology_model(SpeechPathologyAllProperties).schema()
    create_speechpathology_model(SpeechPathologyInheritedProperties).schema()
    create_speechpathology_model(SpeechPathologyProperties).schema()


def OpeningHoursSpecification_test():
    from schorg.OpeningHoursSpecification import (
        OpeningHoursSpecificationInheritedProperties,
    )
    from schorg.OpeningHoursSpecification import OpeningHoursSpecificationProperties
    from schorg.OpeningHoursSpecification import OpeningHoursSpecificationAllProperties
    from schorg.OpeningHoursSpecification import create_schema_org_model
    from schorg.OpeningHoursSpecification import create_openinghoursspecification_model
    from schorg.OpeningHoursSpecification import OpeningHoursSpecification

    a = create_schema_org_model(type_=OpeningHoursSpecificationInheritedProperties)
    b = create_schema_org_model(type_=OpeningHoursSpecificationProperties)
    c = create_schema_org_model(type_=OpeningHoursSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OpeningHoursSpecification.schema()
    create_openinghoursspecification_model(
        OpeningHoursSpecificationAllProperties
    ).schema()
    create_openinghoursspecification_model(
        OpeningHoursSpecificationInheritedProperties
    ).schema()
    create_openinghoursspecification_model(OpeningHoursSpecificationProperties).schema()


def PresentationDigitalDocument_test():
    from schorg.PresentationDigitalDocument import (
        PresentationDigitalDocumentInheritedProperties,
    )
    from schorg.PresentationDigitalDocument import PresentationDigitalDocumentProperties
    from schorg.PresentationDigitalDocument import (
        PresentationDigitalDocumentAllProperties,
    )
    from schorg.PresentationDigitalDocument import create_schema_org_model
    from schorg.PresentationDigitalDocument import (
        create_presentationdigitaldocument_model,
    )
    from schorg.PresentationDigitalDocument import PresentationDigitalDocument

    a = create_schema_org_model(type_=PresentationDigitalDocumentInheritedProperties)
    b = create_schema_org_model(type_=PresentationDigitalDocumentProperties)
    c = create_schema_org_model(type_=PresentationDigitalDocumentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PresentationDigitalDocument.schema()
    create_presentationdigitaldocument_model(
        PresentationDigitalDocumentAllProperties
    ).schema()
    create_presentationdigitaldocument_model(
        PresentationDigitalDocumentInheritedProperties
    ).schema()
    create_presentationdigitaldocument_model(
        PresentationDigitalDocumentProperties
    ).schema()


def ProfessionalService_test():
    from schorg.ProfessionalService import ProfessionalServiceInheritedProperties
    from schorg.ProfessionalService import ProfessionalServiceProperties
    from schorg.ProfessionalService import ProfessionalServiceAllProperties
    from schorg.ProfessionalService import create_schema_org_model
    from schorg.ProfessionalService import create_professionalservice_model
    from schorg.ProfessionalService import ProfessionalService

    a = create_schema_org_model(type_=ProfessionalServiceInheritedProperties)
    b = create_schema_org_model(type_=ProfessionalServiceProperties)
    c = create_schema_org_model(type_=ProfessionalServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ProfessionalService.schema()
    create_professionalservice_model(ProfessionalServiceAllProperties).schema()
    create_professionalservice_model(ProfessionalServiceInheritedProperties).schema()
    create_professionalservice_model(ProfessionalServiceProperties).schema()


def BankOrCreditUnion_test():
    from schorg.BankOrCreditUnion import BankOrCreditUnionInheritedProperties
    from schorg.BankOrCreditUnion import BankOrCreditUnionProperties
    from schorg.BankOrCreditUnion import BankOrCreditUnionAllProperties
    from schorg.BankOrCreditUnion import create_schema_org_model
    from schorg.BankOrCreditUnion import create_bankorcreditunion_model
    from schorg.BankOrCreditUnion import BankOrCreditUnion

    a = create_schema_org_model(type_=BankOrCreditUnionInheritedProperties)
    b = create_schema_org_model(type_=BankOrCreditUnionProperties)
    c = create_schema_org_model(type_=BankOrCreditUnionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BankOrCreditUnion.schema()
    create_bankorcreditunion_model(BankOrCreditUnionAllProperties).schema()
    create_bankorcreditunion_model(BankOrCreditUnionInheritedProperties).schema()
    create_bankorcreditunion_model(BankOrCreditUnionProperties).schema()


def IngredientsHealthAspect_test():
    from schorg.IngredientsHealthAspect import (
        IngredientsHealthAspectInheritedProperties,
    )
    from schorg.IngredientsHealthAspect import IngredientsHealthAspectProperties
    from schorg.IngredientsHealthAspect import IngredientsHealthAspectAllProperties
    from schorg.IngredientsHealthAspect import create_schema_org_model
    from schorg.IngredientsHealthAspect import create_ingredientshealthaspect_model
    from schorg.IngredientsHealthAspect import IngredientsHealthAspect

    a = create_schema_org_model(type_=IngredientsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=IngredientsHealthAspectProperties)
    c = create_schema_org_model(type_=IngredientsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    IngredientsHealthAspect.schema()
    create_ingredientshealthaspect_model(IngredientsHealthAspectAllProperties).schema()
    create_ingredientshealthaspect_model(
        IngredientsHealthAspectInheritedProperties
    ).schema()
    create_ingredientshealthaspect_model(IngredientsHealthAspectProperties).schema()


def PhysicalTherapy_test():
    from schorg.PhysicalTherapy import PhysicalTherapyInheritedProperties
    from schorg.PhysicalTherapy import PhysicalTherapyProperties
    from schorg.PhysicalTherapy import PhysicalTherapyAllProperties
    from schorg.PhysicalTherapy import create_schema_org_model
    from schorg.PhysicalTherapy import create_physicaltherapy_model
    from schorg.PhysicalTherapy import PhysicalTherapy

    a = create_schema_org_model(type_=PhysicalTherapyInheritedProperties)
    b = create_schema_org_model(type_=PhysicalTherapyProperties)
    c = create_schema_org_model(type_=PhysicalTherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PhysicalTherapy.schema()
    create_physicaltherapy_model(PhysicalTherapyAllProperties).schema()
    create_physicaltherapy_model(PhysicalTherapyInheritedProperties).schema()
    create_physicaltherapy_model(PhysicalTherapyProperties).schema()


def Substance_test():
    from schorg.Substance import SubstanceInheritedProperties
    from schorg.Substance import SubstanceProperties
    from schorg.Substance import SubstanceAllProperties
    from schorg.Substance import create_schema_org_model
    from schorg.Substance import create_substance_model
    from schorg.Substance import Substance

    a = create_schema_org_model(type_=SubstanceInheritedProperties)
    b = create_schema_org_model(type_=SubstanceProperties)
    c = create_schema_org_model(type_=SubstanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Substance.schema()
    create_substance_model(SubstanceAllProperties).schema()
    create_substance_model(SubstanceInheritedProperties).schema()
    create_substance_model(SubstanceProperties).schema()


def Drug_test():
    from schorg.Drug import DrugInheritedProperties
    from schorg.Drug import DrugProperties
    from schorg.Drug import DrugAllProperties
    from schorg.Drug import create_schema_org_model
    from schorg.Drug import create_drug_model
    from schorg.Drug import Drug

    a = create_schema_org_model(type_=DrugInheritedProperties)
    b = create_schema_org_model(type_=DrugProperties)
    c = create_schema_org_model(type_=DrugAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Drug.schema()
    create_drug_model(DrugAllProperties).schema()
    create_drug_model(DrugInheritedProperties).schema()
    create_drug_model(DrugProperties).schema()


def Season_test():
    from schorg.Season import SeasonInheritedProperties
    from schorg.Season import SeasonProperties
    from schorg.Season import SeasonAllProperties
    from schorg.Season import create_schema_org_model
    from schorg.Season import create_season_model
    from schorg.Season import Season

    a = create_schema_org_model(type_=SeasonInheritedProperties)
    b = create_schema_org_model(type_=SeasonProperties)
    c = create_schema_org_model(type_=SeasonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Season.schema()
    create_season_model(SeasonAllProperties).schema()
    create_season_model(SeasonInheritedProperties).schema()
    create_season_model(SeasonProperties).schema()


def EventVenue_test():
    from schorg.EventVenue import EventVenueInheritedProperties
    from schorg.EventVenue import EventVenueProperties
    from schorg.EventVenue import EventVenueAllProperties
    from schorg.EventVenue import create_schema_org_model
    from schorg.EventVenue import create_eventvenue_model
    from schorg.EventVenue import EventVenue

    a = create_schema_org_model(type_=EventVenueInheritedProperties)
    b = create_schema_org_model(type_=EventVenueProperties)
    c = create_schema_org_model(type_=EventVenueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventVenue.schema()
    create_eventvenue_model(EventVenueAllProperties).schema()
    create_eventvenue_model(EventVenueInheritedProperties).schema()
    create_eventvenue_model(EventVenueProperties).schema()


def EPRelease_test():
    from schorg.EPRelease import EPReleaseInheritedProperties
    from schorg.EPRelease import EPReleaseProperties
    from schorg.EPRelease import EPReleaseAllProperties
    from schorg.EPRelease import create_schema_org_model
    from schorg.EPRelease import create_eprelease_model
    from schorg.EPRelease import EPRelease

    a = create_schema_org_model(type_=EPReleaseInheritedProperties)
    b = create_schema_org_model(type_=EPReleaseProperties)
    c = create_schema_org_model(type_=EPReleaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EPRelease.schema()
    create_eprelease_model(EPReleaseAllProperties).schema()
    create_eprelease_model(EPReleaseInheritedProperties).schema()
    create_eprelease_model(EPReleaseProperties).schema()


def ReservationPackage_test():
    from schorg.ReservationPackage import ReservationPackageInheritedProperties
    from schorg.ReservationPackage import ReservationPackageProperties
    from schorg.ReservationPackage import ReservationPackageAllProperties
    from schorg.ReservationPackage import create_schema_org_model
    from schorg.ReservationPackage import create_reservationpackage_model
    from schorg.ReservationPackage import ReservationPackage

    a = create_schema_org_model(type_=ReservationPackageInheritedProperties)
    b = create_schema_org_model(type_=ReservationPackageProperties)
    c = create_schema_org_model(type_=ReservationPackageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReservationPackage.schema()
    create_reservationpackage_model(ReservationPackageAllProperties).schema()
    create_reservationpackage_model(ReservationPackageInheritedProperties).schema()
    create_reservationpackage_model(ReservationPackageProperties).schema()


def AutoBodyShop_test():
    from schorg.AutoBodyShop import AutoBodyShopInheritedProperties
    from schorg.AutoBodyShop import AutoBodyShopProperties
    from schorg.AutoBodyShop import AutoBodyShopAllProperties
    from schorg.AutoBodyShop import create_schema_org_model
    from schorg.AutoBodyShop import create_autobodyshop_model
    from schorg.AutoBodyShop import AutoBodyShop

    a = create_schema_org_model(type_=AutoBodyShopInheritedProperties)
    b = create_schema_org_model(type_=AutoBodyShopProperties)
    c = create_schema_org_model(type_=AutoBodyShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoBodyShop.schema()
    create_autobodyshop_model(AutoBodyShopAllProperties).schema()
    create_autobodyshop_model(AutoBodyShopInheritedProperties).schema()
    create_autobodyshop_model(AutoBodyShopProperties).schema()


def TypesHealthAspect_test():
    from schorg.TypesHealthAspect import TypesHealthAspectInheritedProperties
    from schorg.TypesHealthAspect import TypesHealthAspectProperties
    from schorg.TypesHealthAspect import TypesHealthAspectAllProperties
    from schorg.TypesHealthAspect import create_schema_org_model
    from schorg.TypesHealthAspect import create_typeshealthaspect_model
    from schorg.TypesHealthAspect import TypesHealthAspect

    a = create_schema_org_model(type_=TypesHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=TypesHealthAspectProperties)
    c = create_schema_org_model(type_=TypesHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TypesHealthAspect.schema()
    create_typeshealthaspect_model(TypesHealthAspectAllProperties).schema()
    create_typeshealthaspect_model(TypesHealthAspectInheritedProperties).schema()
    create_typeshealthaspect_model(TypesHealthAspectProperties).schema()


def CheckAction_test():
    from schorg.CheckAction import CheckActionInheritedProperties
    from schorg.CheckAction import CheckActionProperties
    from schorg.CheckAction import CheckActionAllProperties
    from schorg.CheckAction import create_schema_org_model
    from schorg.CheckAction import create_checkaction_model
    from schorg.CheckAction import CheckAction

    a = create_schema_org_model(type_=CheckActionInheritedProperties)
    b = create_schema_org_model(type_=CheckActionProperties)
    c = create_schema_org_model(type_=CheckActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CheckAction.schema()
    create_checkaction_model(CheckActionAllProperties).schema()
    create_checkaction_model(CheckActionInheritedProperties).schema()
    create_checkaction_model(CheckActionProperties).schema()


def StudioAlbum_test():
    from schorg.StudioAlbum import StudioAlbumInheritedProperties
    from schorg.StudioAlbum import StudioAlbumProperties
    from schorg.StudioAlbum import StudioAlbumAllProperties
    from schorg.StudioAlbum import create_schema_org_model
    from schorg.StudioAlbum import create_studioalbum_model
    from schorg.StudioAlbum import StudioAlbum

    a = create_schema_org_model(type_=StudioAlbumInheritedProperties)
    b = create_schema_org_model(type_=StudioAlbumProperties)
    c = create_schema_org_model(type_=StudioAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StudioAlbum.schema()
    create_studioalbum_model(StudioAlbumAllProperties).schema()
    create_studioalbum_model(StudioAlbumInheritedProperties).schema()
    create_studioalbum_model(StudioAlbumProperties).schema()


def DisabilitySupport_test():
    from schorg.DisabilitySupport import DisabilitySupportInheritedProperties
    from schorg.DisabilitySupport import DisabilitySupportProperties
    from schorg.DisabilitySupport import DisabilitySupportAllProperties
    from schorg.DisabilitySupport import create_schema_org_model
    from schorg.DisabilitySupport import create_disabilitysupport_model
    from schorg.DisabilitySupport import DisabilitySupport

    a = create_schema_org_model(type_=DisabilitySupportInheritedProperties)
    b = create_schema_org_model(type_=DisabilitySupportProperties)
    c = create_schema_org_model(type_=DisabilitySupportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DisabilitySupport.schema()
    create_disabilitysupport_model(DisabilitySupportAllProperties).schema()
    create_disabilitysupport_model(DisabilitySupportInheritedProperties).schema()
    create_disabilitysupport_model(DisabilitySupportProperties).schema()


def StagesHealthAspect_test():
    from schorg.StagesHealthAspect import StagesHealthAspectInheritedProperties
    from schorg.StagesHealthAspect import StagesHealthAspectProperties
    from schorg.StagesHealthAspect import StagesHealthAspectAllProperties
    from schorg.StagesHealthAspect import create_schema_org_model
    from schorg.StagesHealthAspect import create_stageshealthaspect_model
    from schorg.StagesHealthAspect import StagesHealthAspect

    a = create_schema_org_model(type_=StagesHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=StagesHealthAspectProperties)
    c = create_schema_org_model(type_=StagesHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StagesHealthAspect.schema()
    create_stageshealthaspect_model(StagesHealthAspectAllProperties).schema()
    create_stageshealthaspect_model(StagesHealthAspectInheritedProperties).schema()
    create_stageshealthaspect_model(StagesHealthAspectProperties).schema()


def Legislation_test():
    from schorg.Legislation import LegislationInheritedProperties
    from schorg.Legislation import LegislationProperties
    from schorg.Legislation import LegislationAllProperties
    from schorg.Legislation import create_schema_org_model
    from schorg.Legislation import create_legislation_model
    from schorg.Legislation import Legislation

    a = create_schema_org_model(type_=LegislationInheritedProperties)
    b = create_schema_org_model(type_=LegislationProperties)
    c = create_schema_org_model(type_=LegislationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Legislation.schema()
    create_legislation_model(LegislationAllProperties).schema()
    create_legislation_model(LegislationInheritedProperties).schema()
    create_legislation_model(LegislationProperties).schema()


def LegislationObject_test():
    from schorg.LegislationObject import LegislationObjectInheritedProperties
    from schorg.LegislationObject import LegislationObjectProperties
    from schorg.LegislationObject import LegislationObjectAllProperties
    from schorg.LegislationObject import create_schema_org_model
    from schorg.LegislationObject import create_legislationobject_model
    from schorg.LegislationObject import LegislationObject

    a = create_schema_org_model(type_=LegislationObjectInheritedProperties)
    b = create_schema_org_model(type_=LegislationObjectProperties)
    c = create_schema_org_model(type_=LegislationObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LegislationObject.schema()
    create_legislationobject_model(LegislationObjectAllProperties).schema()
    create_legislationobject_model(LegislationObjectInheritedProperties).schema()
    create_legislationobject_model(LegislationObjectProperties).schema()


def Airport_test():
    from schorg.Airport import AirportInheritedProperties
    from schorg.Airport import AirportProperties
    from schorg.Airport import AirportAllProperties
    from schorg.Airport import create_schema_org_model
    from schorg.Airport import create_airport_model
    from schorg.Airport import Airport

    a = create_schema_org_model(type_=AirportInheritedProperties)
    b = create_schema_org_model(type_=AirportProperties)
    c = create_schema_org_model(type_=AirportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Airport.schema()
    create_airport_model(AirportAllProperties).schema()
    create_airport_model(AirportInheritedProperties).schema()
    create_airport_model(AirportProperties).schema()


def UserLikes_test():
    from schorg.UserLikes import UserLikesInheritedProperties
    from schorg.UserLikes import UserLikesProperties
    from schorg.UserLikes import UserLikesAllProperties
    from schorg.UserLikes import create_schema_org_model
    from schorg.UserLikes import create_userlikes_model
    from schorg.UserLikes import UserLikes

    a = create_schema_org_model(type_=UserLikesInheritedProperties)
    b = create_schema_org_model(type_=UserLikesProperties)
    c = create_schema_org_model(type_=UserLikesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserLikes.schema()
    create_userlikes_model(UserLikesAllProperties).schema()
    create_userlikes_model(UserLikesInheritedProperties).schema()
    create_userlikes_model(UserLikesProperties).schema()


def AmpStory_test():
    from schorg.AmpStory import AmpStoryInheritedProperties
    from schorg.AmpStory import AmpStoryProperties
    from schorg.AmpStory import AmpStoryAllProperties
    from schorg.AmpStory import create_schema_org_model
    from schorg.AmpStory import create_ampstory_model
    from schorg.AmpStory import AmpStory

    a = create_schema_org_model(type_=AmpStoryInheritedProperties)
    b = create_schema_org_model(type_=AmpStoryProperties)
    c = create_schema_org_model(type_=AmpStoryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AmpStory.schema()
    create_ampstory_model(AmpStoryAllProperties).schema()
    create_ampstory_model(AmpStoryInheritedProperties).schema()
    create_ampstory_model(AmpStoryProperties).schema()


def CookAction_test():
    from schorg.CookAction import CookActionInheritedProperties
    from schorg.CookAction import CookActionProperties
    from schorg.CookAction import CookActionAllProperties
    from schorg.CookAction import create_schema_org_model
    from schorg.CookAction import create_cookaction_model
    from schorg.CookAction import CookAction

    a = create_schema_org_model(type_=CookActionInheritedProperties)
    b = create_schema_org_model(type_=CookActionProperties)
    c = create_schema_org_model(type_=CookActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CookAction.schema()
    create_cookaction_model(CookActionAllProperties).schema()
    create_cookaction_model(CookActionInheritedProperties).schema()
    create_cookaction_model(CookActionProperties).schema()


def MedicalWebPage_test():
    from schorg.MedicalWebPage import MedicalWebPageInheritedProperties
    from schorg.MedicalWebPage import MedicalWebPageProperties
    from schorg.MedicalWebPage import MedicalWebPageAllProperties
    from schorg.MedicalWebPage import create_schema_org_model
    from schorg.MedicalWebPage import create_medicalwebpage_model
    from schorg.MedicalWebPage import MedicalWebPage

    a = create_schema_org_model(type_=MedicalWebPageInheritedProperties)
    b = create_schema_org_model(type_=MedicalWebPageProperties)
    c = create_schema_org_model(type_=MedicalWebPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalWebPage.schema()
    create_medicalwebpage_model(MedicalWebPageAllProperties).schema()
    create_medicalwebpage_model(MedicalWebPageInheritedProperties).schema()
    create_medicalwebpage_model(MedicalWebPageProperties).schema()


def Throat_test():
    from schorg.Throat import ThroatInheritedProperties
    from schorg.Throat import ThroatProperties
    from schorg.Throat import ThroatAllProperties
    from schorg.Throat import create_schema_org_model
    from schorg.Throat import create_throat_model
    from schorg.Throat import Throat

    a = create_schema_org_model(type_=ThroatInheritedProperties)
    b = create_schema_org_model(type_=ThroatProperties)
    c = create_schema_org_model(type_=ThroatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Throat.schema()
    create_throat_model(ThroatAllProperties).schema()
    create_throat_model(ThroatInheritedProperties).schema()
    create_throat_model(ThroatProperties).schema()


def Urologic_test():
    from schorg.Urologic import UrologicInheritedProperties
    from schorg.Urologic import UrologicProperties
    from schorg.Urologic import UrologicAllProperties
    from schorg.Urologic import create_schema_org_model
    from schorg.Urologic import create_urologic_model
    from schorg.Urologic import Urologic

    a = create_schema_org_model(type_=UrologicInheritedProperties)
    b = create_schema_org_model(type_=UrologicProperties)
    c = create_schema_org_model(type_=UrologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Urologic.schema()
    create_urologic_model(UrologicAllProperties).schema()
    create_urologic_model(UrologicInheritedProperties).schema()
    create_urologic_model(UrologicProperties).schema()


def StadiumOrArena_test():
    from schorg.StadiumOrArena import StadiumOrArenaInheritedProperties
    from schorg.StadiumOrArena import StadiumOrArenaProperties
    from schorg.StadiumOrArena import StadiumOrArenaAllProperties
    from schorg.StadiumOrArena import create_schema_org_model
    from schorg.StadiumOrArena import create_stadiumorarena_model
    from schorg.StadiumOrArena import StadiumOrArena

    a = create_schema_org_model(type_=StadiumOrArenaInheritedProperties)
    b = create_schema_org_model(type_=StadiumOrArenaProperties)
    c = create_schema_org_model(type_=StadiumOrArenaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StadiumOrArena.schema()
    create_stadiumorarena_model(StadiumOrArenaAllProperties).schema()
    create_stadiumorarena_model(StadiumOrArenaInheritedProperties).schema()
    create_stadiumorarena_model(StadiumOrArenaProperties).schema()


def FDAnotEvaluated_test():
    from schorg.FDAnotEvaluated import FDAnotEvaluatedInheritedProperties
    from schorg.FDAnotEvaluated import FDAnotEvaluatedProperties
    from schorg.FDAnotEvaluated import FDAnotEvaluatedAllProperties
    from schorg.FDAnotEvaluated import create_schema_org_model
    from schorg.FDAnotEvaluated import create_fdanotevaluated_model
    from schorg.FDAnotEvaluated import FDAnotEvaluated

    a = create_schema_org_model(type_=FDAnotEvaluatedInheritedProperties)
    b = create_schema_org_model(type_=FDAnotEvaluatedProperties)
    c = create_schema_org_model(type_=FDAnotEvaluatedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAnotEvaluated.schema()
    create_fdanotevaluated_model(FDAnotEvaluatedAllProperties).schema()
    create_fdanotevaluated_model(FDAnotEvaluatedInheritedProperties).schema()
    create_fdanotevaluated_model(FDAnotEvaluatedProperties).schema()


def Cardiovascular_test():
    from schorg.Cardiovascular import CardiovascularInheritedProperties
    from schorg.Cardiovascular import CardiovascularProperties
    from schorg.Cardiovascular import CardiovascularAllProperties
    from schorg.Cardiovascular import create_schema_org_model
    from schorg.Cardiovascular import create_cardiovascular_model
    from schorg.Cardiovascular import Cardiovascular

    a = create_schema_org_model(type_=CardiovascularInheritedProperties)
    b = create_schema_org_model(type_=CardiovascularProperties)
    c = create_schema_org_model(type_=CardiovascularAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Cardiovascular.schema()
    create_cardiovascular_model(CardiovascularAllProperties).schema()
    create_cardiovascular_model(CardiovascularInheritedProperties).schema()
    create_cardiovascular_model(CardiovascularProperties).schema()


def UserComments_test():
    from schorg.UserComments import UserCommentsInheritedProperties
    from schorg.UserComments import UserCommentsProperties
    from schorg.UserComments import UserCommentsAllProperties
    from schorg.UserComments import create_schema_org_model
    from schorg.UserComments import create_usercomments_model
    from schorg.UserComments import UserComments

    a = create_schema_org_model(type_=UserCommentsInheritedProperties)
    b = create_schema_org_model(type_=UserCommentsProperties)
    c = create_schema_org_model(type_=UserCommentsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserComments.schema()
    create_usercomments_model(UserCommentsAllProperties).schema()
    create_usercomments_model(UserCommentsInheritedProperties).schema()
    create_usercomments_model(UserCommentsProperties).schema()


def Lung_test():
    from schorg.Lung import LungInheritedProperties
    from schorg.Lung import LungProperties
    from schorg.Lung import LungAllProperties
    from schorg.Lung import create_schema_org_model
    from schorg.Lung import create_lung_model
    from schorg.Lung import Lung

    a = create_schema_org_model(type_=LungInheritedProperties)
    b = create_schema_org_model(type_=LungProperties)
    c = create_schema_org_model(type_=LungAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Lung.schema()
    create_lung_model(LungAllProperties).schema()
    create_lung_model(LungInheritedProperties).schema()
    create_lung_model(LungProperties).schema()


def ReserveAction_test():
    from schorg.ReserveAction import ReserveActionInheritedProperties
    from schorg.ReserveAction import ReserveActionProperties
    from schorg.ReserveAction import ReserveActionAllProperties
    from schorg.ReserveAction import create_schema_org_model
    from schorg.ReserveAction import create_reserveaction_model
    from schorg.ReserveAction import ReserveAction

    a = create_schema_org_model(type_=ReserveActionInheritedProperties)
    b = create_schema_org_model(type_=ReserveActionProperties)
    c = create_schema_org_model(type_=ReserveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReserveAction.schema()
    create_reserveaction_model(ReserveActionAllProperties).schema()
    create_reserveaction_model(ReserveActionInheritedProperties).schema()
    create_reserveaction_model(ReserveActionProperties).schema()


def OrderInTransit_test():
    from schorg.OrderInTransit import OrderInTransitInheritedProperties
    from schorg.OrderInTransit import OrderInTransitProperties
    from schorg.OrderInTransit import OrderInTransitAllProperties
    from schorg.OrderInTransit import create_schema_org_model
    from schorg.OrderInTransit import create_orderintransit_model
    from schorg.OrderInTransit import OrderInTransit

    a = create_schema_org_model(type_=OrderInTransitInheritedProperties)
    b = create_schema_org_model(type_=OrderInTransitProperties)
    c = create_schema_org_model(type_=OrderInTransitAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderInTransit.schema()
    create_orderintransit_model(OrderInTransitAllProperties).schema()
    create_orderintransit_model(OrderInTransitInheritedProperties).schema()
    create_orderintransit_model(OrderInTransitProperties).schema()


def BusinessEvent_test():
    from schorg.BusinessEvent import BusinessEventInheritedProperties
    from schorg.BusinessEvent import BusinessEventProperties
    from schorg.BusinessEvent import BusinessEventAllProperties
    from schorg.BusinessEvent import create_schema_org_model
    from schorg.BusinessEvent import create_businessevent_model
    from schorg.BusinessEvent import BusinessEvent

    a = create_schema_org_model(type_=BusinessEventInheritedProperties)
    b = create_schema_org_model(type_=BusinessEventProperties)
    c = create_schema_org_model(type_=BusinessEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusinessEvent.schema()
    create_businessevent_model(BusinessEventAllProperties).schema()
    create_businessevent_model(BusinessEventInheritedProperties).schema()
    create_businessevent_model(BusinessEventProperties).schema()


def MusicComposition_test():
    from schorg.MusicComposition import MusicCompositionInheritedProperties
    from schorg.MusicComposition import MusicCompositionProperties
    from schorg.MusicComposition import MusicCompositionAllProperties
    from schorg.MusicComposition import create_schema_org_model
    from schorg.MusicComposition import create_musiccomposition_model
    from schorg.MusicComposition import MusicComposition

    a = create_schema_org_model(type_=MusicCompositionInheritedProperties)
    b = create_schema_org_model(type_=MusicCompositionProperties)
    c = create_schema_org_model(type_=MusicCompositionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicComposition.schema()
    create_musiccomposition_model(MusicCompositionAllProperties).schema()
    create_musiccomposition_model(MusicCompositionInheritedProperties).schema()
    create_musiccomposition_model(MusicCompositionProperties).schema()


def WinAction_test():
    from schorg.WinAction import WinActionInheritedProperties
    from schorg.WinAction import WinActionProperties
    from schorg.WinAction import WinActionAllProperties
    from schorg.WinAction import create_schema_org_model
    from schorg.WinAction import create_winaction_model
    from schorg.WinAction import WinAction

    a = create_schema_org_model(type_=WinActionInheritedProperties)
    b = create_schema_org_model(type_=WinActionProperties)
    c = create_schema_org_model(type_=WinActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WinAction.schema()
    create_winaction_model(WinActionAllProperties).schema()
    create_winaction_model(WinActionInheritedProperties).schema()
    create_winaction_model(WinActionProperties).schema()


def SalePrice_test():
    from schorg.SalePrice import SalePriceInheritedProperties
    from schorg.SalePrice import SalePriceProperties
    from schorg.SalePrice import SalePriceAllProperties
    from schorg.SalePrice import create_schema_org_model
    from schorg.SalePrice import create_saleprice_model
    from schorg.SalePrice import SalePrice

    a = create_schema_org_model(type_=SalePriceInheritedProperties)
    b = create_schema_org_model(type_=SalePriceProperties)
    c = create_schema_org_model(type_=SalePriceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SalePrice.schema()
    create_saleprice_model(SalePriceAllProperties).schema()
    create_saleprice_model(SalePriceInheritedProperties).schema()
    create_saleprice_model(SalePriceProperties).schema()


def ListItem_test():
    from schorg.ListItem import ListItemInheritedProperties
    from schorg.ListItem import ListItemProperties
    from schorg.ListItem import ListItemAllProperties
    from schorg.ListItem import create_schema_org_model
    from schorg.ListItem import create_listitem_model
    from schorg.ListItem import ListItem

    a = create_schema_org_model(type_=ListItemInheritedProperties)
    b = create_schema_org_model(type_=ListItemProperties)
    c = create_schema_org_model(type_=ListItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ListItem.schema()
    create_listitem_model(ListItemAllProperties).schema()
    create_listitem_model(ListItemInheritedProperties).schema()
    create_listitem_model(ListItemProperties).schema()


def HowToTip_test():
    from schorg.HowToTip import HowToTipInheritedProperties
    from schorg.HowToTip import HowToTipProperties
    from schorg.HowToTip import HowToTipAllProperties
    from schorg.HowToTip import create_schema_org_model
    from schorg.HowToTip import create_howtotip_model
    from schorg.HowToTip import HowToTip

    a = create_schema_org_model(type_=HowToTipInheritedProperties)
    b = create_schema_org_model(type_=HowToTipProperties)
    c = create_schema_org_model(type_=HowToTipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToTip.schema()
    create_howtotip_model(HowToTipAllProperties).schema()
    create_howtotip_model(HowToTipInheritedProperties).schema()
    create_howtotip_model(HowToTipProperties).schema()


def Longitudinal_test():
    from schorg.Longitudinal import LongitudinalInheritedProperties
    from schorg.Longitudinal import LongitudinalProperties
    from schorg.Longitudinal import LongitudinalAllProperties
    from schorg.Longitudinal import create_schema_org_model
    from schorg.Longitudinal import create_longitudinal_model
    from schorg.Longitudinal import Longitudinal

    a = create_schema_org_model(type_=LongitudinalInheritedProperties)
    b = create_schema_org_model(type_=LongitudinalProperties)
    c = create_schema_org_model(type_=LongitudinalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Longitudinal.schema()
    create_longitudinal_model(LongitudinalAllProperties).schema()
    create_longitudinal_model(LongitudinalInheritedProperties).schema()
    create_longitudinal_model(LongitudinalProperties).schema()


def Hackathon_test():
    from schorg.Hackathon import HackathonInheritedProperties
    from schorg.Hackathon import HackathonProperties
    from schorg.Hackathon import HackathonAllProperties
    from schorg.Hackathon import create_schema_org_model
    from schorg.Hackathon import create_hackathon_model
    from schorg.Hackathon import Hackathon

    a = create_schema_org_model(type_=HackathonInheritedProperties)
    b = create_schema_org_model(type_=HackathonProperties)
    c = create_schema_org_model(type_=HackathonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hackathon.schema()
    create_hackathon_model(HackathonAllProperties).schema()
    create_hackathon_model(HackathonInheritedProperties).schema()
    create_hackathon_model(HackathonProperties).schema()


def StatisticalPopulation_test():
    from schorg.StatisticalPopulation import StatisticalPopulationInheritedProperties
    from schorg.StatisticalPopulation import StatisticalPopulationProperties
    from schorg.StatisticalPopulation import StatisticalPopulationAllProperties
    from schorg.StatisticalPopulation import create_schema_org_model
    from schorg.StatisticalPopulation import create_statisticalpopulation_model
    from schorg.StatisticalPopulation import StatisticalPopulation

    a = create_schema_org_model(type_=StatisticalPopulationInheritedProperties)
    b = create_schema_org_model(type_=StatisticalPopulationProperties)
    c = create_schema_org_model(type_=StatisticalPopulationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StatisticalPopulation.schema()
    create_statisticalpopulation_model(StatisticalPopulationAllProperties).schema()
    create_statisticalpopulation_model(
        StatisticalPopulationInheritedProperties
    ).schema()
    create_statisticalpopulation_model(StatisticalPopulationProperties).schema()


def WriteAction_test():
    from schorg.WriteAction import WriteActionInheritedProperties
    from schorg.WriteAction import WriteActionProperties
    from schorg.WriteAction import WriteActionAllProperties
    from schorg.WriteAction import create_schema_org_model
    from schorg.WriteAction import create_writeaction_model
    from schorg.WriteAction import WriteAction

    a = create_schema_org_model(type_=WriteActionInheritedProperties)
    b = create_schema_org_model(type_=WriteActionProperties)
    c = create_schema_org_model(type_=WriteActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WriteAction.schema()
    create_writeaction_model(WriteActionAllProperties).schema()
    create_writeaction_model(WriteActionInheritedProperties).schema()
    create_writeaction_model(WriteActionProperties).schema()


def HowToSection_test():
    from schorg.HowToSection import HowToSectionInheritedProperties
    from schorg.HowToSection import HowToSectionProperties
    from schorg.HowToSection import HowToSectionAllProperties
    from schorg.HowToSection import create_schema_org_model
    from schorg.HowToSection import create_howtosection_model
    from schorg.HowToSection import HowToSection

    a = create_schema_org_model(type_=HowToSectionInheritedProperties)
    b = create_schema_org_model(type_=HowToSectionProperties)
    c = create_schema_org_model(type_=HowToSectionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToSection.schema()
    create_howtosection_model(HowToSectionAllProperties).schema()
    create_howtosection_model(HowToSectionInheritedProperties).schema()
    create_howtosection_model(HowToSectionProperties).schema()


def HVACBusiness_test():
    from schorg.HVACBusiness import HVACBusinessInheritedProperties
    from schorg.HVACBusiness import HVACBusinessProperties
    from schorg.HVACBusiness import HVACBusinessAllProperties
    from schorg.HVACBusiness import create_schema_org_model
    from schorg.HVACBusiness import create_hvacbusiness_model
    from schorg.HVACBusiness import HVACBusiness

    a = create_schema_org_model(type_=HVACBusinessInheritedProperties)
    b = create_schema_org_model(type_=HVACBusinessProperties)
    c = create_schema_org_model(type_=HVACBusinessAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HVACBusiness.schema()
    create_hvacbusiness_model(HVACBusinessAllProperties).schema()
    create_hvacbusiness_model(HVACBusinessInheritedProperties).schema()
    create_hvacbusiness_model(HVACBusinessProperties).schema()


def RepaymentSpecification_test():
    from schorg.RepaymentSpecification import RepaymentSpecificationInheritedProperties
    from schorg.RepaymentSpecification import RepaymentSpecificationProperties
    from schorg.RepaymentSpecification import RepaymentSpecificationAllProperties
    from schorg.RepaymentSpecification import create_schema_org_model
    from schorg.RepaymentSpecification import create_repaymentspecification_model
    from schorg.RepaymentSpecification import RepaymentSpecification

    a = create_schema_org_model(type_=RepaymentSpecificationInheritedProperties)
    b = create_schema_org_model(type_=RepaymentSpecificationProperties)
    c = create_schema_org_model(type_=RepaymentSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RepaymentSpecification.schema()
    create_repaymentspecification_model(RepaymentSpecificationAllProperties).schema()
    create_repaymentspecification_model(
        RepaymentSpecificationInheritedProperties
    ).schema()
    create_repaymentspecification_model(RepaymentSpecificationProperties).schema()


def RelatedTopicsHealthAspect_test():
    from schorg.RelatedTopicsHealthAspect import (
        RelatedTopicsHealthAspectInheritedProperties,
    )
    from schorg.RelatedTopicsHealthAspect import RelatedTopicsHealthAspectProperties
    from schorg.RelatedTopicsHealthAspect import RelatedTopicsHealthAspectAllProperties
    from schorg.RelatedTopicsHealthAspect import create_schema_org_model
    from schorg.RelatedTopicsHealthAspect import create_relatedtopicshealthaspect_model
    from schorg.RelatedTopicsHealthAspect import RelatedTopicsHealthAspect

    a = create_schema_org_model(type_=RelatedTopicsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=RelatedTopicsHealthAspectProperties)
    c = create_schema_org_model(type_=RelatedTopicsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RelatedTopicsHealthAspect.schema()
    create_relatedtopicshealthaspect_model(
        RelatedTopicsHealthAspectAllProperties
    ).schema()
    create_relatedtopicshealthaspect_model(
        RelatedTopicsHealthAspectInheritedProperties
    ).schema()
    create_relatedtopicshealthaspect_model(RelatedTopicsHealthAspectProperties).schema()


def UserPlusOnes_test():
    from schorg.UserPlusOnes import UserPlusOnesInheritedProperties
    from schorg.UserPlusOnes import UserPlusOnesProperties
    from schorg.UserPlusOnes import UserPlusOnesAllProperties
    from schorg.UserPlusOnes import create_schema_org_model
    from schorg.UserPlusOnes import create_userplusones_model
    from schorg.UserPlusOnes import UserPlusOnes

    a = create_schema_org_model(type_=UserPlusOnesInheritedProperties)
    b = create_schema_org_model(type_=UserPlusOnesProperties)
    c = create_schema_org_model(type_=UserPlusOnesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserPlusOnes.schema()
    create_userplusones_model(UserPlusOnesAllProperties).schema()
    create_userplusones_model(UserPlusOnesInheritedProperties).schema()
    create_userplusones_model(UserPlusOnesProperties).schema()


def Gynecologic_test():
    from schorg.Gynecologic import GynecologicInheritedProperties
    from schorg.Gynecologic import GynecologicProperties
    from schorg.Gynecologic import GynecologicAllProperties
    from schorg.Gynecologic import create_schema_org_model
    from schorg.Gynecologic import create_gynecologic_model
    from schorg.Gynecologic import Gynecologic

    a = create_schema_org_model(type_=GynecologicInheritedProperties)
    b = create_schema_org_model(type_=GynecologicProperties)
    c = create_schema_org_model(type_=GynecologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Gynecologic.schema()
    create_gynecologic_model(GynecologicAllProperties).schema()
    create_gynecologic_model(GynecologicInheritedProperties).schema()
    create_gynecologic_model(GynecologicProperties).schema()


def MerchantReturnNotPermitted_test():
    from schorg.MerchantReturnNotPermitted import (
        MerchantReturnNotPermittedInheritedProperties,
    )
    from schorg.MerchantReturnNotPermitted import MerchantReturnNotPermittedProperties
    from schorg.MerchantReturnNotPermitted import (
        MerchantReturnNotPermittedAllProperties,
    )
    from schorg.MerchantReturnNotPermitted import create_schema_org_model
    from schorg.MerchantReturnNotPermitted import (
        create_merchantreturnnotpermitted_model,
    )
    from schorg.MerchantReturnNotPermitted import MerchantReturnNotPermitted

    a = create_schema_org_model(type_=MerchantReturnNotPermittedInheritedProperties)
    b = create_schema_org_model(type_=MerchantReturnNotPermittedProperties)
    c = create_schema_org_model(type_=MerchantReturnNotPermittedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnNotPermitted.schema()
    create_merchantreturnnotpermitted_model(
        MerchantReturnNotPermittedAllProperties
    ).schema()
    create_merchantreturnnotpermitted_model(
        MerchantReturnNotPermittedInheritedProperties
    ).schema()
    create_merchantreturnnotpermitted_model(
        MerchantReturnNotPermittedProperties
    ).schema()


def OrderPickupAvailable_test():
    from schorg.OrderPickupAvailable import OrderPickupAvailableInheritedProperties
    from schorg.OrderPickupAvailable import OrderPickupAvailableProperties
    from schorg.OrderPickupAvailable import OrderPickupAvailableAllProperties
    from schorg.OrderPickupAvailable import create_schema_org_model
    from schorg.OrderPickupAvailable import create_orderpickupavailable_model
    from schorg.OrderPickupAvailable import OrderPickupAvailable

    a = create_schema_org_model(type_=OrderPickupAvailableInheritedProperties)
    b = create_schema_org_model(type_=OrderPickupAvailableProperties)
    c = create_schema_org_model(type_=OrderPickupAvailableAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderPickupAvailable.schema()
    create_orderpickupavailable_model(OrderPickupAvailableAllProperties).schema()
    create_orderpickupavailable_model(OrderPickupAvailableInheritedProperties).schema()
    create_orderpickupavailable_model(OrderPickupAvailableProperties).schema()


def DeliveryEvent_test():
    from schorg.DeliveryEvent import DeliveryEventInheritedProperties
    from schorg.DeliveryEvent import DeliveryEventProperties
    from schorg.DeliveryEvent import DeliveryEventAllProperties
    from schorg.DeliveryEvent import create_schema_org_model
    from schorg.DeliveryEvent import create_deliveryevent_model
    from schorg.DeliveryEvent import DeliveryEvent

    a = create_schema_org_model(type_=DeliveryEventInheritedProperties)
    b = create_schema_org_model(type_=DeliveryEventProperties)
    c = create_schema_org_model(type_=DeliveryEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeliveryEvent.schema()
    create_deliveryevent_model(DeliveryEventAllProperties).schema()
    create_deliveryevent_model(DeliveryEventInheritedProperties).schema()
    create_deliveryevent_model(DeliveryEventProperties).schema()


def LimitedByGuaranteeCharity_test():
    from schorg.LimitedByGuaranteeCharity import (
        LimitedByGuaranteeCharityInheritedProperties,
    )
    from schorg.LimitedByGuaranteeCharity import LimitedByGuaranteeCharityProperties
    from schorg.LimitedByGuaranteeCharity import LimitedByGuaranteeCharityAllProperties
    from schorg.LimitedByGuaranteeCharity import create_schema_org_model
    from schorg.LimitedByGuaranteeCharity import create_limitedbyguaranteecharity_model
    from schorg.LimitedByGuaranteeCharity import LimitedByGuaranteeCharity

    a = create_schema_org_model(type_=LimitedByGuaranteeCharityInheritedProperties)
    b = create_schema_org_model(type_=LimitedByGuaranteeCharityProperties)
    c = create_schema_org_model(type_=LimitedByGuaranteeCharityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LimitedByGuaranteeCharity.schema()
    create_limitedbyguaranteecharity_model(
        LimitedByGuaranteeCharityAllProperties
    ).schema()
    create_limitedbyguaranteecharity_model(
        LimitedByGuaranteeCharityInheritedProperties
    ).schema()
    create_limitedbyguaranteecharity_model(LimitedByGuaranteeCharityProperties).schema()


def ComputerLanguage_test():
    from schorg.ComputerLanguage import ComputerLanguageInheritedProperties
    from schorg.ComputerLanguage import ComputerLanguageProperties
    from schorg.ComputerLanguage import ComputerLanguageAllProperties
    from schorg.ComputerLanguage import create_schema_org_model
    from schorg.ComputerLanguage import create_computerlanguage_model
    from schorg.ComputerLanguage import ComputerLanguage

    a = create_schema_org_model(type_=ComputerLanguageInheritedProperties)
    b = create_schema_org_model(type_=ComputerLanguageProperties)
    c = create_schema_org_model(type_=ComputerLanguageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComputerLanguage.schema()
    create_computerlanguage_model(ComputerLanguageAllProperties).schema()
    create_computerlanguage_model(ComputerLanguageInheritedProperties).schema()
    create_computerlanguage_model(ComputerLanguageProperties).schema()


def WearableMeasurementCup_test():
    from schorg.WearableMeasurementCup import WearableMeasurementCupInheritedProperties
    from schorg.WearableMeasurementCup import WearableMeasurementCupProperties
    from schorg.WearableMeasurementCup import WearableMeasurementCupAllProperties
    from schorg.WearableMeasurementCup import create_schema_org_model
    from schorg.WearableMeasurementCup import create_wearablemeasurementcup_model
    from schorg.WearableMeasurementCup import WearableMeasurementCup

    a = create_schema_org_model(type_=WearableMeasurementCupInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementCupProperties)
    c = create_schema_org_model(type_=WearableMeasurementCupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementCup.schema()
    create_wearablemeasurementcup_model(WearableMeasurementCupAllProperties).schema()
    create_wearablemeasurementcup_model(
        WearableMeasurementCupInheritedProperties
    ).schema()
    create_wearablemeasurementcup_model(WearableMeasurementCupProperties).schema()


def ReportedDoseSchedule_test():
    from schorg.ReportedDoseSchedule import ReportedDoseScheduleInheritedProperties
    from schorg.ReportedDoseSchedule import ReportedDoseScheduleProperties
    from schorg.ReportedDoseSchedule import ReportedDoseScheduleAllProperties
    from schorg.ReportedDoseSchedule import create_schema_org_model
    from schorg.ReportedDoseSchedule import create_reporteddoseschedule_model
    from schorg.ReportedDoseSchedule import ReportedDoseSchedule

    a = create_schema_org_model(type_=ReportedDoseScheduleInheritedProperties)
    b = create_schema_org_model(type_=ReportedDoseScheduleProperties)
    c = create_schema_org_model(type_=ReportedDoseScheduleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReportedDoseSchedule.schema()
    create_reporteddoseschedule_model(ReportedDoseScheduleAllProperties).schema()
    create_reporteddoseschedule_model(ReportedDoseScheduleInheritedProperties).schema()
    create_reporteddoseschedule_model(ReportedDoseScheduleProperties).schema()


def Vehicle_test():
    from schorg.Vehicle import VehicleInheritedProperties
    from schorg.Vehicle import VehicleProperties
    from schorg.Vehicle import VehicleAllProperties
    from schorg.Vehicle import create_schema_org_model
    from schorg.Vehicle import create_vehicle_model
    from schorg.Vehicle import Vehicle

    a = create_schema_org_model(type_=VehicleInheritedProperties)
    b = create_schema_org_model(type_=VehicleProperties)
    c = create_schema_org_model(type_=VehicleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Vehicle.schema()
    create_vehicle_model(VehicleAllProperties).schema()
    create_vehicle_model(VehicleInheritedProperties).schema()
    create_vehicle_model(VehicleProperties).schema()


def Motorcycle_test():
    from schorg.Motorcycle import MotorcycleInheritedProperties
    from schorg.Motorcycle import MotorcycleProperties
    from schorg.Motorcycle import MotorcycleAllProperties
    from schorg.Motorcycle import create_schema_org_model
    from schorg.Motorcycle import create_motorcycle_model
    from schorg.Motorcycle import Motorcycle

    a = create_schema_org_model(type_=MotorcycleInheritedProperties)
    b = create_schema_org_model(type_=MotorcycleProperties)
    c = create_schema_org_model(type_=MotorcycleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Motorcycle.schema()
    create_motorcycle_model(MotorcycleAllProperties).schema()
    create_motorcycle_model(MotorcycleInheritedProperties).schema()
    create_motorcycle_model(MotorcycleProperties).schema()


def Nonprofit501c21_test():
    from schorg.Nonprofit501c21 import Nonprofit501c21InheritedProperties
    from schorg.Nonprofit501c21 import Nonprofit501c21Properties
    from schorg.Nonprofit501c21 import Nonprofit501c21AllProperties
    from schorg.Nonprofit501c21 import create_schema_org_model
    from schorg.Nonprofit501c21 import create_nonprofit501c21_model
    from schorg.Nonprofit501c21 import Nonprofit501c21

    a = create_schema_org_model(type_=Nonprofit501c21InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c21Properties)
    c = create_schema_org_model(type_=Nonprofit501c21AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c21.schema()
    create_nonprofit501c21_model(Nonprofit501c21AllProperties).schema()
    create_nonprofit501c21_model(Nonprofit501c21InheritedProperties).schema()
    create_nonprofit501c21_model(Nonprofit501c21Properties).schema()


def FollowAction_test():
    from schorg.FollowAction import FollowActionInheritedProperties
    from schorg.FollowAction import FollowActionProperties
    from schorg.FollowAction import FollowActionAllProperties
    from schorg.FollowAction import create_schema_org_model
    from schorg.FollowAction import create_followaction_model
    from schorg.FollowAction import FollowAction

    a = create_schema_org_model(type_=FollowActionInheritedProperties)
    b = create_schema_org_model(type_=FollowActionProperties)
    c = create_schema_org_model(type_=FollowActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FollowAction.schema()
    create_followaction_model(FollowActionAllProperties).schema()
    create_followaction_model(FollowActionInheritedProperties).schema()
    create_followaction_model(FollowActionProperties).schema()


def Game_test():
    from schorg.Game import GameInheritedProperties
    from schorg.Game import GameProperties
    from schorg.Game import GameAllProperties
    from schorg.Game import create_schema_org_model
    from schorg.Game import create_game_model
    from schorg.Game import Game

    a = create_schema_org_model(type_=GameInheritedProperties)
    b = create_schema_org_model(type_=GameProperties)
    c = create_schema_org_model(type_=GameAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Game.schema()
    create_game_model(GameAllProperties).schema()
    create_game_model(GameInheritedProperties).schema()
    create_game_model(GameProperties).schema()


def VideoGame_test():
    from schorg.VideoGame import VideoGameInheritedProperties
    from schorg.VideoGame import VideoGameProperties
    from schorg.VideoGame import VideoGameAllProperties
    from schorg.VideoGame import create_schema_org_model
    from schorg.VideoGame import create_videogame_model
    from schorg.VideoGame import VideoGame

    a = create_schema_org_model(type_=VideoGameInheritedProperties)
    b = create_schema_org_model(type_=VideoGameProperties)
    c = create_schema_org_model(type_=VideoGameAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoGame.schema()
    create_videogame_model(VideoGameAllProperties).schema()
    create_videogame_model(VideoGameInheritedProperties).schema()
    create_videogame_model(VideoGameProperties).schema()


def OpinionNewsArticle_test():
    from schorg.OpinionNewsArticle import OpinionNewsArticleInheritedProperties
    from schorg.OpinionNewsArticle import OpinionNewsArticleProperties
    from schorg.OpinionNewsArticle import OpinionNewsArticleAllProperties
    from schorg.OpinionNewsArticle import create_schema_org_model
    from schorg.OpinionNewsArticle import create_opinionnewsarticle_model
    from schorg.OpinionNewsArticle import OpinionNewsArticle

    a = create_schema_org_model(type_=OpinionNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=OpinionNewsArticleProperties)
    c = create_schema_org_model(type_=OpinionNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OpinionNewsArticle.schema()
    create_opinionnewsarticle_model(OpinionNewsArticleAllProperties).schema()
    create_opinionnewsarticle_model(OpinionNewsArticleInheritedProperties).schema()
    create_opinionnewsarticle_model(OpinionNewsArticleProperties).schema()


def MapCategoryType_test():
    from schorg.MapCategoryType import MapCategoryTypeInheritedProperties
    from schorg.MapCategoryType import MapCategoryTypeProperties
    from schorg.MapCategoryType import MapCategoryTypeAllProperties
    from schorg.MapCategoryType import create_schema_org_model
    from schorg.MapCategoryType import create_mapcategorytype_model
    from schorg.MapCategoryType import MapCategoryType

    a = create_schema_org_model(type_=MapCategoryTypeInheritedProperties)
    b = create_schema_org_model(type_=MapCategoryTypeProperties)
    c = create_schema_org_model(type_=MapCategoryTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MapCategoryType.schema()
    create_mapcategorytype_model(MapCategoryTypeAllProperties).schema()
    create_mapcategorytype_model(MapCategoryTypeInheritedProperties).schema()
    create_mapcategorytype_model(MapCategoryTypeProperties).schema()


def NGO_test():
    from schorg.NGO import NGOInheritedProperties
    from schorg.NGO import NGOProperties
    from schorg.NGO import NGOAllProperties
    from schorg.NGO import create_schema_org_model
    from schorg.NGO import create_ngo_model
    from schorg.NGO import NGO

    a = create_schema_org_model(type_=NGOInheritedProperties)
    b = create_schema_org_model(type_=NGOProperties)
    c = create_schema_org_model(type_=NGOAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NGO.schema()
    create_ngo_model(NGOAllProperties).schema()
    create_ngo_model(NGOInheritedProperties).schema()
    create_ngo_model(NGOProperties).schema()


def BusStation_test():
    from schorg.BusStation import BusStationInheritedProperties
    from schorg.BusStation import BusStationProperties
    from schorg.BusStation import BusStationAllProperties
    from schorg.BusStation import create_schema_org_model
    from schorg.BusStation import create_busstation_model
    from schorg.BusStation import BusStation

    a = create_schema_org_model(type_=BusStationInheritedProperties)
    b = create_schema_org_model(type_=BusStationProperties)
    c = create_schema_org_model(type_=BusStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusStation.schema()
    create_busstation_model(BusStationAllProperties).schema()
    create_busstation_model(BusStationInheritedProperties).schema()
    create_busstation_model(BusStationProperties).schema()


def TrainStation_test():
    from schorg.TrainStation import TrainStationInheritedProperties
    from schorg.TrainStation import TrainStationProperties
    from schorg.TrainStation import TrainStationAllProperties
    from schorg.TrainStation import create_schema_org_model
    from schorg.TrainStation import create_trainstation_model
    from schorg.TrainStation import TrainStation

    a = create_schema_org_model(type_=TrainStationInheritedProperties)
    b = create_schema_org_model(type_=TrainStationProperties)
    c = create_schema_org_model(type_=TrainStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TrainStation.schema()
    create_trainstation_model(TrainStationAllProperties).schema()
    create_trainstation_model(TrainStationInheritedProperties).schema()
    create_trainstation_model(TrainStationProperties).schema()


def SportingGoodsStore_test():
    from schorg.SportingGoodsStore import SportingGoodsStoreInheritedProperties
    from schorg.SportingGoodsStore import SportingGoodsStoreProperties
    from schorg.SportingGoodsStore import SportingGoodsStoreAllProperties
    from schorg.SportingGoodsStore import create_schema_org_model
    from schorg.SportingGoodsStore import create_sportinggoodsstore_model
    from schorg.SportingGoodsStore import SportingGoodsStore

    a = create_schema_org_model(type_=SportingGoodsStoreInheritedProperties)
    b = create_schema_org_model(type_=SportingGoodsStoreProperties)
    c = create_schema_org_model(type_=SportingGoodsStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportingGoodsStore.schema()
    create_sportinggoodsstore_model(SportingGoodsStoreAllProperties).schema()
    create_sportinggoodsstore_model(SportingGoodsStoreInheritedProperties).schema()
    create_sportinggoodsstore_model(SportingGoodsStoreProperties).schema()


def UnRegisterAction_test():
    from schorg.UnRegisterAction import UnRegisterActionInheritedProperties
    from schorg.UnRegisterAction import UnRegisterActionProperties
    from schorg.UnRegisterAction import UnRegisterActionAllProperties
    from schorg.UnRegisterAction import create_schema_org_model
    from schorg.UnRegisterAction import create_unregisteraction_model
    from schorg.UnRegisterAction import UnRegisterAction

    a = create_schema_org_model(type_=UnRegisterActionInheritedProperties)
    b = create_schema_org_model(type_=UnRegisterActionProperties)
    c = create_schema_org_model(type_=UnRegisterActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnRegisterAction.schema()
    create_unregisteraction_model(UnRegisterActionAllProperties).schema()
    create_unregisteraction_model(UnRegisterActionInheritedProperties).schema()
    create_unregisteraction_model(UnRegisterActionProperties).schema()


def DoubleBlindedTrial_test():
    from schorg.DoubleBlindedTrial import DoubleBlindedTrialInheritedProperties
    from schorg.DoubleBlindedTrial import DoubleBlindedTrialProperties
    from schorg.DoubleBlindedTrial import DoubleBlindedTrialAllProperties
    from schorg.DoubleBlindedTrial import create_schema_org_model
    from schorg.DoubleBlindedTrial import create_doubleblindedtrial_model
    from schorg.DoubleBlindedTrial import DoubleBlindedTrial

    a = create_schema_org_model(type_=DoubleBlindedTrialInheritedProperties)
    b = create_schema_org_model(type_=DoubleBlindedTrialProperties)
    c = create_schema_org_model(type_=DoubleBlindedTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DoubleBlindedTrial.schema()
    create_doubleblindedtrial_model(DoubleBlindedTrialAllProperties).schema()
    create_doubleblindedtrial_model(DoubleBlindedTrialInheritedProperties).schema()
    create_doubleblindedtrial_model(DoubleBlindedTrialProperties).schema()


def ToyStore_test():
    from schorg.ToyStore import ToyStoreInheritedProperties
    from schorg.ToyStore import ToyStoreProperties
    from schorg.ToyStore import ToyStoreAllProperties
    from schorg.ToyStore import create_schema_org_model
    from schorg.ToyStore import create_toystore_model
    from schorg.ToyStore import ToyStore

    a = create_schema_org_model(type_=ToyStoreInheritedProperties)
    b = create_schema_org_model(type_=ToyStoreProperties)
    c = create_schema_org_model(type_=ToyStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ToyStore.schema()
    create_toystore_model(ToyStoreAllProperties).schema()
    create_toystore_model(ToyStoreInheritedProperties).schema()
    create_toystore_model(ToyStoreProperties).schema()


def UnemploymentSupport_test():
    from schorg.UnemploymentSupport import UnemploymentSupportInheritedProperties
    from schorg.UnemploymentSupport import UnemploymentSupportProperties
    from schorg.UnemploymentSupport import UnemploymentSupportAllProperties
    from schorg.UnemploymentSupport import create_schema_org_model
    from schorg.UnemploymentSupport import create_unemploymentsupport_model
    from schorg.UnemploymentSupport import UnemploymentSupport

    a = create_schema_org_model(type_=UnemploymentSupportInheritedProperties)
    b = create_schema_org_model(type_=UnemploymentSupportProperties)
    c = create_schema_org_model(type_=UnemploymentSupportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnemploymentSupport.schema()
    create_unemploymentsupport_model(UnemploymentSupportAllProperties).schema()
    create_unemploymentsupport_model(UnemploymentSupportInheritedProperties).schema()
    create_unemploymentsupport_model(UnemploymentSupportProperties).schema()


def MedicalSign_test():
    from schorg.MedicalSign import MedicalSignInheritedProperties
    from schorg.MedicalSign import MedicalSignProperties
    from schorg.MedicalSign import MedicalSignAllProperties
    from schorg.MedicalSign import create_schema_org_model
    from schorg.MedicalSign import create_medicalsign_model
    from schorg.MedicalSign import MedicalSign

    a = create_schema_org_model(type_=MedicalSignInheritedProperties)
    b = create_schema_org_model(type_=MedicalSignProperties)
    c = create_schema_org_model(type_=MedicalSignAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalSign.schema()
    create_medicalsign_model(MedicalSignAllProperties).schema()
    create_medicalsign_model(MedicalSignInheritedProperties).schema()
    create_medicalsign_model(MedicalSignProperties).schema()


def MovieSeries_test():
    from schorg.MovieSeries import MovieSeriesInheritedProperties
    from schorg.MovieSeries import MovieSeriesProperties
    from schorg.MovieSeries import MovieSeriesAllProperties
    from schorg.MovieSeries import create_schema_org_model
    from schorg.MovieSeries import create_movieseries_model
    from schorg.MovieSeries import MovieSeries

    a = create_schema_org_model(type_=MovieSeriesInheritedProperties)
    b = create_schema_org_model(type_=MovieSeriesProperties)
    c = create_schema_org_model(type_=MovieSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MovieSeries.schema()
    create_movieseries_model(MovieSeriesAllProperties).schema()
    create_movieseries_model(MovieSeriesInheritedProperties).schema()
    create_movieseries_model(MovieSeriesProperties).schema()


def Car_test():
    from schorg.Car import CarInheritedProperties
    from schorg.Car import CarProperties
    from schorg.Car import CarAllProperties
    from schorg.Car import create_schema_org_model
    from schorg.Car import create_car_model
    from schorg.Car import Car

    a = create_schema_org_model(type_=CarInheritedProperties)
    b = create_schema_org_model(type_=CarProperties)
    c = create_schema_org_model(type_=CarAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Car.schema()
    create_car_model(CarAllProperties).schema()
    create_car_model(CarInheritedProperties).schema()
    create_car_model(CarProperties).schema()


def SoldOut_test():
    from schorg.SoldOut import SoldOutInheritedProperties
    from schorg.SoldOut import SoldOutProperties
    from schorg.SoldOut import SoldOutAllProperties
    from schorg.SoldOut import create_schema_org_model
    from schorg.SoldOut import create_soldout_model
    from schorg.SoldOut import SoldOut

    a = create_schema_org_model(type_=SoldOutInheritedProperties)
    b = create_schema_org_model(type_=SoldOutProperties)
    c = create_schema_org_model(type_=SoldOutAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SoldOut.schema()
    create_soldout_model(SoldOutAllProperties).schema()
    create_soldout_model(SoldOutInheritedProperties).schema()
    create_soldout_model(SoldOutProperties).schema()


def Physiotherapy_test():
    from schorg.Physiotherapy import PhysiotherapyInheritedProperties
    from schorg.Physiotherapy import PhysiotherapyProperties
    from schorg.Physiotherapy import PhysiotherapyAllProperties
    from schorg.Physiotherapy import create_schema_org_model
    from schorg.Physiotherapy import create_physiotherapy_model
    from schorg.Physiotherapy import Physiotherapy

    a = create_schema_org_model(type_=PhysiotherapyInheritedProperties)
    b = create_schema_org_model(type_=PhysiotherapyProperties)
    c = create_schema_org_model(type_=PhysiotherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Physiotherapy.schema()
    create_physiotherapy_model(PhysiotherapyAllProperties).schema()
    create_physiotherapy_model(PhysiotherapyInheritedProperties).schema()
    create_physiotherapy_model(PhysiotherapyProperties).schema()


def Pond_test():
    from schorg.Pond import PondInheritedProperties
    from schorg.Pond import PondProperties
    from schorg.Pond import PondAllProperties
    from schorg.Pond import create_schema_org_model
    from schorg.Pond import create_pond_model
    from schorg.Pond import Pond

    a = create_schema_org_model(type_=PondInheritedProperties)
    b = create_schema_org_model(type_=PondProperties)
    c = create_schema_org_model(type_=PondAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Pond.schema()
    create_pond_model(PondAllProperties).schema()
    create_pond_model(PondInheritedProperties).schema()
    create_pond_model(PondProperties).schema()


def PropertyValueSpecification_test():
    from schorg.PropertyValueSpecification import (
        PropertyValueSpecificationInheritedProperties,
    )
    from schorg.PropertyValueSpecification import PropertyValueSpecificationProperties
    from schorg.PropertyValueSpecification import (
        PropertyValueSpecificationAllProperties,
    )
    from schorg.PropertyValueSpecification import create_schema_org_model
    from schorg.PropertyValueSpecification import (
        create_propertyvaluespecification_model,
    )
    from schorg.PropertyValueSpecification import PropertyValueSpecification

    a = create_schema_org_model(type_=PropertyValueSpecificationInheritedProperties)
    b = create_schema_org_model(type_=PropertyValueSpecificationProperties)
    c = create_schema_org_model(type_=PropertyValueSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PropertyValueSpecification.schema()
    create_propertyvaluespecification_model(
        PropertyValueSpecificationAllProperties
    ).schema()
    create_propertyvaluespecification_model(
        PropertyValueSpecificationInheritedProperties
    ).schema()
    create_propertyvaluespecification_model(
        PropertyValueSpecificationProperties
    ).schema()


def BorrowAction_test():
    from schorg.BorrowAction import BorrowActionInheritedProperties
    from schorg.BorrowAction import BorrowActionProperties
    from schorg.BorrowAction import BorrowActionAllProperties
    from schorg.BorrowAction import create_schema_org_model
    from schorg.BorrowAction import create_borrowaction_model
    from schorg.BorrowAction import BorrowAction

    a = create_schema_org_model(type_=BorrowActionInheritedProperties)
    b = create_schema_org_model(type_=BorrowActionProperties)
    c = create_schema_org_model(type_=BorrowActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BorrowAction.schema()
    create_borrowaction_model(BorrowActionAllProperties).schema()
    create_borrowaction_model(BorrowActionInheritedProperties).schema()
    create_borrowaction_model(BorrowActionProperties).schema()


def HinduDiet_test():
    from schorg.HinduDiet import HinduDietInheritedProperties
    from schorg.HinduDiet import HinduDietProperties
    from schorg.HinduDiet import HinduDietAllProperties
    from schorg.HinduDiet import create_schema_org_model
    from schorg.HinduDiet import create_hindudiet_model
    from schorg.HinduDiet import HinduDiet

    a = create_schema_org_model(type_=HinduDietInheritedProperties)
    b = create_schema_org_model(type_=HinduDietProperties)
    c = create_schema_org_model(type_=HinduDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HinduDiet.schema()
    create_hindudiet_model(HinduDietAllProperties).schema()
    create_hindudiet_model(HinduDietInheritedProperties).schema()
    create_hindudiet_model(HinduDietProperties).schema()


def Hematologic_test():
    from schorg.Hematologic import HematologicInheritedProperties
    from schorg.Hematologic import HematologicProperties
    from schorg.Hematologic import HematologicAllProperties
    from schorg.Hematologic import create_schema_org_model
    from schorg.Hematologic import create_hematologic_model
    from schorg.Hematologic import Hematologic

    a = create_schema_org_model(type_=HematologicInheritedProperties)
    b = create_schema_org_model(type_=HematologicProperties)
    c = create_schema_org_model(type_=HematologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hematologic.schema()
    create_hematologic_model(HematologicAllProperties).schema()
    create_hematologic_model(HematologicInheritedProperties).schema()
    create_hematologic_model(HematologicProperties).schema()


def LowSaltDiet_test():
    from schorg.LowSaltDiet import LowSaltDietInheritedProperties
    from schorg.LowSaltDiet import LowSaltDietProperties
    from schorg.LowSaltDiet import LowSaltDietAllProperties
    from schorg.LowSaltDiet import create_schema_org_model
    from schorg.LowSaltDiet import create_lowsaltdiet_model
    from schorg.LowSaltDiet import LowSaltDiet

    a = create_schema_org_model(type_=LowSaltDietInheritedProperties)
    b = create_schema_org_model(type_=LowSaltDietProperties)
    c = create_schema_org_model(type_=LowSaltDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LowSaltDiet.schema()
    create_lowsaltdiet_model(LowSaltDietAllProperties).schema()
    create_lowsaltdiet_model(LowSaltDietInheritedProperties).schema()
    create_lowsaltdiet_model(LowSaltDietProperties).schema()


def XPathType_test():
    from schorg.XPathType import XPathTypeInheritedProperties
    from schorg.XPathType import XPathTypeProperties
    from schorg.XPathType import XPathTypeAllProperties
    from schorg.XPathType import create_schema_org_model
    from schorg.XPathType import create_xpathtype_model
    from schorg.XPathType import XPathType

    a = create_schema_org_model(type_=XPathTypeInheritedProperties)
    b = create_schema_org_model(type_=XPathTypeProperties)
    c = create_schema_org_model(type_=XPathTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    XPathType.schema()
    create_xpathtype_model(XPathTypeAllProperties).schema()
    create_xpathtype_model(XPathTypeInheritedProperties).schema()
    create_xpathtype_model(XPathTypeProperties).schema()


def SingleBlindedTrial_test():
    from schorg.SingleBlindedTrial import SingleBlindedTrialInheritedProperties
    from schorg.SingleBlindedTrial import SingleBlindedTrialProperties
    from schorg.SingleBlindedTrial import SingleBlindedTrialAllProperties
    from schorg.SingleBlindedTrial import create_schema_org_model
    from schorg.SingleBlindedTrial import create_singleblindedtrial_model
    from schorg.SingleBlindedTrial import SingleBlindedTrial

    a = create_schema_org_model(type_=SingleBlindedTrialInheritedProperties)
    b = create_schema_org_model(type_=SingleBlindedTrialProperties)
    c = create_schema_org_model(type_=SingleBlindedTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SingleBlindedTrial.schema()
    create_singleblindedtrial_model(SingleBlindedTrialAllProperties).schema()
    create_singleblindedtrial_model(SingleBlindedTrialInheritedProperties).schema()
    create_singleblindedtrial_model(SingleBlindedTrialProperties).schema()


def SingleRelease_test():
    from schorg.SingleRelease import SingleReleaseInheritedProperties
    from schorg.SingleRelease import SingleReleaseProperties
    from schorg.SingleRelease import SingleReleaseAllProperties
    from schorg.SingleRelease import create_schema_org_model
    from schorg.SingleRelease import create_singlerelease_model
    from schorg.SingleRelease import SingleRelease

    a = create_schema_org_model(type_=SingleReleaseInheritedProperties)
    b = create_schema_org_model(type_=SingleReleaseProperties)
    c = create_schema_org_model(type_=SingleReleaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SingleRelease.schema()
    create_singlerelease_model(SingleReleaseAllProperties).schema()
    create_singlerelease_model(SingleReleaseInheritedProperties).schema()
    create_singlerelease_model(SingleReleaseProperties).schema()


def WearableSizeSystemAU_test():
    from schorg.WearableSizeSystemAU import WearableSizeSystemAUInheritedProperties
    from schorg.WearableSizeSystemAU import WearableSizeSystemAUProperties
    from schorg.WearableSizeSystemAU import WearableSizeSystemAUAllProperties
    from schorg.WearableSizeSystemAU import create_schema_org_model
    from schorg.WearableSizeSystemAU import create_wearablesizesystemau_model
    from schorg.WearableSizeSystemAU import WearableSizeSystemAU

    a = create_schema_org_model(type_=WearableSizeSystemAUInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemAUProperties)
    c = create_schema_org_model(type_=WearableSizeSystemAUAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemAU.schema()
    create_wearablesizesystemau_model(WearableSizeSystemAUAllProperties).schema()
    create_wearablesizesystemau_model(WearableSizeSystemAUInheritedProperties).schema()
    create_wearablesizesystemau_model(WearableSizeSystemAUProperties).schema()


def UKTrust_test():
    from schorg.UKTrust import UKTrustInheritedProperties
    from schorg.UKTrust import UKTrustProperties
    from schorg.UKTrust import UKTrustAllProperties
    from schorg.UKTrust import create_schema_org_model
    from schorg.UKTrust import create_uktrust_model
    from schorg.UKTrust import UKTrust

    a = create_schema_org_model(type_=UKTrustInheritedProperties)
    b = create_schema_org_model(type_=UKTrustProperties)
    c = create_schema_org_model(type_=UKTrustAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UKTrust.schema()
    create_uktrust_model(UKTrustAllProperties).schema()
    create_uktrust_model(UKTrustInheritedProperties).schema()
    create_uktrust_model(UKTrustProperties).schema()


def PaidLeave_test():
    from schorg.PaidLeave import PaidLeaveInheritedProperties
    from schorg.PaidLeave import PaidLeaveProperties
    from schorg.PaidLeave import PaidLeaveAllProperties
    from schorg.PaidLeave import create_schema_org_model
    from schorg.PaidLeave import create_paidleave_model
    from schorg.PaidLeave import PaidLeave

    a = create_schema_org_model(type_=PaidLeaveInheritedProperties)
    b = create_schema_org_model(type_=PaidLeaveProperties)
    c = create_schema_org_model(type_=PaidLeaveAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaidLeave.schema()
    create_paidleave_model(PaidLeaveAllProperties).schema()
    create_paidleave_model(PaidLeaveInheritedProperties).schema()
    create_paidleave_model(PaidLeaveProperties).schema()


def EditedOrCroppedContent_test():
    from schorg.EditedOrCroppedContent import EditedOrCroppedContentInheritedProperties
    from schorg.EditedOrCroppedContent import EditedOrCroppedContentProperties
    from schorg.EditedOrCroppedContent import EditedOrCroppedContentAllProperties
    from schorg.EditedOrCroppedContent import create_schema_org_model
    from schorg.EditedOrCroppedContent import create_editedorcroppedcontent_model
    from schorg.EditedOrCroppedContent import EditedOrCroppedContent

    a = create_schema_org_model(type_=EditedOrCroppedContentInheritedProperties)
    b = create_schema_org_model(type_=EditedOrCroppedContentProperties)
    c = create_schema_org_model(type_=EditedOrCroppedContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EditedOrCroppedContent.schema()
    create_editedorcroppedcontent_model(EditedOrCroppedContentAllProperties).schema()
    create_editedorcroppedcontent_model(
        EditedOrCroppedContentInheritedProperties
    ).schema()
    create_editedorcroppedcontent_model(EditedOrCroppedContentProperties).schema()


def Nonprofit501c12_test():
    from schorg.Nonprofit501c12 import Nonprofit501c12InheritedProperties
    from schorg.Nonprofit501c12 import Nonprofit501c12Properties
    from schorg.Nonprofit501c12 import Nonprofit501c12AllProperties
    from schorg.Nonprofit501c12 import create_schema_org_model
    from schorg.Nonprofit501c12 import create_nonprofit501c12_model
    from schorg.Nonprofit501c12 import Nonprofit501c12

    a = create_schema_org_model(type_=Nonprofit501c12InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c12Properties)
    c = create_schema_org_model(type_=Nonprofit501c12AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c12.schema()
    create_nonprofit501c12_model(Nonprofit501c12AllProperties).schema()
    create_nonprofit501c12_model(Nonprofit501c12InheritedProperties).schema()
    create_nonprofit501c12_model(Nonprofit501c12Properties).schema()


def VitalSign_test():
    from schorg.VitalSign import VitalSignInheritedProperties
    from schorg.VitalSign import VitalSignProperties
    from schorg.VitalSign import VitalSignAllProperties
    from schorg.VitalSign import create_schema_org_model
    from schorg.VitalSign import create_vitalsign_model
    from schorg.VitalSign import VitalSign

    a = create_schema_org_model(type_=VitalSignInheritedProperties)
    b = create_schema_org_model(type_=VitalSignProperties)
    c = create_schema_org_model(type_=VitalSignAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VitalSign.schema()
    create_vitalsign_model(VitalSignAllProperties).schema()
    create_vitalsign_model(VitalSignInheritedProperties).schema()
    create_vitalsign_model(VitalSignProperties).schema()


def WearableSizeSystemMX_test():
    from schorg.WearableSizeSystemMX import WearableSizeSystemMXInheritedProperties
    from schorg.WearableSizeSystemMX import WearableSizeSystemMXProperties
    from schorg.WearableSizeSystemMX import WearableSizeSystemMXAllProperties
    from schorg.WearableSizeSystemMX import create_schema_org_model
    from schorg.WearableSizeSystemMX import create_wearablesizesystemmx_model
    from schorg.WearableSizeSystemMX import WearableSizeSystemMX

    a = create_schema_org_model(type_=WearableSizeSystemMXInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemMXProperties)
    c = create_schema_org_model(type_=WearableSizeSystemMXAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemMX.schema()
    create_wearablesizesystemmx_model(WearableSizeSystemMXAllProperties).schema()
    create_wearablesizesystemmx_model(WearableSizeSystemMXInheritedProperties).schema()
    create_wearablesizesystemmx_model(WearableSizeSystemMXProperties).schema()


def GardenStore_test():
    from schorg.GardenStore import GardenStoreInheritedProperties
    from schorg.GardenStore import GardenStoreProperties
    from schorg.GardenStore import GardenStoreAllProperties
    from schorg.GardenStore import create_schema_org_model
    from schorg.GardenStore import create_gardenstore_model
    from schorg.GardenStore import GardenStore

    a = create_schema_org_model(type_=GardenStoreInheritedProperties)
    b = create_schema_org_model(type_=GardenStoreProperties)
    c = create_schema_org_model(type_=GardenStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GardenStore.schema()
    create_gardenstore_model(GardenStoreAllProperties).schema()
    create_gardenstore_model(GardenStoreInheritedProperties).schema()
    create_gardenstore_model(GardenStoreProperties).schema()


def SearchRescueOrganization_test():
    from schorg.SearchRescueOrganization import (
        SearchRescueOrganizationInheritedProperties,
    )
    from schorg.SearchRescueOrganization import SearchRescueOrganizationProperties
    from schorg.SearchRescueOrganization import SearchRescueOrganizationAllProperties
    from schorg.SearchRescueOrganization import create_schema_org_model
    from schorg.SearchRescueOrganization import create_searchrescueorganization_model
    from schorg.SearchRescueOrganization import SearchRescueOrganization

    a = create_schema_org_model(type_=SearchRescueOrganizationInheritedProperties)
    b = create_schema_org_model(type_=SearchRescueOrganizationProperties)
    c = create_schema_org_model(type_=SearchRescueOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SearchRescueOrganization.schema()
    create_searchrescueorganization_model(
        SearchRescueOrganizationAllProperties
    ).schema()
    create_searchrescueorganization_model(
        SearchRescueOrganizationInheritedProperties
    ).schema()
    create_searchrescueorganization_model(SearchRescueOrganizationProperties).schema()


def BrainStructure_test():
    from schorg.BrainStructure import BrainStructureInheritedProperties
    from schorg.BrainStructure import BrainStructureProperties
    from schorg.BrainStructure import BrainStructureAllProperties
    from schorg.BrainStructure import create_schema_org_model
    from schorg.BrainStructure import create_brainstructure_model
    from schorg.BrainStructure import BrainStructure

    a = create_schema_org_model(type_=BrainStructureInheritedProperties)
    b = create_schema_org_model(type_=BrainStructureProperties)
    c = create_schema_org_model(type_=BrainStructureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BrainStructure.schema()
    create_brainstructure_model(BrainStructureAllProperties).schema()
    create_brainstructure_model(BrainStructureInheritedProperties).schema()
    create_brainstructure_model(BrainStructureProperties).schema()


def TreatmentsHealthAspect_test():
    from schorg.TreatmentsHealthAspect import TreatmentsHealthAspectInheritedProperties
    from schorg.TreatmentsHealthAspect import TreatmentsHealthAspectProperties
    from schorg.TreatmentsHealthAspect import TreatmentsHealthAspectAllProperties
    from schorg.TreatmentsHealthAspect import create_schema_org_model
    from schorg.TreatmentsHealthAspect import create_treatmentshealthaspect_model
    from schorg.TreatmentsHealthAspect import TreatmentsHealthAspect

    a = create_schema_org_model(type_=TreatmentsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=TreatmentsHealthAspectProperties)
    c = create_schema_org_model(type_=TreatmentsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TreatmentsHealthAspect.schema()
    create_treatmentshealthaspect_model(TreatmentsHealthAspectAllProperties).schema()
    create_treatmentshealthaspect_model(
        TreatmentsHealthAspectInheritedProperties
    ).schema()
    create_treatmentshealthaspect_model(TreatmentsHealthAspectProperties).schema()


def HowTo_test():
    from schorg.HowTo import HowToInheritedProperties
    from schorg.HowTo import HowToProperties
    from schorg.HowTo import HowToAllProperties
    from schorg.HowTo import create_schema_org_model
    from schorg.HowTo import create_howto_model
    from schorg.HowTo import HowTo

    a = create_schema_org_model(type_=HowToInheritedProperties)
    b = create_schema_org_model(type_=HowToProperties)
    c = create_schema_org_model(type_=HowToAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowTo.schema()
    create_howto_model(HowToAllProperties).schema()
    create_howto_model(HowToInheritedProperties).schema()
    create_howto_model(HowToProperties).schema()


def Recipe_test():
    from schorg.Recipe import RecipeInheritedProperties
    from schorg.Recipe import RecipeProperties
    from schorg.Recipe import RecipeAllProperties
    from schorg.Recipe import create_schema_org_model
    from schorg.Recipe import create_recipe_model
    from schorg.Recipe import Recipe

    a = create_schema_org_model(type_=RecipeInheritedProperties)
    b = create_schema_org_model(type_=RecipeProperties)
    c = create_schema_org_model(type_=RecipeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Recipe.schema()
    create_recipe_model(RecipeAllProperties).schema()
    create_recipe_model(RecipeInheritedProperties).schema()
    create_recipe_model(RecipeProperties).schema()


def WearableSizeGroupMaternity_test():
    from schorg.WearableSizeGroupMaternity import (
        WearableSizeGroupMaternityInheritedProperties,
    )
    from schorg.WearableSizeGroupMaternity import WearableSizeGroupMaternityProperties
    from schorg.WearableSizeGroupMaternity import (
        WearableSizeGroupMaternityAllProperties,
    )
    from schorg.WearableSizeGroupMaternity import create_schema_org_model
    from schorg.WearableSizeGroupMaternity import (
        create_wearablesizegroupmaternity_model,
    )
    from schorg.WearableSizeGroupMaternity import WearableSizeGroupMaternity

    a = create_schema_org_model(type_=WearableSizeGroupMaternityInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupMaternityProperties)
    c = create_schema_org_model(type_=WearableSizeGroupMaternityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupMaternity.schema()
    create_wearablesizegroupmaternity_model(
        WearableSizeGroupMaternityAllProperties
    ).schema()
    create_wearablesizegroupmaternity_model(
        WearableSizeGroupMaternityInheritedProperties
    ).schema()
    create_wearablesizegroupmaternity_model(
        WearableSizeGroupMaternityProperties
    ).schema()


def ReplaceAction_test():
    from schorg.ReplaceAction import ReplaceActionInheritedProperties
    from schorg.ReplaceAction import ReplaceActionProperties
    from schorg.ReplaceAction import ReplaceActionAllProperties
    from schorg.ReplaceAction import create_schema_org_model
    from schorg.ReplaceAction import create_replaceaction_model
    from schorg.ReplaceAction import ReplaceAction

    a = create_schema_org_model(type_=ReplaceActionInheritedProperties)
    b = create_schema_org_model(type_=ReplaceActionProperties)
    c = create_schema_org_model(type_=ReplaceActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReplaceAction.schema()
    create_replaceaction_model(ReplaceActionAllProperties).schema()
    create_replaceaction_model(ReplaceActionInheritedProperties).schema()
    create_replaceaction_model(ReplaceActionProperties).schema()


def Code_test():
    from schorg.Code import CodeInheritedProperties
    from schorg.Code import CodeProperties
    from schorg.Code import CodeAllProperties
    from schorg.Code import create_schema_org_model
    from schorg.Code import create_code_model
    from schorg.Code import Code

    a = create_schema_org_model(type_=CodeInheritedProperties)
    b = create_schema_org_model(type_=CodeProperties)
    c = create_schema_org_model(type_=CodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Code.schema()
    create_code_model(CodeAllProperties).schema()
    create_code_model(CodeInheritedProperties).schema()
    create_code_model(CodeProperties).schema()


def Nonprofit501c16_test():
    from schorg.Nonprofit501c16 import Nonprofit501c16InheritedProperties
    from schorg.Nonprofit501c16 import Nonprofit501c16Properties
    from schorg.Nonprofit501c16 import Nonprofit501c16AllProperties
    from schorg.Nonprofit501c16 import create_schema_org_model
    from schorg.Nonprofit501c16 import create_nonprofit501c16_model
    from schorg.Nonprofit501c16 import Nonprofit501c16

    a = create_schema_org_model(type_=Nonprofit501c16InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c16Properties)
    c = create_schema_org_model(type_=Nonprofit501c16AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c16.schema()
    create_nonprofit501c16_model(Nonprofit501c16AllProperties).schema()
    create_nonprofit501c16_model(Nonprofit501c16InheritedProperties).schema()
    create_nonprofit501c16_model(Nonprofit501c16Properties).schema()


def SizeSystemMetric_test():
    from schorg.SizeSystemMetric import SizeSystemMetricInheritedProperties
    from schorg.SizeSystemMetric import SizeSystemMetricProperties
    from schorg.SizeSystemMetric import SizeSystemMetricAllProperties
    from schorg.SizeSystemMetric import create_schema_org_model
    from schorg.SizeSystemMetric import create_sizesystemmetric_model
    from schorg.SizeSystemMetric import SizeSystemMetric

    a = create_schema_org_model(type_=SizeSystemMetricInheritedProperties)
    b = create_schema_org_model(type_=SizeSystemMetricProperties)
    c = create_schema_org_model(type_=SizeSystemMetricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SizeSystemMetric.schema()
    create_sizesystemmetric_model(SizeSystemMetricAllProperties).schema()
    create_sizesystemmetric_model(SizeSystemMetricInheritedProperties).schema()
    create_sizesystemmetric_model(SizeSystemMetricProperties).schema()


def ChildCare_test():
    from schorg.ChildCare import ChildCareInheritedProperties
    from schorg.ChildCare import ChildCareProperties
    from schorg.ChildCare import ChildCareAllProperties
    from schorg.ChildCare import create_schema_org_model
    from schorg.ChildCare import create_childcare_model
    from schorg.ChildCare import ChildCare

    a = create_schema_org_model(type_=ChildCareInheritedProperties)
    b = create_schema_org_model(type_=ChildCareProperties)
    c = create_schema_org_model(type_=ChildCareAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ChildCare.schema()
    create_childcare_model(ChildCareAllProperties).schema()
    create_childcare_model(ChildCareInheritedProperties).schema()
    create_childcare_model(ChildCareProperties).schema()


def PropertyValue_test():
    from schorg.PropertyValue import PropertyValueInheritedProperties
    from schorg.PropertyValue import PropertyValueProperties
    from schorg.PropertyValue import PropertyValueAllProperties
    from schorg.PropertyValue import create_schema_org_model
    from schorg.PropertyValue import create_propertyvalue_model
    from schorg.PropertyValue import PropertyValue

    a = create_schema_org_model(type_=PropertyValueInheritedProperties)
    b = create_schema_org_model(type_=PropertyValueProperties)
    c = create_schema_org_model(type_=PropertyValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PropertyValue.schema()
    create_propertyvalue_model(PropertyValueAllProperties).schema()
    create_propertyvalue_model(PropertyValueInheritedProperties).schema()
    create_propertyvalue_model(PropertyValueProperties).schema()


def LocationFeatureSpecification_test():
    from schorg.LocationFeatureSpecification import (
        LocationFeatureSpecificationInheritedProperties,
    )
    from schorg.LocationFeatureSpecification import (
        LocationFeatureSpecificationProperties,
    )
    from schorg.LocationFeatureSpecification import (
        LocationFeatureSpecificationAllProperties,
    )
    from schorg.LocationFeatureSpecification import create_schema_org_model
    from schorg.LocationFeatureSpecification import (
        create_locationfeaturespecification_model,
    )
    from schorg.LocationFeatureSpecification import LocationFeatureSpecification

    a = create_schema_org_model(type_=LocationFeatureSpecificationInheritedProperties)
    b = create_schema_org_model(type_=LocationFeatureSpecificationProperties)
    c = create_schema_org_model(type_=LocationFeatureSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LocationFeatureSpecification.schema()
    create_locationfeaturespecification_model(
        LocationFeatureSpecificationAllProperties
    ).schema()
    create_locationfeaturespecification_model(
        LocationFeatureSpecificationInheritedProperties
    ).schema()
    create_locationfeaturespecification_model(
        LocationFeatureSpecificationProperties
    ).schema()


def RemixAlbum_test():
    from schorg.RemixAlbum import RemixAlbumInheritedProperties
    from schorg.RemixAlbum import RemixAlbumProperties
    from schorg.RemixAlbum import RemixAlbumAllProperties
    from schorg.RemixAlbum import create_schema_org_model
    from schorg.RemixAlbum import create_remixalbum_model
    from schorg.RemixAlbum import RemixAlbum

    a = create_schema_org_model(type_=RemixAlbumInheritedProperties)
    b = create_schema_org_model(type_=RemixAlbumProperties)
    c = create_schema_org_model(type_=RemixAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RemixAlbum.schema()
    create_remixalbum_model(RemixAlbumAllProperties).schema()
    create_remixalbum_model(RemixAlbumInheritedProperties).schema()
    create_remixalbum_model(RemixAlbumProperties).schema()


def Date_test():
    from schorg.Date import DateInheritedProperties
    from schorg.Date import DateProperties
    from schorg.Date import DateAllProperties
    from schorg.Date import create_schema_org_model
    from schorg.Date import create_date_model
    from schorg.Date import Date

    a = create_schema_org_model(type_=DateInheritedProperties)
    b = create_schema_org_model(type_=DateProperties)
    c = create_schema_org_model(type_=DateAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Date.schema()
    create_date_model(DateAllProperties).schema()
    create_date_model(DateInheritedProperties).schema()
    create_date_model(DateProperties).schema()


def DrugPrescriptionStatus_test():
    from schorg.DrugPrescriptionStatus import DrugPrescriptionStatusInheritedProperties
    from schorg.DrugPrescriptionStatus import DrugPrescriptionStatusProperties
    from schorg.DrugPrescriptionStatus import DrugPrescriptionStatusAllProperties
    from schorg.DrugPrescriptionStatus import create_schema_org_model
    from schorg.DrugPrescriptionStatus import create_drugprescriptionstatus_model
    from schorg.DrugPrescriptionStatus import DrugPrescriptionStatus

    a = create_schema_org_model(type_=DrugPrescriptionStatusInheritedProperties)
    b = create_schema_org_model(type_=DrugPrescriptionStatusProperties)
    c = create_schema_org_model(type_=DrugPrescriptionStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugPrescriptionStatus.schema()
    create_drugprescriptionstatus_model(DrugPrescriptionStatusAllProperties).schema()
    create_drugprescriptionstatus_model(
        DrugPrescriptionStatusInheritedProperties
    ).schema()
    create_drugprescriptionstatus_model(DrugPrescriptionStatusProperties).schema()


def OTC_test():
    from schorg.OTC import OTCInheritedProperties
    from schorg.OTC import OTCProperties
    from schorg.OTC import OTCAllProperties
    from schorg.OTC import create_schema_org_model
    from schorg.OTC import create_otc_model
    from schorg.OTC import OTC

    a = create_schema_org_model(type_=OTCInheritedProperties)
    b = create_schema_org_model(type_=OTCProperties)
    c = create_schema_org_model(type_=OTCAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OTC.schema()
    create_otc_model(OTCAllProperties).schema()
    create_otc_model(OTCInheritedProperties).schema()
    create_otc_model(OTCProperties).schema()


def Taxon_test():
    from schorg.Taxon import TaxonInheritedProperties
    from schorg.Taxon import TaxonProperties
    from schorg.Taxon import TaxonAllProperties
    from schorg.Taxon import create_schema_org_model
    from schorg.Taxon import create_taxon_model
    from schorg.Taxon import Taxon

    a = create_schema_org_model(type_=TaxonInheritedProperties)
    b = create_schema_org_model(type_=TaxonProperties)
    c = create_schema_org_model(type_=TaxonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Taxon.schema()
    create_taxon_model(TaxonAllProperties).schema()
    create_taxon_model(TaxonInheritedProperties).schema()
    create_taxon_model(TaxonProperties).schema()


def AccountingService_test():
    from schorg.AccountingService import AccountingServiceInheritedProperties
    from schorg.AccountingService import AccountingServiceProperties
    from schorg.AccountingService import AccountingServiceAllProperties
    from schorg.AccountingService import create_schema_org_model
    from schorg.AccountingService import create_accountingservice_model
    from schorg.AccountingService import AccountingService

    a = create_schema_org_model(type_=AccountingServiceInheritedProperties)
    b = create_schema_org_model(type_=AccountingServiceProperties)
    c = create_schema_org_model(type_=AccountingServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AccountingService.schema()
    create_accountingservice_model(AccountingServiceAllProperties).schema()
    create_accountingservice_model(AccountingServiceInheritedProperties).schema()
    create_accountingservice_model(AccountingServiceProperties).schema()


def EventScheduled_test():
    from schorg.EventScheduled import EventScheduledInheritedProperties
    from schorg.EventScheduled import EventScheduledProperties
    from schorg.EventScheduled import EventScheduledAllProperties
    from schorg.EventScheduled import create_schema_org_model
    from schorg.EventScheduled import create_eventscheduled_model
    from schorg.EventScheduled import EventScheduled

    a = create_schema_org_model(type_=EventScheduledInheritedProperties)
    b = create_schema_org_model(type_=EventScheduledProperties)
    c = create_schema_org_model(type_=EventScheduledAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventScheduled.schema()
    create_eventscheduled_model(EventScheduledAllProperties).schema()
    create_eventscheduled_model(EventScheduledInheritedProperties).schema()
    create_eventscheduled_model(EventScheduledProperties).schema()


def WearableMeasurementSleeve_test():
    from schorg.WearableMeasurementSleeve import (
        WearableMeasurementSleeveInheritedProperties,
    )
    from schorg.WearableMeasurementSleeve import WearableMeasurementSleeveProperties
    from schorg.WearableMeasurementSleeve import WearableMeasurementSleeveAllProperties
    from schorg.WearableMeasurementSleeve import create_schema_org_model
    from schorg.WearableMeasurementSleeve import create_wearablemeasurementsleeve_model
    from schorg.WearableMeasurementSleeve import WearableMeasurementSleeve

    a = create_schema_org_model(type_=WearableMeasurementSleeveInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementSleeveProperties)
    c = create_schema_org_model(type_=WearableMeasurementSleeveAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementSleeve.schema()
    create_wearablemeasurementsleeve_model(
        WearableMeasurementSleeveAllProperties
    ).schema()
    create_wearablemeasurementsleeve_model(
        WearableMeasurementSleeveInheritedProperties
    ).schema()
    create_wearablemeasurementsleeve_model(WearableMeasurementSleeveProperties).schema()


def ListPrice_test():
    from schorg.ListPrice import ListPriceInheritedProperties
    from schorg.ListPrice import ListPriceProperties
    from schorg.ListPrice import ListPriceAllProperties
    from schorg.ListPrice import create_schema_org_model
    from schorg.ListPrice import create_listprice_model
    from schorg.ListPrice import ListPrice

    a = create_schema_org_model(type_=ListPriceInheritedProperties)
    b = create_schema_org_model(type_=ListPriceProperties)
    c = create_schema_org_model(type_=ListPriceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ListPrice.schema()
    create_listprice_model(ListPriceAllProperties).schema()
    create_listprice_model(ListPriceInheritedProperties).schema()
    create_listprice_model(ListPriceProperties).schema()


def WebApplication_test():
    from schorg.WebApplication import WebApplicationInheritedProperties
    from schorg.WebApplication import WebApplicationProperties
    from schorg.WebApplication import WebApplicationAllProperties
    from schorg.WebApplication import create_schema_org_model
    from schorg.WebApplication import create_webapplication_model
    from schorg.WebApplication import WebApplication

    a = create_schema_org_model(type_=WebApplicationInheritedProperties)
    b = create_schema_org_model(type_=WebApplicationProperties)
    c = create_schema_org_model(type_=WebApplicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebApplication.schema()
    create_webapplication_model(WebApplicationAllProperties).schema()
    create_webapplication_model(WebApplicationInheritedProperties).schema()
    create_webapplication_model(WebApplicationProperties).schema()


def Suspended_test():
    from schorg.Suspended import SuspendedInheritedProperties
    from schorg.Suspended import SuspendedProperties
    from schorg.Suspended import SuspendedAllProperties
    from schorg.Suspended import create_schema_org_model
    from schorg.Suspended import create_suspended_model
    from schorg.Suspended import Suspended

    a = create_schema_org_model(type_=SuspendedInheritedProperties)
    b = create_schema_org_model(type_=SuspendedProperties)
    c = create_schema_org_model(type_=SuspendedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Suspended.schema()
    create_suspended_model(SuspendedAllProperties).schema()
    create_suspended_model(SuspendedInheritedProperties).schema()
    create_suspended_model(SuspendedProperties).schema()


def Subscription_test():
    from schorg.Subscription import SubscriptionInheritedProperties
    from schorg.Subscription import SubscriptionProperties
    from schorg.Subscription import SubscriptionAllProperties
    from schorg.Subscription import create_schema_org_model
    from schorg.Subscription import create_subscription_model
    from schorg.Subscription import Subscription

    a = create_schema_org_model(type_=SubscriptionInheritedProperties)
    b = create_schema_org_model(type_=SubscriptionProperties)
    c = create_schema_org_model(type_=SubscriptionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Subscription.schema()
    create_subscription_model(SubscriptionAllProperties).schema()
    create_subscription_model(SubscriptionInheritedProperties).schema()
    create_subscription_model(SubscriptionProperties).schema()


def FreeReturn_test():
    from schorg.FreeReturn import FreeReturnInheritedProperties
    from schorg.FreeReturn import FreeReturnProperties
    from schorg.FreeReturn import FreeReturnAllProperties
    from schorg.FreeReturn import create_schema_org_model
    from schorg.FreeReturn import create_freereturn_model
    from schorg.FreeReturn import FreeReturn

    a = create_schema_org_model(type_=FreeReturnInheritedProperties)
    b = create_schema_org_model(type_=FreeReturnProperties)
    c = create_schema_org_model(type_=FreeReturnAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FreeReturn.schema()
    create_freereturn_model(FreeReturnAllProperties).schema()
    create_freereturn_model(FreeReturnInheritedProperties).schema()
    create_freereturn_model(FreeReturnProperties).schema()


def HowToItem_test():
    from schorg.HowToItem import HowToItemInheritedProperties
    from schorg.HowToItem import HowToItemProperties
    from schorg.HowToItem import HowToItemAllProperties
    from schorg.HowToItem import create_schema_org_model
    from schorg.HowToItem import create_howtoitem_model
    from schorg.HowToItem import HowToItem

    a = create_schema_org_model(type_=HowToItemInheritedProperties)
    b = create_schema_org_model(type_=HowToItemProperties)
    c = create_schema_org_model(type_=HowToItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToItem.schema()
    create_howtoitem_model(HowToItemAllProperties).schema()
    create_howtoitem_model(HowToItemInheritedProperties).schema()
    create_howtoitem_model(HowToItemProperties).schema()


def HowToTool_test():
    from schorg.HowToTool import HowToToolInheritedProperties
    from schorg.HowToTool import HowToToolProperties
    from schorg.HowToTool import HowToToolAllProperties
    from schorg.HowToTool import create_schema_org_model
    from schorg.HowToTool import create_howtotool_model
    from schorg.HowToTool import HowToTool

    a = create_schema_org_model(type_=HowToToolInheritedProperties)
    b = create_schema_org_model(type_=HowToToolProperties)
    c = create_schema_org_model(type_=HowToToolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToTool.schema()
    create_howtotool_model(HowToToolAllProperties).schema()
    create_howtotool_model(HowToToolInheritedProperties).schema()
    create_howtotool_model(HowToToolProperties).schema()


def InvestmentFund_test():
    from schorg.InvestmentFund import InvestmentFundInheritedProperties
    from schorg.InvestmentFund import InvestmentFundProperties
    from schorg.InvestmentFund import InvestmentFundAllProperties
    from schorg.InvestmentFund import create_schema_org_model
    from schorg.InvestmentFund import create_investmentfund_model
    from schorg.InvestmentFund import InvestmentFund

    a = create_schema_org_model(type_=InvestmentFundInheritedProperties)
    b = create_schema_org_model(type_=InvestmentFundProperties)
    c = create_schema_org_model(type_=InvestmentFundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InvestmentFund.schema()
    create_investmentfund_model(InvestmentFundAllProperties).schema()
    create_investmentfund_model(InvestmentFundInheritedProperties).schema()
    create_investmentfund_model(InvestmentFundProperties).schema()


def FailedActionStatus_test():
    from schorg.FailedActionStatus import FailedActionStatusInheritedProperties
    from schorg.FailedActionStatus import FailedActionStatusProperties
    from schorg.FailedActionStatus import FailedActionStatusAllProperties
    from schorg.FailedActionStatus import create_schema_org_model
    from schorg.FailedActionStatus import create_failedactionstatus_model
    from schorg.FailedActionStatus import FailedActionStatus

    a = create_schema_org_model(type_=FailedActionStatusInheritedProperties)
    b = create_schema_org_model(type_=FailedActionStatusProperties)
    c = create_schema_org_model(type_=FailedActionStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FailedActionStatus.schema()
    create_failedactionstatus_model(FailedActionStatusAllProperties).schema()
    create_failedactionstatus_model(FailedActionStatusInheritedProperties).schema()
    create_failedactionstatus_model(FailedActionStatusProperties).schema()


def RealEstateAgent_test():
    from schorg.RealEstateAgent import RealEstateAgentInheritedProperties
    from schorg.RealEstateAgent import RealEstateAgentProperties
    from schorg.RealEstateAgent import RealEstateAgentAllProperties
    from schorg.RealEstateAgent import create_schema_org_model
    from schorg.RealEstateAgent import create_realestateagent_model
    from schorg.RealEstateAgent import RealEstateAgent

    a = create_schema_org_model(type_=RealEstateAgentInheritedProperties)
    b = create_schema_org_model(type_=RealEstateAgentProperties)
    c = create_schema_org_model(type_=RealEstateAgentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RealEstateAgent.schema()
    create_realestateagent_model(RealEstateAgentAllProperties).schema()
    create_realestateagent_model(RealEstateAgentInheritedProperties).schema()
    create_realestateagent_model(RealEstateAgentProperties).schema()


def AdvertiserContentArticle_test():
    from schorg.AdvertiserContentArticle import (
        AdvertiserContentArticleInheritedProperties,
    )
    from schorg.AdvertiserContentArticle import AdvertiserContentArticleProperties
    from schorg.AdvertiserContentArticle import AdvertiserContentArticleAllProperties
    from schorg.AdvertiserContentArticle import create_schema_org_model
    from schorg.AdvertiserContentArticle import create_advertisercontentarticle_model
    from schorg.AdvertiserContentArticle import AdvertiserContentArticle

    a = create_schema_org_model(type_=AdvertiserContentArticleInheritedProperties)
    b = create_schema_org_model(type_=AdvertiserContentArticleProperties)
    c = create_schema_org_model(type_=AdvertiserContentArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AdvertiserContentArticle.schema()
    create_advertisercontentarticle_model(
        AdvertiserContentArticleAllProperties
    ).schema()
    create_advertisercontentarticle_model(
        AdvertiserContentArticleInheritedProperties
    ).schema()
    create_advertisercontentarticle_model(AdvertiserContentArticleProperties).schema()


def Drawing_test():
    from schorg.Drawing import DrawingInheritedProperties
    from schorg.Drawing import DrawingProperties
    from schorg.Drawing import DrawingAllProperties
    from schorg.Drawing import create_schema_org_model
    from schorg.Drawing import create_drawing_model
    from schorg.Drawing import Drawing

    a = create_schema_org_model(type_=DrawingInheritedProperties)
    b = create_schema_org_model(type_=DrawingProperties)
    c = create_schema_org_model(type_=DrawingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Drawing.schema()
    create_drawing_model(DrawingAllProperties).schema()
    create_drawing_model(DrawingInheritedProperties).schema()
    create_drawing_model(DrawingProperties).schema()


def RegisterAction_test():
    from schorg.RegisterAction import RegisterActionInheritedProperties
    from schorg.RegisterAction import RegisterActionProperties
    from schorg.RegisterAction import RegisterActionAllProperties
    from schorg.RegisterAction import create_schema_org_model
    from schorg.RegisterAction import create_registeraction_model
    from schorg.RegisterAction import RegisterAction

    a = create_schema_org_model(type_=RegisterActionInheritedProperties)
    b = create_schema_org_model(type_=RegisterActionProperties)
    c = create_schema_org_model(type_=RegisterActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RegisterAction.schema()
    create_registeraction_model(RegisterActionAllProperties).schema()
    create_registeraction_model(RegisterActionInheritedProperties).schema()
    create_registeraction_model(RegisterActionProperties).schema()


def CommunityHealth_test():
    from schorg.CommunityHealth import CommunityHealthInheritedProperties
    from schorg.CommunityHealth import CommunityHealthProperties
    from schorg.CommunityHealth import CommunityHealthAllProperties
    from schorg.CommunityHealth import create_schema_org_model
    from schorg.CommunityHealth import create_communityhealth_model
    from schorg.CommunityHealth import CommunityHealth

    a = create_schema_org_model(type_=CommunityHealthInheritedProperties)
    b = create_schema_org_model(type_=CommunityHealthProperties)
    c = create_schema_org_model(type_=CommunityHealthAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CommunityHealth.schema()
    create_communityhealth_model(CommunityHealthAllProperties).schema()
    create_communityhealth_model(CommunityHealthInheritedProperties).schema()
    create_communityhealth_model(CommunityHealthProperties).schema()


def LoanOrCredit_test():
    from schorg.LoanOrCredit import LoanOrCreditInheritedProperties
    from schorg.LoanOrCredit import LoanOrCreditProperties
    from schorg.LoanOrCredit import LoanOrCreditAllProperties
    from schorg.LoanOrCredit import create_schema_org_model
    from schorg.LoanOrCredit import create_loanorcredit_model
    from schorg.LoanOrCredit import LoanOrCredit

    a = create_schema_org_model(type_=LoanOrCreditInheritedProperties)
    b = create_schema_org_model(type_=LoanOrCreditProperties)
    c = create_schema_org_model(type_=LoanOrCreditAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LoanOrCredit.schema()
    create_loanorcredit_model(LoanOrCreditAllProperties).schema()
    create_loanorcredit_model(LoanOrCreditInheritedProperties).schema()
    create_loanorcredit_model(LoanOrCreditProperties).schema()


def MortgageLoan_test():
    from schorg.MortgageLoan import MortgageLoanInheritedProperties
    from schorg.MortgageLoan import MortgageLoanProperties
    from schorg.MortgageLoan import MortgageLoanAllProperties
    from schorg.MortgageLoan import create_schema_org_model
    from schorg.MortgageLoan import create_mortgageloan_model
    from schorg.MortgageLoan import MortgageLoan

    a = create_schema_org_model(type_=MortgageLoanInheritedProperties)
    b = create_schema_org_model(type_=MortgageLoanProperties)
    c = create_schema_org_model(type_=MortgageLoanAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MortgageLoan.schema()
    create_mortgageloan_model(MortgageLoanAllProperties).schema()
    create_mortgageloan_model(MortgageLoanInheritedProperties).schema()
    create_mortgageloan_model(MortgageLoanProperties).schema()


def Comment_test():
    from schorg.Comment import CommentInheritedProperties
    from schorg.Comment import CommentProperties
    from schorg.Comment import CommentAllProperties
    from schorg.Comment import create_schema_org_model
    from schorg.Comment import create_comment_model
    from schorg.Comment import Comment

    a = create_schema_org_model(type_=CommentInheritedProperties)
    b = create_schema_org_model(type_=CommentProperties)
    c = create_schema_org_model(type_=CommentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Comment.schema()
    create_comment_model(CommentAllProperties).schema()
    create_comment_model(CommentInheritedProperties).schema()
    create_comment_model(CommentProperties).schema()


def CorrectionComment_test():
    from schorg.CorrectionComment import CorrectionCommentInheritedProperties
    from schorg.CorrectionComment import CorrectionCommentProperties
    from schorg.CorrectionComment import CorrectionCommentAllProperties
    from schorg.CorrectionComment import create_schema_org_model
    from schorg.CorrectionComment import create_correctioncomment_model
    from schorg.CorrectionComment import CorrectionComment

    a = create_schema_org_model(type_=CorrectionCommentInheritedProperties)
    b = create_schema_org_model(type_=CorrectionCommentProperties)
    c = create_schema_org_model(type_=CorrectionCommentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CorrectionComment.schema()
    create_correctioncomment_model(CorrectionCommentAllProperties).schema()
    create_correctioncomment_model(CorrectionCommentInheritedProperties).schema()
    create_correctioncomment_model(CorrectionCommentProperties).schema()


def BusStop_test():
    from schorg.BusStop import BusStopInheritedProperties
    from schorg.BusStop import BusStopProperties
    from schorg.BusStop import BusStopAllProperties
    from schorg.BusStop import create_schema_org_model
    from schorg.BusStop import create_busstop_model
    from schorg.BusStop import BusStop

    a = create_schema_org_model(type_=BusStopInheritedProperties)
    b = create_schema_org_model(type_=BusStopProperties)
    c = create_schema_org_model(type_=BusStopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusStop.schema()
    create_busstop_model(BusStopAllProperties).schema()
    create_busstop_model(BusStopInheritedProperties).schema()
    create_busstop_model(BusStopProperties).schema()


def OfficeEquipmentStore_test():
    from schorg.OfficeEquipmentStore import OfficeEquipmentStoreInheritedProperties
    from schorg.OfficeEquipmentStore import OfficeEquipmentStoreProperties
    from schorg.OfficeEquipmentStore import OfficeEquipmentStoreAllProperties
    from schorg.OfficeEquipmentStore import create_schema_org_model
    from schorg.OfficeEquipmentStore import create_officeequipmentstore_model
    from schorg.OfficeEquipmentStore import OfficeEquipmentStore

    a = create_schema_org_model(type_=OfficeEquipmentStoreInheritedProperties)
    b = create_schema_org_model(type_=OfficeEquipmentStoreProperties)
    c = create_schema_org_model(type_=OfficeEquipmentStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfficeEquipmentStore.schema()
    create_officeequipmentstore_model(OfficeEquipmentStoreAllProperties).schema()
    create_officeequipmentstore_model(OfficeEquipmentStoreInheritedProperties).schema()
    create_officeequipmentstore_model(OfficeEquipmentStoreProperties).schema()


def MisconceptionsHealthAspect_test():
    from schorg.MisconceptionsHealthAspect import (
        MisconceptionsHealthAspectInheritedProperties,
    )
    from schorg.MisconceptionsHealthAspect import MisconceptionsHealthAspectProperties
    from schorg.MisconceptionsHealthAspect import (
        MisconceptionsHealthAspectAllProperties,
    )
    from schorg.MisconceptionsHealthAspect import create_schema_org_model
    from schorg.MisconceptionsHealthAspect import (
        create_misconceptionshealthaspect_model,
    )
    from schorg.MisconceptionsHealthAspect import MisconceptionsHealthAspect

    a = create_schema_org_model(type_=MisconceptionsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=MisconceptionsHealthAspectProperties)
    c = create_schema_org_model(type_=MisconceptionsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MisconceptionsHealthAspect.schema()
    create_misconceptionshealthaspect_model(
        MisconceptionsHealthAspectAllProperties
    ).schema()
    create_misconceptionshealthaspect_model(
        MisconceptionsHealthAspectInheritedProperties
    ).schema()
    create_misconceptionshealthaspect_model(
        MisconceptionsHealthAspectProperties
    ).schema()


def WearableMeasurementHeight_test():
    from schorg.WearableMeasurementHeight import (
        WearableMeasurementHeightInheritedProperties,
    )
    from schorg.WearableMeasurementHeight import WearableMeasurementHeightProperties
    from schorg.WearableMeasurementHeight import WearableMeasurementHeightAllProperties
    from schorg.WearableMeasurementHeight import create_schema_org_model
    from schorg.WearableMeasurementHeight import create_wearablemeasurementheight_model
    from schorg.WearableMeasurementHeight import WearableMeasurementHeight

    a = create_schema_org_model(type_=WearableMeasurementHeightInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementHeightProperties)
    c = create_schema_org_model(type_=WearableMeasurementHeightAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementHeight.schema()
    create_wearablemeasurementheight_model(
        WearableMeasurementHeightAllProperties
    ).schema()
    create_wearablemeasurementheight_model(
        WearableMeasurementHeightInheritedProperties
    ).schema()
    create_wearablemeasurementheight_model(WearableMeasurementHeightProperties).schema()


def PrependAction_test():
    from schorg.PrependAction import PrependActionInheritedProperties
    from schorg.PrependAction import PrependActionProperties
    from schorg.PrependAction import PrependActionAllProperties
    from schorg.PrependAction import create_schema_org_model
    from schorg.PrependAction import create_prependaction_model
    from schorg.PrependAction import PrependAction

    a = create_schema_org_model(type_=PrependActionInheritedProperties)
    b = create_schema_org_model(type_=PrependActionProperties)
    c = create_schema_org_model(type_=PrependActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PrependAction.schema()
    create_prependaction_model(PrependActionAllProperties).schema()
    create_prependaction_model(PrependActionInheritedProperties).schema()
    create_prependaction_model(PrependActionProperties).schema()


def Appearance_test():
    from schorg.Appearance import AppearanceInheritedProperties
    from schorg.Appearance import AppearanceProperties
    from schorg.Appearance import AppearanceAllProperties
    from schorg.Appearance import create_schema_org_model
    from schorg.Appearance import create_appearance_model
    from schorg.Appearance import Appearance

    a = create_schema_org_model(type_=AppearanceInheritedProperties)
    b = create_schema_org_model(type_=AppearanceProperties)
    c = create_schema_org_model(type_=AppearanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Appearance.schema()
    create_appearance_model(AppearanceAllProperties).schema()
    create_appearance_model(AppearanceInheritedProperties).schema()
    create_appearance_model(AppearanceProperties).schema()


def Resort_test():
    from schorg.Resort import ResortInheritedProperties
    from schorg.Resort import ResortProperties
    from schorg.Resort import ResortAllProperties
    from schorg.Resort import create_schema_org_model
    from schorg.Resort import create_resort_model
    from schorg.Resort import Resort

    a = create_schema_org_model(type_=ResortInheritedProperties)
    b = create_schema_org_model(type_=ResortProperties)
    c = create_schema_org_model(type_=ResortAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Resort.schema()
    create_resort_model(ResortAllProperties).schema()
    create_resort_model(ResortInheritedProperties).schema()
    create_resort_model(ResortProperties).schema()


def SkiResort_test():
    from schorg.SkiResort import SkiResortInheritedProperties
    from schorg.SkiResort import SkiResortProperties
    from schorg.SkiResort import SkiResortAllProperties
    from schorg.SkiResort import create_schema_org_model
    from schorg.SkiResort import create_skiresort_model
    from schorg.SkiResort import SkiResort

    a = create_schema_org_model(type_=SkiResortInheritedProperties)
    b = create_schema_org_model(type_=SkiResortProperties)
    c = create_schema_org_model(type_=SkiResortAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SkiResort.schema()
    create_skiresort_model(SkiResortAllProperties).schema()
    create_skiresort_model(SkiResortInheritedProperties).schema()
    create_skiresort_model(SkiResortProperties).schema()


def MedicalTrial_test():
    from schorg.MedicalTrial import MedicalTrialInheritedProperties
    from schorg.MedicalTrial import MedicalTrialProperties
    from schorg.MedicalTrial import MedicalTrialAllProperties
    from schorg.MedicalTrial import create_schema_org_model
    from schorg.MedicalTrial import create_medicaltrial_model
    from schorg.MedicalTrial import MedicalTrial

    a = create_schema_org_model(type_=MedicalTrialInheritedProperties)
    b = create_schema_org_model(type_=MedicalTrialProperties)
    c = create_schema_org_model(type_=MedicalTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalTrial.schema()
    create_medicaltrial_model(MedicalTrialAllProperties).schema()
    create_medicaltrial_model(MedicalTrialInheritedProperties).schema()
    create_medicaltrial_model(MedicalTrialProperties).schema()


def Nonprofit501c7_test():
    from schorg.Nonprofit501c7 import Nonprofit501c7InheritedProperties
    from schorg.Nonprofit501c7 import Nonprofit501c7Properties
    from schorg.Nonprofit501c7 import Nonprofit501c7AllProperties
    from schorg.Nonprofit501c7 import create_schema_org_model
    from schorg.Nonprofit501c7 import create_nonprofit501c7_model
    from schorg.Nonprofit501c7 import Nonprofit501c7

    a = create_schema_org_model(type_=Nonprofit501c7InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c7Properties)
    c = create_schema_org_model(type_=Nonprofit501c7AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c7.schema()
    create_nonprofit501c7_model(Nonprofit501c7AllProperties).schema()
    create_nonprofit501c7_model(Nonprofit501c7InheritedProperties).schema()
    create_nonprofit501c7_model(Nonprofit501c7Properties).schema()


def DanceGroup_test():
    from schorg.DanceGroup import DanceGroupInheritedProperties
    from schorg.DanceGroup import DanceGroupProperties
    from schorg.DanceGroup import DanceGroupAllProperties
    from schorg.DanceGroup import create_schema_org_model
    from schorg.DanceGroup import create_dancegroup_model
    from schorg.DanceGroup import DanceGroup

    a = create_schema_org_model(type_=DanceGroupInheritedProperties)
    b = create_schema_org_model(type_=DanceGroupProperties)
    c = create_schema_org_model(type_=DanceGroupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DanceGroup.schema()
    create_dancegroup_model(DanceGroupAllProperties).schema()
    create_dancegroup_model(DanceGroupInheritedProperties).schema()
    create_dancegroup_model(DanceGroupProperties).schema()


def Photograph_test():
    from schorg.Photograph import PhotographInheritedProperties
    from schorg.Photograph import PhotographProperties
    from schorg.Photograph import PhotographAllProperties
    from schorg.Photograph import create_schema_org_model
    from schorg.Photograph import create_photograph_model
    from schorg.Photograph import Photograph

    a = create_schema_org_model(type_=PhotographInheritedProperties)
    b = create_schema_org_model(type_=PhotographProperties)
    c = create_schema_org_model(type_=PhotographAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Photograph.schema()
    create_photograph_model(PhotographAllProperties).schema()
    create_photograph_model(PhotographInheritedProperties).schema()
    create_photograph_model(PhotographProperties).schema()


def HousePainter_test():
    from schorg.HousePainter import HousePainterInheritedProperties
    from schorg.HousePainter import HousePainterProperties
    from schorg.HousePainter import HousePainterAllProperties
    from schorg.HousePainter import create_schema_org_model
    from schorg.HousePainter import create_housepainter_model
    from schorg.HousePainter import HousePainter

    a = create_schema_org_model(type_=HousePainterInheritedProperties)
    b = create_schema_org_model(type_=HousePainterProperties)
    c = create_schema_org_model(type_=HousePainterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HousePainter.schema()
    create_housepainter_model(HousePainterAllProperties).schema()
    create_housepainter_model(HousePainterInheritedProperties).schema()
    create_housepainter_model(HousePainterProperties).schema()


def OrderProblem_test():
    from schorg.OrderProblem import OrderProblemInheritedProperties
    from schorg.OrderProblem import OrderProblemProperties
    from schorg.OrderProblem import OrderProblemAllProperties
    from schorg.OrderProblem import create_schema_org_model
    from schorg.OrderProblem import create_orderproblem_model
    from schorg.OrderProblem import OrderProblem

    a = create_schema_org_model(type_=OrderProblemInheritedProperties)
    b = create_schema_org_model(type_=OrderProblemProperties)
    c = create_schema_org_model(type_=OrderProblemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderProblem.schema()
    create_orderproblem_model(OrderProblemAllProperties).schema()
    create_orderproblem_model(OrderProblemInheritedProperties).schema()
    create_orderproblem_model(OrderProblemProperties).schema()


def Nonprofit501a_test():
    from schorg.Nonprofit501a import Nonprofit501aInheritedProperties
    from schorg.Nonprofit501a import Nonprofit501aProperties
    from schorg.Nonprofit501a import Nonprofit501aAllProperties
    from schorg.Nonprofit501a import create_schema_org_model
    from schorg.Nonprofit501a import create_nonprofit501a_model
    from schorg.Nonprofit501a import Nonprofit501a

    a = create_schema_org_model(type_=Nonprofit501aInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501aProperties)
    c = create_schema_org_model(type_=Nonprofit501aAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501a.schema()
    create_nonprofit501a_model(Nonprofit501aAllProperties).schema()
    create_nonprofit501a_model(Nonprofit501aInheritedProperties).schema()
    create_nonprofit501a_model(Nonprofit501aProperties).schema()


def DiscussionForumPosting_test():
    from schorg.DiscussionForumPosting import DiscussionForumPostingInheritedProperties
    from schorg.DiscussionForumPosting import DiscussionForumPostingProperties
    from schorg.DiscussionForumPosting import DiscussionForumPostingAllProperties
    from schorg.DiscussionForumPosting import create_schema_org_model
    from schorg.DiscussionForumPosting import create_discussionforumposting_model
    from schorg.DiscussionForumPosting import DiscussionForumPosting

    a = create_schema_org_model(type_=DiscussionForumPostingInheritedProperties)
    b = create_schema_org_model(type_=DiscussionForumPostingProperties)
    c = create_schema_org_model(type_=DiscussionForumPostingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DiscussionForumPosting.schema()
    create_discussionforumposting_model(DiscussionForumPostingAllProperties).schema()
    create_discussionforumposting_model(
        DiscussionForumPostingInheritedProperties
    ).schema()
    create_discussionforumposting_model(DiscussionForumPostingProperties).schema()


def CohortStudy_test():
    from schorg.CohortStudy import CohortStudyInheritedProperties
    from schorg.CohortStudy import CohortStudyProperties
    from schorg.CohortStudy import CohortStudyAllProperties
    from schorg.CohortStudy import create_schema_org_model
    from schorg.CohortStudy import create_cohortstudy_model
    from schorg.CohortStudy import CohortStudy

    a = create_schema_org_model(type_=CohortStudyInheritedProperties)
    b = create_schema_org_model(type_=CohortStudyProperties)
    c = create_schema_org_model(type_=CohortStudyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CohortStudy.schema()
    create_cohortstudy_model(CohortStudyAllProperties).schema()
    create_cohortstudy_model(CohortStudyInheritedProperties).schema()
    create_cohortstudy_model(CohortStudyProperties).schema()


def Wednesday_test():
    from schorg.Wednesday import WednesdayInheritedProperties
    from schorg.Wednesday import WednesdayProperties
    from schorg.Wednesday import WednesdayAllProperties
    from schorg.Wednesday import create_schema_org_model
    from schorg.Wednesday import create_wednesday_model
    from schorg.Wednesday import Wednesday

    a = create_schema_org_model(type_=WednesdayInheritedProperties)
    b = create_schema_org_model(type_=WednesdayProperties)
    c = create_schema_org_model(type_=WednesdayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Wednesday.schema()
    create_wednesday_model(WednesdayAllProperties).schema()
    create_wednesday_model(WednesdayInheritedProperties).schema()
    create_wednesday_model(WednesdayProperties).schema()


def UnclassifiedAdultConsideration_test():
    from schorg.UnclassifiedAdultConsideration import (
        UnclassifiedAdultConsiderationInheritedProperties,
    )
    from schorg.UnclassifiedAdultConsideration import (
        UnclassifiedAdultConsiderationProperties,
    )
    from schorg.UnclassifiedAdultConsideration import (
        UnclassifiedAdultConsiderationAllProperties,
    )
    from schorg.UnclassifiedAdultConsideration import create_schema_org_model
    from schorg.UnclassifiedAdultConsideration import (
        create_unclassifiedadultconsideration_model,
    )
    from schorg.UnclassifiedAdultConsideration import UnclassifiedAdultConsideration

    a = create_schema_org_model(type_=UnclassifiedAdultConsiderationInheritedProperties)
    b = create_schema_org_model(type_=UnclassifiedAdultConsiderationProperties)
    c = create_schema_org_model(type_=UnclassifiedAdultConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnclassifiedAdultConsideration.schema()
    create_unclassifiedadultconsideration_model(
        UnclassifiedAdultConsiderationAllProperties
    ).schema()
    create_unclassifiedadultconsideration_model(
        UnclassifiedAdultConsiderationInheritedProperties
    ).schema()
    create_unclassifiedadultconsideration_model(
        UnclassifiedAdultConsiderationProperties
    ).schema()


def TransitMap_test():
    from schorg.TransitMap import TransitMapInheritedProperties
    from schorg.TransitMap import TransitMapProperties
    from schorg.TransitMap import TransitMapAllProperties
    from schorg.TransitMap import create_schema_org_model
    from schorg.TransitMap import create_transitmap_model
    from schorg.TransitMap import TransitMap

    a = create_schema_org_model(type_=TransitMapInheritedProperties)
    b = create_schema_org_model(type_=TransitMapProperties)
    c = create_schema_org_model(type_=TransitMapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TransitMap.schema()
    create_transitmap_model(TransitMapAllProperties).schema()
    create_transitmap_model(TransitMapInheritedProperties).schema()
    create_transitmap_model(TransitMapProperties).schema()


def RealEstateListing_test():
    from schorg.RealEstateListing import RealEstateListingInheritedProperties
    from schorg.RealEstateListing import RealEstateListingProperties
    from schorg.RealEstateListing import RealEstateListingAllProperties
    from schorg.RealEstateListing import create_schema_org_model
    from schorg.RealEstateListing import create_realestatelisting_model
    from schorg.RealEstateListing import RealEstateListing

    a = create_schema_org_model(type_=RealEstateListingInheritedProperties)
    b = create_schema_org_model(type_=RealEstateListingProperties)
    c = create_schema_org_model(type_=RealEstateListingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RealEstateListing.schema()
    create_realestatelisting_model(RealEstateListingAllProperties).schema()
    create_realestatelisting_model(RealEstateListingInheritedProperties).schema()
    create_realestatelisting_model(RealEstateListingProperties).schema()


def SellAction_test():
    from schorg.SellAction import SellActionInheritedProperties
    from schorg.SellAction import SellActionProperties
    from schorg.SellAction import SellActionAllProperties
    from schorg.SellAction import create_schema_org_model
    from schorg.SellAction import create_sellaction_model
    from schorg.SellAction import SellAction

    a = create_schema_org_model(type_=SellActionInheritedProperties)
    b = create_schema_org_model(type_=SellActionProperties)
    c = create_schema_org_model(type_=SellActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SellAction.schema()
    create_sellaction_model(SellActionAllProperties).schema()
    create_sellaction_model(SellActionInheritedProperties).schema()
    create_sellaction_model(SellActionProperties).schema()


def ShareAction_test():
    from schorg.ShareAction import ShareActionInheritedProperties
    from schorg.ShareAction import ShareActionProperties
    from schorg.ShareAction import ShareActionAllProperties
    from schorg.ShareAction import create_schema_org_model
    from schorg.ShareAction import create_shareaction_model
    from schorg.ShareAction import ShareAction

    a = create_schema_org_model(type_=ShareActionInheritedProperties)
    b = create_schema_org_model(type_=ShareActionProperties)
    c = create_schema_org_model(type_=ShareActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShareAction.schema()
    create_shareaction_model(ShareActionAllProperties).schema()
    create_shareaction_model(ShareActionInheritedProperties).schema()
    create_shareaction_model(ShareActionProperties).schema()


def Bakery_test():
    from schorg.Bakery import BakeryInheritedProperties
    from schorg.Bakery import BakeryProperties
    from schorg.Bakery import BakeryAllProperties
    from schorg.Bakery import create_schema_org_model
    from schorg.Bakery import create_bakery_model
    from schorg.Bakery import Bakery

    a = create_schema_org_model(type_=BakeryInheritedProperties)
    b = create_schema_org_model(type_=BakeryProperties)
    c = create_schema_org_model(type_=BakeryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Bakery.schema()
    create_bakery_model(BakeryAllProperties).schema()
    create_bakery_model(BakeryInheritedProperties).schema()
    create_bakery_model(BakeryProperties).schema()


def WholesaleStore_test():
    from schorg.WholesaleStore import WholesaleStoreInheritedProperties
    from schorg.WholesaleStore import WholesaleStoreProperties
    from schorg.WholesaleStore import WholesaleStoreAllProperties
    from schorg.WholesaleStore import create_schema_org_model
    from schorg.WholesaleStore import create_wholesalestore_model
    from schorg.WholesaleStore import WholesaleStore

    a = create_schema_org_model(type_=WholesaleStoreInheritedProperties)
    b = create_schema_org_model(type_=WholesaleStoreProperties)
    c = create_schema_org_model(type_=WholesaleStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WholesaleStore.schema()
    create_wholesalestore_model(WholesaleStoreAllProperties).schema()
    create_wholesalestore_model(WholesaleStoreInheritedProperties).schema()
    create_wholesalestore_model(WholesaleStoreProperties).schema()


def AllocateAction_test():
    from schorg.AllocateAction import AllocateActionInheritedProperties
    from schorg.AllocateAction import AllocateActionProperties
    from schorg.AllocateAction import AllocateActionAllProperties
    from schorg.AllocateAction import create_schema_org_model
    from schorg.AllocateAction import create_allocateaction_model
    from schorg.AllocateAction import AllocateAction

    a = create_schema_org_model(type_=AllocateActionInheritedProperties)
    b = create_schema_org_model(type_=AllocateActionProperties)
    c = create_schema_org_model(type_=AllocateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AllocateAction.schema()
    create_allocateaction_model(AllocateActionAllProperties).schema()
    create_allocateaction_model(AllocateActionInheritedProperties).schema()
    create_allocateaction_model(AllocateActionProperties).schema()


def RejectAction_test():
    from schorg.RejectAction import RejectActionInheritedProperties
    from schorg.RejectAction import RejectActionProperties
    from schorg.RejectAction import RejectActionAllProperties
    from schorg.RejectAction import create_schema_org_model
    from schorg.RejectAction import create_rejectaction_model
    from schorg.RejectAction import RejectAction

    a = create_schema_org_model(type_=RejectActionInheritedProperties)
    b = create_schema_org_model(type_=RejectActionProperties)
    c = create_schema_org_model(type_=RejectActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RejectAction.schema()
    create_rejectaction_model(RejectActionAllProperties).schema()
    create_rejectaction_model(RejectActionInheritedProperties).schema()
    create_rejectaction_model(RejectActionProperties).schema()


def WarrantyScope_test():
    from schorg.WarrantyScope import WarrantyScopeInheritedProperties
    from schorg.WarrantyScope import WarrantyScopeProperties
    from schorg.WarrantyScope import WarrantyScopeAllProperties
    from schorg.WarrantyScope import create_schema_org_model
    from schorg.WarrantyScope import create_warrantyscope_model
    from schorg.WarrantyScope import WarrantyScope

    a = create_schema_org_model(type_=WarrantyScopeInheritedProperties)
    b = create_schema_org_model(type_=WarrantyScopeProperties)
    c = create_schema_org_model(type_=WarrantyScopeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WarrantyScope.schema()
    create_warrantyscope_model(WarrantyScopeAllProperties).schema()
    create_warrantyscope_model(WarrantyScopeInheritedProperties).schema()
    create_warrantyscope_model(WarrantyScopeProperties).schema()


def SpeakableSpecification_test():
    from schorg.SpeakableSpecification import SpeakableSpecificationInheritedProperties
    from schorg.SpeakableSpecification import SpeakableSpecificationProperties
    from schorg.SpeakableSpecification import SpeakableSpecificationAllProperties
    from schorg.SpeakableSpecification import create_schema_org_model
    from schorg.SpeakableSpecification import create_speakablespecification_model
    from schorg.SpeakableSpecification import SpeakableSpecification

    a = create_schema_org_model(type_=SpeakableSpecificationInheritedProperties)
    b = create_schema_org_model(type_=SpeakableSpecificationProperties)
    c = create_schema_org_model(type_=SpeakableSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SpeakableSpecification.schema()
    create_speakablespecification_model(SpeakableSpecificationAllProperties).schema()
    create_speakablespecification_model(
        SpeakableSpecificationInheritedProperties
    ).schema()
    create_speakablespecification_model(SpeakableSpecificationProperties).schema()


def DepartmentStore_test():
    from schorg.DepartmentStore import DepartmentStoreInheritedProperties
    from schorg.DepartmentStore import DepartmentStoreProperties
    from schorg.DepartmentStore import DepartmentStoreAllProperties
    from schorg.DepartmentStore import create_schema_org_model
    from schorg.DepartmentStore import create_departmentstore_model
    from schorg.DepartmentStore import DepartmentStore

    a = create_schema_org_model(type_=DepartmentStoreInheritedProperties)
    b = create_schema_org_model(type_=DepartmentStoreProperties)
    c = create_schema_org_model(type_=DepartmentStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DepartmentStore.schema()
    create_departmentstore_model(DepartmentStoreAllProperties).schema()
    create_departmentstore_model(DepartmentStoreInheritedProperties).schema()
    create_departmentstore_model(DepartmentStoreProperties).schema()


def GasStation_test():
    from schorg.GasStation import GasStationInheritedProperties
    from schorg.GasStation import GasStationProperties
    from schorg.GasStation import GasStationAllProperties
    from schorg.GasStation import create_schema_org_model
    from schorg.GasStation import create_gasstation_model
    from schorg.GasStation import GasStation

    a = create_schema_org_model(type_=GasStationInheritedProperties)
    b = create_schema_org_model(type_=GasStationProperties)
    c = create_schema_org_model(type_=GasStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GasStation.schema()
    create_gasstation_model(GasStationAllProperties).schema()
    create_gasstation_model(GasStationInheritedProperties).schema()
    create_gasstation_model(GasStationProperties).schema()


def MotorcycleDealer_test():
    from schorg.MotorcycleDealer import MotorcycleDealerInheritedProperties
    from schorg.MotorcycleDealer import MotorcycleDealerProperties
    from schorg.MotorcycleDealer import MotorcycleDealerAllProperties
    from schorg.MotorcycleDealer import create_schema_org_model
    from schorg.MotorcycleDealer import create_motorcycledealer_model
    from schorg.MotorcycleDealer import MotorcycleDealer

    a = create_schema_org_model(type_=MotorcycleDealerInheritedProperties)
    b = create_schema_org_model(type_=MotorcycleDealerProperties)
    c = create_schema_org_model(type_=MotorcycleDealerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MotorcycleDealer.schema()
    create_motorcycledealer_model(MotorcycleDealerAllProperties).schema()
    create_motorcycledealer_model(MotorcycleDealerInheritedProperties).schema()
    create_motorcycledealer_model(MotorcycleDealerProperties).schema()


def OfferCatalog_test():
    from schorg.OfferCatalog import OfferCatalogInheritedProperties
    from schorg.OfferCatalog import OfferCatalogProperties
    from schorg.OfferCatalog import OfferCatalogAllProperties
    from schorg.OfferCatalog import create_schema_org_model
    from schorg.OfferCatalog import create_offercatalog_model
    from schorg.OfferCatalog import OfferCatalog

    a = create_schema_org_model(type_=OfferCatalogInheritedProperties)
    b = create_schema_org_model(type_=OfferCatalogProperties)
    c = create_schema_org_model(type_=OfferCatalogAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfferCatalog.schema()
    create_offercatalog_model(OfferCatalogAllProperties).schema()
    create_offercatalog_model(OfferCatalogInheritedProperties).schema()
    create_offercatalog_model(OfferCatalogProperties).schema()


def GeneralContractor_test():
    from schorg.GeneralContractor import GeneralContractorInheritedProperties
    from schorg.GeneralContractor import GeneralContractorProperties
    from schorg.GeneralContractor import GeneralContractorAllProperties
    from schorg.GeneralContractor import create_schema_org_model
    from schorg.GeneralContractor import create_generalcontractor_model
    from schorg.GeneralContractor import GeneralContractor

    a = create_schema_org_model(type_=GeneralContractorInheritedProperties)
    b = create_schema_org_model(type_=GeneralContractorProperties)
    c = create_schema_org_model(type_=GeneralContractorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GeneralContractor.schema()
    create_generalcontractor_model(GeneralContractorAllProperties).schema()
    create_generalcontractor_model(GeneralContractorInheritedProperties).schema()
    create_generalcontractor_model(GeneralContractorProperties).schema()


def Online_test():
    from schorg.Online import OnlineInheritedProperties
    from schorg.Online import OnlineProperties
    from schorg.Online import OnlineAllProperties
    from schorg.Online import create_schema_org_model
    from schorg.Online import create_online_model
    from schorg.Online import Online

    a = create_schema_org_model(type_=OnlineInheritedProperties)
    b = create_schema_org_model(type_=OnlineProperties)
    c = create_schema_org_model(type_=OnlineAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Online.schema()
    create_online_model(OnlineAllProperties).schema()
    create_online_model(OnlineInheritedProperties).schema()
    create_online_model(OnlineProperties).schema()


def Observation_test():
    from schorg.Observation import ObservationInheritedProperties
    from schorg.Observation import ObservationProperties
    from schorg.Observation import ObservationAllProperties
    from schorg.Observation import create_schema_org_model
    from schorg.Observation import create_observation_model
    from schorg.Observation import Observation

    a = create_schema_org_model(type_=ObservationInheritedProperties)
    b = create_schema_org_model(type_=ObservationProperties)
    c = create_schema_org_model(type_=ObservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Observation.schema()
    create_observation_model(ObservationAllProperties).schema()
    create_observation_model(ObservationInheritedProperties).schema()
    create_observation_model(ObservationProperties).schema()


def DefinedTerm_test():
    from schorg.DefinedTerm import DefinedTermInheritedProperties
    from schorg.DefinedTerm import DefinedTermProperties
    from schorg.DefinedTerm import DefinedTermAllProperties
    from schorg.DefinedTerm import create_schema_org_model
    from schorg.DefinedTerm import create_definedterm_model
    from schorg.DefinedTerm import DefinedTerm

    a = create_schema_org_model(type_=DefinedTermInheritedProperties)
    b = create_schema_org_model(type_=DefinedTermProperties)
    c = create_schema_org_model(type_=DefinedTermAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DefinedTerm.schema()
    create_definedterm_model(DefinedTermAllProperties).schema()
    create_definedterm_model(DefinedTermInheritedProperties).schema()
    create_definedterm_model(DefinedTermProperties).schema()


def CategoryCode_test():
    from schorg.CategoryCode import CategoryCodeInheritedProperties
    from schorg.CategoryCode import CategoryCodeProperties
    from schorg.CategoryCode import CategoryCodeAllProperties
    from schorg.CategoryCode import create_schema_org_model
    from schorg.CategoryCode import create_categorycode_model
    from schorg.CategoryCode import CategoryCode

    a = create_schema_org_model(type_=CategoryCodeInheritedProperties)
    b = create_schema_org_model(type_=CategoryCodeProperties)
    c = create_schema_org_model(type_=CategoryCodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CategoryCode.schema()
    create_categorycode_model(CategoryCodeAllProperties).schema()
    create_categorycode_model(CategoryCodeInheritedProperties).schema()
    create_categorycode_model(CategoryCodeProperties).schema()


def DrinkAction_test():
    from schorg.DrinkAction import DrinkActionInheritedProperties
    from schorg.DrinkAction import DrinkActionProperties
    from schorg.DrinkAction import DrinkActionAllProperties
    from schorg.DrinkAction import create_schema_org_model
    from schorg.DrinkAction import create_drinkaction_model
    from schorg.DrinkAction import DrinkAction

    a = create_schema_org_model(type_=DrinkActionInheritedProperties)
    b = create_schema_org_model(type_=DrinkActionProperties)
    c = create_schema_org_model(type_=DrinkActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrinkAction.schema()
    create_drinkaction_model(DrinkActionAllProperties).schema()
    create_drinkaction_model(DrinkActionInheritedProperties).schema()
    create_drinkaction_model(DrinkActionProperties).schema()


def Nonprofit501c28_test():
    from schorg.Nonprofit501c28 import Nonprofit501c28InheritedProperties
    from schorg.Nonprofit501c28 import Nonprofit501c28Properties
    from schorg.Nonprofit501c28 import Nonprofit501c28AllProperties
    from schorg.Nonprofit501c28 import create_schema_org_model
    from schorg.Nonprofit501c28 import create_nonprofit501c28_model
    from schorg.Nonprofit501c28 import Nonprofit501c28

    a = create_schema_org_model(type_=Nonprofit501c28InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c28Properties)
    c = create_schema_org_model(type_=Nonprofit501c28AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c28.schema()
    create_nonprofit501c28_model(Nonprofit501c28AllProperties).schema()
    create_nonprofit501c28_model(Nonprofit501c28InheritedProperties).schema()
    create_nonprofit501c28_model(Nonprofit501c28Properties).schema()


def Report_test():
    from schorg.Report import ReportInheritedProperties
    from schorg.Report import ReportProperties
    from schorg.Report import ReportAllProperties
    from schorg.Report import create_schema_org_model
    from schorg.Report import create_report_model
    from schorg.Report import Report

    a = create_schema_org_model(type_=ReportInheritedProperties)
    b = create_schema_org_model(type_=ReportProperties)
    c = create_schema_org_model(type_=ReportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Report.schema()
    create_report_model(ReportAllProperties).schema()
    create_report_model(ReportInheritedProperties).schema()
    create_report_model(ReportProperties).schema()


def OriginalShippingFees_test():
    from schorg.OriginalShippingFees import OriginalShippingFeesInheritedProperties
    from schorg.OriginalShippingFees import OriginalShippingFeesProperties
    from schorg.OriginalShippingFees import OriginalShippingFeesAllProperties
    from schorg.OriginalShippingFees import create_schema_org_model
    from schorg.OriginalShippingFees import create_originalshippingfees_model
    from schorg.OriginalShippingFees import OriginalShippingFees

    a = create_schema_org_model(type_=OriginalShippingFeesInheritedProperties)
    b = create_schema_org_model(type_=OriginalShippingFeesProperties)
    c = create_schema_org_model(type_=OriginalShippingFeesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OriginalShippingFees.schema()
    create_originalshippingfees_model(OriginalShippingFeesAllProperties).schema()
    create_originalshippingfees_model(OriginalShippingFeesInheritedProperties).schema()
    create_originalshippingfees_model(OriginalShippingFeesProperties).schema()


def DaySpa_test():
    from schorg.DaySpa import DaySpaInheritedProperties
    from schorg.DaySpa import DaySpaProperties
    from schorg.DaySpa import DaySpaAllProperties
    from schorg.DaySpa import create_schema_org_model
    from schorg.DaySpa import create_dayspa_model
    from schorg.DaySpa import DaySpa

    a = create_schema_org_model(type_=DaySpaInheritedProperties)
    b = create_schema_org_model(type_=DaySpaProperties)
    c = create_schema_org_model(type_=DaySpaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DaySpa.schema()
    create_dayspa_model(DaySpaAllProperties).schema()
    create_dayspa_model(DaySpaInheritedProperties).schema()
    create_dayspa_model(DaySpaProperties).schema()


def Geriatric_test():
    from schorg.Geriatric import GeriatricInheritedProperties
    from schorg.Geriatric import GeriatricProperties
    from schorg.Geriatric import GeriatricAllProperties
    from schorg.Geriatric import create_schema_org_model
    from schorg.Geriatric import create_geriatric_model
    from schorg.Geriatric import Geriatric

    a = create_schema_org_model(type_=GeriatricInheritedProperties)
    b = create_schema_org_model(type_=GeriatricProperties)
    c = create_schema_org_model(type_=GeriatricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Geriatric.schema()
    create_geriatric_model(GeriatricAllProperties).schema()
    create_geriatric_model(GeriatricInheritedProperties).schema()
    create_geriatric_model(GeriatricProperties).schema()


def AppendAction_test():
    from schorg.AppendAction import AppendActionInheritedProperties
    from schorg.AppendAction import AppendActionProperties
    from schorg.AppendAction import AppendActionAllProperties
    from schorg.AppendAction import create_schema_org_model
    from schorg.AppendAction import create_appendaction_model
    from schorg.AppendAction import AppendAction

    a = create_schema_org_model(type_=AppendActionInheritedProperties)
    b = create_schema_org_model(type_=AppendActionProperties)
    c = create_schema_org_model(type_=AppendActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AppendAction.schema()
    create_appendaction_model(AppendActionAllProperties).schema()
    create_appendaction_model(AppendActionInheritedProperties).schema()
    create_appendaction_model(AppendActionProperties).schema()


def WearableSizeGroupWomens_test():
    from schorg.WearableSizeGroupWomens import (
        WearableSizeGroupWomensInheritedProperties,
    )
    from schorg.WearableSizeGroupWomens import WearableSizeGroupWomensProperties
    from schorg.WearableSizeGroupWomens import WearableSizeGroupWomensAllProperties
    from schorg.WearableSizeGroupWomens import create_schema_org_model
    from schorg.WearableSizeGroupWomens import create_wearablesizegroupwomens_model
    from schorg.WearableSizeGroupWomens import WearableSizeGroupWomens

    a = create_schema_org_model(type_=WearableSizeGroupWomensInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupWomensProperties)
    c = create_schema_org_model(type_=WearableSizeGroupWomensAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupWomens.schema()
    create_wearablesizegroupwomens_model(WearableSizeGroupWomensAllProperties).schema()
    create_wearablesizegroupwomens_model(
        WearableSizeGroupWomensInheritedProperties
    ).schema()
    create_wearablesizegroupwomens_model(WearableSizeGroupWomensProperties).schema()


def Occupation_test():
    from schorg.Occupation import OccupationInheritedProperties
    from schorg.Occupation import OccupationProperties
    from schorg.Occupation import OccupationAllProperties
    from schorg.Occupation import create_schema_org_model
    from schorg.Occupation import create_occupation_model
    from schorg.Occupation import Occupation

    a = create_schema_org_model(type_=OccupationInheritedProperties)
    b = create_schema_org_model(type_=OccupationProperties)
    c = create_schema_org_model(type_=OccupationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Occupation.schema()
    create_occupation_model(OccupationAllProperties).schema()
    create_occupation_model(OccupationInheritedProperties).schema()
    create_occupation_model(OccupationProperties).schema()


def RadiationTherapy_test():
    from schorg.RadiationTherapy import RadiationTherapyInheritedProperties
    from schorg.RadiationTherapy import RadiationTherapyProperties
    from schorg.RadiationTherapy import RadiationTherapyAllProperties
    from schorg.RadiationTherapy import create_schema_org_model
    from schorg.RadiationTherapy import create_radiationtherapy_model
    from schorg.RadiationTherapy import RadiationTherapy

    a = create_schema_org_model(type_=RadiationTherapyInheritedProperties)
    b = create_schema_org_model(type_=RadiationTherapyProperties)
    c = create_schema_org_model(type_=RadiationTherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadiationTherapy.schema()
    create_radiationtherapy_model(RadiationTherapyAllProperties).schema()
    create_radiationtherapy_model(RadiationTherapyInheritedProperties).schema()
    create_radiationtherapy_model(RadiationTherapyProperties).schema()


def BodyMeasurementHeight_test():
    from schorg.BodyMeasurementHeight import BodyMeasurementHeightInheritedProperties
    from schorg.BodyMeasurementHeight import BodyMeasurementHeightProperties
    from schorg.BodyMeasurementHeight import BodyMeasurementHeightAllProperties
    from schorg.BodyMeasurementHeight import create_schema_org_model
    from schorg.BodyMeasurementHeight import create_bodymeasurementheight_model
    from schorg.BodyMeasurementHeight import BodyMeasurementHeight

    a = create_schema_org_model(type_=BodyMeasurementHeightInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementHeightProperties)
    c = create_schema_org_model(type_=BodyMeasurementHeightAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementHeight.schema()
    create_bodymeasurementheight_model(BodyMeasurementHeightAllProperties).schema()
    create_bodymeasurementheight_model(
        BodyMeasurementHeightInheritedProperties
    ).schema()
    create_bodymeasurementheight_model(BodyMeasurementHeightProperties).schema()


def OfferShippingDetails_test():
    from schorg.OfferShippingDetails import OfferShippingDetailsInheritedProperties
    from schorg.OfferShippingDetails import OfferShippingDetailsProperties
    from schorg.OfferShippingDetails import OfferShippingDetailsAllProperties
    from schorg.OfferShippingDetails import create_schema_org_model
    from schorg.OfferShippingDetails import create_offershippingdetails_model
    from schorg.OfferShippingDetails import OfferShippingDetails

    a = create_schema_org_model(type_=OfferShippingDetailsInheritedProperties)
    b = create_schema_org_model(type_=OfferShippingDetailsProperties)
    c = create_schema_org_model(type_=OfferShippingDetailsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfferShippingDetails.schema()
    create_offershippingdetails_model(OfferShippingDetailsAllProperties).schema()
    create_offershippingdetails_model(OfferShippingDetailsInheritedProperties).schema()
    create_offershippingdetails_model(OfferShippingDetailsProperties).schema()


def Nonprofit501c5_test():
    from schorg.Nonprofit501c5 import Nonprofit501c5InheritedProperties
    from schorg.Nonprofit501c5 import Nonprofit501c5Properties
    from schorg.Nonprofit501c5 import Nonprofit501c5AllProperties
    from schorg.Nonprofit501c5 import create_schema_org_model
    from schorg.Nonprofit501c5 import create_nonprofit501c5_model
    from schorg.Nonprofit501c5 import Nonprofit501c5

    a = create_schema_org_model(type_=Nonprofit501c5InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c5Properties)
    c = create_schema_org_model(type_=Nonprofit501c5AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c5.schema()
    create_nonprofit501c5_model(Nonprofit501c5AllProperties).schema()
    create_nonprofit501c5_model(Nonprofit501c5InheritedProperties).schema()
    create_nonprofit501c5_model(Nonprofit501c5Properties).schema()


def Nonprofit501c25_test():
    from schorg.Nonprofit501c25 import Nonprofit501c25InheritedProperties
    from schorg.Nonprofit501c25 import Nonprofit501c25Properties
    from schorg.Nonprofit501c25 import Nonprofit501c25AllProperties
    from schorg.Nonprofit501c25 import create_schema_org_model
    from schorg.Nonprofit501c25 import create_nonprofit501c25_model
    from schorg.Nonprofit501c25 import Nonprofit501c25

    a = create_schema_org_model(type_=Nonprofit501c25InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c25Properties)
    c = create_schema_org_model(type_=Nonprofit501c25AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c25.schema()
    create_nonprofit501c25_model(Nonprofit501c25AllProperties).schema()
    create_nonprofit501c25_model(Nonprofit501c25InheritedProperties).schema()
    create_nonprofit501c25_model(Nonprofit501c25Properties).schema()


def MedicalResearcher_test():
    from schorg.MedicalResearcher import MedicalResearcherInheritedProperties
    from schorg.MedicalResearcher import MedicalResearcherProperties
    from schorg.MedicalResearcher import MedicalResearcherAllProperties
    from schorg.MedicalResearcher import create_schema_org_model
    from schorg.MedicalResearcher import create_medicalresearcher_model
    from schorg.MedicalResearcher import MedicalResearcher

    a = create_schema_org_model(type_=MedicalResearcherInheritedProperties)
    b = create_schema_org_model(type_=MedicalResearcherProperties)
    c = create_schema_org_model(type_=MedicalResearcherAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalResearcher.schema()
    create_medicalresearcher_model(MedicalResearcherAllProperties).schema()
    create_medicalresearcher_model(MedicalResearcherInheritedProperties).schema()
    create_medicalresearcher_model(MedicalResearcherProperties).schema()


def RadioSeries_test():
    from schorg.RadioSeries import RadioSeriesInheritedProperties
    from schorg.RadioSeries import RadioSeriesProperties
    from schorg.RadioSeries import RadioSeriesAllProperties
    from schorg.RadioSeries import create_schema_org_model
    from schorg.RadioSeries import create_radioseries_model
    from schorg.RadioSeries import RadioSeries

    a = create_schema_org_model(type_=RadioSeriesInheritedProperties)
    b = create_schema_org_model(type_=RadioSeriesProperties)
    c = create_schema_org_model(type_=RadioSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioSeries.schema()
    create_radioseries_model(RadioSeriesAllProperties).schema()
    create_radioseries_model(RadioSeriesInheritedProperties).schema()
    create_radioseries_model(RadioSeriesProperties).schema()


def MedicalSymptom_test():
    from schorg.MedicalSymptom import MedicalSymptomInheritedProperties
    from schorg.MedicalSymptom import MedicalSymptomProperties
    from schorg.MedicalSymptom import MedicalSymptomAllProperties
    from schorg.MedicalSymptom import create_schema_org_model
    from schorg.MedicalSymptom import create_medicalsymptom_model
    from schorg.MedicalSymptom import MedicalSymptom

    a = create_schema_org_model(type_=MedicalSymptomInheritedProperties)
    b = create_schema_org_model(type_=MedicalSymptomProperties)
    c = create_schema_org_model(type_=MedicalSymptomAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalSymptom.schema()
    create_medicalsymptom_model(MedicalSymptomAllProperties).schema()
    create_medicalsymptom_model(MedicalSymptomInheritedProperties).schema()
    create_medicalsymptom_model(MedicalSymptomProperties).schema()


def Nonprofit501c1_test():
    from schorg.Nonprofit501c1 import Nonprofit501c1InheritedProperties
    from schorg.Nonprofit501c1 import Nonprofit501c1Properties
    from schorg.Nonprofit501c1 import Nonprofit501c1AllProperties
    from schorg.Nonprofit501c1 import create_schema_org_model
    from schorg.Nonprofit501c1 import create_nonprofit501c1_model
    from schorg.Nonprofit501c1 import Nonprofit501c1

    a = create_schema_org_model(type_=Nonprofit501c1InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c1Properties)
    c = create_schema_org_model(type_=Nonprofit501c1AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c1.schema()
    create_nonprofit501c1_model(Nonprofit501c1AllProperties).schema()
    create_nonprofit501c1_model(Nonprofit501c1InheritedProperties).schema()
    create_nonprofit501c1_model(Nonprofit501c1Properties).schema()


def TechArticle_test():
    from schorg.TechArticle import TechArticleInheritedProperties
    from schorg.TechArticle import TechArticleProperties
    from schorg.TechArticle import TechArticleAllProperties
    from schorg.TechArticle import create_schema_org_model
    from schorg.TechArticle import create_techarticle_model
    from schorg.TechArticle import TechArticle

    a = create_schema_org_model(type_=TechArticleInheritedProperties)
    b = create_schema_org_model(type_=TechArticleProperties)
    c = create_schema_org_model(type_=TechArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TechArticle.schema()
    create_techarticle_model(TechArticleAllProperties).schema()
    create_techarticle_model(TechArticleInheritedProperties).schema()
    create_techarticle_model(TechArticleProperties).schema()


def APIReference_test():
    from schorg.APIReference import APIReferenceInheritedProperties
    from schorg.APIReference import APIReferenceProperties
    from schorg.APIReference import APIReferenceAllProperties
    from schorg.APIReference import create_schema_org_model
    from schorg.APIReference import create_apireference_model
    from schorg.APIReference import APIReference

    a = create_schema_org_model(type_=APIReferenceInheritedProperties)
    b = create_schema_org_model(type_=APIReferenceProperties)
    c = create_schema_org_model(type_=APIReferenceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    APIReference.schema()
    create_apireference_model(APIReferenceAllProperties).schema()
    create_apireference_model(APIReferenceInheritedProperties).schema()
    create_apireference_model(APIReferenceProperties).schema()


def Fungus_test():
    from schorg.Fungus import FungusInheritedProperties
    from schorg.Fungus import FungusProperties
    from schorg.Fungus import FungusAllProperties
    from schorg.Fungus import create_schema_org_model
    from schorg.Fungus import create_fungus_model
    from schorg.Fungus import Fungus

    a = create_schema_org_model(type_=FungusInheritedProperties)
    b = create_schema_org_model(type_=FungusProperties)
    c = create_schema_org_model(type_=FungusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Fungus.schema()
    create_fungus_model(FungusAllProperties).schema()
    create_fungus_model(FungusInheritedProperties).schema()
    create_fungus_model(FungusProperties).schema()


def MedicalRiskEstimator_test():
    from schorg.MedicalRiskEstimator import MedicalRiskEstimatorInheritedProperties
    from schorg.MedicalRiskEstimator import MedicalRiskEstimatorProperties
    from schorg.MedicalRiskEstimator import MedicalRiskEstimatorAllProperties
    from schorg.MedicalRiskEstimator import create_schema_org_model
    from schorg.MedicalRiskEstimator import create_medicalriskestimator_model
    from schorg.MedicalRiskEstimator import MedicalRiskEstimator

    a = create_schema_org_model(type_=MedicalRiskEstimatorInheritedProperties)
    b = create_schema_org_model(type_=MedicalRiskEstimatorProperties)
    c = create_schema_org_model(type_=MedicalRiskEstimatorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalRiskEstimator.schema()
    create_medicalriskestimator_model(MedicalRiskEstimatorAllProperties).schema()
    create_medicalriskestimator_model(MedicalRiskEstimatorInheritedProperties).schema()
    create_medicalriskestimator_model(MedicalRiskEstimatorProperties).schema()


def MedicalRiskScore_test():
    from schorg.MedicalRiskScore import MedicalRiskScoreInheritedProperties
    from schorg.MedicalRiskScore import MedicalRiskScoreProperties
    from schorg.MedicalRiskScore import MedicalRiskScoreAllProperties
    from schorg.MedicalRiskScore import create_schema_org_model
    from schorg.MedicalRiskScore import create_medicalriskscore_model
    from schorg.MedicalRiskScore import MedicalRiskScore

    a = create_schema_org_model(type_=MedicalRiskScoreInheritedProperties)
    b = create_schema_org_model(type_=MedicalRiskScoreProperties)
    c = create_schema_org_model(type_=MedicalRiskScoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalRiskScore.schema()
    create_medicalriskscore_model(MedicalRiskScoreAllProperties).schema()
    create_medicalriskscore_model(MedicalRiskScoreInheritedProperties).schema()
    create_medicalriskscore_model(MedicalRiskScoreProperties).schema()


def Hotel_test():
    from schorg.Hotel import HotelInheritedProperties
    from schorg.Hotel import HotelProperties
    from schorg.Hotel import HotelAllProperties
    from schorg.Hotel import create_schema_org_model
    from schorg.Hotel import create_hotel_model
    from schorg.Hotel import Hotel

    a = create_schema_org_model(type_=HotelInheritedProperties)
    b = create_schema_org_model(type_=HotelProperties)
    c = create_schema_org_model(type_=HotelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hotel.schema()
    create_hotel_model(HotelAllProperties).schema()
    create_hotel_model(HotelInheritedProperties).schema()
    create_hotel_model(HotelProperties).schema()


def AskAction_test():
    from schorg.AskAction import AskActionInheritedProperties
    from schorg.AskAction import AskActionProperties
    from schorg.AskAction import AskActionAllProperties
    from schorg.AskAction import create_schema_org_model
    from schorg.AskAction import create_askaction_model
    from schorg.AskAction import AskAction

    a = create_schema_org_model(type_=AskActionInheritedProperties)
    b = create_schema_org_model(type_=AskActionProperties)
    c = create_schema_org_model(type_=AskActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AskAction.schema()
    create_askaction_model(AskActionAllProperties).schema()
    create_askaction_model(AskActionInheritedProperties).schema()
    create_askaction_model(AskActionProperties).schema()


def MediaGallery_test():
    from schorg.MediaGallery import MediaGalleryInheritedProperties
    from schorg.MediaGallery import MediaGalleryProperties
    from schorg.MediaGallery import MediaGalleryAllProperties
    from schorg.MediaGallery import create_schema_org_model
    from schorg.MediaGallery import create_mediagallery_model
    from schorg.MediaGallery import MediaGallery

    a = create_schema_org_model(type_=MediaGalleryInheritedProperties)
    b = create_schema_org_model(type_=MediaGalleryProperties)
    c = create_schema_org_model(type_=MediaGalleryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaGallery.schema()
    create_mediagallery_model(MediaGalleryAllProperties).schema()
    create_mediagallery_model(MediaGalleryInheritedProperties).schema()
    create_mediagallery_model(MediaGalleryProperties).schema()


def BodyMeasurementHand_test():
    from schorg.BodyMeasurementHand import BodyMeasurementHandInheritedProperties
    from schorg.BodyMeasurementHand import BodyMeasurementHandProperties
    from schorg.BodyMeasurementHand import BodyMeasurementHandAllProperties
    from schorg.BodyMeasurementHand import create_schema_org_model
    from schorg.BodyMeasurementHand import create_bodymeasurementhand_model
    from schorg.BodyMeasurementHand import BodyMeasurementHand

    a = create_schema_org_model(type_=BodyMeasurementHandInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementHandProperties)
    c = create_schema_org_model(type_=BodyMeasurementHandAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementHand.schema()
    create_bodymeasurementhand_model(BodyMeasurementHandAllProperties).schema()
    create_bodymeasurementhand_model(BodyMeasurementHandInheritedProperties).schema()
    create_bodymeasurementhand_model(BodyMeasurementHandProperties).schema()


def SchoolDistrict_test():
    from schorg.SchoolDistrict import SchoolDistrictInheritedProperties
    from schorg.SchoolDistrict import SchoolDistrictProperties
    from schorg.SchoolDistrict import SchoolDistrictAllProperties
    from schorg.SchoolDistrict import create_schema_org_model
    from schorg.SchoolDistrict import create_schooldistrict_model
    from schorg.SchoolDistrict import SchoolDistrict

    a = create_schema_org_model(type_=SchoolDistrictInheritedProperties)
    b = create_schema_org_model(type_=SchoolDistrictProperties)
    c = create_schema_org_model(type_=SchoolDistrictAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SchoolDistrict.schema()
    create_schooldistrict_model(SchoolDistrictAllProperties).schema()
    create_schooldistrict_model(SchoolDistrictInheritedProperties).schema()
    create_schooldistrict_model(SchoolDistrictProperties).schema()


def LinkRole_test():
    from schorg.LinkRole import LinkRoleInheritedProperties
    from schorg.LinkRole import LinkRoleProperties
    from schorg.LinkRole import LinkRoleAllProperties
    from schorg.LinkRole import create_schema_org_model
    from schorg.LinkRole import create_linkrole_model
    from schorg.LinkRole import LinkRole

    a = create_schema_org_model(type_=LinkRoleInheritedProperties)
    b = create_schema_org_model(type_=LinkRoleProperties)
    c = create_schema_org_model(type_=LinkRoleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LinkRole.schema()
    create_linkrole_model(LinkRoleAllProperties).schema()
    create_linkrole_model(LinkRoleInheritedProperties).schema()
    create_linkrole_model(LinkRoleProperties).schema()


def TVEpisode_test():
    from schorg.TVEpisode import TVEpisodeInheritedProperties
    from schorg.TVEpisode import TVEpisodeProperties
    from schorg.TVEpisode import TVEpisodeAllProperties
    from schorg.TVEpisode import create_schema_org_model
    from schorg.TVEpisode import create_tvepisode_model
    from schorg.TVEpisode import TVEpisode

    a = create_schema_org_model(type_=TVEpisodeInheritedProperties)
    b = create_schema_org_model(type_=TVEpisodeProperties)
    c = create_schema_org_model(type_=TVEpisodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TVEpisode.schema()
    create_tvepisode_model(TVEpisodeAllProperties).schema()
    create_tvepisode_model(TVEpisodeInheritedProperties).schema()
    create_tvepisode_model(TVEpisodeProperties).schema()


def FMRadioChannel_test():
    from schorg.FMRadioChannel import FMRadioChannelInheritedProperties
    from schorg.FMRadioChannel import FMRadioChannelProperties
    from schorg.FMRadioChannel import FMRadioChannelAllProperties
    from schorg.FMRadioChannel import create_schema_org_model
    from schorg.FMRadioChannel import create_fmradiochannel_model
    from schorg.FMRadioChannel import FMRadioChannel

    a = create_schema_org_model(type_=FMRadioChannelInheritedProperties)
    b = create_schema_org_model(type_=FMRadioChannelProperties)
    c = create_schema_org_model(type_=FMRadioChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FMRadioChannel.schema()
    create_fmradiochannel_model(FMRadioChannelAllProperties).schema()
    create_fmradiochannel_model(FMRadioChannelInheritedProperties).schema()
    create_fmradiochannel_model(FMRadioChannelProperties).schema()


def WritePermission_test():
    from schorg.WritePermission import WritePermissionInheritedProperties
    from schorg.WritePermission import WritePermissionProperties
    from schorg.WritePermission import WritePermissionAllProperties
    from schorg.WritePermission import create_schema_org_model
    from schorg.WritePermission import create_writepermission_model
    from schorg.WritePermission import WritePermission

    a = create_schema_org_model(type_=WritePermissionInheritedProperties)
    b = create_schema_org_model(type_=WritePermissionProperties)
    c = create_schema_org_model(type_=WritePermissionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WritePermission.schema()
    create_writepermission_model(WritePermissionAllProperties).schema()
    create_writepermission_model(WritePermissionInheritedProperties).schema()
    create_writepermission_model(WritePermissionProperties).schema()


def Menu_test():
    from schorg.Menu import MenuInheritedProperties
    from schorg.Menu import MenuProperties
    from schorg.Menu import MenuAllProperties
    from schorg.Menu import create_schema_org_model
    from schorg.Menu import create_menu_model
    from schorg.Menu import Menu

    a = create_schema_org_model(type_=MenuInheritedProperties)
    b = create_schema_org_model(type_=MenuProperties)
    c = create_schema_org_model(type_=MenuAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Menu.schema()
    create_menu_model(MenuAllProperties).schema()
    create_menu_model(MenuInheritedProperties).schema()
    create_menu_model(MenuProperties).schema()


def DownloadAction_test():
    from schorg.DownloadAction import DownloadActionInheritedProperties
    from schorg.DownloadAction import DownloadActionProperties
    from schorg.DownloadAction import DownloadActionAllProperties
    from schorg.DownloadAction import create_schema_org_model
    from schorg.DownloadAction import create_downloadaction_model
    from schorg.DownloadAction import DownloadAction

    a = create_schema_org_model(type_=DownloadActionInheritedProperties)
    b = create_schema_org_model(type_=DownloadActionProperties)
    c = create_schema_org_model(type_=DownloadActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DownloadAction.schema()
    create_downloadaction_model(DownloadActionAllProperties).schema()
    create_downloadaction_model(DownloadActionInheritedProperties).schema()
    create_downloadaction_model(DownloadActionProperties).schema()


def UserTweets_test():
    from schorg.UserTweets import UserTweetsInheritedProperties
    from schorg.UserTweets import UserTweetsProperties
    from schorg.UserTweets import UserTweetsAllProperties
    from schorg.UserTweets import create_schema_org_model
    from schorg.UserTweets import create_usertweets_model
    from schorg.UserTweets import UserTweets

    a = create_schema_org_model(type_=UserTweetsInheritedProperties)
    b = create_schema_org_model(type_=UserTweetsProperties)
    c = create_schema_org_model(type_=UserTweetsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserTweets.schema()
    create_usertweets_model(UserTweetsAllProperties).schema()
    create_usertweets_model(UserTweetsInheritedProperties).schema()
    create_usertweets_model(UserTweetsProperties).schema()


def Anesthesia_test():
    from schorg.Anesthesia import AnesthesiaInheritedProperties
    from schorg.Anesthesia import AnesthesiaProperties
    from schorg.Anesthesia import AnesthesiaAllProperties
    from schorg.Anesthesia import create_schema_org_model
    from schorg.Anesthesia import create_anesthesia_model
    from schorg.Anesthesia import Anesthesia

    a = create_schema_org_model(type_=AnesthesiaInheritedProperties)
    b = create_schema_org_model(type_=AnesthesiaProperties)
    c = create_schema_org_model(type_=AnesthesiaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Anesthesia.schema()
    create_anesthesia_model(AnesthesiaAllProperties).schema()
    create_anesthesia_model(AnesthesiaInheritedProperties).schema()
    create_anesthesia_model(AnesthesiaProperties).schema()


def WearableSizeSystemCN_test():
    from schorg.WearableSizeSystemCN import WearableSizeSystemCNInheritedProperties
    from schorg.WearableSizeSystemCN import WearableSizeSystemCNProperties
    from schorg.WearableSizeSystemCN import WearableSizeSystemCNAllProperties
    from schorg.WearableSizeSystemCN import create_schema_org_model
    from schorg.WearableSizeSystemCN import create_wearablesizesystemcn_model
    from schorg.WearableSizeSystemCN import WearableSizeSystemCN

    a = create_schema_org_model(type_=WearableSizeSystemCNInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemCNProperties)
    c = create_schema_org_model(type_=WearableSizeSystemCNAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemCN.schema()
    create_wearablesizesystemcn_model(WearableSizeSystemCNAllProperties).schema()
    create_wearablesizesystemcn_model(WearableSizeSystemCNInheritedProperties).schema()
    create_wearablesizesystemcn_model(WearableSizeSystemCNProperties).schema()


def VinylFormat_test():
    from schorg.VinylFormat import VinylFormatInheritedProperties
    from schorg.VinylFormat import VinylFormatProperties
    from schorg.VinylFormat import VinylFormatAllProperties
    from schorg.VinylFormat import create_schema_org_model
    from schorg.VinylFormat import create_vinylformat_model
    from schorg.VinylFormat import VinylFormat

    a = create_schema_org_model(type_=VinylFormatInheritedProperties)
    b = create_schema_org_model(type_=VinylFormatProperties)
    c = create_schema_org_model(type_=VinylFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VinylFormat.schema()
    create_vinylformat_model(VinylFormatAllProperties).schema()
    create_vinylformat_model(VinylFormatInheritedProperties).schema()
    create_vinylformat_model(VinylFormatProperties).schema()


def FourWheelDriveConfiguration_test():
    from schorg.FourWheelDriveConfiguration import (
        FourWheelDriveConfigurationInheritedProperties,
    )
    from schorg.FourWheelDriveConfiguration import FourWheelDriveConfigurationProperties
    from schorg.FourWheelDriveConfiguration import (
        FourWheelDriveConfigurationAllProperties,
    )
    from schorg.FourWheelDriveConfiguration import create_schema_org_model
    from schorg.FourWheelDriveConfiguration import (
        create_fourwheeldriveconfiguration_model,
    )
    from schorg.FourWheelDriveConfiguration import FourWheelDriveConfiguration

    a = create_schema_org_model(type_=FourWheelDriveConfigurationInheritedProperties)
    b = create_schema_org_model(type_=FourWheelDriveConfigurationProperties)
    c = create_schema_org_model(type_=FourWheelDriveConfigurationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FourWheelDriveConfiguration.schema()
    create_fourwheeldriveconfiguration_model(
        FourWheelDriveConfigurationAllProperties
    ).schema()
    create_fourwheeldriveconfiguration_model(
        FourWheelDriveConfigurationInheritedProperties
    ).schema()
    create_fourwheeldriveconfiguration_model(
        FourWheelDriveConfigurationProperties
    ).schema()


def PerformingArtsTheater_test():
    from schorg.PerformingArtsTheater import PerformingArtsTheaterInheritedProperties
    from schorg.PerformingArtsTheater import PerformingArtsTheaterProperties
    from schorg.PerformingArtsTheater import PerformingArtsTheaterAllProperties
    from schorg.PerformingArtsTheater import create_schema_org_model
    from schorg.PerformingArtsTheater import create_performingartstheater_model
    from schorg.PerformingArtsTheater import PerformingArtsTheater

    a = create_schema_org_model(type_=PerformingArtsTheaterInheritedProperties)
    b = create_schema_org_model(type_=PerformingArtsTheaterProperties)
    c = create_schema_org_model(type_=PerformingArtsTheaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PerformingArtsTheater.schema()
    create_performingartstheater_model(PerformingArtsTheaterAllProperties).schema()
    create_performingartstheater_model(
        PerformingArtsTheaterInheritedProperties
    ).schema()
    create_performingartstheater_model(PerformingArtsTheaterProperties).schema()


def MedicalDevicePurpose_test():
    from schorg.MedicalDevicePurpose import MedicalDevicePurposeInheritedProperties
    from schorg.MedicalDevicePurpose import MedicalDevicePurposeProperties
    from schorg.MedicalDevicePurpose import MedicalDevicePurposeAllProperties
    from schorg.MedicalDevicePurpose import create_schema_org_model
    from schorg.MedicalDevicePurpose import create_medicaldevicepurpose_model
    from schorg.MedicalDevicePurpose import MedicalDevicePurpose

    a = create_schema_org_model(type_=MedicalDevicePurposeInheritedProperties)
    b = create_schema_org_model(type_=MedicalDevicePurposeProperties)
    c = create_schema_org_model(type_=MedicalDevicePurposeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalDevicePurpose.schema()
    create_medicaldevicepurpose_model(MedicalDevicePurposeAllProperties).schema()
    create_medicaldevicepurpose_model(MedicalDevicePurposeInheritedProperties).schema()
    create_medicaldevicepurpose_model(MedicalDevicePurposeProperties).schema()


def Zoo_test():
    from schorg.Zoo import ZooInheritedProperties
    from schorg.Zoo import ZooProperties
    from schorg.Zoo import ZooAllProperties
    from schorg.Zoo import create_schema_org_model
    from schorg.Zoo import create_zoo_model
    from schorg.Zoo import Zoo

    a = create_schema_org_model(type_=ZooInheritedProperties)
    b = create_schema_org_model(type_=ZooProperties)
    c = create_schema_org_model(type_=ZooAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Zoo.schema()
    create_zoo_model(ZooAllProperties).schema()
    create_zoo_model(ZooInheritedProperties).schema()
    create_zoo_model(ZooProperties).schema()


def BasicIncome_test():
    from schorg.BasicIncome import BasicIncomeInheritedProperties
    from schorg.BasicIncome import BasicIncomeProperties
    from schorg.BasicIncome import BasicIncomeAllProperties
    from schorg.BasicIncome import create_schema_org_model
    from schorg.BasicIncome import create_basicincome_model
    from schorg.BasicIncome import BasicIncome

    a = create_schema_org_model(type_=BasicIncomeInheritedProperties)
    b = create_schema_org_model(type_=BasicIncomeProperties)
    c = create_schema_org_model(type_=BasicIncomeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BasicIncome.schema()
    create_basicincome_model(BasicIncomeAllProperties).schema()
    create_basicincome_model(BasicIncomeInheritedProperties).schema()
    create_basicincome_model(BasicIncomeProperties).schema()


def Flexibility_test():
    from schorg.Flexibility import FlexibilityInheritedProperties
    from schorg.Flexibility import FlexibilityProperties
    from schorg.Flexibility import FlexibilityAllProperties
    from schorg.Flexibility import create_schema_org_model
    from schorg.Flexibility import create_flexibility_model
    from schorg.Flexibility import Flexibility

    a = create_schema_org_model(type_=FlexibilityInheritedProperties)
    b = create_schema_org_model(type_=FlexibilityProperties)
    c = create_schema_org_model(type_=FlexibilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Flexibility.schema()
    create_flexibility_model(FlexibilityAllProperties).schema()
    create_flexibility_model(FlexibilityInheritedProperties).schema()
    create_flexibility_model(FlexibilityProperties).schema()


def JoinAction_test():
    from schorg.JoinAction import JoinActionInheritedProperties
    from schorg.JoinAction import JoinActionProperties
    from schorg.JoinAction import JoinActionAllProperties
    from schorg.JoinAction import create_schema_org_model
    from schorg.JoinAction import create_joinaction_model
    from schorg.JoinAction import JoinAction

    a = create_schema_org_model(type_=JoinActionInheritedProperties)
    b = create_schema_org_model(type_=JoinActionProperties)
    c = create_schema_org_model(type_=JoinActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    JoinAction.schema()
    create_joinaction_model(JoinActionAllProperties).schema()
    create_joinaction_model(JoinActionInheritedProperties).schema()
    create_joinaction_model(JoinActionProperties).schema()


def IceCreamShop_test():
    from schorg.IceCreamShop import IceCreamShopInheritedProperties
    from schorg.IceCreamShop import IceCreamShopProperties
    from schorg.IceCreamShop import IceCreamShopAllProperties
    from schorg.IceCreamShop import create_schema_org_model
    from schorg.IceCreamShop import create_icecreamshop_model
    from schorg.IceCreamShop import IceCreamShop

    a = create_schema_org_model(type_=IceCreamShopInheritedProperties)
    b = create_schema_org_model(type_=IceCreamShopProperties)
    c = create_schema_org_model(type_=IceCreamShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    IceCreamShop.schema()
    create_icecreamshop_model(IceCreamShopAllProperties).schema()
    create_icecreamshop_model(IceCreamShopInheritedProperties).schema()
    create_icecreamshop_model(IceCreamShopProperties).schema()


def HinduTemple_test():
    from schorg.HinduTemple import HinduTempleInheritedProperties
    from schorg.HinduTemple import HinduTempleProperties
    from schorg.HinduTemple import HinduTempleAllProperties
    from schorg.HinduTemple import create_schema_org_model
    from schorg.HinduTemple import create_hindutemple_model
    from schorg.HinduTemple import HinduTemple

    a = create_schema_org_model(type_=HinduTempleInheritedProperties)
    b = create_schema_org_model(type_=HinduTempleProperties)
    c = create_schema_org_model(type_=HinduTempleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HinduTemple.schema()
    create_hindutemple_model(HinduTempleAllProperties).schema()
    create_hindutemple_model(HinduTempleInheritedProperties).schema()
    create_hindutemple_model(HinduTempleProperties).schema()


def NarcoticConsideration_test():
    from schorg.NarcoticConsideration import NarcoticConsiderationInheritedProperties
    from schorg.NarcoticConsideration import NarcoticConsiderationProperties
    from schorg.NarcoticConsideration import NarcoticConsiderationAllProperties
    from schorg.NarcoticConsideration import create_schema_org_model
    from schorg.NarcoticConsideration import create_narcoticconsideration_model
    from schorg.NarcoticConsideration import NarcoticConsideration

    a = create_schema_org_model(type_=NarcoticConsiderationInheritedProperties)
    b = create_schema_org_model(type_=NarcoticConsiderationProperties)
    c = create_schema_org_model(type_=NarcoticConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NarcoticConsideration.schema()
    create_narcoticconsideration_model(NarcoticConsiderationAllProperties).schema()
    create_narcoticconsideration_model(
        NarcoticConsiderationInheritedProperties
    ).schema()
    create_narcoticconsideration_model(NarcoticConsiderationProperties).schema()


def CancelAction_test():
    from schorg.CancelAction import CancelActionInheritedProperties
    from schorg.CancelAction import CancelActionProperties
    from schorg.CancelAction import CancelActionAllProperties
    from schorg.CancelAction import create_schema_org_model
    from schorg.CancelAction import create_cancelaction_model
    from schorg.CancelAction import CancelAction

    a = create_schema_org_model(type_=CancelActionInheritedProperties)
    b = create_schema_org_model(type_=CancelActionProperties)
    c = create_schema_org_model(type_=CancelActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CancelAction.schema()
    create_cancelaction_model(CancelActionAllProperties).schema()
    create_cancelaction_model(CancelActionInheritedProperties).schema()
    create_cancelaction_model(CancelActionProperties).schema()


def RadioSeason_test():
    from schorg.RadioSeason import RadioSeasonInheritedProperties
    from schorg.RadioSeason import RadioSeasonProperties
    from schorg.RadioSeason import RadioSeasonAllProperties
    from schorg.RadioSeason import create_schema_org_model
    from schorg.RadioSeason import create_radioseason_model
    from schorg.RadioSeason import RadioSeason

    a = create_schema_org_model(type_=RadioSeasonInheritedProperties)
    b = create_schema_org_model(type_=RadioSeasonProperties)
    c = create_schema_org_model(type_=RadioSeasonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioSeason.schema()
    create_radioseason_model(RadioSeasonAllProperties).schema()
    create_radioseason_model(RadioSeasonInheritedProperties).schema()
    create_radioseason_model(RadioSeasonProperties).schema()


def Dentist_test():
    from schorg.Dentist import DentistInheritedProperties
    from schorg.Dentist import DentistProperties
    from schorg.Dentist import DentistAllProperties
    from schorg.Dentist import create_schema_org_model
    from schorg.Dentist import create_dentist_model
    from schorg.Dentist import Dentist

    a = create_schema_org_model(type_=DentistInheritedProperties)
    b = create_schema_org_model(type_=DentistProperties)
    c = create_schema_org_model(type_=DentistAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Dentist.schema()
    create_dentist_model(DentistAllProperties).schema()
    create_dentist_model(DentistInheritedProperties).schema()
    create_dentist_model(DentistProperties).schema()


def Nonprofit501c11_test():
    from schorg.Nonprofit501c11 import Nonprofit501c11InheritedProperties
    from schorg.Nonprofit501c11 import Nonprofit501c11Properties
    from schorg.Nonprofit501c11 import Nonprofit501c11AllProperties
    from schorg.Nonprofit501c11 import create_schema_org_model
    from schorg.Nonprofit501c11 import create_nonprofit501c11_model
    from schorg.Nonprofit501c11 import Nonprofit501c11

    a = create_schema_org_model(type_=Nonprofit501c11InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c11Properties)
    c = create_schema_org_model(type_=Nonprofit501c11AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c11.schema()
    create_nonprofit501c11_model(Nonprofit501c11AllProperties).schema()
    create_nonprofit501c11_model(Nonprofit501c11InheritedProperties).schema()
    create_nonprofit501c11_model(Nonprofit501c11Properties).schema()


def DrugClass_test():
    from schorg.DrugClass import DrugClassInheritedProperties
    from schorg.DrugClass import DrugClassProperties
    from schorg.DrugClass import DrugClassAllProperties
    from schorg.DrugClass import create_schema_org_model
    from schorg.DrugClass import create_drugclass_model
    from schorg.DrugClass import DrugClass

    a = create_schema_org_model(type_=DrugClassInheritedProperties)
    b = create_schema_org_model(type_=DrugClassProperties)
    c = create_schema_org_model(type_=DrugClassAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugClass.schema()
    create_drugclass_model(DrugClassAllProperties).schema()
    create_drugclass_model(DrugClassInheritedProperties).schema()
    create_drugclass_model(DrugClassProperties).schema()


def Musculoskeletal_test():
    from schorg.Musculoskeletal import MusculoskeletalInheritedProperties
    from schorg.Musculoskeletal import MusculoskeletalProperties
    from schorg.Musculoskeletal import MusculoskeletalAllProperties
    from schorg.Musculoskeletal import create_schema_org_model
    from schorg.Musculoskeletal import create_musculoskeletal_model
    from schorg.Musculoskeletal import Musculoskeletal

    a = create_schema_org_model(type_=MusculoskeletalInheritedProperties)
    b = create_schema_org_model(type_=MusculoskeletalProperties)
    c = create_schema_org_model(type_=MusculoskeletalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Musculoskeletal.schema()
    create_musculoskeletal_model(MusculoskeletalAllProperties).schema()
    create_musculoskeletal_model(MusculoskeletalInheritedProperties).schema()
    create_musculoskeletal_model(MusculoskeletalProperties).schema()


def CityHall_test():
    from schorg.CityHall import CityHallInheritedProperties
    from schorg.CityHall import CityHallProperties
    from schorg.CityHall import CityHallAllProperties
    from schorg.CityHall import create_schema_org_model
    from schorg.CityHall import create_cityhall_model
    from schorg.CityHall import CityHall

    a = create_schema_org_model(type_=CityHallInheritedProperties)
    b = create_schema_org_model(type_=CityHallProperties)
    c = create_schema_org_model(type_=CityHallAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CityHall.schema()
    create_cityhall_model(CityHallAllProperties).schema()
    create_cityhall_model(CityHallInheritedProperties).schema()
    create_cityhall_model(CityHallProperties).schema()


def PharmacySpecialty_test():
    from schorg.PharmacySpecialty import PharmacySpecialtyInheritedProperties
    from schorg.PharmacySpecialty import PharmacySpecialtyProperties
    from schorg.PharmacySpecialty import PharmacySpecialtyAllProperties
    from schorg.PharmacySpecialty import create_schema_org_model
    from schorg.PharmacySpecialty import create_pharmacyspecialty_model
    from schorg.PharmacySpecialty import PharmacySpecialty

    a = create_schema_org_model(type_=PharmacySpecialtyInheritedProperties)
    b = create_schema_org_model(type_=PharmacySpecialtyProperties)
    c = create_schema_org_model(type_=PharmacySpecialtyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PharmacySpecialty.schema()
    create_pharmacyspecialty_model(PharmacySpecialtyAllProperties).schema()
    create_pharmacyspecialty_model(PharmacySpecialtyInheritedProperties).schema()
    create_pharmacyspecialty_model(PharmacySpecialtyProperties).schema()


def HowToDirection_test():
    from schorg.HowToDirection import HowToDirectionInheritedProperties
    from schorg.HowToDirection import HowToDirectionProperties
    from schorg.HowToDirection import HowToDirectionAllProperties
    from schorg.HowToDirection import create_schema_org_model
    from schorg.HowToDirection import create_howtodirection_model
    from schorg.HowToDirection import HowToDirection

    a = create_schema_org_model(type_=HowToDirectionInheritedProperties)
    b = create_schema_org_model(type_=HowToDirectionProperties)
    c = create_schema_org_model(type_=HowToDirectionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToDirection.schema()
    create_howtodirection_model(HowToDirectionAllProperties).schema()
    create_howtodirection_model(HowToDirectionInheritedProperties).schema()
    create_howtodirection_model(HowToDirectionProperties).schema()


def BuyAction_test():
    from schorg.BuyAction import BuyActionInheritedProperties
    from schorg.BuyAction import BuyActionProperties
    from schorg.BuyAction import BuyActionAllProperties
    from schorg.BuyAction import create_schema_org_model
    from schorg.BuyAction import create_buyaction_model
    from schorg.BuyAction import BuyAction

    a = create_schema_org_model(type_=BuyActionInheritedProperties)
    b = create_schema_org_model(type_=BuyActionProperties)
    c = create_schema_org_model(type_=BuyActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BuyAction.schema()
    create_buyaction_model(BuyActionAllProperties).schema()
    create_buyaction_model(BuyActionInheritedProperties).schema()
    create_buyaction_model(BuyActionProperties).schema()


def Nonprofit501e_test():
    from schorg.Nonprofit501e import Nonprofit501eInheritedProperties
    from schorg.Nonprofit501e import Nonprofit501eProperties
    from schorg.Nonprofit501e import Nonprofit501eAllProperties
    from schorg.Nonprofit501e import create_schema_org_model
    from schorg.Nonprofit501e import create_nonprofit501e_model
    from schorg.Nonprofit501e import Nonprofit501e

    a = create_schema_org_model(type_=Nonprofit501eInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501eProperties)
    c = create_schema_org_model(type_=Nonprofit501eAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501e.schema()
    create_nonprofit501e_model(Nonprofit501eAllProperties).schema()
    create_nonprofit501e_model(Nonprofit501eInheritedProperties).schema()
    create_nonprofit501e_model(Nonprofit501eProperties).schema()


def HearingImpairedSupported_test():
    from schorg.HearingImpairedSupported import (
        HearingImpairedSupportedInheritedProperties,
    )
    from schorg.HearingImpairedSupported import HearingImpairedSupportedProperties
    from schorg.HearingImpairedSupported import HearingImpairedSupportedAllProperties
    from schorg.HearingImpairedSupported import create_schema_org_model
    from schorg.HearingImpairedSupported import create_hearingimpairedsupported_model
    from schorg.HearingImpairedSupported import HearingImpairedSupported

    a = create_schema_org_model(type_=HearingImpairedSupportedInheritedProperties)
    b = create_schema_org_model(type_=HearingImpairedSupportedProperties)
    c = create_schema_org_model(type_=HearingImpairedSupportedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HearingImpairedSupported.schema()
    create_hearingimpairedsupported_model(
        HearingImpairedSupportedAllProperties
    ).schema()
    create_hearingimpairedsupported_model(
        HearingImpairedSupportedInheritedProperties
    ).schema()
    create_hearingimpairedsupported_model(HearingImpairedSupportedProperties).schema()


def Nonprofit501c3_test():
    from schorg.Nonprofit501c3 import Nonprofit501c3InheritedProperties
    from schorg.Nonprofit501c3 import Nonprofit501c3Properties
    from schorg.Nonprofit501c3 import Nonprofit501c3AllProperties
    from schorg.Nonprofit501c3 import create_schema_org_model
    from schorg.Nonprofit501c3 import create_nonprofit501c3_model
    from schorg.Nonprofit501c3 import Nonprofit501c3

    a = create_schema_org_model(type_=Nonprofit501c3InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c3Properties)
    c = create_schema_org_model(type_=Nonprofit501c3AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c3.schema()
    create_nonprofit501c3_model(Nonprofit501c3AllProperties).schema()
    create_nonprofit501c3_model(Nonprofit501c3InheritedProperties).schema()
    create_nonprofit501c3_model(Nonprofit501c3Properties).schema()


def Manuscript_test():
    from schorg.Manuscript import ManuscriptInheritedProperties
    from schorg.Manuscript import ManuscriptProperties
    from schorg.Manuscript import ManuscriptAllProperties
    from schorg.Manuscript import create_schema_org_model
    from schorg.Manuscript import create_manuscript_model
    from schorg.Manuscript import Manuscript

    a = create_schema_org_model(type_=ManuscriptInheritedProperties)
    b = create_schema_org_model(type_=ManuscriptProperties)
    c = create_schema_org_model(type_=ManuscriptAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Manuscript.schema()
    create_manuscript_model(ManuscriptAllProperties).schema()
    create_manuscript_model(ManuscriptInheritedProperties).schema()
    create_manuscript_model(ManuscriptProperties).schema()


def CompilationAlbum_test():
    from schorg.CompilationAlbum import CompilationAlbumInheritedProperties
    from schorg.CompilationAlbum import CompilationAlbumProperties
    from schorg.CompilationAlbum import CompilationAlbumAllProperties
    from schorg.CompilationAlbum import create_schema_org_model
    from schorg.CompilationAlbum import create_compilationalbum_model
    from schorg.CompilationAlbum import CompilationAlbum

    a = create_schema_org_model(type_=CompilationAlbumInheritedProperties)
    b = create_schema_org_model(type_=CompilationAlbumProperties)
    c = create_schema_org_model(type_=CompilationAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CompilationAlbum.schema()
    create_compilationalbum_model(CompilationAlbumAllProperties).schema()
    create_compilationalbum_model(CompilationAlbumInheritedProperties).schema()
    create_compilationalbum_model(CompilationAlbumProperties).schema()


def BookSeries_test():
    from schorg.BookSeries import BookSeriesInheritedProperties
    from schorg.BookSeries import BookSeriesProperties
    from schorg.BookSeries import BookSeriesAllProperties
    from schorg.BookSeries import create_schema_org_model
    from schorg.BookSeries import create_bookseries_model
    from schorg.BookSeries import BookSeries

    a = create_schema_org_model(type_=BookSeriesInheritedProperties)
    b = create_schema_org_model(type_=BookSeriesProperties)
    c = create_schema_org_model(type_=BookSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BookSeries.schema()
    create_bookseries_model(BookSeriesAllProperties).schema()
    create_bookseries_model(BookSeriesInheritedProperties).schema()
    create_bookseries_model(BookSeriesProperties).schema()


def ReturnAtKiosk_test():
    from schorg.ReturnAtKiosk import ReturnAtKioskInheritedProperties
    from schorg.ReturnAtKiosk import ReturnAtKioskProperties
    from schorg.ReturnAtKiosk import ReturnAtKioskAllProperties
    from schorg.ReturnAtKiosk import create_schema_org_model
    from schorg.ReturnAtKiosk import create_returnatkiosk_model
    from schorg.ReturnAtKiosk import ReturnAtKiosk

    a = create_schema_org_model(type_=ReturnAtKioskInheritedProperties)
    b = create_schema_org_model(type_=ReturnAtKioskProperties)
    c = create_schema_org_model(type_=ReturnAtKioskAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnAtKiosk.schema()
    create_returnatkiosk_model(ReturnAtKioskAllProperties).schema()
    create_returnatkiosk_model(ReturnAtKioskInheritedProperties).schema()
    create_returnatkiosk_model(ReturnAtKioskProperties).schema()


def TouristDestination_test():
    from schorg.TouristDestination import TouristDestinationInheritedProperties
    from schorg.TouristDestination import TouristDestinationProperties
    from schorg.TouristDestination import TouristDestinationAllProperties
    from schorg.TouristDestination import create_schema_org_model
    from schorg.TouristDestination import create_touristdestination_model
    from schorg.TouristDestination import TouristDestination

    a = create_schema_org_model(type_=TouristDestinationInheritedProperties)
    b = create_schema_org_model(type_=TouristDestinationProperties)
    c = create_schema_org_model(type_=TouristDestinationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TouristDestination.schema()
    create_touristdestination_model(TouristDestinationAllProperties).schema()
    create_touristdestination_model(TouristDestinationInheritedProperties).schema()
    create_touristdestination_model(TouristDestinationProperties).schema()


def RsvpResponseType_test():
    from schorg.RsvpResponseType import RsvpResponseTypeInheritedProperties
    from schorg.RsvpResponseType import RsvpResponseTypeProperties
    from schorg.RsvpResponseType import RsvpResponseTypeAllProperties
    from schorg.RsvpResponseType import create_schema_org_model
    from schorg.RsvpResponseType import create_rsvpresponsetype_model
    from schorg.RsvpResponseType import RsvpResponseType

    a = create_schema_org_model(type_=RsvpResponseTypeInheritedProperties)
    b = create_schema_org_model(type_=RsvpResponseTypeProperties)
    c = create_schema_org_model(type_=RsvpResponseTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RsvpResponseType.schema()
    create_rsvpresponsetype_model(RsvpResponseTypeAllProperties).schema()
    create_rsvpresponsetype_model(RsvpResponseTypeInheritedProperties).schema()
    create_rsvpresponsetype_model(RsvpResponseTypeProperties).schema()


def BroadcastService_test():
    from schorg.BroadcastService import BroadcastServiceInheritedProperties
    from schorg.BroadcastService import BroadcastServiceProperties
    from schorg.BroadcastService import BroadcastServiceAllProperties
    from schorg.BroadcastService import create_schema_org_model
    from schorg.BroadcastService import create_broadcastservice_model
    from schorg.BroadcastService import BroadcastService

    a = create_schema_org_model(type_=BroadcastServiceInheritedProperties)
    b = create_schema_org_model(type_=BroadcastServiceProperties)
    c = create_schema_org_model(type_=BroadcastServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BroadcastService.schema()
    create_broadcastservice_model(BroadcastServiceAllProperties).schema()
    create_broadcastservice_model(BroadcastServiceInheritedProperties).schema()
    create_broadcastservice_model(BroadcastServiceProperties).schema()


def RadioBroadcastService_test():
    from schorg.RadioBroadcastService import RadioBroadcastServiceInheritedProperties
    from schorg.RadioBroadcastService import RadioBroadcastServiceProperties
    from schorg.RadioBroadcastService import RadioBroadcastServiceAllProperties
    from schorg.RadioBroadcastService import create_schema_org_model
    from schorg.RadioBroadcastService import create_radiobroadcastservice_model
    from schorg.RadioBroadcastService import RadioBroadcastService

    a = create_schema_org_model(type_=RadioBroadcastServiceInheritedProperties)
    b = create_schema_org_model(type_=RadioBroadcastServiceProperties)
    c = create_schema_org_model(type_=RadioBroadcastServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioBroadcastService.schema()
    create_radiobroadcastservice_model(RadioBroadcastServiceAllProperties).schema()
    create_radiobroadcastservice_model(
        RadioBroadcastServiceInheritedProperties
    ).schema()
    create_radiobroadcastservice_model(RadioBroadcastServiceProperties).schema()


def MusicStore_test():
    from schorg.MusicStore import MusicStoreInheritedProperties
    from schorg.MusicStore import MusicStoreProperties
    from schorg.MusicStore import MusicStoreAllProperties
    from schorg.MusicStore import create_schema_org_model
    from schorg.MusicStore import create_musicstore_model
    from schorg.MusicStore import MusicStore

    a = create_schema_org_model(type_=MusicStoreInheritedProperties)
    b = create_schema_org_model(type_=MusicStoreProperties)
    c = create_schema_org_model(type_=MusicStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicStore.schema()
    create_musicstore_model(MusicStoreAllProperties).schema()
    create_musicstore_model(MusicStoreInheritedProperties).schema()
    create_musicstore_model(MusicStoreProperties).schema()


def InstallAction_test():
    from schorg.InstallAction import InstallActionInheritedProperties
    from schorg.InstallAction import InstallActionProperties
    from schorg.InstallAction import InstallActionAllProperties
    from schorg.InstallAction import create_schema_org_model
    from schorg.InstallAction import create_installaction_model
    from schorg.InstallAction import InstallAction

    a = create_schema_org_model(type_=InstallActionInheritedProperties)
    b = create_schema_org_model(type_=InstallActionProperties)
    c = create_schema_org_model(type_=InstallActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InstallAction.schema()
    create_installaction_model(InstallActionAllProperties).schema()
    create_installaction_model(InstallActionInheritedProperties).schema()
    create_installaction_model(InstallActionProperties).schema()


def Nursing_test():
    from schorg.Nursing import NursingInheritedProperties
    from schorg.Nursing import NursingProperties
    from schorg.Nursing import NursingAllProperties
    from schorg.Nursing import create_schema_org_model
    from schorg.Nursing import create_nursing_model
    from schorg.Nursing import Nursing

    a = create_schema_org_model(type_=NursingInheritedProperties)
    b = create_schema_org_model(type_=NursingProperties)
    c = create_schema_org_model(type_=NursingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nursing.schema()
    create_nursing_model(NursingAllProperties).schema()
    create_nursing_model(NursingInheritedProperties).schema()
    create_nursing_model(NursingProperties).schema()


def BarOrPub_test():
    from schorg.BarOrPub import BarOrPubInheritedProperties
    from schorg.BarOrPub import BarOrPubProperties
    from schorg.BarOrPub import BarOrPubAllProperties
    from schorg.BarOrPub import create_schema_org_model
    from schorg.BarOrPub import create_barorpub_model
    from schorg.BarOrPub import BarOrPub

    a = create_schema_org_model(type_=BarOrPubInheritedProperties)
    b = create_schema_org_model(type_=BarOrPubProperties)
    c = create_schema_org_model(type_=BarOrPubAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BarOrPub.schema()
    create_barorpub_model(BarOrPubAllProperties).schema()
    create_barorpub_model(BarOrPubInheritedProperties).schema()
    create_barorpub_model(BarOrPubProperties).schema()


def IndividualProduct_test():
    from schorg.IndividualProduct import IndividualProductInheritedProperties
    from schorg.IndividualProduct import IndividualProductProperties
    from schorg.IndividualProduct import IndividualProductAllProperties
    from schorg.IndividualProduct import create_schema_org_model
    from schorg.IndividualProduct import create_individualproduct_model
    from schorg.IndividualProduct import IndividualProduct

    a = create_schema_org_model(type_=IndividualProductInheritedProperties)
    b = create_schema_org_model(type_=IndividualProductProperties)
    c = create_schema_org_model(type_=IndividualProductAllProperties)
    a.schema()
    b.schema()
    c.schema()
    IndividualProduct.schema()
    create_individualproduct_model(IndividualProductAllProperties).schema()
    create_individualproduct_model(IndividualProductInheritedProperties).schema()
    create_individualproduct_model(IndividualProductProperties).schema()


def SportsTeam_test():
    from schorg.SportsTeam import SportsTeamInheritedProperties
    from schorg.SportsTeam import SportsTeamProperties
    from schorg.SportsTeam import SportsTeamAllProperties
    from schorg.SportsTeam import create_schema_org_model
    from schorg.SportsTeam import create_sportsteam_model
    from schorg.SportsTeam import SportsTeam

    a = create_schema_org_model(type_=SportsTeamInheritedProperties)
    b = create_schema_org_model(type_=SportsTeamProperties)
    c = create_schema_org_model(type_=SportsTeamAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportsTeam.schema()
    create_sportsteam_model(SportsTeamAllProperties).schema()
    create_sportsteam_model(SportsTeamInheritedProperties).schema()
    create_sportsteam_model(SportsTeamProperties).schema()


def HairSalon_test():
    from schorg.HairSalon import HairSalonInheritedProperties
    from schorg.HairSalon import HairSalonProperties
    from schorg.HairSalon import HairSalonAllProperties
    from schorg.HairSalon import create_schema_org_model
    from schorg.HairSalon import create_hairsalon_model
    from schorg.HairSalon import HairSalon

    a = create_schema_org_model(type_=HairSalonInheritedProperties)
    b = create_schema_org_model(type_=HairSalonProperties)
    c = create_schema_org_model(type_=HairSalonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HairSalon.schema()
    create_hairsalon_model(HairSalonAllProperties).schema()
    create_hairsalon_model(HairSalonInheritedProperties).schema()
    create_hairsalon_model(HairSalonProperties).schema()


def UseAction_test():
    from schorg.UseAction import UseActionInheritedProperties
    from schorg.UseAction import UseActionProperties
    from schorg.UseAction import UseActionAllProperties
    from schorg.UseAction import create_schema_org_model
    from schorg.UseAction import create_useaction_model
    from schorg.UseAction import UseAction

    a = create_schema_org_model(type_=UseActionInheritedProperties)
    b = create_schema_org_model(type_=UseActionProperties)
    c = create_schema_org_model(type_=UseActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UseAction.schema()
    create_useaction_model(UseActionAllProperties).schema()
    create_useaction_model(UseActionInheritedProperties).schema()
    create_useaction_model(UseActionProperties).schema()


def SoundtrackAlbum_test():
    from schorg.SoundtrackAlbum import SoundtrackAlbumInheritedProperties
    from schorg.SoundtrackAlbum import SoundtrackAlbumProperties
    from schorg.SoundtrackAlbum import SoundtrackAlbumAllProperties
    from schorg.SoundtrackAlbum import create_schema_org_model
    from schorg.SoundtrackAlbum import create_soundtrackalbum_model
    from schorg.SoundtrackAlbum import SoundtrackAlbum

    a = create_schema_org_model(type_=SoundtrackAlbumInheritedProperties)
    b = create_schema_org_model(type_=SoundtrackAlbumProperties)
    c = create_schema_org_model(type_=SoundtrackAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SoundtrackAlbum.schema()
    create_soundtrackalbum_model(SoundtrackAlbumAllProperties).schema()
    create_soundtrackalbum_model(SoundtrackAlbumInheritedProperties).schema()
    create_soundtrackalbum_model(SoundtrackAlbumProperties).schema()


def HowToStep_test():
    from schorg.HowToStep import HowToStepInheritedProperties
    from schorg.HowToStep import HowToStepProperties
    from schorg.HowToStep import HowToStepAllProperties
    from schorg.HowToStep import create_schema_org_model
    from schorg.HowToStep import create_howtostep_model
    from schorg.HowToStep import HowToStep

    a = create_schema_org_model(type_=HowToStepInheritedProperties)
    b = create_schema_org_model(type_=HowToStepProperties)
    c = create_schema_org_model(type_=HowToStepAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToStep.schema()
    create_howtostep_model(HowToStepAllProperties).schema()
    create_howtostep_model(HowToStepInheritedProperties).schema()
    create_howtostep_model(HowToStepProperties).schema()


def HardwareStore_test():
    from schorg.HardwareStore import HardwareStoreInheritedProperties
    from schorg.HardwareStore import HardwareStoreProperties
    from schorg.HardwareStore import HardwareStoreAllProperties
    from schorg.HardwareStore import create_schema_org_model
    from schorg.HardwareStore import create_hardwarestore_model
    from schorg.HardwareStore import HardwareStore

    a = create_schema_org_model(type_=HardwareStoreInheritedProperties)
    b = create_schema_org_model(type_=HardwareStoreProperties)
    c = create_schema_org_model(type_=HardwareStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HardwareStore.schema()
    create_hardwarestore_model(HardwareStoreAllProperties).schema()
    create_hardwarestore_model(HardwareStoreInheritedProperties).schema()
    create_hardwarestore_model(HardwareStoreProperties).schema()


def Virus_test():
    from schorg.Virus import VirusInheritedProperties
    from schorg.Virus import VirusProperties
    from schorg.Virus import VirusAllProperties
    from schorg.Virus import create_schema_org_model
    from schorg.Virus import create_virus_model
    from schorg.Virus import Virus

    a = create_schema_org_model(type_=VirusInheritedProperties)
    b = create_schema_org_model(type_=VirusProperties)
    c = create_schema_org_model(type_=VirusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Virus.schema()
    create_virus_model(VirusAllProperties).schema()
    create_virus_model(VirusInheritedProperties).schema()
    create_virus_model(VirusProperties).schema()


def EndorsementRating_test():
    from schorg.EndorsementRating import EndorsementRatingInheritedProperties
    from schorg.EndorsementRating import EndorsementRatingProperties
    from schorg.EndorsementRating import EndorsementRatingAllProperties
    from schorg.EndorsementRating import create_schema_org_model
    from schorg.EndorsementRating import create_endorsementrating_model
    from schorg.EndorsementRating import EndorsementRating

    a = create_schema_org_model(type_=EndorsementRatingInheritedProperties)
    b = create_schema_org_model(type_=EndorsementRatingProperties)
    c = create_schema_org_model(type_=EndorsementRatingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EndorsementRating.schema()
    create_endorsementrating_model(EndorsementRatingAllProperties).schema()
    create_endorsementrating_model(EndorsementRatingInheritedProperties).schema()
    create_endorsementrating_model(EndorsementRatingProperties).schema()


def Brewery_test():
    from schorg.Brewery import BreweryInheritedProperties
    from schorg.Brewery import BreweryProperties
    from schorg.Brewery import BreweryAllProperties
    from schorg.Brewery import create_schema_org_model
    from schorg.Brewery import create_brewery_model
    from schorg.Brewery import Brewery

    a = create_schema_org_model(type_=BreweryInheritedProperties)
    b = create_schema_org_model(type_=BreweryProperties)
    c = create_schema_org_model(type_=BreweryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Brewery.schema()
    create_brewery_model(BreweryAllProperties).schema()
    create_brewery_model(BreweryInheritedProperties).schema()
    create_brewery_model(BreweryProperties).schema()


def Country_test():
    from schorg.Country import CountryInheritedProperties
    from schorg.Country import CountryProperties
    from schorg.Country import CountryAllProperties
    from schorg.Country import create_schema_org_model
    from schorg.Country import create_country_model
    from schorg.Country import Country

    a = create_schema_org_model(type_=CountryInheritedProperties)
    b = create_schema_org_model(type_=CountryProperties)
    c = create_schema_org_model(type_=CountryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Country.schema()
    create_country_model(CountryAllProperties).schema()
    create_country_model(CountryInheritedProperties).schema()
    create_country_model(CountryProperties).schema()


def BoatTerminal_test():
    from schorg.BoatTerminal import BoatTerminalInheritedProperties
    from schorg.BoatTerminal import BoatTerminalProperties
    from schorg.BoatTerminal import BoatTerminalAllProperties
    from schorg.BoatTerminal import create_schema_org_model
    from schorg.BoatTerminal import create_boatterminal_model
    from schorg.BoatTerminal import BoatTerminal

    a = create_schema_org_model(type_=BoatTerminalInheritedProperties)
    b = create_schema_org_model(type_=BoatTerminalProperties)
    c = create_schema_org_model(type_=BoatTerminalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BoatTerminal.schema()
    create_boatterminal_model(BoatTerminalAllProperties).schema()
    create_boatterminal_model(BoatTerminalInheritedProperties).schema()
    create_boatterminal_model(BoatTerminalProperties).schema()


def Play_test():
    from schorg.Play import PlayInheritedProperties
    from schorg.Play import PlayProperties
    from schorg.Play import PlayAllProperties
    from schorg.Play import create_schema_org_model
    from schorg.Play import create_play_model
    from schorg.Play import Play

    a = create_schema_org_model(type_=PlayInheritedProperties)
    b = create_schema_org_model(type_=PlayProperties)
    c = create_schema_org_model(type_=PlayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Play.schema()
    create_play_model(PlayAllProperties).schema()
    create_play_model(PlayInheritedProperties).schema()
    create_play_model(PlayProperties).schema()


def ParkingFacility_test():
    from schorg.ParkingFacility import ParkingFacilityInheritedProperties
    from schorg.ParkingFacility import ParkingFacilityProperties
    from schorg.ParkingFacility import ParkingFacilityAllProperties
    from schorg.ParkingFacility import create_schema_org_model
    from schorg.ParkingFacility import create_parkingfacility_model
    from schorg.ParkingFacility import ParkingFacility

    a = create_schema_org_model(type_=ParkingFacilityInheritedProperties)
    b = create_schema_org_model(type_=ParkingFacilityProperties)
    c = create_schema_org_model(type_=ParkingFacilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParkingFacility.schema()
    create_parkingfacility_model(ParkingFacilityAllProperties).schema()
    create_parkingfacility_model(ParkingFacilityInheritedProperties).schema()
    create_parkingfacility_model(ParkingFacilityProperties).schema()


def MedicalDevice_test():
    from schorg.MedicalDevice import MedicalDeviceInheritedProperties
    from schorg.MedicalDevice import MedicalDeviceProperties
    from schorg.MedicalDevice import MedicalDeviceAllProperties
    from schorg.MedicalDevice import create_schema_org_model
    from schorg.MedicalDevice import create_medicaldevice_model
    from schorg.MedicalDevice import MedicalDevice

    a = create_schema_org_model(type_=MedicalDeviceInheritedProperties)
    b = create_schema_org_model(type_=MedicalDeviceProperties)
    c = create_schema_org_model(type_=MedicalDeviceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalDevice.schema()
    create_medicaldevice_model(MedicalDeviceAllProperties).schema()
    create_medicaldevice_model(MedicalDeviceInheritedProperties).schema()
    create_medicaldevice_model(MedicalDeviceProperties).schema()


def Winery_test():
    from schorg.Winery import WineryInheritedProperties
    from schorg.Winery import WineryProperties
    from schorg.Winery import WineryAllProperties
    from schorg.Winery import create_schema_org_model
    from schorg.Winery import create_winery_model
    from schorg.Winery import Winery

    a = create_schema_org_model(type_=WineryInheritedProperties)
    b = create_schema_org_model(type_=WineryProperties)
    c = create_schema_org_model(type_=WineryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Winery.schema()
    create_winery_model(WineryAllProperties).schema()
    create_winery_model(WineryInheritedProperties).schema()
    create_winery_model(WineryProperties).schema()


def CheckOutAction_test():
    from schorg.CheckOutAction import CheckOutActionInheritedProperties
    from schorg.CheckOutAction import CheckOutActionProperties
    from schorg.CheckOutAction import CheckOutActionAllProperties
    from schorg.CheckOutAction import create_schema_org_model
    from schorg.CheckOutAction import create_checkoutaction_model
    from schorg.CheckOutAction import CheckOutAction

    a = create_schema_org_model(type_=CheckOutActionInheritedProperties)
    b = create_schema_org_model(type_=CheckOutActionProperties)
    c = create_schema_org_model(type_=CheckOutActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CheckOutAction.schema()
    create_checkoutaction_model(CheckOutActionAllProperties).schema()
    create_checkoutaction_model(CheckOutActionInheritedProperties).schema()
    create_checkoutaction_model(CheckOutActionProperties).schema()


def ArchiveOrganization_test():
    from schorg.ArchiveOrganization import ArchiveOrganizationInheritedProperties
    from schorg.ArchiveOrganization import ArchiveOrganizationProperties
    from schorg.ArchiveOrganization import ArchiveOrganizationAllProperties
    from schorg.ArchiveOrganization import create_schema_org_model
    from schorg.ArchiveOrganization import create_archiveorganization_model
    from schorg.ArchiveOrganization import ArchiveOrganization

    a = create_schema_org_model(type_=ArchiveOrganizationInheritedProperties)
    b = create_schema_org_model(type_=ArchiveOrganizationProperties)
    c = create_schema_org_model(type_=ArchiveOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ArchiveOrganization.schema()
    create_archiveorganization_model(ArchiveOrganizationAllProperties).schema()
    create_archiveorganization_model(ArchiveOrganizationInheritedProperties).schema()
    create_archiveorganization_model(ArchiveOrganizationProperties).schema()


def PaymentPastDue_test():
    from schorg.PaymentPastDue import PaymentPastDueInheritedProperties
    from schorg.PaymentPastDue import PaymentPastDueProperties
    from schorg.PaymentPastDue import PaymentPastDueAllProperties
    from schorg.PaymentPastDue import create_schema_org_model
    from schorg.PaymentPastDue import create_paymentpastdue_model
    from schorg.PaymentPastDue import PaymentPastDue

    a = create_schema_org_model(type_=PaymentPastDueInheritedProperties)
    b = create_schema_org_model(type_=PaymentPastDueProperties)
    c = create_schema_org_model(type_=PaymentPastDueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentPastDue.schema()
    create_paymentpastdue_model(PaymentPastDueAllProperties).schema()
    create_paymentpastdue_model(PaymentPastDueInheritedProperties).schema()
    create_paymentpastdue_model(PaymentPastDueProperties).schema()


def GroceryStore_test():
    from schorg.GroceryStore import GroceryStoreInheritedProperties
    from schorg.GroceryStore import GroceryStoreProperties
    from schorg.GroceryStore import GroceryStoreAllProperties
    from schorg.GroceryStore import create_schema_org_model
    from schorg.GroceryStore import create_grocerystore_model
    from schorg.GroceryStore import GroceryStore

    a = create_schema_org_model(type_=GroceryStoreInheritedProperties)
    b = create_schema_org_model(type_=GroceryStoreProperties)
    c = create_schema_org_model(type_=GroceryStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GroceryStore.schema()
    create_grocerystore_model(GroceryStoreAllProperties).schema()
    create_grocerystore_model(GroceryStoreInheritedProperties).schema()
    create_grocerystore_model(GroceryStoreProperties).schema()


def EffectivenessHealthAspect_test():
    from schorg.EffectivenessHealthAspect import (
        EffectivenessHealthAspectInheritedProperties,
    )
    from schorg.EffectivenessHealthAspect import EffectivenessHealthAspectProperties
    from schorg.EffectivenessHealthAspect import EffectivenessHealthAspectAllProperties
    from schorg.EffectivenessHealthAspect import create_schema_org_model
    from schorg.EffectivenessHealthAspect import create_effectivenesshealthaspect_model
    from schorg.EffectivenessHealthAspect import EffectivenessHealthAspect

    a = create_schema_org_model(type_=EffectivenessHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=EffectivenessHealthAspectProperties)
    c = create_schema_org_model(type_=EffectivenessHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EffectivenessHealthAspect.schema()
    create_effectivenesshealthaspect_model(
        EffectivenessHealthAspectAllProperties
    ).schema()
    create_effectivenesshealthaspect_model(
        EffectivenessHealthAspectInheritedProperties
    ).schema()
    create_effectivenesshealthaspect_model(EffectivenessHealthAspectProperties).schema()


def OccupationalTherapy_test():
    from schorg.OccupationalTherapy import OccupationalTherapyInheritedProperties
    from schorg.OccupationalTherapy import OccupationalTherapyProperties
    from schorg.OccupationalTherapy import OccupationalTherapyAllProperties
    from schorg.OccupationalTherapy import create_schema_org_model
    from schorg.OccupationalTherapy import create_occupationaltherapy_model
    from schorg.OccupationalTherapy import OccupationalTherapy

    a = create_schema_org_model(type_=OccupationalTherapyInheritedProperties)
    b = create_schema_org_model(type_=OccupationalTherapyProperties)
    c = create_schema_org_model(type_=OccupationalTherapyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OccupationalTherapy.schema()
    create_occupationaltherapy_model(OccupationalTherapyAllProperties).schema()
    create_occupationaltherapy_model(OccupationalTherapyInheritedProperties).schema()
    create_occupationaltherapy_model(OccupationalTherapyProperties).schema()


def VenueMap_test():
    from schorg.VenueMap import VenueMapInheritedProperties
    from schorg.VenueMap import VenueMapProperties
    from schorg.VenueMap import VenueMapAllProperties
    from schorg.VenueMap import create_schema_org_model
    from schorg.VenueMap import create_venuemap_model
    from schorg.VenueMap import VenueMap

    a = create_schema_org_model(type_=VenueMapInheritedProperties)
    b = create_schema_org_model(type_=VenueMapProperties)
    c = create_schema_org_model(type_=VenueMapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VenueMap.schema()
    create_venuemap_model(VenueMapAllProperties).schema()
    create_venuemap_model(VenueMapInheritedProperties).schema()
    create_venuemap_model(VenueMapProperties).schema()


def EventMovedOnline_test():
    from schorg.EventMovedOnline import EventMovedOnlineInheritedProperties
    from schorg.EventMovedOnline import EventMovedOnlineProperties
    from schorg.EventMovedOnline import EventMovedOnlineAllProperties
    from schorg.EventMovedOnline import create_schema_org_model
    from schorg.EventMovedOnline import create_eventmovedonline_model
    from schorg.EventMovedOnline import EventMovedOnline

    a = create_schema_org_model(type_=EventMovedOnlineInheritedProperties)
    b = create_schema_org_model(type_=EventMovedOnlineProperties)
    c = create_schema_org_model(type_=EventMovedOnlineAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventMovedOnline.schema()
    create_eventmovedonline_model(EventMovedOnlineAllProperties).schema()
    create_eventmovedonline_model(EventMovedOnlineInheritedProperties).schema()
    create_eventmovedonline_model(EventMovedOnlineProperties).schema()


def Barcode_test():
    from schorg.Barcode import BarcodeInheritedProperties
    from schorg.Barcode import BarcodeProperties
    from schorg.Barcode import BarcodeAllProperties
    from schorg.Barcode import create_schema_org_model
    from schorg.Barcode import create_barcode_model
    from schorg.Barcode import Barcode

    a = create_schema_org_model(type_=BarcodeInheritedProperties)
    b = create_schema_org_model(type_=BarcodeProperties)
    c = create_schema_org_model(type_=BarcodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Barcode.schema()
    create_barcode_model(BarcodeAllProperties).schema()
    create_barcode_model(BarcodeInheritedProperties).schema()
    create_barcode_model(BarcodeProperties).schema()


def VeterinaryCare_test():
    from schorg.VeterinaryCare import VeterinaryCareInheritedProperties
    from schorg.VeterinaryCare import VeterinaryCareProperties
    from schorg.VeterinaryCare import VeterinaryCareAllProperties
    from schorg.VeterinaryCare import create_schema_org_model
    from schorg.VeterinaryCare import create_veterinarycare_model
    from schorg.VeterinaryCare import VeterinaryCare

    a = create_schema_org_model(type_=VeterinaryCareInheritedProperties)
    b = create_schema_org_model(type_=VeterinaryCareProperties)
    c = create_schema_org_model(type_=VeterinaryCareAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VeterinaryCare.schema()
    create_veterinarycare_model(VeterinaryCareAllProperties).schema()
    create_veterinarycare_model(VeterinaryCareInheritedProperties).schema()
    create_veterinarycare_model(VeterinaryCareProperties).schema()


def BeautySalon_test():
    from schorg.BeautySalon import BeautySalonInheritedProperties
    from schorg.BeautySalon import BeautySalonProperties
    from schorg.BeautySalon import BeautySalonAllProperties
    from schorg.BeautySalon import create_schema_org_model
    from schorg.BeautySalon import create_beautysalon_model
    from schorg.BeautySalon import BeautySalon

    a = create_schema_org_model(type_=BeautySalonInheritedProperties)
    b = create_schema_org_model(type_=BeautySalonProperties)
    c = create_schema_org_model(type_=BeautySalonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BeautySalon.schema()
    create_beautysalon_model(BeautySalonAllProperties).schema()
    create_beautysalon_model(BeautySalonInheritedProperties).schema()
    create_beautysalon_model(BeautySalonProperties).schema()


def WebSite_test():
    from schorg.WebSite import WebSiteInheritedProperties
    from schorg.WebSite import WebSiteProperties
    from schorg.WebSite import WebSiteAllProperties
    from schorg.WebSite import create_schema_org_model
    from schorg.WebSite import create_website_model
    from schorg.WebSite import WebSite

    a = create_schema_org_model(type_=WebSiteInheritedProperties)
    b = create_schema_org_model(type_=WebSiteProperties)
    c = create_schema_org_model(type_=WebSiteAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WebSite.schema()
    create_website_model(WebSiteAllProperties).schema()
    create_website_model(WebSiteInheritedProperties).schema()
    create_website_model(WebSiteProperties).schema()


def Electrician_test():
    from schorg.Electrician import ElectricianInheritedProperties
    from schorg.Electrician import ElectricianProperties
    from schorg.Electrician import ElectricianAllProperties
    from schorg.Electrician import create_schema_org_model
    from schorg.Electrician import create_electrician_model
    from schorg.Electrician import Electrician

    a = create_schema_org_model(type_=ElectricianInheritedProperties)
    b = create_schema_org_model(type_=ElectricianProperties)
    c = create_schema_org_model(type_=ElectricianAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Electrician.schema()
    create_electrician_model(ElectricianAllProperties).schema()
    create_electrician_model(ElectricianInheritedProperties).schema()
    create_electrician_model(ElectricianProperties).schema()


def EUEnergyEfficiencyCategoryE_test():
    from schorg.EUEnergyEfficiencyCategoryE import (
        EUEnergyEfficiencyCategoryEInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryE import EUEnergyEfficiencyCategoryEProperties
    from schorg.EUEnergyEfficiencyCategoryE import (
        EUEnergyEfficiencyCategoryEAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryE import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryE import (
        create_euenergyefficiencycategorye_model,
    )
    from schorg.EUEnergyEfficiencyCategoryE import EUEnergyEfficiencyCategoryE

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryEInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryEProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryEAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryE.schema()
    create_euenergyefficiencycategorye_model(
        EUEnergyEfficiencyCategoryEAllProperties
    ).schema()
    create_euenergyefficiencycategorye_model(
        EUEnergyEfficiencyCategoryEInheritedProperties
    ).schema()
    create_euenergyefficiencycategorye_model(
        EUEnergyEfficiencyCategoryEProperties
    ).schema()


def BusinessEntityType_test():
    from schorg.BusinessEntityType import BusinessEntityTypeInheritedProperties
    from schorg.BusinessEntityType import BusinessEntityTypeProperties
    from schorg.BusinessEntityType import BusinessEntityTypeAllProperties
    from schorg.BusinessEntityType import create_schema_org_model
    from schorg.BusinessEntityType import create_businessentitytype_model
    from schorg.BusinessEntityType import BusinessEntityType

    a = create_schema_org_model(type_=BusinessEntityTypeInheritedProperties)
    b = create_schema_org_model(type_=BusinessEntityTypeProperties)
    c = create_schema_org_model(type_=BusinessEntityTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusinessEntityType.schema()
    create_businessentitytype_model(BusinessEntityTypeAllProperties).schema()
    create_businessentitytype_model(BusinessEntityTypeInheritedProperties).schema()
    create_businessentitytype_model(BusinessEntityTypeProperties).schema()


def ReturnAction_test():
    from schorg.ReturnAction import ReturnActionInheritedProperties
    from schorg.ReturnAction import ReturnActionProperties
    from schorg.ReturnAction import ReturnActionAllProperties
    from schorg.ReturnAction import create_schema_org_model
    from schorg.ReturnAction import create_returnaction_model
    from schorg.ReturnAction import ReturnAction

    a = create_schema_org_model(type_=ReturnActionInheritedProperties)
    b = create_schema_org_model(type_=ReturnActionProperties)
    c = create_schema_org_model(type_=ReturnActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnAction.schema()
    create_returnaction_model(ReturnActionAllProperties).schema()
    create_returnaction_model(ReturnActionInheritedProperties).schema()
    create_returnaction_model(ReturnActionProperties).schema()


def PerformanceRole_test():
    from schorg.PerformanceRole import PerformanceRoleInheritedProperties
    from schorg.PerformanceRole import PerformanceRoleProperties
    from schorg.PerformanceRole import PerformanceRoleAllProperties
    from schorg.PerformanceRole import create_schema_org_model
    from schorg.PerformanceRole import create_performancerole_model
    from schorg.PerformanceRole import PerformanceRole

    a = create_schema_org_model(type_=PerformanceRoleInheritedProperties)
    b = create_schema_org_model(type_=PerformanceRoleProperties)
    c = create_schema_org_model(type_=PerformanceRoleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PerformanceRole.schema()
    create_performancerole_model(PerformanceRoleAllProperties).schema()
    create_performancerole_model(PerformanceRoleInheritedProperties).schema()
    create_performancerole_model(PerformanceRoleProperties).schema()


def Protein_test():
    from schorg.Protein import ProteinInheritedProperties
    from schorg.Protein import ProteinProperties
    from schorg.Protein import ProteinAllProperties
    from schorg.Protein import create_schema_org_model
    from schorg.Protein import create_protein_model
    from schorg.Protein import Protein

    a = create_schema_org_model(type_=ProteinInheritedProperties)
    b = create_schema_org_model(type_=ProteinProperties)
    c = create_schema_org_model(type_=ProteinAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Protein.schema()
    create_protein_model(ProteinAllProperties).schema()
    create_protein_model(ProteinInheritedProperties).schema()
    create_protein_model(ProteinProperties).schema()


def TrackAction_test():
    from schorg.TrackAction import TrackActionInheritedProperties
    from schorg.TrackAction import TrackActionProperties
    from schorg.TrackAction import TrackActionAllProperties
    from schorg.TrackAction import create_schema_org_model
    from schorg.TrackAction import create_trackaction_model
    from schorg.TrackAction import TrackAction

    a = create_schema_org_model(type_=TrackActionInheritedProperties)
    b = create_schema_org_model(type_=TrackActionProperties)
    c = create_schema_org_model(type_=TrackActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TrackAction.schema()
    create_trackaction_model(TrackActionAllProperties).schema()
    create_trackaction_model(TrackActionInheritedProperties).schema()
    create_trackaction_model(TrackActionProperties).schema()


def DeliveryChargeSpecification_test():
    from schorg.DeliveryChargeSpecification import (
        DeliveryChargeSpecificationInheritedProperties,
    )
    from schorg.DeliveryChargeSpecification import DeliveryChargeSpecificationProperties
    from schorg.DeliveryChargeSpecification import (
        DeliveryChargeSpecificationAllProperties,
    )
    from schorg.DeliveryChargeSpecification import create_schema_org_model
    from schorg.DeliveryChargeSpecification import (
        create_deliverychargespecification_model,
    )
    from schorg.DeliveryChargeSpecification import DeliveryChargeSpecification

    a = create_schema_org_model(type_=DeliveryChargeSpecificationInheritedProperties)
    b = create_schema_org_model(type_=DeliveryChargeSpecificationProperties)
    c = create_schema_org_model(type_=DeliveryChargeSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeliveryChargeSpecification.schema()
    create_deliverychargespecification_model(
        DeliveryChargeSpecificationAllProperties
    ).schema()
    create_deliverychargespecification_model(
        DeliveryChargeSpecificationInheritedProperties
    ).schema()
    create_deliverychargespecification_model(
        DeliveryChargeSpecificationProperties
    ).schema()


def PublicationIssue_test():
    from schorg.PublicationIssue import PublicationIssueInheritedProperties
    from schorg.PublicationIssue import PublicationIssueProperties
    from schorg.PublicationIssue import PublicationIssueAllProperties
    from schorg.PublicationIssue import create_schema_org_model
    from schorg.PublicationIssue import create_publicationissue_model
    from schorg.PublicationIssue import PublicationIssue

    a = create_schema_org_model(type_=PublicationIssueInheritedProperties)
    b = create_schema_org_model(type_=PublicationIssueProperties)
    c = create_schema_org_model(type_=PublicationIssueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicationIssue.schema()
    create_publicationissue_model(PublicationIssueAllProperties).schema()
    create_publicationissue_model(PublicationIssueInheritedProperties).schema()
    create_publicationissue_model(PublicationIssueProperties).schema()


def ComicIssue_test():
    from schorg.ComicIssue import ComicIssueInheritedProperties
    from schorg.ComicIssue import ComicIssueProperties
    from schorg.ComicIssue import ComicIssueAllProperties
    from schorg.ComicIssue import create_schema_org_model
    from schorg.ComicIssue import create_comicissue_model
    from schorg.ComicIssue import ComicIssue

    a = create_schema_org_model(type_=ComicIssueInheritedProperties)
    b = create_schema_org_model(type_=ComicIssueProperties)
    c = create_schema_org_model(type_=ComicIssueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComicIssue.schema()
    create_comicissue_model(ComicIssueAllProperties).schema()
    create_comicissue_model(ComicIssueInheritedProperties).schema()
    create_comicissue_model(ComicIssueProperties).schema()


def AgreeAction_test():
    from schorg.AgreeAction import AgreeActionInheritedProperties
    from schorg.AgreeAction import AgreeActionProperties
    from schorg.AgreeAction import AgreeActionAllProperties
    from schorg.AgreeAction import create_schema_org_model
    from schorg.AgreeAction import create_agreeaction_model
    from schorg.AgreeAction import AgreeAction

    a = create_schema_org_model(type_=AgreeActionInheritedProperties)
    b = create_schema_org_model(type_=AgreeActionProperties)
    c = create_schema_org_model(type_=AgreeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AgreeAction.schema()
    create_agreeaction_model(AgreeActionAllProperties).schema()
    create_agreeaction_model(AgreeActionInheritedProperties).schema()
    create_agreeaction_model(AgreeActionProperties).schema()


def ActiveNotRecruiting_test():
    from schorg.ActiveNotRecruiting import ActiveNotRecruitingInheritedProperties
    from schorg.ActiveNotRecruiting import ActiveNotRecruitingProperties
    from schorg.ActiveNotRecruiting import ActiveNotRecruitingAllProperties
    from schorg.ActiveNotRecruiting import create_schema_org_model
    from schorg.ActiveNotRecruiting import create_activenotrecruiting_model
    from schorg.ActiveNotRecruiting import ActiveNotRecruiting

    a = create_schema_org_model(type_=ActiveNotRecruitingInheritedProperties)
    b = create_schema_org_model(type_=ActiveNotRecruitingProperties)
    c = create_schema_org_model(type_=ActiveNotRecruitingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActiveNotRecruiting.schema()
    create_activenotrecruiting_model(ActiveNotRecruitingAllProperties).schema()
    create_activenotrecruiting_model(ActiveNotRecruitingInheritedProperties).schema()
    create_activenotrecruiting_model(ActiveNotRecruitingProperties).schema()


def Tuesday_test():
    from schorg.Tuesday import TuesdayInheritedProperties
    from schorg.Tuesday import TuesdayProperties
    from schorg.Tuesday import TuesdayAllProperties
    from schorg.Tuesday import create_schema_org_model
    from schorg.Tuesday import create_tuesday_model
    from schorg.Tuesday import Tuesday

    a = create_schema_org_model(type_=TuesdayInheritedProperties)
    b = create_schema_org_model(type_=TuesdayProperties)
    c = create_schema_org_model(type_=TuesdayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Tuesday.schema()
    create_tuesday_model(TuesdayAllProperties).schema()
    create_tuesday_model(TuesdayInheritedProperties).schema()
    create_tuesday_model(TuesdayProperties).schema()


def Protozoa_test():
    from schorg.Protozoa import ProtozoaInheritedProperties
    from schorg.Protozoa import ProtozoaProperties
    from schorg.Protozoa import ProtozoaAllProperties
    from schorg.Protozoa import create_schema_org_model
    from schorg.Protozoa import create_protozoa_model
    from schorg.Protozoa import Protozoa

    a = create_schema_org_model(type_=ProtozoaInheritedProperties)
    b = create_schema_org_model(type_=ProtozoaProperties)
    c = create_schema_org_model(type_=ProtozoaAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Protozoa.schema()
    create_protozoa_model(ProtozoaAllProperties).schema()
    create_protozoa_model(ProtozoaInheritedProperties).schema()
    create_protozoa_model(ProtozoaProperties).schema()


def LeisureTimeActivity_test():
    from schorg.LeisureTimeActivity import LeisureTimeActivityInheritedProperties
    from schorg.LeisureTimeActivity import LeisureTimeActivityProperties
    from schorg.LeisureTimeActivity import LeisureTimeActivityAllProperties
    from schorg.LeisureTimeActivity import create_schema_org_model
    from schorg.LeisureTimeActivity import create_leisuretimeactivity_model
    from schorg.LeisureTimeActivity import LeisureTimeActivity

    a = create_schema_org_model(type_=LeisureTimeActivityInheritedProperties)
    b = create_schema_org_model(type_=LeisureTimeActivityProperties)
    c = create_schema_org_model(type_=LeisureTimeActivityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LeisureTimeActivity.schema()
    create_leisuretimeactivity_model(LeisureTimeActivityAllProperties).schema()
    create_leisuretimeactivity_model(LeisureTimeActivityInheritedProperties).schema()
    create_leisuretimeactivity_model(LeisureTimeActivityProperties).schema()


def AcceptAction_test():
    from schorg.AcceptAction import AcceptActionInheritedProperties
    from schorg.AcceptAction import AcceptActionProperties
    from schorg.AcceptAction import AcceptActionAllProperties
    from schorg.AcceptAction import create_schema_org_model
    from schorg.AcceptAction import create_acceptaction_model
    from schorg.AcceptAction import AcceptAction

    a = create_schema_org_model(type_=AcceptActionInheritedProperties)
    b = create_schema_org_model(type_=AcceptActionProperties)
    c = create_schema_org_model(type_=AcceptActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AcceptAction.schema()
    create_acceptaction_model(AcceptActionAllProperties).schema()
    create_acceptaction_model(AcceptActionInheritedProperties).schema()
    create_acceptaction_model(AcceptActionProperties).schema()


def Nonprofit501c27_test():
    from schorg.Nonprofit501c27 import Nonprofit501c27InheritedProperties
    from schorg.Nonprofit501c27 import Nonprofit501c27Properties
    from schorg.Nonprofit501c27 import Nonprofit501c27AllProperties
    from schorg.Nonprofit501c27 import create_schema_org_model
    from schorg.Nonprofit501c27 import create_nonprofit501c27_model
    from schorg.Nonprofit501c27 import Nonprofit501c27

    a = create_schema_org_model(type_=Nonprofit501c27InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c27Properties)
    c = create_schema_org_model(type_=Nonprofit501c27AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c27.schema()
    create_nonprofit501c27_model(Nonprofit501c27AllProperties).schema()
    create_nonprofit501c27_model(Nonprofit501c27InheritedProperties).schema()
    create_nonprofit501c27_model(Nonprofit501c27Properties).schema()


def AlcoholConsideration_test():
    from schorg.AlcoholConsideration import AlcoholConsiderationInheritedProperties
    from schorg.AlcoholConsideration import AlcoholConsiderationProperties
    from schorg.AlcoholConsideration import AlcoholConsiderationAllProperties
    from schorg.AlcoholConsideration import create_schema_org_model
    from schorg.AlcoholConsideration import create_alcoholconsideration_model
    from schorg.AlcoholConsideration import AlcoholConsideration

    a = create_schema_org_model(type_=AlcoholConsiderationInheritedProperties)
    b = create_schema_org_model(type_=AlcoholConsiderationProperties)
    c = create_schema_org_model(type_=AlcoholConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AlcoholConsideration.schema()
    create_alcoholconsideration_model(AlcoholConsiderationAllProperties).schema()
    create_alcoholconsideration_model(AlcoholConsiderationInheritedProperties).schema()
    create_alcoholconsideration_model(AlcoholConsiderationProperties).schema()


def CDCPMDRecord_test():
    from schorg.CDCPMDRecord import CDCPMDRecordInheritedProperties
    from schorg.CDCPMDRecord import CDCPMDRecordProperties
    from schorg.CDCPMDRecord import CDCPMDRecordAllProperties
    from schorg.CDCPMDRecord import create_schema_org_model
    from schorg.CDCPMDRecord import create_cdcpmdrecord_model
    from schorg.CDCPMDRecord import CDCPMDRecord

    a = create_schema_org_model(type_=CDCPMDRecordInheritedProperties)
    b = create_schema_org_model(type_=CDCPMDRecordProperties)
    c = create_schema_org_model(type_=CDCPMDRecordAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CDCPMDRecord.schema()
    create_cdcpmdrecord_model(CDCPMDRecordAllProperties).schema()
    create_cdcpmdrecord_model(CDCPMDRecordInheritedProperties).schema()
    create_cdcpmdrecord_model(CDCPMDRecordProperties).schema()


def MensClothingStore_test():
    from schorg.MensClothingStore import MensClothingStoreInheritedProperties
    from schorg.MensClothingStore import MensClothingStoreProperties
    from schorg.MensClothingStore import MensClothingStoreAllProperties
    from schorg.MensClothingStore import create_schema_org_model
    from schorg.MensClothingStore import create_mensclothingstore_model
    from schorg.MensClothingStore import MensClothingStore

    a = create_schema_org_model(type_=MensClothingStoreInheritedProperties)
    b = create_schema_org_model(type_=MensClothingStoreProperties)
    c = create_schema_org_model(type_=MensClothingStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MensClothingStore.schema()
    create_mensclothingstore_model(MensClothingStoreAllProperties).schema()
    create_mensclothingstore_model(MensClothingStoreInheritedProperties).schema()
    create_mensclothingstore_model(MensClothingStoreProperties).schema()


def CollegeOrUniversity_test():
    from schorg.CollegeOrUniversity import CollegeOrUniversityInheritedProperties
    from schorg.CollegeOrUniversity import CollegeOrUniversityProperties
    from schorg.CollegeOrUniversity import CollegeOrUniversityAllProperties
    from schorg.CollegeOrUniversity import create_schema_org_model
    from schorg.CollegeOrUniversity import create_collegeoruniversity_model
    from schorg.CollegeOrUniversity import CollegeOrUniversity

    a = create_schema_org_model(type_=CollegeOrUniversityInheritedProperties)
    b = create_schema_org_model(type_=CollegeOrUniversityProperties)
    c = create_schema_org_model(type_=CollegeOrUniversityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CollegeOrUniversity.schema()
    create_collegeoruniversity_model(CollegeOrUniversityAllProperties).schema()
    create_collegeoruniversity_model(CollegeOrUniversityInheritedProperties).schema()
    create_collegeoruniversity_model(CollegeOrUniversityProperties).schema()


def SheetMusic_test():
    from schorg.SheetMusic import SheetMusicInheritedProperties
    from schorg.SheetMusic import SheetMusicProperties
    from schorg.SheetMusic import SheetMusicAllProperties
    from schorg.SheetMusic import create_schema_org_model
    from schorg.SheetMusic import create_sheetmusic_model
    from schorg.SheetMusic import SheetMusic

    a = create_schema_org_model(type_=SheetMusicInheritedProperties)
    b = create_schema_org_model(type_=SheetMusicProperties)
    c = create_schema_org_model(type_=SheetMusicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SheetMusic.schema()
    create_sheetmusic_model(SheetMusicAllProperties).schema()
    create_sheetmusic_model(SheetMusicInheritedProperties).schema()
    create_sheetmusic_model(SheetMusicProperties).schema()


def WPAdBlock_test():
    from schorg.WPAdBlock import WPAdBlockInheritedProperties
    from schorg.WPAdBlock import WPAdBlockProperties
    from schorg.WPAdBlock import WPAdBlockAllProperties
    from schorg.WPAdBlock import create_schema_org_model
    from schorg.WPAdBlock import create_wpadblock_model
    from schorg.WPAdBlock import WPAdBlock

    a = create_schema_org_model(type_=WPAdBlockInheritedProperties)
    b = create_schema_org_model(type_=WPAdBlockProperties)
    c = create_schema_org_model(type_=WPAdBlockAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WPAdBlock.schema()
    create_wpadblock_model(WPAdBlockAllProperties).schema()
    create_wpadblock_model(WPAdBlockInheritedProperties).schema()
    create_wpadblock_model(WPAdBlockProperties).schema()


def UserBlocks_test():
    from schorg.UserBlocks import UserBlocksInheritedProperties
    from schorg.UserBlocks import UserBlocksProperties
    from schorg.UserBlocks import UserBlocksAllProperties
    from schorg.UserBlocks import create_schema_org_model
    from schorg.UserBlocks import create_userblocks_model
    from schorg.UserBlocks import UserBlocks

    a = create_schema_org_model(type_=UserBlocksInheritedProperties)
    b = create_schema_org_model(type_=UserBlocksProperties)
    c = create_schema_org_model(type_=UserBlocksAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserBlocks.schema()
    create_userblocks_model(UserBlocksAllProperties).schema()
    create_userblocks_model(UserBlocksInheritedProperties).schema()
    create_userblocks_model(UserBlocksProperties).schema()


def SeaBodyOfWater_test():
    from schorg.SeaBodyOfWater import SeaBodyOfWaterInheritedProperties
    from schorg.SeaBodyOfWater import SeaBodyOfWaterProperties
    from schorg.SeaBodyOfWater import SeaBodyOfWaterAllProperties
    from schorg.SeaBodyOfWater import create_schema_org_model
    from schorg.SeaBodyOfWater import create_seabodyofwater_model
    from schorg.SeaBodyOfWater import SeaBodyOfWater

    a = create_schema_org_model(type_=SeaBodyOfWaterInheritedProperties)
    b = create_schema_org_model(type_=SeaBodyOfWaterProperties)
    c = create_schema_org_model(type_=SeaBodyOfWaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SeaBodyOfWater.schema()
    create_seabodyofwater_model(SeaBodyOfWaterAllProperties).schema()
    create_seabodyofwater_model(SeaBodyOfWaterInheritedProperties).schema()
    create_seabodyofwater_model(SeaBodyOfWaterProperties).schema()


def WearableMeasurementWidth_test():
    from schorg.WearableMeasurementWidth import (
        WearableMeasurementWidthInheritedProperties,
    )
    from schorg.WearableMeasurementWidth import WearableMeasurementWidthProperties
    from schorg.WearableMeasurementWidth import WearableMeasurementWidthAllProperties
    from schorg.WearableMeasurementWidth import create_schema_org_model
    from schorg.WearableMeasurementWidth import create_wearablemeasurementwidth_model
    from schorg.WearableMeasurementWidth import WearableMeasurementWidth

    a = create_schema_org_model(type_=WearableMeasurementWidthInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementWidthProperties)
    c = create_schema_org_model(type_=WearableMeasurementWidthAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementWidth.schema()
    create_wearablemeasurementwidth_model(
        WearableMeasurementWidthAllProperties
    ).schema()
    create_wearablemeasurementwidth_model(
        WearableMeasurementWidthInheritedProperties
    ).schema()
    create_wearablemeasurementwidth_model(WearableMeasurementWidthProperties).schema()


def VisualArtsEvent_test():
    from schorg.VisualArtsEvent import VisualArtsEventInheritedProperties
    from schorg.VisualArtsEvent import VisualArtsEventProperties
    from schorg.VisualArtsEvent import VisualArtsEventAllProperties
    from schorg.VisualArtsEvent import create_schema_org_model
    from schorg.VisualArtsEvent import create_visualartsevent_model
    from schorg.VisualArtsEvent import VisualArtsEvent

    a = create_schema_org_model(type_=VisualArtsEventInheritedProperties)
    b = create_schema_org_model(type_=VisualArtsEventProperties)
    c = create_schema_org_model(type_=VisualArtsEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VisualArtsEvent.schema()
    create_visualartsevent_model(VisualArtsEventAllProperties).schema()
    create_visualartsevent_model(VisualArtsEventInheritedProperties).schema()
    create_visualartsevent_model(VisualArtsEventProperties).schema()


def Language_test():
    from schorg.Language import LanguageInheritedProperties
    from schorg.Language import LanguageProperties
    from schorg.Language import LanguageAllProperties
    from schorg.Language import create_schema_org_model
    from schorg.Language import create_language_model
    from schorg.Language import Language

    a = create_schema_org_model(type_=LanguageInheritedProperties)
    b = create_schema_org_model(type_=LanguageProperties)
    c = create_schema_org_model(type_=LanguageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Language.schema()
    create_language_model(LanguageAllProperties).schema()
    create_language_model(LanguageInheritedProperties).schema()
    create_language_model(LanguageProperties).schema()


def TollFree_test():
    from schorg.TollFree import TollFreeInheritedProperties
    from schorg.TollFree import TollFreeProperties
    from schorg.TollFree import TollFreeAllProperties
    from schorg.TollFree import create_schema_org_model
    from schorg.TollFree import create_tollfree_model
    from schorg.TollFree import TollFree

    a = create_schema_org_model(type_=TollFreeInheritedProperties)
    b = create_schema_org_model(type_=TollFreeProperties)
    c = create_schema_org_model(type_=TollFreeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TollFree.schema()
    create_tollfree_model(TollFreeAllProperties).schema()
    create_tollfree_model(TollFreeInheritedProperties).schema()
    create_tollfree_model(TollFreeProperties).schema()


def PathologyTest_test():
    from schorg.PathologyTest import PathologyTestInheritedProperties
    from schorg.PathologyTest import PathologyTestProperties
    from schorg.PathologyTest import PathologyTestAllProperties
    from schorg.PathologyTest import create_schema_org_model
    from schorg.PathologyTest import create_pathologytest_model
    from schorg.PathologyTest import PathologyTest

    a = create_schema_org_model(type_=PathologyTestInheritedProperties)
    b = create_schema_org_model(type_=PathologyTestProperties)
    c = create_schema_org_model(type_=PathologyTestAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PathologyTest.schema()
    create_pathologytest_model(PathologyTestAllProperties).schema()
    create_pathologytest_model(PathologyTestInheritedProperties).schema()
    create_pathologytest_model(PathologyTestProperties).schema()


def DrivingSchoolVehicleUsage_test():
    from schorg.DrivingSchoolVehicleUsage import (
        DrivingSchoolVehicleUsageInheritedProperties,
    )
    from schorg.DrivingSchoolVehicleUsage import DrivingSchoolVehicleUsageProperties
    from schorg.DrivingSchoolVehicleUsage import DrivingSchoolVehicleUsageAllProperties
    from schorg.DrivingSchoolVehicleUsage import create_schema_org_model
    from schorg.DrivingSchoolVehicleUsage import create_drivingschoolvehicleusage_model
    from schorg.DrivingSchoolVehicleUsage import DrivingSchoolVehicleUsage

    a = create_schema_org_model(type_=DrivingSchoolVehicleUsageInheritedProperties)
    b = create_schema_org_model(type_=DrivingSchoolVehicleUsageProperties)
    c = create_schema_org_model(type_=DrivingSchoolVehicleUsageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrivingSchoolVehicleUsage.schema()
    create_drivingschoolvehicleusage_model(
        DrivingSchoolVehicleUsageAllProperties
    ).schema()
    create_drivingschoolvehicleusage_model(
        DrivingSchoolVehicleUsageInheritedProperties
    ).schema()
    create_drivingschoolvehicleusage_model(DrivingSchoolVehicleUsageProperties).schema()


def VideoGameSeries_test():
    from schorg.VideoGameSeries import VideoGameSeriesInheritedProperties
    from schorg.VideoGameSeries import VideoGameSeriesProperties
    from schorg.VideoGameSeries import VideoGameSeriesAllProperties
    from schorg.VideoGameSeries import create_schema_org_model
    from schorg.VideoGameSeries import create_videogameseries_model
    from schorg.VideoGameSeries import VideoGameSeries

    a = create_schema_org_model(type_=VideoGameSeriesInheritedProperties)
    b = create_schema_org_model(type_=VideoGameSeriesProperties)
    c = create_schema_org_model(type_=VideoGameSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoGameSeries.schema()
    create_videogameseries_model(VideoGameSeriesAllProperties).schema()
    create_videogameseries_model(VideoGameSeriesInheritedProperties).schema()
    create_videogameseries_model(VideoGameSeriesProperties).schema()


def OnDemandEvent_test():
    from schorg.OnDemandEvent import OnDemandEventInheritedProperties
    from schorg.OnDemandEvent import OnDemandEventProperties
    from schorg.OnDemandEvent import OnDemandEventAllProperties
    from schorg.OnDemandEvent import create_schema_org_model
    from schorg.OnDemandEvent import create_ondemandevent_model
    from schorg.OnDemandEvent import OnDemandEvent

    a = create_schema_org_model(type_=OnDemandEventInheritedProperties)
    b = create_schema_org_model(type_=OnDemandEventProperties)
    c = create_schema_org_model(type_=OnDemandEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnDemandEvent.schema()
    create_ondemandevent_model(OnDemandEventAllProperties).schema()
    create_ondemandevent_model(OnDemandEventInheritedProperties).schema()
    create_ondemandevent_model(OnDemandEventProperties).schema()


def Pulmonary_test():
    from schorg.Pulmonary import PulmonaryInheritedProperties
    from schorg.Pulmonary import PulmonaryProperties
    from schorg.Pulmonary import PulmonaryAllProperties
    from schorg.Pulmonary import create_schema_org_model
    from schorg.Pulmonary import create_pulmonary_model
    from schorg.Pulmonary import Pulmonary

    a = create_schema_org_model(type_=PulmonaryInheritedProperties)
    b = create_schema_org_model(type_=PulmonaryProperties)
    c = create_schema_org_model(type_=PulmonaryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Pulmonary.schema()
    create_pulmonary_model(PulmonaryAllProperties).schema()
    create_pulmonary_model(PulmonaryInheritedProperties).schema()
    create_pulmonary_model(PulmonaryProperties).schema()


def HealthClub_test():
    from schorg.HealthClub import HealthClubInheritedProperties
    from schorg.HealthClub import HealthClubProperties
    from schorg.HealthClub import HealthClubAllProperties
    from schorg.HealthClub import create_schema_org_model
    from schorg.HealthClub import create_healthclub_model
    from schorg.HealthClub import HealthClub

    a = create_schema_org_model(type_=HealthClubInheritedProperties)
    b = create_schema_org_model(type_=HealthClubProperties)
    c = create_schema_org_model(type_=HealthClubAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthClub.schema()
    create_healthclub_model(HealthClubAllProperties).schema()
    create_healthclub_model(HealthClubInheritedProperties).schema()
    create_healthclub_model(HealthClubProperties).schema()


def StagedContent_test():
    from schorg.StagedContent import StagedContentInheritedProperties
    from schorg.StagedContent import StagedContentProperties
    from schorg.StagedContent import StagedContentAllProperties
    from schorg.StagedContent import create_schema_org_model
    from schorg.StagedContent import create_stagedcontent_model
    from schorg.StagedContent import StagedContent

    a = create_schema_org_model(type_=StagedContentInheritedProperties)
    b = create_schema_org_model(type_=StagedContentProperties)
    c = create_schema_org_model(type_=StagedContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    StagedContent.schema()
    create_stagedcontent_model(StagedContentAllProperties).schema()
    create_stagedcontent_model(StagedContentInheritedProperties).schema()
    create_stagedcontent_model(StagedContentProperties).schema()


def Nonprofit501c9_test():
    from schorg.Nonprofit501c9 import Nonprofit501c9InheritedProperties
    from schorg.Nonprofit501c9 import Nonprofit501c9Properties
    from schorg.Nonprofit501c9 import Nonprofit501c9AllProperties
    from schorg.Nonprofit501c9 import create_schema_org_model
    from schorg.Nonprofit501c9 import create_nonprofit501c9_model
    from schorg.Nonprofit501c9 import Nonprofit501c9

    a = create_schema_org_model(type_=Nonprofit501c9InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c9Properties)
    c = create_schema_org_model(type_=Nonprofit501c9AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c9.schema()
    create_nonprofit501c9_model(Nonprofit501c9AllProperties).schema()
    create_nonprofit501c9_model(Nonprofit501c9InheritedProperties).schema()
    create_nonprofit501c9_model(Nonprofit501c9Properties).schema()


def FastFoodRestaurant_test():
    from schorg.FastFoodRestaurant import FastFoodRestaurantInheritedProperties
    from schorg.FastFoodRestaurant import FastFoodRestaurantProperties
    from schorg.FastFoodRestaurant import FastFoodRestaurantAllProperties
    from schorg.FastFoodRestaurant import create_schema_org_model
    from schorg.FastFoodRestaurant import create_fastfoodrestaurant_model
    from schorg.FastFoodRestaurant import FastFoodRestaurant

    a = create_schema_org_model(type_=FastFoodRestaurantInheritedProperties)
    b = create_schema_org_model(type_=FastFoodRestaurantProperties)
    c = create_schema_org_model(type_=FastFoodRestaurantAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FastFoodRestaurant.schema()
    create_fastfoodrestaurant_model(FastFoodRestaurantAllProperties).schema()
    create_fastfoodrestaurant_model(FastFoodRestaurantInheritedProperties).schema()
    create_fastfoodrestaurant_model(FastFoodRestaurantProperties).schema()


def BusinessFunction_test():
    from schorg.BusinessFunction import BusinessFunctionInheritedProperties
    from schorg.BusinessFunction import BusinessFunctionProperties
    from schorg.BusinessFunction import BusinessFunctionAllProperties
    from schorg.BusinessFunction import create_schema_org_model
    from schorg.BusinessFunction import create_businessfunction_model
    from schorg.BusinessFunction import BusinessFunction

    a = create_schema_org_model(type_=BusinessFunctionInheritedProperties)
    b = create_schema_org_model(type_=BusinessFunctionProperties)
    c = create_schema_org_model(type_=BusinessFunctionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusinessFunction.schema()
    create_businessfunction_model(BusinessFunctionAllProperties).schema()
    create_businessfunction_model(BusinessFunctionInheritedProperties).schema()
    create_businessfunction_model(BusinessFunctionProperties).schema()


def Dermatologic_test():
    from schorg.Dermatologic import DermatologicInheritedProperties
    from schorg.Dermatologic import DermatologicProperties
    from schorg.Dermatologic import DermatologicAllProperties
    from schorg.Dermatologic import create_schema_org_model
    from schorg.Dermatologic import create_dermatologic_model
    from schorg.Dermatologic import Dermatologic

    a = create_schema_org_model(type_=DermatologicInheritedProperties)
    b = create_schema_org_model(type_=DermatologicProperties)
    c = create_schema_org_model(type_=DermatologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Dermatologic.schema()
    create_dermatologic_model(DermatologicAllProperties).schema()
    create_dermatologic_model(DermatologicInheritedProperties).schema()
    create_dermatologic_model(DermatologicProperties).schema()


def PaymentDue_test():
    from schorg.PaymentDue import PaymentDueInheritedProperties
    from schorg.PaymentDue import PaymentDueProperties
    from schorg.PaymentDue import PaymentDueAllProperties
    from schorg.PaymentDue import create_schema_org_model
    from schorg.PaymentDue import create_paymentdue_model
    from schorg.PaymentDue import PaymentDue

    a = create_schema_org_model(type_=PaymentDueInheritedProperties)
    b = create_schema_org_model(type_=PaymentDueProperties)
    c = create_schema_org_model(type_=PaymentDueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentDue.schema()
    create_paymentdue_model(PaymentDueAllProperties).schema()
    create_paymentdue_model(PaymentDueInheritedProperties).schema()
    create_paymentdue_model(PaymentDueProperties).schema()


def DJMixAlbum_test():
    from schorg.DJMixAlbum import DJMixAlbumInheritedProperties
    from schorg.DJMixAlbum import DJMixAlbumProperties
    from schorg.DJMixAlbum import DJMixAlbumAllProperties
    from schorg.DJMixAlbum import create_schema_org_model
    from schorg.DJMixAlbum import create_djmixalbum_model
    from schorg.DJMixAlbum import DJMixAlbum

    a = create_schema_org_model(type_=DJMixAlbumInheritedProperties)
    b = create_schema_org_model(type_=DJMixAlbumProperties)
    c = create_schema_org_model(type_=DJMixAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DJMixAlbum.schema()
    create_djmixalbum_model(DJMixAlbumAllProperties).schema()
    create_djmixalbum_model(DJMixAlbumInheritedProperties).schema()
    create_djmixalbum_model(DJMixAlbumProperties).schema()


def URL_test():
    from schorg.URL import URLInheritedProperties
    from schorg.URL import URLProperties
    from schorg.URL import URLAllProperties
    from schorg.URL import create_schema_org_model
    from schorg.URL import create_url_model
    from schorg.URL import URL

    a = create_schema_org_model(type_=URLInheritedProperties)
    b = create_schema_org_model(type_=URLProperties)
    c = create_schema_org_model(type_=URLAllProperties)
    a.schema()
    b.schema()
    c.schema()
    URL.schema()
    create_url_model(URLAllProperties).schema()
    create_url_model(URLInheritedProperties).schema()
    create_url_model(URLProperties).schema()


def EducationalAudience_test():
    from schorg.EducationalAudience import EducationalAudienceInheritedProperties
    from schorg.EducationalAudience import EducationalAudienceProperties
    from schorg.EducationalAudience import EducationalAudienceAllProperties
    from schorg.EducationalAudience import create_schema_org_model
    from schorg.EducationalAudience import create_educationalaudience_model
    from schorg.EducationalAudience import EducationalAudience

    a = create_schema_org_model(type_=EducationalAudienceInheritedProperties)
    b = create_schema_org_model(type_=EducationalAudienceProperties)
    c = create_schema_org_model(type_=EducationalAudienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EducationalAudience.schema()
    create_educationalaudience_model(EducationalAudienceAllProperties).schema()
    create_educationalaudience_model(EducationalAudienceInheritedProperties).schema()
    create_educationalaudience_model(EducationalAudienceProperties).schema()


def GamePlayMode_test():
    from schorg.GamePlayMode import GamePlayModeInheritedProperties
    from schorg.GamePlayMode import GamePlayModeProperties
    from schorg.GamePlayMode import GamePlayModeAllProperties
    from schorg.GamePlayMode import create_schema_org_model
    from schorg.GamePlayMode import create_gameplaymode_model
    from schorg.GamePlayMode import GamePlayMode

    a = create_schema_org_model(type_=GamePlayModeInheritedProperties)
    b = create_schema_org_model(type_=GamePlayModeProperties)
    c = create_schema_org_model(type_=GamePlayModeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GamePlayMode.schema()
    create_gameplaymode_model(GamePlayModeAllProperties).schema()
    create_gameplaymode_model(GamePlayModeInheritedProperties).schema()
    create_gameplaymode_model(GamePlayModeProperties).schema()


def SinglePlayer_test():
    from schorg.SinglePlayer import SinglePlayerInheritedProperties
    from schorg.SinglePlayer import SinglePlayerProperties
    from schorg.SinglePlayer import SinglePlayerAllProperties
    from schorg.SinglePlayer import create_schema_org_model
    from schorg.SinglePlayer import create_singleplayer_model
    from schorg.SinglePlayer import SinglePlayer

    a = create_schema_org_model(type_=SinglePlayerInheritedProperties)
    b = create_schema_org_model(type_=SinglePlayerProperties)
    c = create_schema_org_model(type_=SinglePlayerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SinglePlayer.schema()
    create_singleplayer_model(SinglePlayerAllProperties).schema()
    create_singleplayer_model(SinglePlayerInheritedProperties).schema()
    create_singleplayer_model(SinglePlayerProperties).schema()


def HealthCare_test():
    from schorg.HealthCare import HealthCareInheritedProperties
    from schorg.HealthCare import HealthCareProperties
    from schorg.HealthCare import HealthCareAllProperties
    from schorg.HealthCare import create_schema_org_model
    from schorg.HealthCare import create_healthcare_model
    from schorg.HealthCare import HealthCare

    a = create_schema_org_model(type_=HealthCareInheritedProperties)
    b = create_schema_org_model(type_=HealthCareProperties)
    c = create_schema_org_model(type_=HealthCareAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthCare.schema()
    create_healthcare_model(HealthCareAllProperties).schema()
    create_healthcare_model(HealthCareInheritedProperties).schema()
    create_healthcare_model(HealthCareProperties).schema()


def PreventionHealthAspect_test():
    from schorg.PreventionHealthAspect import PreventionHealthAspectInheritedProperties
    from schorg.PreventionHealthAspect import PreventionHealthAspectProperties
    from schorg.PreventionHealthAspect import PreventionHealthAspectAllProperties
    from schorg.PreventionHealthAspect import create_schema_org_model
    from schorg.PreventionHealthAspect import create_preventionhealthaspect_model
    from schorg.PreventionHealthAspect import PreventionHealthAspect

    a = create_schema_org_model(type_=PreventionHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=PreventionHealthAspectProperties)
    c = create_schema_org_model(type_=PreventionHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PreventionHealthAspect.schema()
    create_preventionhealthaspect_model(PreventionHealthAspectAllProperties).schema()
    create_preventionhealthaspect_model(
        PreventionHealthAspectInheritedProperties
    ).schema()
    create_preventionhealthaspect_model(PreventionHealthAspectProperties).schema()


def DepartAction_test():
    from schorg.DepartAction import DepartActionInheritedProperties
    from schorg.DepartAction import DepartActionProperties
    from schorg.DepartAction import DepartActionAllProperties
    from schorg.DepartAction import create_schema_org_model
    from schorg.DepartAction import create_departaction_model
    from schorg.DepartAction import DepartAction

    a = create_schema_org_model(type_=DepartActionInheritedProperties)
    b = create_schema_org_model(type_=DepartActionProperties)
    c = create_schema_org_model(type_=DepartActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DepartAction.schema()
    create_departaction_model(DepartActionAllProperties).schema()
    create_departaction_model(DepartActionInheritedProperties).schema()
    create_departaction_model(DepartActionProperties).schema()


def EnergyConsumptionDetails_test():
    from schorg.EnergyConsumptionDetails import (
        EnergyConsumptionDetailsInheritedProperties,
    )
    from schorg.EnergyConsumptionDetails import EnergyConsumptionDetailsProperties
    from schorg.EnergyConsumptionDetails import EnergyConsumptionDetailsAllProperties
    from schorg.EnergyConsumptionDetails import create_schema_org_model
    from schorg.EnergyConsumptionDetails import create_energyconsumptiondetails_model
    from schorg.EnergyConsumptionDetails import EnergyConsumptionDetails

    a = create_schema_org_model(type_=EnergyConsumptionDetailsInheritedProperties)
    b = create_schema_org_model(type_=EnergyConsumptionDetailsProperties)
    c = create_schema_org_model(type_=EnergyConsumptionDetailsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EnergyConsumptionDetails.schema()
    create_energyconsumptiondetails_model(
        EnergyConsumptionDetailsAllProperties
    ).schema()
    create_energyconsumptiondetails_model(
        EnergyConsumptionDetailsInheritedProperties
    ).schema()
    create_energyconsumptiondetails_model(EnergyConsumptionDetailsProperties).schema()


def Painting_test():
    from schorg.Painting import PaintingInheritedProperties
    from schorg.Painting import PaintingProperties
    from schorg.Painting import PaintingAllProperties
    from schorg.Painting import create_schema_org_model
    from schorg.Painting import create_painting_model
    from schorg.Painting import Painting

    a = create_schema_org_model(type_=PaintingInheritedProperties)
    b = create_schema_org_model(type_=PaintingProperties)
    c = create_schema_org_model(type_=PaintingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Painting.schema()
    create_painting_model(PaintingAllProperties).schema()
    create_painting_model(PaintingInheritedProperties).schema()
    create_painting_model(PaintingProperties).schema()


def MultiPlayer_test():
    from schorg.MultiPlayer import MultiPlayerInheritedProperties
    from schorg.MultiPlayer import MultiPlayerProperties
    from schorg.MultiPlayer import MultiPlayerAllProperties
    from schorg.MultiPlayer import create_schema_org_model
    from schorg.MultiPlayer import create_multiplayer_model
    from schorg.MultiPlayer import MultiPlayer

    a = create_schema_org_model(type_=MultiPlayerInheritedProperties)
    b = create_schema_org_model(type_=MultiPlayerProperties)
    c = create_schema_org_model(type_=MultiPlayerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MultiPlayer.schema()
    create_multiplayer_model(MultiPlayerAllProperties).schema()
    create_multiplayer_model(MultiPlayerInheritedProperties).schema()
    create_multiplayer_model(MultiPlayerProperties).schema()


def CreditCard_test():
    from schorg.CreditCard import CreditCardInheritedProperties
    from schorg.CreditCard import CreditCardProperties
    from schorg.CreditCard import CreditCardAllProperties
    from schorg.CreditCard import create_schema_org_model
    from schorg.CreditCard import create_creditcard_model
    from schorg.CreditCard import CreditCard

    a = create_schema_org_model(type_=CreditCardInheritedProperties)
    b = create_schema_org_model(type_=CreditCardProperties)
    c = create_schema_org_model(type_=CreditCardAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CreditCard.schema()
    create_creditcard_model(CreditCardAllProperties).schema()
    create_creditcard_model(CreditCardInheritedProperties).schema()
    create_creditcard_model(CreditCardProperties).schema()


def LimitedAvailability_test():
    from schorg.LimitedAvailability import LimitedAvailabilityInheritedProperties
    from schorg.LimitedAvailability import LimitedAvailabilityProperties
    from schorg.LimitedAvailability import LimitedAvailabilityAllProperties
    from schorg.LimitedAvailability import create_schema_org_model
    from schorg.LimitedAvailability import create_limitedavailability_model
    from schorg.LimitedAvailability import LimitedAvailability

    a = create_schema_org_model(type_=LimitedAvailabilityInheritedProperties)
    b = create_schema_org_model(type_=LimitedAvailabilityProperties)
    c = create_schema_org_model(type_=LimitedAvailabilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LimitedAvailability.schema()
    create_limitedavailability_model(LimitedAvailabilityAllProperties).schema()
    create_limitedavailability_model(LimitedAvailabilityInheritedProperties).schema()
    create_limitedavailability_model(LimitedAvailabilityProperties).schema()


def VeganDiet_test():
    from schorg.VeganDiet import VeganDietInheritedProperties
    from schorg.VeganDiet import VeganDietProperties
    from schorg.VeganDiet import VeganDietAllProperties
    from schorg.VeganDiet import create_schema_org_model
    from schorg.VeganDiet import create_vegandiet_model
    from schorg.VeganDiet import VeganDiet

    a = create_schema_org_model(type_=VeganDietInheritedProperties)
    b = create_schema_org_model(type_=VeganDietProperties)
    c = create_schema_org_model(type_=VeganDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VeganDiet.schema()
    create_vegandiet_model(VeganDietAllProperties).schema()
    create_vegandiet_model(VeganDietInheritedProperties).schema()
    create_vegandiet_model(VeganDietProperties).schema()


def ApplyAction_test():
    from schorg.ApplyAction import ApplyActionInheritedProperties
    from schorg.ApplyAction import ApplyActionProperties
    from schorg.ApplyAction import ApplyActionAllProperties
    from schorg.ApplyAction import create_schema_org_model
    from schorg.ApplyAction import create_applyaction_model
    from schorg.ApplyAction import ApplyAction

    a = create_schema_org_model(type_=ApplyActionInheritedProperties)
    b = create_schema_org_model(type_=ApplyActionProperties)
    c = create_schema_org_model(type_=ApplyActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ApplyAction.schema()
    create_applyaction_model(ApplyActionAllProperties).schema()
    create_applyaction_model(ApplyActionInheritedProperties).schema()
    create_applyaction_model(ApplyActionProperties).schema()


def ParkingMap_test():
    from schorg.ParkingMap import ParkingMapInheritedProperties
    from schorg.ParkingMap import ParkingMapProperties
    from schorg.ParkingMap import ParkingMapAllProperties
    from schorg.ParkingMap import create_schema_org_model
    from schorg.ParkingMap import create_parkingmap_model
    from schorg.ParkingMap import ParkingMap

    a = create_schema_org_model(type_=ParkingMapInheritedProperties)
    b = create_schema_org_model(type_=ParkingMapProperties)
    c = create_schema_org_model(type_=ParkingMapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParkingMap.schema()
    create_parkingmap_model(ParkingMapAllProperties).schema()
    create_parkingmap_model(ParkingMapInheritedProperties).schema()
    create_parkingmap_model(ParkingMapProperties).schema()


def GiveAction_test():
    from schorg.GiveAction import GiveActionInheritedProperties
    from schorg.GiveAction import GiveActionProperties
    from schorg.GiveAction import GiveActionAllProperties
    from schorg.GiveAction import create_schema_org_model
    from schorg.GiveAction import create_giveaction_model
    from schorg.GiveAction import GiveAction

    a = create_schema_org_model(type_=GiveActionInheritedProperties)
    b = create_schema_org_model(type_=GiveActionProperties)
    c = create_schema_org_model(type_=GiveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GiveAction.schema()
    create_giveaction_model(GiveActionAllProperties).schema()
    create_giveaction_model(GiveActionInheritedProperties).schema()
    create_giveaction_model(GiveActionProperties).schema()


def Ayurvedic_test():
    from schorg.Ayurvedic import AyurvedicInheritedProperties
    from schorg.Ayurvedic import AyurvedicProperties
    from schorg.Ayurvedic import AyurvedicAllProperties
    from schorg.Ayurvedic import create_schema_org_model
    from schorg.Ayurvedic import create_ayurvedic_model
    from schorg.Ayurvedic import Ayurvedic

    a = create_schema_org_model(type_=AyurvedicInheritedProperties)
    b = create_schema_org_model(type_=AyurvedicProperties)
    c = create_schema_org_model(type_=AyurvedicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Ayurvedic.schema()
    create_ayurvedic_model(AyurvedicAllProperties).schema()
    create_ayurvedic_model(AyurvedicInheritedProperties).schema()
    create_ayurvedic_model(AyurvedicProperties).schema()


def WearableSizeGroupExtraTall_test():
    from schorg.WearableSizeGroupExtraTall import (
        WearableSizeGroupExtraTallInheritedProperties,
    )
    from schorg.WearableSizeGroupExtraTall import WearableSizeGroupExtraTallProperties
    from schorg.WearableSizeGroupExtraTall import (
        WearableSizeGroupExtraTallAllProperties,
    )
    from schorg.WearableSizeGroupExtraTall import create_schema_org_model
    from schorg.WearableSizeGroupExtraTall import (
        create_wearablesizegroupextratall_model,
    )
    from schorg.WearableSizeGroupExtraTall import WearableSizeGroupExtraTall

    a = create_schema_org_model(type_=WearableSizeGroupExtraTallInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupExtraTallProperties)
    c = create_schema_org_model(type_=WearableSizeGroupExtraTallAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupExtraTall.schema()
    create_wearablesizegroupextratall_model(
        WearableSizeGroupExtraTallAllProperties
    ).schema()
    create_wearablesizegroupextratall_model(
        WearableSizeGroupExtraTallInheritedProperties
    ).schema()
    create_wearablesizegroupextratall_model(
        WearableSizeGroupExtraTallProperties
    ).schema()


def TVSeries_test():
    from schorg.TVSeries import TVSeriesInheritedProperties
    from schorg.TVSeries import TVSeriesProperties
    from schorg.TVSeries import TVSeriesAllProperties
    from schorg.TVSeries import create_schema_org_model
    from schorg.TVSeries import create_tvseries_model
    from schorg.TVSeries import TVSeries

    a = create_schema_org_model(type_=TVSeriesInheritedProperties)
    b = create_schema_org_model(type_=TVSeriesProperties)
    c = create_schema_org_model(type_=TVSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TVSeries.schema()
    create_tvseries_model(TVSeriesAllProperties).schema()
    create_tvseries_model(TVSeriesInheritedProperties).schema()
    create_tvseries_model(TVSeriesProperties).schema()


def FloorPlan_test():
    from schorg.FloorPlan import FloorPlanInheritedProperties
    from schorg.FloorPlan import FloorPlanProperties
    from schorg.FloorPlan import FloorPlanAllProperties
    from schorg.FloorPlan import create_schema_org_model
    from schorg.FloorPlan import create_floorplan_model
    from schorg.FloorPlan import FloorPlan

    a = create_schema_org_model(type_=FloorPlanInheritedProperties)
    b = create_schema_org_model(type_=FloorPlanProperties)
    c = create_schema_org_model(type_=FloorPlanAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FloorPlan.schema()
    create_floorplan_model(FloorPlanAllProperties).schema()
    create_floorplan_model(FloorPlanInheritedProperties).schema()
    create_floorplan_model(FloorPlanProperties).schema()


def NotInForce_test():
    from schorg.NotInForce import NotInForceInheritedProperties
    from schorg.NotInForce import NotInForceProperties
    from schorg.NotInForce import NotInForceAllProperties
    from schorg.NotInForce import create_schema_org_model
    from schorg.NotInForce import create_notinforce_model
    from schorg.NotInForce import NotInForce

    a = create_schema_org_model(type_=NotInForceInheritedProperties)
    b = create_schema_org_model(type_=NotInForceProperties)
    c = create_schema_org_model(type_=NotInForceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NotInForce.schema()
    create_notinforce_model(NotInForceAllProperties).schema()
    create_notinforce_model(NotInForceInheritedProperties).schema()
    create_notinforce_model(NotInForceProperties).schema()


def Radiography_test():
    from schorg.Radiography import RadiographyInheritedProperties
    from schorg.Radiography import RadiographyProperties
    from schorg.Radiography import RadiographyAllProperties
    from schorg.Radiography import create_schema_org_model
    from schorg.Radiography import create_radiography_model
    from schorg.Radiography import Radiography

    a = create_schema_org_model(type_=RadiographyInheritedProperties)
    b = create_schema_org_model(type_=RadiographyProperties)
    c = create_schema_org_model(type_=RadiographyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Radiography.schema()
    create_radiography_model(RadiographyAllProperties).schema()
    create_radiography_model(RadiographyInheritedProperties).schema()
    create_radiography_model(RadiographyProperties).schema()


def CoOp_test():
    from schorg.CoOp import CoOpInheritedProperties
    from schorg.CoOp import CoOpProperties
    from schorg.CoOp import CoOpAllProperties
    from schorg.CoOp import create_schema_org_model
    from schorg.CoOp import create_coop_model
    from schorg.CoOp import CoOp

    a = create_schema_org_model(type_=CoOpInheritedProperties)
    b = create_schema_org_model(type_=CoOpProperties)
    c = create_schema_org_model(type_=CoOpAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CoOp.schema()
    create_coop_model(CoOpAllProperties).schema()
    create_coop_model(CoOpInheritedProperties).schema()
    create_coop_model(CoOpProperties).schema()


def _3DModel_test():
    from schorg._3DModel import _3DModelInheritedProperties
    from schorg._3DModel import _3DModelProperties
    from schorg._3DModel import _3DModelAllProperties
    from schorg._3DModel import create_schema_org_model
    from schorg._3DModel import create__3dmodel_model
    from schorg._3DModel import _3DModel

    a = create_schema_org_model(type_=_3DModelInheritedProperties)
    b = create_schema_org_model(type_=_3DModelProperties)
    c = create_schema_org_model(type_=_3DModelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    _3DModel.schema()
    create__3dmodel_model(_3DModelAllProperties).schema()
    create__3dmodel_model(_3DModelInheritedProperties).schema()
    create__3dmodel_model(_3DModelProperties).schema()


def BackgroundNewsArticle_test():
    from schorg.BackgroundNewsArticle import BackgroundNewsArticleInheritedProperties
    from schorg.BackgroundNewsArticle import BackgroundNewsArticleProperties
    from schorg.BackgroundNewsArticle import BackgroundNewsArticleAllProperties
    from schorg.BackgroundNewsArticle import create_schema_org_model
    from schorg.BackgroundNewsArticle import create_backgroundnewsarticle_model
    from schorg.BackgroundNewsArticle import BackgroundNewsArticle

    a = create_schema_org_model(type_=BackgroundNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=BackgroundNewsArticleProperties)
    c = create_schema_org_model(type_=BackgroundNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BackgroundNewsArticle.schema()
    create_backgroundnewsarticle_model(BackgroundNewsArticleAllProperties).schema()
    create_backgroundnewsarticle_model(
        BackgroundNewsArticleInheritedProperties
    ).schema()
    create_backgroundnewsarticle_model(BackgroundNewsArticleProperties).schema()


def Diet_test():
    from schorg.Diet import DietInheritedProperties
    from schorg.Diet import DietProperties
    from schorg.Diet import DietAllProperties
    from schorg.Diet import create_schema_org_model
    from schorg.Diet import create_diet_model
    from schorg.Diet import Diet

    a = create_schema_org_model(type_=DietInheritedProperties)
    b = create_schema_org_model(type_=DietProperties)
    c = create_schema_org_model(type_=DietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Diet.schema()
    create_diet_model(DietAllProperties).schema()
    create_diet_model(DietInheritedProperties).schema()
    create_diet_model(DietProperties).schema()


def House_test():
    from schorg.House import HouseInheritedProperties
    from schorg.House import HouseProperties
    from schorg.House import HouseAllProperties
    from schorg.House import create_schema_org_model
    from schorg.House import create_house_model
    from schorg.House import House

    a = create_schema_org_model(type_=HouseInheritedProperties)
    b = create_schema_org_model(type_=HouseProperties)
    c = create_schema_org_model(type_=HouseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    House.schema()
    create_house_model(HouseAllProperties).schema()
    create_house_model(HouseInheritedProperties).schema()
    create_house_model(HouseProperties).schema()


def Course_test():
    from schorg.Course import CourseInheritedProperties
    from schorg.Course import CourseProperties
    from schorg.Course import CourseAllProperties
    from schorg.Course import create_schema_org_model
    from schorg.Course import create_course_model
    from schorg.Course import Course

    a = create_schema_org_model(type_=CourseInheritedProperties)
    b = create_schema_org_model(type_=CourseProperties)
    c = create_schema_org_model(type_=CourseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Course.schema()
    create_course_model(CourseAllProperties).schema()
    create_course_model(CourseInheritedProperties).schema()
    create_course_model(CourseProperties).schema()


def InStock_test():
    from schorg.InStock import InStockInheritedProperties
    from schorg.InStock import InStockProperties
    from schorg.InStock import InStockAllProperties
    from schorg.InStock import create_schema_org_model
    from schorg.InStock import create_instock_model
    from schorg.InStock import InStock

    a = create_schema_org_model(type_=InStockInheritedProperties)
    b = create_schema_org_model(type_=InStockProperties)
    c = create_schema_org_model(type_=InStockAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InStock.schema()
    create_instock_model(InStockAllProperties).schema()
    create_instock_model(InStockInheritedProperties).schema()
    create_instock_model(InStockProperties).schema()


def SolveMathAction_test():
    from schorg.SolveMathAction import SolveMathActionInheritedProperties
    from schorg.SolveMathAction import SolveMathActionProperties
    from schorg.SolveMathAction import SolveMathActionAllProperties
    from schorg.SolveMathAction import create_schema_org_model
    from schorg.SolveMathAction import create_solvemathaction_model
    from schorg.SolveMathAction import SolveMathAction

    a = create_schema_org_model(type_=SolveMathActionInheritedProperties)
    b = create_schema_org_model(type_=SolveMathActionProperties)
    c = create_schema_org_model(type_=SolveMathActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SolveMathAction.schema()
    create_solvemathaction_model(SolveMathActionAllProperties).schema()
    create_solvemathaction_model(SolveMathActionInheritedProperties).schema()
    create_solvemathaction_model(SolveMathActionProperties).schema()


def Volcano_test():
    from schorg.Volcano import VolcanoInheritedProperties
    from schorg.Volcano import VolcanoProperties
    from schorg.Volcano import VolcanoAllProperties
    from schorg.Volcano import create_schema_org_model
    from schorg.Volcano import create_volcano_model
    from schorg.Volcano import Volcano

    a = create_schema_org_model(type_=VolcanoInheritedProperties)
    b = create_schema_org_model(type_=VolcanoProperties)
    c = create_schema_org_model(type_=VolcanoAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Volcano.schema()
    create_volcano_model(VolcanoAllProperties).schema()
    create_volcano_model(VolcanoInheritedProperties).schema()
    create_volcano_model(VolcanoProperties).schema()


def RentalVehicleUsage_test():
    from schorg.RentalVehicleUsage import RentalVehicleUsageInheritedProperties
    from schorg.RentalVehicleUsage import RentalVehicleUsageProperties
    from schorg.RentalVehicleUsage import RentalVehicleUsageAllProperties
    from schorg.RentalVehicleUsage import create_schema_org_model
    from schorg.RentalVehicleUsage import create_rentalvehicleusage_model
    from schorg.RentalVehicleUsage import RentalVehicleUsage

    a = create_schema_org_model(type_=RentalVehicleUsageInheritedProperties)
    b = create_schema_org_model(type_=RentalVehicleUsageProperties)
    c = create_schema_org_model(type_=RentalVehicleUsageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RentalVehicleUsage.schema()
    create_rentalvehicleusage_model(RentalVehicleUsageAllProperties).schema()
    create_rentalvehicleusage_model(RentalVehicleUsageInheritedProperties).schema()
    create_rentalvehicleusage_model(RentalVehicleUsageProperties).schema()


def ViewAction_test():
    from schorg.ViewAction import ViewActionInheritedProperties
    from schorg.ViewAction import ViewActionProperties
    from schorg.ViewAction import ViewActionAllProperties
    from schorg.ViewAction import create_schema_org_model
    from schorg.ViewAction import create_viewaction_model
    from schorg.ViewAction import ViewAction

    a = create_schema_org_model(type_=ViewActionInheritedProperties)
    b = create_schema_org_model(type_=ViewActionProperties)
    c = create_schema_org_model(type_=ViewActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ViewAction.schema()
    create_viewaction_model(ViewActionAllProperties).schema()
    create_viewaction_model(ViewActionInheritedProperties).schema()
    create_viewaction_model(ViewActionProperties).schema()


def NonprofitANBI_test():
    from schorg.NonprofitANBI import NonprofitANBIInheritedProperties
    from schorg.NonprofitANBI import NonprofitANBIProperties
    from schorg.NonprofitANBI import NonprofitANBIAllProperties
    from schorg.NonprofitANBI import create_schema_org_model
    from schorg.NonprofitANBI import create_nonprofitanbi_model
    from schorg.NonprofitANBI import NonprofitANBI

    a = create_schema_org_model(type_=NonprofitANBIInheritedProperties)
    b = create_schema_org_model(type_=NonprofitANBIProperties)
    c = create_schema_org_model(type_=NonprofitANBIAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NonprofitANBI.schema()
    create_nonprofitanbi_model(NonprofitANBIAllProperties).schema()
    create_nonprofitanbi_model(NonprofitANBIInheritedProperties).schema()
    create_nonprofitanbi_model(NonprofitANBIProperties).schema()


def Nonprofit501c22_test():
    from schorg.Nonprofit501c22 import Nonprofit501c22InheritedProperties
    from schorg.Nonprofit501c22 import Nonprofit501c22Properties
    from schorg.Nonprofit501c22 import Nonprofit501c22AllProperties
    from schorg.Nonprofit501c22 import create_schema_org_model
    from schorg.Nonprofit501c22 import create_nonprofit501c22_model
    from schorg.Nonprofit501c22 import Nonprofit501c22

    a = create_schema_org_model(type_=Nonprofit501c22InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c22Properties)
    c = create_schema_org_model(type_=Nonprofit501c22AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c22.schema()
    create_nonprofit501c22_model(Nonprofit501c22AllProperties).schema()
    create_nonprofit501c22_model(Nonprofit501c22InheritedProperties).schema()
    create_nonprofit501c22_model(Nonprofit501c22Properties).schema()


def Clinician_test():
    from schorg.Clinician import ClinicianInheritedProperties
    from schorg.Clinician import ClinicianProperties
    from schorg.Clinician import ClinicianAllProperties
    from schorg.Clinician import create_schema_org_model
    from schorg.Clinician import create_clinician_model
    from schorg.Clinician import Clinician

    a = create_schema_org_model(type_=ClinicianInheritedProperties)
    b = create_schema_org_model(type_=ClinicianProperties)
    c = create_schema_org_model(type_=ClinicianAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Clinician.schema()
    create_clinician_model(ClinicianAllProperties).schema()
    create_clinician_model(ClinicianInheritedProperties).schema()
    create_clinician_model(ClinicianProperties).schema()


def PawnShop_test():
    from schorg.PawnShop import PawnShopInheritedProperties
    from schorg.PawnShop import PawnShopProperties
    from schorg.PawnShop import PawnShopAllProperties
    from schorg.PawnShop import create_schema_org_model
    from schorg.PawnShop import create_pawnshop_model
    from schorg.PawnShop import PawnShop

    a = create_schema_org_model(type_=PawnShopInheritedProperties)
    b = create_schema_org_model(type_=PawnShopProperties)
    c = create_schema_org_model(type_=PawnShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PawnShop.schema()
    create_pawnshop_model(PawnShopAllProperties).schema()
    create_pawnshop_model(PawnShopInheritedProperties).schema()
    create_pawnshop_model(PawnShopProperties).schema()


def DanceEvent_test():
    from schorg.DanceEvent import DanceEventInheritedProperties
    from schorg.DanceEvent import DanceEventProperties
    from schorg.DanceEvent import DanceEventAllProperties
    from schorg.DanceEvent import create_schema_org_model
    from schorg.DanceEvent import create_danceevent_model
    from schorg.DanceEvent import DanceEvent

    a = create_schema_org_model(type_=DanceEventInheritedProperties)
    b = create_schema_org_model(type_=DanceEventProperties)
    c = create_schema_org_model(type_=DanceEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DanceEvent.schema()
    create_danceevent_model(DanceEventAllProperties).schema()
    create_danceevent_model(DanceEventInheritedProperties).schema()
    create_danceevent_model(DanceEventProperties).schema()


def DefinedTermSet_test():
    from schorg.DefinedTermSet import DefinedTermSetInheritedProperties
    from schorg.DefinedTermSet import DefinedTermSetProperties
    from schorg.DefinedTermSet import DefinedTermSetAllProperties
    from schorg.DefinedTermSet import create_schema_org_model
    from schorg.DefinedTermSet import create_definedtermset_model
    from schorg.DefinedTermSet import DefinedTermSet

    a = create_schema_org_model(type_=DefinedTermSetInheritedProperties)
    b = create_schema_org_model(type_=DefinedTermSetProperties)
    c = create_schema_org_model(type_=DefinedTermSetAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DefinedTermSet.schema()
    create_definedtermset_model(DefinedTermSetAllProperties).schema()
    create_definedtermset_model(DefinedTermSetInheritedProperties).schema()
    create_definedtermset_model(DefinedTermSetProperties).schema()


def CategoryCodeSet_test():
    from schorg.CategoryCodeSet import CategoryCodeSetInheritedProperties
    from schorg.CategoryCodeSet import CategoryCodeSetProperties
    from schorg.CategoryCodeSet import CategoryCodeSetAllProperties
    from schorg.CategoryCodeSet import create_schema_org_model
    from schorg.CategoryCodeSet import create_categorycodeset_model
    from schorg.CategoryCodeSet import CategoryCodeSet

    a = create_schema_org_model(type_=CategoryCodeSetInheritedProperties)
    b = create_schema_org_model(type_=CategoryCodeSetProperties)
    c = create_schema_org_model(type_=CategoryCodeSetAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CategoryCodeSet.schema()
    create_categorycodeset_model(CategoryCodeSetAllProperties).schema()
    create_categorycodeset_model(CategoryCodeSetInheritedProperties).schema()
    create_categorycodeset_model(CategoryCodeSetProperties).schema()


def Nonprofit501k_test():
    from schorg.Nonprofit501k import Nonprofit501kInheritedProperties
    from schorg.Nonprofit501k import Nonprofit501kProperties
    from schorg.Nonprofit501k import Nonprofit501kAllProperties
    from schorg.Nonprofit501k import create_schema_org_model
    from schorg.Nonprofit501k import create_nonprofit501k_model
    from schorg.Nonprofit501k import Nonprofit501k

    a = create_schema_org_model(type_=Nonprofit501kInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501kProperties)
    c = create_schema_org_model(type_=Nonprofit501kAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501k.schema()
    create_nonprofit501k_model(Nonprofit501kAllProperties).schema()
    create_nonprofit501k_model(Nonprofit501kInheritedProperties).schema()
    create_nonprofit501k_model(Nonprofit501kProperties).schema()


def PregnancyHealthAspect_test():
    from schorg.PregnancyHealthAspect import PregnancyHealthAspectInheritedProperties
    from schorg.PregnancyHealthAspect import PregnancyHealthAspectProperties
    from schorg.PregnancyHealthAspect import PregnancyHealthAspectAllProperties
    from schorg.PregnancyHealthAspect import create_schema_org_model
    from schorg.PregnancyHealthAspect import create_pregnancyhealthaspect_model
    from schorg.PregnancyHealthAspect import PregnancyHealthAspect

    a = create_schema_org_model(type_=PregnancyHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=PregnancyHealthAspectProperties)
    c = create_schema_org_model(type_=PregnancyHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PregnancyHealthAspect.schema()
    create_pregnancyhealthaspect_model(PregnancyHealthAspectAllProperties).schema()
    create_pregnancyhealthaspect_model(
        PregnancyHealthAspectInheritedProperties
    ).schema()
    create_pregnancyhealthaspect_model(PregnancyHealthAspectProperties).schema()


def MobileWebPlatform_test():
    from schorg.MobileWebPlatform import MobileWebPlatformInheritedProperties
    from schorg.MobileWebPlatform import MobileWebPlatformProperties
    from schorg.MobileWebPlatform import MobileWebPlatformAllProperties
    from schorg.MobileWebPlatform import create_schema_org_model
    from schorg.MobileWebPlatform import create_mobilewebplatform_model
    from schorg.MobileWebPlatform import MobileWebPlatform

    a = create_schema_org_model(type_=MobileWebPlatformInheritedProperties)
    b = create_schema_org_model(type_=MobileWebPlatformProperties)
    c = create_schema_org_model(type_=MobileWebPlatformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MobileWebPlatform.schema()
    create_mobilewebplatform_model(MobileWebPlatformAllProperties).schema()
    create_mobilewebplatform_model(MobileWebPlatformInheritedProperties).schema()
    create_mobilewebplatform_model(MobileWebPlatformProperties).schema()


def ApprovedIndication_test():
    from schorg.ApprovedIndication import ApprovedIndicationInheritedProperties
    from schorg.ApprovedIndication import ApprovedIndicationProperties
    from schorg.ApprovedIndication import ApprovedIndicationAllProperties
    from schorg.ApprovedIndication import create_schema_org_model
    from schorg.ApprovedIndication import create_approvedindication_model
    from schorg.ApprovedIndication import ApprovedIndication

    a = create_schema_org_model(type_=ApprovedIndicationInheritedProperties)
    b = create_schema_org_model(type_=ApprovedIndicationProperties)
    c = create_schema_org_model(type_=ApprovedIndicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ApprovedIndication.schema()
    create_approvedindication_model(ApprovedIndicationAllProperties).schema()
    create_approvedindication_model(ApprovedIndicationInheritedProperties).schema()
    create_approvedindication_model(ApprovedIndicationProperties).schema()


def MedicalGuidelineContraindication_test():
    from schorg.MedicalGuidelineContraindication import (
        MedicalGuidelineContraindicationInheritedProperties,
    )
    from schorg.MedicalGuidelineContraindication import (
        MedicalGuidelineContraindicationProperties,
    )
    from schorg.MedicalGuidelineContraindication import (
        MedicalGuidelineContraindicationAllProperties,
    )
    from schorg.MedicalGuidelineContraindication import create_schema_org_model
    from schorg.MedicalGuidelineContraindication import (
        create_medicalguidelinecontraindication_model,
    )
    from schorg.MedicalGuidelineContraindication import MedicalGuidelineContraindication

    a = create_schema_org_model(
        type_=MedicalGuidelineContraindicationInheritedProperties
    )
    b = create_schema_org_model(type_=MedicalGuidelineContraindicationProperties)
    c = create_schema_org_model(type_=MedicalGuidelineContraindicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalGuidelineContraindication.schema()
    create_medicalguidelinecontraindication_model(
        MedicalGuidelineContraindicationAllProperties
    ).schema()
    create_medicalguidelinecontraindication_model(
        MedicalGuidelineContraindicationInheritedProperties
    ).schema()
    create_medicalguidelinecontraindication_model(
        MedicalGuidelineContraindicationProperties
    ).schema()


def GolfCourse_test():
    from schorg.GolfCourse import GolfCourseInheritedProperties
    from schorg.GolfCourse import GolfCourseProperties
    from schorg.GolfCourse import GolfCourseAllProperties
    from schorg.GolfCourse import create_schema_org_model
    from schorg.GolfCourse import create_golfcourse_model
    from schorg.GolfCourse import GolfCourse

    a = create_schema_org_model(type_=GolfCourseInheritedProperties)
    b = create_schema_org_model(type_=GolfCourseProperties)
    c = create_schema_org_model(type_=GolfCourseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GolfCourse.schema()
    create_golfcourse_model(GolfCourseAllProperties).schema()
    create_golfcourse_model(GolfCourseInheritedProperties).schema()
    create_golfcourse_model(GolfCourseProperties).schema()


def BefriendAction_test():
    from schorg.BefriendAction import BefriendActionInheritedProperties
    from schorg.BefriendAction import BefriendActionProperties
    from schorg.BefriendAction import BefriendActionAllProperties
    from schorg.BefriendAction import create_schema_org_model
    from schorg.BefriendAction import create_befriendaction_model
    from schorg.BefriendAction import BefriendAction

    a = create_schema_org_model(type_=BefriendActionInheritedProperties)
    b = create_schema_org_model(type_=BefriendActionProperties)
    c = create_schema_org_model(type_=BefriendActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BefriendAction.schema()
    create_befriendaction_model(BefriendActionAllProperties).schema()
    create_befriendaction_model(BefriendActionInheritedProperties).schema()
    create_befriendaction_model(BefriendActionProperties).schema()


def Motel_test():
    from schorg.Motel import MotelInheritedProperties
    from schorg.Motel import MotelProperties
    from schorg.Motel import MotelAllProperties
    from schorg.Motel import create_schema_org_model
    from schorg.Motel import create_motel_model
    from schorg.Motel import Motel

    a = create_schema_org_model(type_=MotelInheritedProperties)
    b = create_schema_org_model(type_=MotelProperties)
    c = create_schema_org_model(type_=MotelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Motel.schema()
    create_motel_model(MotelAllProperties).schema()
    create_motel_model(MotelInheritedProperties).schema()
    create_motel_model(MotelProperties).schema()


def EatAction_test():
    from schorg.EatAction import EatActionInheritedProperties
    from schorg.EatAction import EatActionProperties
    from schorg.EatAction import EatActionAllProperties
    from schorg.EatAction import create_schema_org_model
    from schorg.EatAction import create_eataction_model
    from schorg.EatAction import EatAction

    a = create_schema_org_model(type_=EatActionInheritedProperties)
    b = create_schema_org_model(type_=EatActionProperties)
    c = create_schema_org_model(type_=EatActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EatAction.schema()
    create_eataction_model(EatActionAllProperties).schema()
    create_eataction_model(EatActionInheritedProperties).schema()
    create_eataction_model(EatActionProperties).schema()


def OrderProcessing_test():
    from schorg.OrderProcessing import OrderProcessingInheritedProperties
    from schorg.OrderProcessing import OrderProcessingProperties
    from schorg.OrderProcessing import OrderProcessingAllProperties
    from schorg.OrderProcessing import create_schema_org_model
    from schorg.OrderProcessing import create_orderprocessing_model
    from schorg.OrderProcessing import OrderProcessing

    a = create_schema_org_model(type_=OrderProcessingInheritedProperties)
    b = create_schema_org_model(type_=OrderProcessingProperties)
    c = create_schema_org_model(type_=OrderProcessingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderProcessing.schema()
    create_orderprocessing_model(OrderProcessingAllProperties).schema()
    create_orderprocessing_model(OrderProcessingInheritedProperties).schema()
    create_orderprocessing_model(OrderProcessingProperties).schema()


def FullRefund_test():
    from schorg.FullRefund import FullRefundInheritedProperties
    from schorg.FullRefund import FullRefundProperties
    from schorg.FullRefund import FullRefundAllProperties
    from schorg.FullRefund import create_schema_org_model
    from schorg.FullRefund import create_fullrefund_model
    from schorg.FullRefund import FullRefund

    a = create_schema_org_model(type_=FullRefundInheritedProperties)
    b = create_schema_org_model(type_=FullRefundProperties)
    c = create_schema_org_model(type_=FullRefundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FullRefund.schema()
    create_fullrefund_model(FullRefundAllProperties).schema()
    create_fullrefund_model(FullRefundInheritedProperties).schema()
    create_fullrefund_model(FullRefundProperties).schema()


def PreventionIndication_test():
    from schorg.PreventionIndication import PreventionIndicationInheritedProperties
    from schorg.PreventionIndication import PreventionIndicationProperties
    from schorg.PreventionIndication import PreventionIndicationAllProperties
    from schorg.PreventionIndication import create_schema_org_model
    from schorg.PreventionIndication import create_preventionindication_model
    from schorg.PreventionIndication import PreventionIndication

    a = create_schema_org_model(type_=PreventionIndicationInheritedProperties)
    b = create_schema_org_model(type_=PreventionIndicationProperties)
    c = create_schema_org_model(type_=PreventionIndicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PreventionIndication.schema()
    create_preventionindication_model(PreventionIndicationAllProperties).schema()
    create_preventionindication_model(PreventionIndicationInheritedProperties).schema()
    create_preventionindication_model(PreventionIndicationProperties).schema()


def MolecularEntity_test():
    from schorg.MolecularEntity import MolecularEntityInheritedProperties
    from schorg.MolecularEntity import MolecularEntityProperties
    from schorg.MolecularEntity import MolecularEntityAllProperties
    from schorg.MolecularEntity import create_schema_org_model
    from schorg.MolecularEntity import create_molecularentity_model
    from schorg.MolecularEntity import MolecularEntity

    a = create_schema_org_model(type_=MolecularEntityInheritedProperties)
    b = create_schema_org_model(type_=MolecularEntityProperties)
    c = create_schema_org_model(type_=MolecularEntityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MolecularEntity.schema()
    create_molecularentity_model(MolecularEntityAllProperties).schema()
    create_molecularentity_model(MolecularEntityInheritedProperties).schema()
    create_molecularentity_model(MolecularEntityProperties).schema()


def FAQPage_test():
    from schorg.FAQPage import FAQPageInheritedProperties
    from schorg.FAQPage import FAQPageProperties
    from schorg.FAQPage import FAQPageAllProperties
    from schorg.FAQPage import create_schema_org_model
    from schorg.FAQPage import create_faqpage_model
    from schorg.FAQPage import FAQPage

    a = create_schema_org_model(type_=FAQPageInheritedProperties)
    b = create_schema_org_model(type_=FAQPageProperties)
    c = create_schema_org_model(type_=FAQPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FAQPage.schema()
    create_faqpage_model(FAQPageAllProperties).schema()
    create_faqpage_model(FAQPageInheritedProperties).schema()
    create_faqpage_model(FAQPageProperties).schema()


def BodyMeasurementInsideLeg_test():
    from schorg.BodyMeasurementInsideLeg import (
        BodyMeasurementInsideLegInheritedProperties,
    )
    from schorg.BodyMeasurementInsideLeg import BodyMeasurementInsideLegProperties
    from schorg.BodyMeasurementInsideLeg import BodyMeasurementInsideLegAllProperties
    from schorg.BodyMeasurementInsideLeg import create_schema_org_model
    from schorg.BodyMeasurementInsideLeg import create_bodymeasurementinsideleg_model
    from schorg.BodyMeasurementInsideLeg import BodyMeasurementInsideLeg

    a = create_schema_org_model(type_=BodyMeasurementInsideLegInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementInsideLegProperties)
    c = create_schema_org_model(type_=BodyMeasurementInsideLegAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementInsideLeg.schema()
    create_bodymeasurementinsideleg_model(
        BodyMeasurementInsideLegAllProperties
    ).schema()
    create_bodymeasurementinsideleg_model(
        BodyMeasurementInsideLegInheritedProperties
    ).schema()
    create_bodymeasurementinsideleg_model(BodyMeasurementInsideLegProperties).schema()


def ReportageNewsArticle_test():
    from schorg.ReportageNewsArticle import ReportageNewsArticleInheritedProperties
    from schorg.ReportageNewsArticle import ReportageNewsArticleProperties
    from schorg.ReportageNewsArticle import ReportageNewsArticleAllProperties
    from schorg.ReportageNewsArticle import create_schema_org_model
    from schorg.ReportageNewsArticle import create_reportagenewsarticle_model
    from schorg.ReportageNewsArticle import ReportageNewsArticle

    a = create_schema_org_model(type_=ReportageNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=ReportageNewsArticleProperties)
    c = create_schema_org_model(type_=ReportageNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReportageNewsArticle.schema()
    create_reportagenewsarticle_model(ReportageNewsArticleAllProperties).schema()
    create_reportagenewsarticle_model(ReportageNewsArticleInheritedProperties).schema()
    create_reportagenewsarticle_model(ReportageNewsArticleProperties).schema()


def EUEnergyEfficiencyCategoryF_test():
    from schorg.EUEnergyEfficiencyCategoryF import (
        EUEnergyEfficiencyCategoryFInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryF import EUEnergyEfficiencyCategoryFProperties
    from schorg.EUEnergyEfficiencyCategoryF import (
        EUEnergyEfficiencyCategoryFAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryF import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryF import (
        create_euenergyefficiencycategoryf_model,
    )
    from schorg.EUEnergyEfficiencyCategoryF import EUEnergyEfficiencyCategoryF

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryFInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryFProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryFAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryF.schema()
    create_euenergyefficiencycategoryf_model(
        EUEnergyEfficiencyCategoryFAllProperties
    ).schema()
    create_euenergyefficiencycategoryf_model(
        EUEnergyEfficiencyCategoryFInheritedProperties
    ).schema()
    create_euenergyefficiencycategoryf_model(
        EUEnergyEfficiencyCategoryFProperties
    ).schema()


def TobaccoNicotineConsideration_test():
    from schorg.TobaccoNicotineConsideration import (
        TobaccoNicotineConsiderationInheritedProperties,
    )
    from schorg.TobaccoNicotineConsideration import (
        TobaccoNicotineConsiderationProperties,
    )
    from schorg.TobaccoNicotineConsideration import (
        TobaccoNicotineConsiderationAllProperties,
    )
    from schorg.TobaccoNicotineConsideration import create_schema_org_model
    from schorg.TobaccoNicotineConsideration import (
        create_tobacconicotineconsideration_model,
    )
    from schorg.TobaccoNicotineConsideration import TobaccoNicotineConsideration

    a = create_schema_org_model(type_=TobaccoNicotineConsiderationInheritedProperties)
    b = create_schema_org_model(type_=TobaccoNicotineConsiderationProperties)
    c = create_schema_org_model(type_=TobaccoNicotineConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TobaccoNicotineConsideration.schema()
    create_tobacconicotineconsideration_model(
        TobaccoNicotineConsiderationAllProperties
    ).schema()
    create_tobacconicotineconsideration_model(
        TobaccoNicotineConsiderationInheritedProperties
    ).schema()
    create_tobacconicotineconsideration_model(
        TobaccoNicotineConsiderationProperties
    ).schema()


def MinimumAdvertisedPrice_test():
    from schorg.MinimumAdvertisedPrice import MinimumAdvertisedPriceInheritedProperties
    from schorg.MinimumAdvertisedPrice import MinimumAdvertisedPriceProperties
    from schorg.MinimumAdvertisedPrice import MinimumAdvertisedPriceAllProperties
    from schorg.MinimumAdvertisedPrice import create_schema_org_model
    from schorg.MinimumAdvertisedPrice import create_minimumadvertisedprice_model
    from schorg.MinimumAdvertisedPrice import MinimumAdvertisedPrice

    a = create_schema_org_model(type_=MinimumAdvertisedPriceInheritedProperties)
    b = create_schema_org_model(type_=MinimumAdvertisedPriceProperties)
    c = create_schema_org_model(type_=MinimumAdvertisedPriceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MinimumAdvertisedPrice.schema()
    create_minimumadvertisedprice_model(MinimumAdvertisedPriceAllProperties).schema()
    create_minimumadvertisedprice_model(
        MinimumAdvertisedPriceInheritedProperties
    ).schema()
    create_minimumadvertisedprice_model(MinimumAdvertisedPriceProperties).schema()


def CardiovascularExam_test():
    from schorg.CardiovascularExam import CardiovascularExamInheritedProperties
    from schorg.CardiovascularExam import CardiovascularExamProperties
    from schorg.CardiovascularExam import CardiovascularExamAllProperties
    from schorg.CardiovascularExam import create_schema_org_model
    from schorg.CardiovascularExam import create_cardiovascularexam_model
    from schorg.CardiovascularExam import CardiovascularExam

    a = create_schema_org_model(type_=CardiovascularExamInheritedProperties)
    b = create_schema_org_model(type_=CardiovascularExamProperties)
    c = create_schema_org_model(type_=CardiovascularExamAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CardiovascularExam.schema()
    create_cardiovascularexam_model(CardiovascularExamAllProperties).schema()
    create_cardiovascularexam_model(CardiovascularExamInheritedProperties).schema()
    create_cardiovascularexam_model(CardiovascularExamProperties).schema()


def QuantitativeValue_test():
    from schorg.QuantitativeValue import QuantitativeValueInheritedProperties
    from schorg.QuantitativeValue import QuantitativeValueProperties
    from schorg.QuantitativeValue import QuantitativeValueAllProperties
    from schorg.QuantitativeValue import create_schema_org_model
    from schorg.QuantitativeValue import create_quantitativevalue_model
    from schorg.QuantitativeValue import QuantitativeValue

    a = create_schema_org_model(type_=QuantitativeValueInheritedProperties)
    b = create_schema_org_model(type_=QuantitativeValueProperties)
    c = create_schema_org_model(type_=QuantitativeValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    QuantitativeValue.schema()
    create_quantitativevalue_model(QuantitativeValueAllProperties).schema()
    create_quantitativevalue_model(QuantitativeValueInheritedProperties).schema()
    create_quantitativevalue_model(QuantitativeValueProperties).schema()


def WearableSizeSystemEurope_test():
    from schorg.WearableSizeSystemEurope import (
        WearableSizeSystemEuropeInheritedProperties,
    )
    from schorg.WearableSizeSystemEurope import WearableSizeSystemEuropeProperties
    from schorg.WearableSizeSystemEurope import WearableSizeSystemEuropeAllProperties
    from schorg.WearableSizeSystemEurope import create_schema_org_model
    from schorg.WearableSizeSystemEurope import create_wearablesizesystemeurope_model
    from schorg.WearableSizeSystemEurope import WearableSizeSystemEurope

    a = create_schema_org_model(type_=WearableSizeSystemEuropeInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemEuropeProperties)
    c = create_schema_org_model(type_=WearableSizeSystemEuropeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemEurope.schema()
    create_wearablesizesystemeurope_model(
        WearableSizeSystemEuropeAllProperties
    ).schema()
    create_wearablesizesystemeurope_model(
        WearableSizeSystemEuropeInheritedProperties
    ).schema()
    create_wearablesizesystemeurope_model(WearableSizeSystemEuropeProperties).schema()


def Blog_test():
    from schorg.Blog import BlogInheritedProperties
    from schorg.Blog import BlogProperties
    from schorg.Blog import BlogAllProperties
    from schorg.Blog import create_schema_org_model
    from schorg.Blog import create_blog_model
    from schorg.Blog import Blog

    a = create_schema_org_model(type_=BlogInheritedProperties)
    b = create_schema_org_model(type_=BlogProperties)
    c = create_schema_org_model(type_=BlogAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Blog.schema()
    create_blog_model(BlogAllProperties).schema()
    create_blog_model(BlogInheritedProperties).schema()
    create_blog_model(BlogProperties).schema()


def DeleteAction_test():
    from schorg.DeleteAction import DeleteActionInheritedProperties
    from schorg.DeleteAction import DeleteActionProperties
    from schorg.DeleteAction import DeleteActionAllProperties
    from schorg.DeleteAction import create_schema_org_model
    from schorg.DeleteAction import create_deleteaction_model
    from schorg.DeleteAction import DeleteAction

    a = create_schema_org_model(type_=DeleteActionInheritedProperties)
    b = create_schema_org_model(type_=DeleteActionProperties)
    c = create_schema_org_model(type_=DeleteActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DeleteAction.schema()
    create_deleteaction_model(DeleteActionAllProperties).schema()
    create_deleteaction_model(DeleteActionInheritedProperties).schema()
    create_deleteaction_model(DeleteActionProperties).schema()


def BoardingPolicyType_test():
    from schorg.BoardingPolicyType import BoardingPolicyTypeInheritedProperties
    from schorg.BoardingPolicyType import BoardingPolicyTypeProperties
    from schorg.BoardingPolicyType import BoardingPolicyTypeAllProperties
    from schorg.BoardingPolicyType import create_schema_org_model
    from schorg.BoardingPolicyType import create_boardingpolicytype_model
    from schorg.BoardingPolicyType import BoardingPolicyType

    a = create_schema_org_model(type_=BoardingPolicyTypeInheritedProperties)
    b = create_schema_org_model(type_=BoardingPolicyTypeProperties)
    c = create_schema_org_model(type_=BoardingPolicyTypeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BoardingPolicyType.schema()
    create_boardingpolicytype_model(BoardingPolicyTypeAllProperties).schema()
    create_boardingpolicytype_model(BoardingPolicyTypeInheritedProperties).schema()
    create_boardingpolicytype_model(BoardingPolicyTypeProperties).schema()


def GroupBoardingPolicy_test():
    from schorg.GroupBoardingPolicy import GroupBoardingPolicyInheritedProperties
    from schorg.GroupBoardingPolicy import GroupBoardingPolicyProperties
    from schorg.GroupBoardingPolicy import GroupBoardingPolicyAllProperties
    from schorg.GroupBoardingPolicy import create_schema_org_model
    from schorg.GroupBoardingPolicy import create_groupboardingpolicy_model
    from schorg.GroupBoardingPolicy import GroupBoardingPolicy

    a = create_schema_org_model(type_=GroupBoardingPolicyInheritedProperties)
    b = create_schema_org_model(type_=GroupBoardingPolicyProperties)
    c = create_schema_org_model(type_=GroupBoardingPolicyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GroupBoardingPolicy.schema()
    create_groupboardingpolicy_model(GroupBoardingPolicyAllProperties).schema()
    create_groupboardingpolicy_model(GroupBoardingPolicyInheritedProperties).schema()
    create_groupboardingpolicy_model(GroupBoardingPolicyProperties).schema()


def BikeStore_test():
    from schorg.BikeStore import BikeStoreInheritedProperties
    from schorg.BikeStore import BikeStoreProperties
    from schorg.BikeStore import BikeStoreAllProperties
    from schorg.BikeStore import create_schema_org_model
    from schorg.BikeStore import create_bikestore_model
    from schorg.BikeStore import BikeStore

    a = create_schema_org_model(type_=BikeStoreInheritedProperties)
    b = create_schema_org_model(type_=BikeStoreProperties)
    c = create_schema_org_model(type_=BikeStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BikeStore.schema()
    create_bikestore_model(BikeStoreAllProperties).schema()
    create_bikestore_model(BikeStoreInheritedProperties).schema()
    create_bikestore_model(BikeStoreProperties).schema()


def OnSitePickup_test():
    from schorg.OnSitePickup import OnSitePickupInheritedProperties
    from schorg.OnSitePickup import OnSitePickupProperties
    from schorg.OnSitePickup import OnSitePickupAllProperties
    from schorg.OnSitePickup import create_schema_org_model
    from schorg.OnSitePickup import create_onsitepickup_model
    from schorg.OnSitePickup import OnSitePickup

    a = create_schema_org_model(type_=OnSitePickupInheritedProperties)
    b = create_schema_org_model(type_=OnSitePickupProperties)
    c = create_schema_org_model(type_=OnSitePickupAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnSitePickup.schema()
    create_onsitepickup_model(OnSitePickupAllProperties).schema()
    create_onsitepickup_model(OnSitePickupInheritedProperties).schema()
    create_onsitepickup_model(OnSitePickupProperties).schema()


def HighSchool_test():
    from schorg.HighSchool import HighSchoolInheritedProperties
    from schorg.HighSchool import HighSchoolProperties
    from schorg.HighSchool import HighSchoolAllProperties
    from schorg.HighSchool import create_schema_org_model
    from schorg.HighSchool import create_highschool_model
    from schorg.HighSchool import HighSchool

    a = create_schema_org_model(type_=HighSchoolInheritedProperties)
    b = create_schema_org_model(type_=HighSchoolProperties)
    c = create_schema_org_model(type_=HighSchoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HighSchool.schema()
    create_highschool_model(HighSchoolAllProperties).schema()
    create_highschool_model(HighSchoolInheritedProperties).schema()
    create_highschool_model(HighSchoolProperties).schema()


def Synagogue_test():
    from schorg.Synagogue import SynagogueInheritedProperties
    from schorg.Synagogue import SynagogueProperties
    from schorg.Synagogue import SynagogueAllProperties
    from schorg.Synagogue import create_schema_org_model
    from schorg.Synagogue import create_synagogue_model
    from schorg.Synagogue import Synagogue

    a = create_schema_org_model(type_=SynagogueInheritedProperties)
    b = create_schema_org_model(type_=SynagogueProperties)
    c = create_schema_org_model(type_=SynagogueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Synagogue.schema()
    create_synagogue_model(SynagogueAllProperties).schema()
    create_synagogue_model(SynagogueInheritedProperties).schema()
    create_synagogue_model(SynagogueProperties).schema()


def PalliativeProcedure_test():
    from schorg.PalliativeProcedure import PalliativeProcedureInheritedProperties
    from schorg.PalliativeProcedure import PalliativeProcedureProperties
    from schorg.PalliativeProcedure import PalliativeProcedureAllProperties
    from schorg.PalliativeProcedure import create_schema_org_model
    from schorg.PalliativeProcedure import create_palliativeprocedure_model
    from schorg.PalliativeProcedure import PalliativeProcedure

    a = create_schema_org_model(type_=PalliativeProcedureInheritedProperties)
    b = create_schema_org_model(type_=PalliativeProcedureProperties)
    c = create_schema_org_model(type_=PalliativeProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PalliativeProcedure.schema()
    create_palliativeprocedure_model(PalliativeProcedureAllProperties).schema()
    create_palliativeprocedure_model(PalliativeProcedureInheritedProperties).schema()
    create_palliativeprocedure_model(PalliativeProcedureProperties).schema()


def Optician_test():
    from schorg.Optician import OpticianInheritedProperties
    from schorg.Optician import OpticianProperties
    from schorg.Optician import OpticianAllProperties
    from schorg.Optician import create_schema_org_model
    from schorg.Optician import create_optician_model
    from schorg.Optician import Optician

    a = create_schema_org_model(type_=OpticianInheritedProperties)
    b = create_schema_org_model(type_=OpticianProperties)
    c = create_schema_org_model(type_=OpticianAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Optician.schema()
    create_optician_model(OpticianAllProperties).schema()
    create_optician_model(OpticianInheritedProperties).schema()
    create_optician_model(OpticianProperties).schema()


def TelevisionChannel_test():
    from schorg.TelevisionChannel import TelevisionChannelInheritedProperties
    from schorg.TelevisionChannel import TelevisionChannelProperties
    from schorg.TelevisionChannel import TelevisionChannelAllProperties
    from schorg.TelevisionChannel import create_schema_org_model
    from schorg.TelevisionChannel import create_televisionchannel_model
    from schorg.TelevisionChannel import TelevisionChannel

    a = create_schema_org_model(type_=TelevisionChannelInheritedProperties)
    b = create_schema_org_model(type_=TelevisionChannelProperties)
    c = create_schema_org_model(type_=TelevisionChannelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TelevisionChannel.schema()
    create_televisionchannel_model(TelevisionChannelAllProperties).schema()
    create_televisionchannel_model(TelevisionChannelInheritedProperties).schema()
    create_televisionchannel_model(TelevisionChannelProperties).schema()


def GenericWebPlatform_test():
    from schorg.GenericWebPlatform import GenericWebPlatformInheritedProperties
    from schorg.GenericWebPlatform import GenericWebPlatformProperties
    from schorg.GenericWebPlatform import GenericWebPlatformAllProperties
    from schorg.GenericWebPlatform import create_schema_org_model
    from schorg.GenericWebPlatform import create_genericwebplatform_model
    from schorg.GenericWebPlatform import GenericWebPlatform

    a = create_schema_org_model(type_=GenericWebPlatformInheritedProperties)
    b = create_schema_org_model(type_=GenericWebPlatformProperties)
    c = create_schema_org_model(type_=GenericWebPlatformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GenericWebPlatform.schema()
    create_genericwebplatform_model(GenericWebPlatformAllProperties).schema()
    create_genericwebplatform_model(GenericWebPlatformInheritedProperties).schema()
    create_genericwebplatform_model(GenericWebPlatformProperties).schema()


def PublicationVolume_test():
    from schorg.PublicationVolume import PublicationVolumeInheritedProperties
    from schorg.PublicationVolume import PublicationVolumeProperties
    from schorg.PublicationVolume import PublicationVolumeAllProperties
    from schorg.PublicationVolume import create_schema_org_model
    from schorg.PublicationVolume import create_publicationvolume_model
    from schorg.PublicationVolume import PublicationVolume

    a = create_schema_org_model(type_=PublicationVolumeInheritedProperties)
    b = create_schema_org_model(type_=PublicationVolumeProperties)
    c = create_schema_org_model(type_=PublicationVolumeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicationVolume.schema()
    create_publicationvolume_model(PublicationVolumeAllProperties).schema()
    create_publicationvolume_model(PublicationVolumeInheritedProperties).schema()
    create_publicationvolume_model(PublicationVolumeProperties).schema()


def ShippingDeliveryTime_test():
    from schorg.ShippingDeliveryTime import ShippingDeliveryTimeInheritedProperties
    from schorg.ShippingDeliveryTime import ShippingDeliveryTimeProperties
    from schorg.ShippingDeliveryTime import ShippingDeliveryTimeAllProperties
    from schorg.ShippingDeliveryTime import create_schema_org_model
    from schorg.ShippingDeliveryTime import create_shippingdeliverytime_model
    from schorg.ShippingDeliveryTime import ShippingDeliveryTime

    a = create_schema_org_model(type_=ShippingDeliveryTimeInheritedProperties)
    b = create_schema_org_model(type_=ShippingDeliveryTimeProperties)
    c = create_schema_org_model(type_=ShippingDeliveryTimeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShippingDeliveryTime.schema()
    create_shippingdeliverytime_model(ShippingDeliveryTimeAllProperties).schema()
    create_shippingdeliverytime_model(ShippingDeliveryTimeInheritedProperties).schema()
    create_shippingdeliverytime_model(ShippingDeliveryTimeProperties).schema()


def UnitPriceSpecification_test():
    from schorg.UnitPriceSpecification import UnitPriceSpecificationInheritedProperties
    from schorg.UnitPriceSpecification import UnitPriceSpecificationProperties
    from schorg.UnitPriceSpecification import UnitPriceSpecificationAllProperties
    from schorg.UnitPriceSpecification import create_schema_org_model
    from schorg.UnitPriceSpecification import create_unitpricespecification_model
    from schorg.UnitPriceSpecification import UnitPriceSpecification

    a = create_schema_org_model(type_=UnitPriceSpecificationInheritedProperties)
    b = create_schema_org_model(type_=UnitPriceSpecificationProperties)
    c = create_schema_org_model(type_=UnitPriceSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnitPriceSpecification.schema()
    create_unitpricespecification_model(UnitPriceSpecificationAllProperties).schema()
    create_unitpricespecification_model(
        UnitPriceSpecificationInheritedProperties
    ).schema()
    create_unitpricespecification_model(UnitPriceSpecificationProperties).schema()


def RadioClip_test():
    from schorg.RadioClip import RadioClipInheritedProperties
    from schorg.RadioClip import RadioClipProperties
    from schorg.RadioClip import RadioClipAllProperties
    from schorg.RadioClip import create_schema_org_model
    from schorg.RadioClip import create_radioclip_model
    from schorg.RadioClip import RadioClip

    a = create_schema_org_model(type_=RadioClipInheritedProperties)
    b = create_schema_org_model(type_=RadioClipProperties)
    c = create_schema_org_model(type_=RadioClipAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RadioClip.schema()
    create_radioclip_model(RadioClipAllProperties).schema()
    create_radioclip_model(RadioClipInheritedProperties).schema()
    create_radioclip_model(RadioClipProperties).schema()


def Nonprofit501d_test():
    from schorg.Nonprofit501d import Nonprofit501dInheritedProperties
    from schorg.Nonprofit501d import Nonprofit501dProperties
    from schorg.Nonprofit501d import Nonprofit501dAllProperties
    from schorg.Nonprofit501d import create_schema_org_model
    from schorg.Nonprofit501d import create_nonprofit501d_model
    from schorg.Nonprofit501d import Nonprofit501d

    a = create_schema_org_model(type_=Nonprofit501dInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501dProperties)
    c = create_schema_org_model(type_=Nonprofit501dAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501d.schema()
    create_nonprofit501d_model(Nonprofit501dAllProperties).schema()
    create_nonprofit501d_model(Nonprofit501dInheritedProperties).schema()
    create_nonprofit501d_model(Nonprofit501dProperties).schema()


def HowOrWhereHealthAspect_test():
    from schorg.HowOrWhereHealthAspect import HowOrWhereHealthAspectInheritedProperties
    from schorg.HowOrWhereHealthAspect import HowOrWhereHealthAspectProperties
    from schorg.HowOrWhereHealthAspect import HowOrWhereHealthAspectAllProperties
    from schorg.HowOrWhereHealthAspect import create_schema_org_model
    from schorg.HowOrWhereHealthAspect import create_howorwherehealthaspect_model
    from schorg.HowOrWhereHealthAspect import HowOrWhereHealthAspect

    a = create_schema_org_model(type_=HowOrWhereHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=HowOrWhereHealthAspectProperties)
    c = create_schema_org_model(type_=HowOrWhereHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowOrWhereHealthAspect.schema()
    create_howorwherehealthaspect_model(HowOrWhereHealthAspectAllProperties).schema()
    create_howorwherehealthaspect_model(
        HowOrWhereHealthAspectInheritedProperties
    ).schema()
    create_howorwherehealthaspect_model(HowOrWhereHealthAspectProperties).schema()


def Otolaryngologic_test():
    from schorg.Otolaryngologic import OtolaryngologicInheritedProperties
    from schorg.Otolaryngologic import OtolaryngologicProperties
    from schorg.Otolaryngologic import OtolaryngologicAllProperties
    from schorg.Otolaryngologic import create_schema_org_model
    from schorg.Otolaryngologic import create_otolaryngologic_model
    from schorg.Otolaryngologic import Otolaryngologic

    a = create_schema_org_model(type_=OtolaryngologicInheritedProperties)
    b = create_schema_org_model(type_=OtolaryngologicProperties)
    c = create_schema_org_model(type_=OtolaryngologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Otolaryngologic.schema()
    create_otolaryngologic_model(OtolaryngologicAllProperties).schema()
    create_otolaryngologic_model(OtolaryngologicInheritedProperties).schema()
    create_otolaryngologic_model(OtolaryngologicProperties).schema()


def PreSale_test():
    from schorg.PreSale import PreSaleInheritedProperties
    from schorg.PreSale import PreSaleProperties
    from schorg.PreSale import PreSaleAllProperties
    from schorg.PreSale import create_schema_org_model
    from schorg.PreSale import create_presale_model
    from schorg.PreSale import PreSale

    a = create_schema_org_model(type_=PreSaleInheritedProperties)
    b = create_schema_org_model(type_=PreSaleProperties)
    c = create_schema_org_model(type_=PreSaleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PreSale.schema()
    create_presale_model(PreSaleAllProperties).schema()
    create_presale_model(PreSaleInheritedProperties).schema()
    create_presale_model(PreSaleProperties).schema()


def Hostel_test():
    from schorg.Hostel import HostelInheritedProperties
    from schorg.Hostel import HostelProperties
    from schorg.Hostel import HostelAllProperties
    from schorg.Hostel import create_schema_org_model
    from schorg.Hostel import create_hostel_model
    from schorg.Hostel import Hostel

    a = create_schema_org_model(type_=HostelInheritedProperties)
    b = create_schema_org_model(type_=HostelProperties)
    c = create_schema_org_model(type_=HostelAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hostel.schema()
    create_hostel_model(HostelAllProperties).schema()
    create_hostel_model(HostelInheritedProperties).schema()
    create_hostel_model(HostelProperties).schema()


def PsychologicalTreatment_test():
    from schorg.PsychologicalTreatment import PsychologicalTreatmentInheritedProperties
    from schorg.PsychologicalTreatment import PsychologicalTreatmentProperties
    from schorg.PsychologicalTreatment import PsychologicalTreatmentAllProperties
    from schorg.PsychologicalTreatment import create_schema_org_model
    from schorg.PsychologicalTreatment import create_psychologicaltreatment_model
    from schorg.PsychologicalTreatment import PsychologicalTreatment

    a = create_schema_org_model(type_=PsychologicalTreatmentInheritedProperties)
    b = create_schema_org_model(type_=PsychologicalTreatmentProperties)
    c = create_schema_org_model(type_=PsychologicalTreatmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PsychologicalTreatment.schema()
    create_psychologicaltreatment_model(PsychologicalTreatmentAllProperties).schema()
    create_psychologicaltreatment_model(
        PsychologicalTreatmentInheritedProperties
    ).schema()
    create_psychologicaltreatment_model(PsychologicalTreatmentProperties).schema()


def PerformAction_test():
    from schorg.PerformAction import PerformActionInheritedProperties
    from schorg.PerformAction import PerformActionProperties
    from schorg.PerformAction import PerformActionAllProperties
    from schorg.PerformAction import create_schema_org_model
    from schorg.PerformAction import create_performaction_model
    from schorg.PerformAction import PerformAction

    a = create_schema_org_model(type_=PerformActionInheritedProperties)
    b = create_schema_org_model(type_=PerformActionProperties)
    c = create_schema_org_model(type_=PerformActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PerformAction.schema()
    create_performaction_model(PerformActionAllProperties).schema()
    create_performaction_model(PerformActionInheritedProperties).schema()
    create_performaction_model(PerformActionProperties).schema()


def PreOrder_test():
    from schorg.PreOrder import PreOrderInheritedProperties
    from schorg.PreOrder import PreOrderProperties
    from schorg.PreOrder import PreOrderAllProperties
    from schorg.PreOrder import create_schema_org_model
    from schorg.PreOrder import create_preorder_model
    from schorg.PreOrder import PreOrder

    a = create_schema_org_model(type_=PreOrderInheritedProperties)
    b = create_schema_org_model(type_=PreOrderProperties)
    c = create_schema_org_model(type_=PreOrderAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PreOrder.schema()
    create_preorder_model(PreOrderAllProperties).schema()
    create_preorder_model(PreOrderInheritedProperties).schema()
    create_preorder_model(PreOrderProperties).schema()


def ChildrensEvent_test():
    from schorg.ChildrensEvent import ChildrensEventInheritedProperties
    from schorg.ChildrensEvent import ChildrensEventProperties
    from schorg.ChildrensEvent import ChildrensEventAllProperties
    from schorg.ChildrensEvent import create_schema_org_model
    from schorg.ChildrensEvent import create_childrensevent_model
    from schorg.ChildrensEvent import ChildrensEvent

    a = create_schema_org_model(type_=ChildrensEventInheritedProperties)
    b = create_schema_org_model(type_=ChildrensEventProperties)
    c = create_schema_org_model(type_=ChildrensEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ChildrensEvent.schema()
    create_childrensevent_model(ChildrensEventAllProperties).schema()
    create_childrensevent_model(ChildrensEventInheritedProperties).schema()
    create_childrensevent_model(ChildrensEventProperties).schema()


def AuthoritativeLegalValue_test():
    from schorg.AuthoritativeLegalValue import (
        AuthoritativeLegalValueInheritedProperties,
    )
    from schorg.AuthoritativeLegalValue import AuthoritativeLegalValueProperties
    from schorg.AuthoritativeLegalValue import AuthoritativeLegalValueAllProperties
    from schorg.AuthoritativeLegalValue import create_schema_org_model
    from schorg.AuthoritativeLegalValue import create_authoritativelegalvalue_model
    from schorg.AuthoritativeLegalValue import AuthoritativeLegalValue

    a = create_schema_org_model(type_=AuthoritativeLegalValueInheritedProperties)
    b = create_schema_org_model(type_=AuthoritativeLegalValueProperties)
    c = create_schema_org_model(type_=AuthoritativeLegalValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AuthoritativeLegalValue.schema()
    create_authoritativelegalvalue_model(AuthoritativeLegalValueAllProperties).schema()
    create_authoritativelegalvalue_model(
        AuthoritativeLegalValueInheritedProperties
    ).schema()
    create_authoritativelegalvalue_model(AuthoritativeLegalValueProperties).schema()


def WearableSizeSystemFR_test():
    from schorg.WearableSizeSystemFR import WearableSizeSystemFRInheritedProperties
    from schorg.WearableSizeSystemFR import WearableSizeSystemFRProperties
    from schorg.WearableSizeSystemFR import WearableSizeSystemFRAllProperties
    from schorg.WearableSizeSystemFR import create_schema_org_model
    from schorg.WearableSizeSystemFR import create_wearablesizesystemfr_model
    from schorg.WearableSizeSystemFR import WearableSizeSystemFR

    a = create_schema_org_model(type_=WearableSizeSystemFRInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemFRProperties)
    c = create_schema_org_model(type_=WearableSizeSystemFRAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemFR.schema()
    create_wearablesizesystemfr_model(WearableSizeSystemFRAllProperties).schema()
    create_wearablesizesystemfr_model(WearableSizeSystemFRInheritedProperties).schema()
    create_wearablesizesystemfr_model(WearableSizeSystemFRProperties).schema()


def BroadcastRelease_test():
    from schorg.BroadcastRelease import BroadcastReleaseInheritedProperties
    from schorg.BroadcastRelease import BroadcastReleaseProperties
    from schorg.BroadcastRelease import BroadcastReleaseAllProperties
    from schorg.BroadcastRelease import create_schema_org_model
    from schorg.BroadcastRelease import create_broadcastrelease_model
    from schorg.BroadcastRelease import BroadcastRelease

    a = create_schema_org_model(type_=BroadcastReleaseInheritedProperties)
    b = create_schema_org_model(type_=BroadcastReleaseProperties)
    c = create_schema_org_model(type_=BroadcastReleaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BroadcastRelease.schema()
    create_broadcastrelease_model(BroadcastReleaseAllProperties).schema()
    create_broadcastrelease_model(BroadcastReleaseInheritedProperties).schema()
    create_broadcastrelease_model(BroadcastReleaseProperties).schema()


def TaxiService_test():
    from schorg.TaxiService import TaxiServiceInheritedProperties
    from schorg.TaxiService import TaxiServiceProperties
    from schorg.TaxiService import TaxiServiceAllProperties
    from schorg.TaxiService import create_schema_org_model
    from schorg.TaxiService import create_taxiservice_model
    from schorg.TaxiService import TaxiService

    a = create_schema_org_model(type_=TaxiServiceInheritedProperties)
    b = create_schema_org_model(type_=TaxiServiceProperties)
    c = create_schema_org_model(type_=TaxiServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TaxiService.schema()
    create_taxiservice_model(TaxiServiceAllProperties).schema()
    create_taxiservice_model(TaxiServiceInheritedProperties).schema()
    create_taxiservice_model(TaxiServiceProperties).schema()


def TattooParlor_test():
    from schorg.TattooParlor import TattooParlorInheritedProperties
    from schorg.TattooParlor import TattooParlorProperties
    from schorg.TattooParlor import TattooParlorAllProperties
    from schorg.TattooParlor import create_schema_org_model
    from schorg.TattooParlor import create_tattooparlor_model
    from schorg.TattooParlor import TattooParlor

    a = create_schema_org_model(type_=TattooParlorInheritedProperties)
    b = create_schema_org_model(type_=TattooParlorProperties)
    c = create_schema_org_model(type_=TattooParlorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TattooParlor.schema()
    create_tattooparlor_model(TattooParlorAllProperties).schema()
    create_tattooparlor_model(TattooParlorInheritedProperties).schema()
    create_tattooparlor_model(TattooParlorProperties).schema()


def EnergyStarCertified_test():
    from schorg.EnergyStarCertified import EnergyStarCertifiedInheritedProperties
    from schorg.EnergyStarCertified import EnergyStarCertifiedProperties
    from schorg.EnergyStarCertified import EnergyStarCertifiedAllProperties
    from schorg.EnergyStarCertified import create_schema_org_model
    from schorg.EnergyStarCertified import create_energystarcertified_model
    from schorg.EnergyStarCertified import EnergyStarCertified

    a = create_schema_org_model(type_=EnergyStarCertifiedInheritedProperties)
    b = create_schema_org_model(type_=EnergyStarCertifiedProperties)
    c = create_schema_org_model(type_=EnergyStarCertifiedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EnergyStarCertified.schema()
    create_energystarcertified_model(EnergyStarCertifiedAllProperties).schema()
    create_energystarcertified_model(EnergyStarCertifiedInheritedProperties).schema()
    create_energystarcertified_model(EnergyStarCertifiedProperties).schema()


def SendAction_test():
    from schorg.SendAction import SendActionInheritedProperties
    from schorg.SendAction import SendActionProperties
    from schorg.SendAction import SendActionAllProperties
    from schorg.SendAction import create_schema_org_model
    from schorg.SendAction import create_sendaction_model
    from schorg.SendAction import SendAction

    a = create_schema_org_model(type_=SendActionInheritedProperties)
    b = create_schema_org_model(type_=SendActionProperties)
    c = create_schema_org_model(type_=SendActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SendAction.schema()
    create_sendaction_model(SendActionAllProperties).schema()
    create_sendaction_model(SendActionInheritedProperties).schema()
    create_sendaction_model(SendActionProperties).schema()


def Demand_test():
    from schorg.Demand import DemandInheritedProperties
    from schorg.Demand import DemandProperties
    from schorg.Demand import DemandAllProperties
    from schorg.Demand import create_schema_org_model
    from schorg.Demand import create_demand_model
    from schorg.Demand import Demand

    a = create_schema_org_model(type_=DemandInheritedProperties)
    b = create_schema_org_model(type_=DemandProperties)
    c = create_schema_org_model(type_=DemandAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Demand.schema()
    create_demand_model(DemandAllProperties).schema()
    create_demand_model(DemandInheritedProperties).schema()
    create_demand_model(DemandProperties).schema()


def SubscribeAction_test():
    from schorg.SubscribeAction import SubscribeActionInheritedProperties
    from schorg.SubscribeAction import SubscribeActionProperties
    from schorg.SubscribeAction import SubscribeActionAllProperties
    from schorg.SubscribeAction import create_schema_org_model
    from schorg.SubscribeAction import create_subscribeaction_model
    from schorg.SubscribeAction import SubscribeAction

    a = create_schema_org_model(type_=SubscribeActionInheritedProperties)
    b = create_schema_org_model(type_=SubscribeActionProperties)
    c = create_schema_org_model(type_=SubscribeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SubscribeAction.schema()
    create_subscribeaction_model(SubscribeActionAllProperties).schema()
    create_subscribeaction_model(SubscribeActionInheritedProperties).schema()
    create_subscribeaction_model(SubscribeActionProperties).schema()


def Number_test():
    from schorg.Number import NumberInheritedProperties
    from schorg.Number import NumberProperties
    from schorg.Number import NumberAllProperties
    from schorg.Number import create_schema_org_model
    from schorg.Number import create_number_model
    from schorg.Number import Number

    a = create_schema_org_model(type_=NumberInheritedProperties)
    b = create_schema_org_model(type_=NumberProperties)
    c = create_schema_org_model(type_=NumberAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Number.schema()
    create_number_model(NumberAllProperties).schema()
    create_number_model(NumberInheritedProperties).schema()
    create_number_model(NumberProperties).schema()


def Waterfall_test():
    from schorg.Waterfall import WaterfallInheritedProperties
    from schorg.Waterfall import WaterfallProperties
    from schorg.Waterfall import WaterfallAllProperties
    from schorg.Waterfall import create_schema_org_model
    from schorg.Waterfall import create_waterfall_model
    from schorg.Waterfall import Waterfall

    a = create_schema_org_model(type_=WaterfallInheritedProperties)
    b = create_schema_org_model(type_=WaterfallProperties)
    c = create_schema_org_model(type_=WaterfallAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Waterfall.schema()
    create_waterfall_model(WaterfallAllProperties).schema()
    create_waterfall_model(WaterfallInheritedProperties).schema()
    create_waterfall_model(WaterfallProperties).schema()


def TakeAction_test():
    from schorg.TakeAction import TakeActionInheritedProperties
    from schorg.TakeAction import TakeActionProperties
    from schorg.TakeAction import TakeActionAllProperties
    from schorg.TakeAction import create_schema_org_model
    from schorg.TakeAction import create_takeaction_model
    from schorg.TakeAction import TakeAction

    a = create_schema_org_model(type_=TakeActionInheritedProperties)
    b = create_schema_org_model(type_=TakeActionProperties)
    c = create_schema_org_model(type_=TakeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TakeAction.schema()
    create_takeaction_model(TakeActionAllProperties).schema()
    create_takeaction_model(TakeActionInheritedProperties).schema()
    create_takeaction_model(TakeActionProperties).schema()


def State_test():
    from schorg.State import StateInheritedProperties
    from schorg.State import StateProperties
    from schorg.State import StateAllProperties
    from schorg.State import create_schema_org_model
    from schorg.State import create_state_model
    from schorg.State import State

    a = create_schema_org_model(type_=StateInheritedProperties)
    b = create_schema_org_model(type_=StateProperties)
    c = create_schema_org_model(type_=StateAllProperties)
    a.schema()
    b.schema()
    c.schema()
    State.schema()
    create_state_model(StateAllProperties).schema()
    create_state_model(StateInheritedProperties).schema()
    create_state_model(StateProperties).schema()


def ReturnFeesCustomerResponsibility_test():
    from schorg.ReturnFeesCustomerResponsibility import (
        ReturnFeesCustomerResponsibilityInheritedProperties,
    )
    from schorg.ReturnFeesCustomerResponsibility import (
        ReturnFeesCustomerResponsibilityProperties,
    )
    from schorg.ReturnFeesCustomerResponsibility import (
        ReturnFeesCustomerResponsibilityAllProperties,
    )
    from schorg.ReturnFeesCustomerResponsibility import create_schema_org_model
    from schorg.ReturnFeesCustomerResponsibility import (
        create_returnfeescustomerresponsibility_model,
    )
    from schorg.ReturnFeesCustomerResponsibility import ReturnFeesCustomerResponsibility

    a = create_schema_org_model(
        type_=ReturnFeesCustomerResponsibilityInheritedProperties
    )
    b = create_schema_org_model(type_=ReturnFeesCustomerResponsibilityProperties)
    c = create_schema_org_model(type_=ReturnFeesCustomerResponsibilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnFeesCustomerResponsibility.schema()
    create_returnfeescustomerresponsibility_model(
        ReturnFeesCustomerResponsibilityAllProperties
    ).schema()
    create_returnfeescustomerresponsibility_model(
        ReturnFeesCustomerResponsibilityInheritedProperties
    ).schema()
    create_returnfeescustomerresponsibility_model(
        ReturnFeesCustomerResponsibilityProperties
    ).schema()


def NewCondition_test():
    from schorg.NewCondition import NewConditionInheritedProperties
    from schorg.NewCondition import NewConditionProperties
    from schorg.NewCondition import NewConditionAllProperties
    from schorg.NewCondition import create_schema_org_model
    from schorg.NewCondition import create_newcondition_model
    from schorg.NewCondition import NewCondition

    a = create_schema_org_model(type_=NewConditionInheritedProperties)
    b = create_schema_org_model(type_=NewConditionProperties)
    c = create_schema_org_model(type_=NewConditionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NewCondition.schema()
    create_newcondition_model(NewConditionAllProperties).schema()
    create_newcondition_model(NewConditionInheritedProperties).schema()
    create_newcondition_model(NewConditionProperties).schema()


def LeaveAction_test():
    from schorg.LeaveAction import LeaveActionInheritedProperties
    from schorg.LeaveAction import LeaveActionProperties
    from schorg.LeaveAction import LeaveActionAllProperties
    from schorg.LeaveAction import create_schema_org_model
    from schorg.LeaveAction import create_leaveaction_model
    from schorg.LeaveAction import LeaveAction

    a = create_schema_org_model(type_=LeaveActionInheritedProperties)
    b = create_schema_org_model(type_=LeaveActionProperties)
    c = create_schema_org_model(type_=LeaveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LeaveAction.schema()
    create_leaveaction_model(LeaveActionAllProperties).schema()
    create_leaveaction_model(LeaveActionInheritedProperties).schema()
    create_leaveaction_model(LeaveActionProperties).schema()


def WearableMeasurementChestOrBust_test():
    from schorg.WearableMeasurementChestOrBust import (
        WearableMeasurementChestOrBustInheritedProperties,
    )
    from schorg.WearableMeasurementChestOrBust import (
        WearableMeasurementChestOrBustProperties,
    )
    from schorg.WearableMeasurementChestOrBust import (
        WearableMeasurementChestOrBustAllProperties,
    )
    from schorg.WearableMeasurementChestOrBust import create_schema_org_model
    from schorg.WearableMeasurementChestOrBust import (
        create_wearablemeasurementchestorbust_model,
    )
    from schorg.WearableMeasurementChestOrBust import WearableMeasurementChestOrBust

    a = create_schema_org_model(type_=WearableMeasurementChestOrBustInheritedProperties)
    b = create_schema_org_model(type_=WearableMeasurementChestOrBustProperties)
    c = create_schema_org_model(type_=WearableMeasurementChestOrBustAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableMeasurementChestOrBust.schema()
    create_wearablemeasurementchestorbust_model(
        WearableMeasurementChestOrBustAllProperties
    ).schema()
    create_wearablemeasurementchestorbust_model(
        WearableMeasurementChestOrBustInheritedProperties
    ).schema()
    create_wearablemeasurementchestorbust_model(
        WearableMeasurementChestOrBustProperties
    ).schema()


def Property_test():
    from schorg.Property import PropertyInheritedProperties
    from schorg.Property import PropertyProperties
    from schorg.Property import PropertyAllProperties
    from schorg.Property import create_schema_org_model
    from schorg.Property import create_property_model
    from schorg.Property import Property

    a = create_schema_org_model(type_=PropertyInheritedProperties)
    b = create_schema_org_model(type_=PropertyProperties)
    c = create_schema_org_model(type_=PropertyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Property.schema()
    create_property_model(PropertyAllProperties).schema()
    create_property_model(PropertyInheritedProperties).schema()
    create_property_model(PropertyProperties).schema()


def TVSeason_test():
    from schorg.TVSeason import TVSeasonInheritedProperties
    from schorg.TVSeason import TVSeasonProperties
    from schorg.TVSeason import TVSeasonAllProperties
    from schorg.TVSeason import create_schema_org_model
    from schorg.TVSeason import create_tvseason_model
    from schorg.TVSeason import TVSeason

    a = create_schema_org_model(type_=TVSeasonInheritedProperties)
    b = create_schema_org_model(type_=TVSeasonProperties)
    c = create_schema_org_model(type_=TVSeasonAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TVSeason.schema()
    create_tvseason_model(TVSeasonAllProperties).schema()
    create_tvseason_model(TVSeasonInheritedProperties).schema()
    create_tvseason_model(TVSeasonProperties).schema()


def WPHeader_test():
    from schorg.WPHeader import WPHeaderInheritedProperties
    from schorg.WPHeader import WPHeaderProperties
    from schorg.WPHeader import WPHeaderAllProperties
    from schorg.WPHeader import create_schema_org_model
    from schorg.WPHeader import create_wpheader_model
    from schorg.WPHeader import WPHeader

    a = create_schema_org_model(type_=WPHeaderInheritedProperties)
    b = create_schema_org_model(type_=WPHeaderProperties)
    c = create_schema_org_model(type_=WPHeaderAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WPHeader.schema()
    create_wpheader_model(WPHeaderAllProperties).schema()
    create_wpheader_model(WPHeaderInheritedProperties).schema()
    create_wpheader_model(WPHeaderProperties).schema()


def Nonprofit501c26_test():
    from schorg.Nonprofit501c26 import Nonprofit501c26InheritedProperties
    from schorg.Nonprofit501c26 import Nonprofit501c26Properties
    from schorg.Nonprofit501c26 import Nonprofit501c26AllProperties
    from schorg.Nonprofit501c26 import create_schema_org_model
    from schorg.Nonprofit501c26 import create_nonprofit501c26_model
    from schorg.Nonprofit501c26 import Nonprofit501c26

    a = create_schema_org_model(type_=Nonprofit501c26InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c26Properties)
    c = create_schema_org_model(type_=Nonprofit501c26AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c26.schema()
    create_nonprofit501c26_model(Nonprofit501c26AllProperties).schema()
    create_nonprofit501c26_model(Nonprofit501c26InheritedProperties).schema()
    create_nonprofit501c26_model(Nonprofit501c26Properties).schema()


def ShoppingCenter_test():
    from schorg.ShoppingCenter import ShoppingCenterInheritedProperties
    from schorg.ShoppingCenter import ShoppingCenterProperties
    from schorg.ShoppingCenter import ShoppingCenterAllProperties
    from schorg.ShoppingCenter import create_schema_org_model
    from schorg.ShoppingCenter import create_shoppingcenter_model
    from schorg.ShoppingCenter import ShoppingCenter

    a = create_schema_org_model(type_=ShoppingCenterInheritedProperties)
    b = create_schema_org_model(type_=ShoppingCenterProperties)
    c = create_schema_org_model(type_=ShoppingCenterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShoppingCenter.schema()
    create_shoppingcenter_model(ShoppingCenterAllProperties).schema()
    create_shoppingcenter_model(ShoppingCenterInheritedProperties).schema()
    create_shoppingcenter_model(ShoppingCenterProperties).schema()


def MedicalCode_test():
    from schorg.MedicalCode import MedicalCodeInheritedProperties
    from schorg.MedicalCode import MedicalCodeProperties
    from schorg.MedicalCode import MedicalCodeAllProperties
    from schorg.MedicalCode import create_schema_org_model
    from schorg.MedicalCode import create_medicalcode_model
    from schorg.MedicalCode import MedicalCode

    a = create_schema_org_model(type_=MedicalCodeInheritedProperties)
    b = create_schema_org_model(type_=MedicalCodeProperties)
    c = create_schema_org_model(type_=MedicalCodeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalCode.schema()
    create_medicalcode_model(MedicalCodeAllProperties).schema()
    create_medicalcode_model(MedicalCodeInheritedProperties).schema()
    create_medicalcode_model(MedicalCodeProperties).schema()


def PronounceableText_test():
    from schorg.PronounceableText import PronounceableTextInheritedProperties
    from schorg.PronounceableText import PronounceableTextProperties
    from schorg.PronounceableText import PronounceableTextAllProperties
    from schorg.PronounceableText import create_schema_org_model
    from schorg.PronounceableText import create_pronounceabletext_model
    from schorg.PronounceableText import PronounceableText

    a = create_schema_org_model(type_=PronounceableTextInheritedProperties)
    b = create_schema_org_model(type_=PronounceableTextProperties)
    c = create_schema_org_model(type_=PronounceableTextAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PronounceableText.schema()
    create_pronounceabletext_model(PronounceableTextAllProperties).schema()
    create_pronounceabletext_model(PronounceableTextInheritedProperties).schema()
    create_pronounceabletext_model(PronounceableTextProperties).schema()


def TransformedContent_test():
    from schorg.TransformedContent import TransformedContentInheritedProperties
    from schorg.TransformedContent import TransformedContentProperties
    from schorg.TransformedContent import TransformedContentAllProperties
    from schorg.TransformedContent import create_schema_org_model
    from schorg.TransformedContent import create_transformedcontent_model
    from schorg.TransformedContent import TransformedContent

    a = create_schema_org_model(type_=TransformedContentInheritedProperties)
    b = create_schema_org_model(type_=TransformedContentProperties)
    c = create_schema_org_model(type_=TransformedContentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TransformedContent.schema()
    create_transformedcontent_model(TransformedContentAllProperties).schema()
    create_transformedcontent_model(TransformedContentInheritedProperties).schema()
    create_transformedcontent_model(TransformedContentProperties).schema()


def MotorcycleRepair_test():
    from schorg.MotorcycleRepair import MotorcycleRepairInheritedProperties
    from schorg.MotorcycleRepair import MotorcycleRepairProperties
    from schorg.MotorcycleRepair import MotorcycleRepairAllProperties
    from schorg.MotorcycleRepair import create_schema_org_model
    from schorg.MotorcycleRepair import create_motorcyclerepair_model
    from schorg.MotorcycleRepair import MotorcycleRepair

    a = create_schema_org_model(type_=MotorcycleRepairInheritedProperties)
    b = create_schema_org_model(type_=MotorcycleRepairProperties)
    c = create_schema_org_model(type_=MotorcycleRepairAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MotorcycleRepair.schema()
    create_motorcyclerepair_model(MotorcycleRepairAllProperties).schema()
    create_motorcyclerepair_model(MotorcycleRepairInheritedProperties).schema()
    create_motorcyclerepair_model(MotorcycleRepairProperties).schema()


def ActiveActionStatus_test():
    from schorg.ActiveActionStatus import ActiveActionStatusInheritedProperties
    from schorg.ActiveActionStatus import ActiveActionStatusProperties
    from schorg.ActiveActionStatus import ActiveActionStatusAllProperties
    from schorg.ActiveActionStatus import create_schema_org_model
    from schorg.ActiveActionStatus import create_activeactionstatus_model
    from schorg.ActiveActionStatus import ActiveActionStatus

    a = create_schema_org_model(type_=ActiveActionStatusInheritedProperties)
    b = create_schema_org_model(type_=ActiveActionStatusProperties)
    c = create_schema_org_model(type_=ActiveActionStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActiveActionStatus.schema()
    create_activeactionstatus_model(ActiveActionStatusAllProperties).schema()
    create_activeactionstatus_model(ActiveActionStatusInheritedProperties).schema()
    create_activeactionstatus_model(ActiveActionStatusProperties).schema()


def EducationalOccupationalProgram_test():
    from schorg.EducationalOccupationalProgram import (
        EducationalOccupationalProgramInheritedProperties,
    )
    from schorg.EducationalOccupationalProgram import (
        EducationalOccupationalProgramProperties,
    )
    from schorg.EducationalOccupationalProgram import (
        EducationalOccupationalProgramAllProperties,
    )
    from schorg.EducationalOccupationalProgram import create_schema_org_model
    from schorg.EducationalOccupationalProgram import (
        create_educationaloccupationalprogram_model,
    )
    from schorg.EducationalOccupationalProgram import EducationalOccupationalProgram

    a = create_schema_org_model(type_=EducationalOccupationalProgramInheritedProperties)
    b = create_schema_org_model(type_=EducationalOccupationalProgramProperties)
    c = create_schema_org_model(type_=EducationalOccupationalProgramAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EducationalOccupationalProgram.schema()
    create_educationaloccupationalprogram_model(
        EducationalOccupationalProgramAllProperties
    ).schema()
    create_educationaloccupationalprogram_model(
        EducationalOccupationalProgramInheritedProperties
    ).schema()
    create_educationaloccupationalprogram_model(
        EducationalOccupationalProgramProperties
    ).schema()


def WorkBasedProgram_test():
    from schorg.WorkBasedProgram import WorkBasedProgramInheritedProperties
    from schorg.WorkBasedProgram import WorkBasedProgramProperties
    from schorg.WorkBasedProgram import WorkBasedProgramAllProperties
    from schorg.WorkBasedProgram import create_schema_org_model
    from schorg.WorkBasedProgram import create_workbasedprogram_model
    from schorg.WorkBasedProgram import WorkBasedProgram

    a = create_schema_org_model(type_=WorkBasedProgramInheritedProperties)
    b = create_schema_org_model(type_=WorkBasedProgramProperties)
    c = create_schema_org_model(type_=WorkBasedProgramAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WorkBasedProgram.schema()
    create_workbasedprogram_model(WorkBasedProgramAllProperties).schema()
    create_workbasedprogram_model(WorkBasedProgramInheritedProperties).schema()
    create_workbasedprogram_model(WorkBasedProgramProperties).schema()


def DefinedRegion_test():
    from schorg.DefinedRegion import DefinedRegionInheritedProperties
    from schorg.DefinedRegion import DefinedRegionProperties
    from schorg.DefinedRegion import DefinedRegionAllProperties
    from schorg.DefinedRegion import create_schema_org_model
    from schorg.DefinedRegion import create_definedregion_model
    from schorg.DefinedRegion import DefinedRegion

    a = create_schema_org_model(type_=DefinedRegionInheritedProperties)
    b = create_schema_org_model(type_=DefinedRegionProperties)
    c = create_schema_org_model(type_=DefinedRegionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DefinedRegion.schema()
    create_definedregion_model(DefinedRegionAllProperties).schema()
    create_definedregion_model(DefinedRegionInheritedProperties).schema()
    create_definedregion_model(DefinedRegionProperties).schema()


def Distillery_test():
    from schorg.Distillery import DistilleryInheritedProperties
    from schorg.Distillery import DistilleryProperties
    from schorg.Distillery import DistilleryAllProperties
    from schorg.Distillery import create_schema_org_model
    from schorg.Distillery import create_distillery_model
    from schorg.Distillery import Distillery

    a = create_schema_org_model(type_=DistilleryInheritedProperties)
    b = create_schema_org_model(type_=DistilleryProperties)
    c = create_schema_org_model(type_=DistilleryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Distillery.schema()
    create_distillery_model(DistilleryAllProperties).schema()
    create_distillery_model(DistilleryInheritedProperties).schema()
    create_distillery_model(DistilleryProperties).schema()


def BusOrCoach_test():
    from schorg.BusOrCoach import BusOrCoachInheritedProperties
    from schorg.BusOrCoach import BusOrCoachProperties
    from schorg.BusOrCoach import BusOrCoachAllProperties
    from schorg.BusOrCoach import create_schema_org_model
    from schorg.BusOrCoach import create_busorcoach_model
    from schorg.BusOrCoach import BusOrCoach

    a = create_schema_org_model(type_=BusOrCoachInheritedProperties)
    b = create_schema_org_model(type_=BusOrCoachProperties)
    c = create_schema_org_model(type_=BusOrCoachAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusOrCoach.schema()
    create_busorcoach_model(BusOrCoachAllProperties).schema()
    create_busorcoach_model(BusOrCoachInheritedProperties).schema()
    create_busorcoach_model(BusOrCoachProperties).schema()


def BodyMeasurementHips_test():
    from schorg.BodyMeasurementHips import BodyMeasurementHipsInheritedProperties
    from schorg.BodyMeasurementHips import BodyMeasurementHipsProperties
    from schorg.BodyMeasurementHips import BodyMeasurementHipsAllProperties
    from schorg.BodyMeasurementHips import create_schema_org_model
    from schorg.BodyMeasurementHips import create_bodymeasurementhips_model
    from schorg.BodyMeasurementHips import BodyMeasurementHips

    a = create_schema_org_model(type_=BodyMeasurementHipsInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementHipsProperties)
    c = create_schema_org_model(type_=BodyMeasurementHipsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementHips.schema()
    create_bodymeasurementhips_model(BodyMeasurementHipsAllProperties).schema()
    create_bodymeasurementhips_model(BodyMeasurementHipsInheritedProperties).schema()
    create_bodymeasurementhips_model(BodyMeasurementHipsProperties).schema()


def Researcher_test():
    from schorg.Researcher import ResearcherInheritedProperties
    from schorg.Researcher import ResearcherProperties
    from schorg.Researcher import ResearcherAllProperties
    from schorg.Researcher import create_schema_org_model
    from schorg.Researcher import create_researcher_model
    from schorg.Researcher import Researcher

    a = create_schema_org_model(type_=ResearcherInheritedProperties)
    b = create_schema_org_model(type_=ResearcherProperties)
    c = create_schema_org_model(type_=ResearcherAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Researcher.schema()
    create_researcher_model(ResearcherAllProperties).schema()
    create_researcher_model(ResearcherInheritedProperties).schema()
    create_researcher_model(ResearcherProperties).schema()


def IOSPlatform_test():
    from schorg.IOSPlatform import IOSPlatformInheritedProperties
    from schorg.IOSPlatform import IOSPlatformProperties
    from schorg.IOSPlatform import IOSPlatformAllProperties
    from schorg.IOSPlatform import create_schema_org_model
    from schorg.IOSPlatform import create_iosplatform_model
    from schorg.IOSPlatform import IOSPlatform

    a = create_schema_org_model(type_=IOSPlatformInheritedProperties)
    b = create_schema_org_model(type_=IOSPlatformProperties)
    c = create_schema_org_model(type_=IOSPlatformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    IOSPlatform.schema()
    create_iosplatform_model(IOSPlatformAllProperties).schema()
    create_iosplatform_model(IOSPlatformInheritedProperties).schema()
    create_iosplatform_model(IOSPlatformProperties).schema()


def Quiz_test():
    from schorg.Quiz import QuizInheritedProperties
    from schorg.Quiz import QuizProperties
    from schorg.Quiz import QuizAllProperties
    from schorg.Quiz import create_schema_org_model
    from schorg.Quiz import create_quiz_model
    from schorg.Quiz import Quiz

    a = create_schema_org_model(type_=QuizInheritedProperties)
    b = create_schema_org_model(type_=QuizProperties)
    c = create_schema_org_model(type_=QuizAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Quiz.schema()
    create_quiz_model(QuizAllProperties).schema()
    create_quiz_model(QuizInheritedProperties).schema()
    create_quiz_model(QuizProperties).schema()


def LowFatDiet_test():
    from schorg.LowFatDiet import LowFatDietInheritedProperties
    from schorg.LowFatDiet import LowFatDietProperties
    from schorg.LowFatDiet import LowFatDietAllProperties
    from schorg.LowFatDiet import create_schema_org_model
    from schorg.LowFatDiet import create_lowfatdiet_model
    from schorg.LowFatDiet import LowFatDiet

    a = create_schema_org_model(type_=LowFatDietInheritedProperties)
    b = create_schema_org_model(type_=LowFatDietProperties)
    c = create_schema_org_model(type_=LowFatDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LowFatDiet.schema()
    create_lowfatdiet_model(LowFatDietAllProperties).schema()
    create_lowfatdiet_model(LowFatDietInheritedProperties).schema()
    create_lowfatdiet_model(LowFatDietProperties).schema()


def Airline_test():
    from schorg.Airline import AirlineInheritedProperties
    from schorg.Airline import AirlineProperties
    from schorg.Airline import AirlineAllProperties
    from schorg.Airline import create_schema_org_model
    from schorg.Airline import create_airline_model
    from schorg.Airline import Airline

    a = create_schema_org_model(type_=AirlineInheritedProperties)
    b = create_schema_org_model(type_=AirlineProperties)
    c = create_schema_org_model(type_=AirlineAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Airline.schema()
    create_airline_model(AirlineAllProperties).schema()
    create_airline_model(AirlineInheritedProperties).schema()
    create_airline_model(AirlineProperties).schema()


def Chiropractic_test():
    from schorg.Chiropractic import ChiropracticInheritedProperties
    from schorg.Chiropractic import ChiropracticProperties
    from schorg.Chiropractic import ChiropracticAllProperties
    from schorg.Chiropractic import create_schema_org_model
    from schorg.Chiropractic import create_chiropractic_model
    from schorg.Chiropractic import Chiropractic

    a = create_schema_org_model(type_=ChiropracticInheritedProperties)
    b = create_schema_org_model(type_=ChiropracticProperties)
    c = create_schema_org_model(type_=ChiropracticAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Chiropractic.schema()
    create_chiropractic_model(ChiropracticAllProperties).schema()
    create_chiropractic_model(ChiropracticInheritedProperties).schema()
    create_chiropractic_model(ChiropracticProperties).schema()


def WesternConventional_test():
    from schorg.WesternConventional import WesternConventionalInheritedProperties
    from schorg.WesternConventional import WesternConventionalProperties
    from schorg.WesternConventional import WesternConventionalAllProperties
    from schorg.WesternConventional import create_schema_org_model
    from schorg.WesternConventional import create_westernconventional_model
    from schorg.WesternConventional import WesternConventional

    a = create_schema_org_model(type_=WesternConventionalInheritedProperties)
    b = create_schema_org_model(type_=WesternConventionalProperties)
    c = create_schema_org_model(type_=WesternConventionalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WesternConventional.schema()
    create_westernconventional_model(WesternConventionalAllProperties).schema()
    create_westernconventional_model(WesternConventionalInheritedProperties).schema()
    create_westernconventional_model(WesternConventionalProperties).schema()


def MerchantReturnUnspecified_test():
    from schorg.MerchantReturnUnspecified import (
        MerchantReturnUnspecifiedInheritedProperties,
    )
    from schorg.MerchantReturnUnspecified import MerchantReturnUnspecifiedProperties
    from schorg.MerchantReturnUnspecified import MerchantReturnUnspecifiedAllProperties
    from schorg.MerchantReturnUnspecified import create_schema_org_model
    from schorg.MerchantReturnUnspecified import create_merchantreturnunspecified_model
    from schorg.MerchantReturnUnspecified import MerchantReturnUnspecified

    a = create_schema_org_model(type_=MerchantReturnUnspecifiedInheritedProperties)
    b = create_schema_org_model(type_=MerchantReturnUnspecifiedProperties)
    c = create_schema_org_model(type_=MerchantReturnUnspecifiedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnUnspecified.schema()
    create_merchantreturnunspecified_model(
        MerchantReturnUnspecifiedAllProperties
    ).schema()
    create_merchantreturnunspecified_model(
        MerchantReturnUnspecifiedInheritedProperties
    ).schema()
    create_merchantreturnunspecified_model(MerchantReturnUnspecifiedProperties).schema()


def ReceiveAction_test():
    from schorg.ReceiveAction import ReceiveActionInheritedProperties
    from schorg.ReceiveAction import ReceiveActionProperties
    from schorg.ReceiveAction import ReceiveActionAllProperties
    from schorg.ReceiveAction import create_schema_org_model
    from schorg.ReceiveAction import create_receiveaction_model
    from schorg.ReceiveAction import ReceiveAction

    a = create_schema_org_model(type_=ReceiveActionInheritedProperties)
    b = create_schema_org_model(type_=ReceiveActionProperties)
    c = create_schema_org_model(type_=ReceiveActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReceiveAction.schema()
    create_receiveaction_model(ReceiveActionAllProperties).schema()
    create_receiveaction_model(ReceiveActionInheritedProperties).schema()
    create_receiveaction_model(ReceiveActionProperties).schema()


def ReplyAction_test():
    from schorg.ReplyAction import ReplyActionInheritedProperties
    from schorg.ReplyAction import ReplyActionProperties
    from schorg.ReplyAction import ReplyActionAllProperties
    from schorg.ReplyAction import create_schema_org_model
    from schorg.ReplyAction import create_replyaction_model
    from schorg.ReplyAction import ReplyAction

    a = create_schema_org_model(type_=ReplyActionInheritedProperties)
    b = create_schema_org_model(type_=ReplyActionProperties)
    c = create_schema_org_model(type_=ReplyActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReplyAction.schema()
    create_replyaction_model(ReplyActionAllProperties).schema()
    create_replyaction_model(ReplyActionInheritedProperties).schema()
    create_replyaction_model(ReplyActionProperties).schema()


def RightHandDriving_test():
    from schorg.RightHandDriving import RightHandDrivingInheritedProperties
    from schorg.RightHandDriving import RightHandDrivingProperties
    from schorg.RightHandDriving import RightHandDrivingAllProperties
    from schorg.RightHandDriving import create_schema_org_model
    from schorg.RightHandDriving import create_righthanddriving_model
    from schorg.RightHandDriving import RightHandDriving

    a = create_schema_org_model(type_=RightHandDrivingInheritedProperties)
    b = create_schema_org_model(type_=RightHandDrivingProperties)
    c = create_schema_org_model(type_=RightHandDrivingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RightHandDriving.schema()
    create_righthanddriving_model(RightHandDrivingAllProperties).schema()
    create_righthanddriving_model(RightHandDrivingInheritedProperties).schema()
    create_righthanddriving_model(RightHandDrivingProperties).schema()


def SearchAction_test():
    from schorg.SearchAction import SearchActionInheritedProperties
    from schorg.SearchAction import SearchActionProperties
    from schorg.SearchAction import SearchActionAllProperties
    from schorg.SearchAction import create_schema_org_model
    from schorg.SearchAction import create_searchaction_model
    from schorg.SearchAction import SearchAction

    a = create_schema_org_model(type_=SearchActionInheritedProperties)
    b = create_schema_org_model(type_=SearchActionProperties)
    c = create_schema_org_model(type_=SearchActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SearchAction.schema()
    create_searchaction_model(SearchActionAllProperties).schema()
    create_searchaction_model(SearchActionInheritedProperties).schema()
    create_searchaction_model(SearchActionProperties).schema()


def InternationalTrial_test():
    from schorg.InternationalTrial import InternationalTrialInheritedProperties
    from schorg.InternationalTrial import InternationalTrialProperties
    from schorg.InternationalTrial import InternationalTrialAllProperties
    from schorg.InternationalTrial import create_schema_org_model
    from schorg.InternationalTrial import create_internationaltrial_model
    from schorg.InternationalTrial import InternationalTrial

    a = create_schema_org_model(type_=InternationalTrialInheritedProperties)
    b = create_schema_org_model(type_=InternationalTrialProperties)
    c = create_schema_org_model(type_=InternationalTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InternationalTrial.schema()
    create_internationaltrial_model(InternationalTrialAllProperties).schema()
    create_internationaltrial_model(InternationalTrialInheritedProperties).schema()
    create_internationaltrial_model(InternationalTrialProperties).schema()


def MedicalRiskCalculator_test():
    from schorg.MedicalRiskCalculator import MedicalRiskCalculatorInheritedProperties
    from schorg.MedicalRiskCalculator import MedicalRiskCalculatorProperties
    from schorg.MedicalRiskCalculator import MedicalRiskCalculatorAllProperties
    from schorg.MedicalRiskCalculator import create_schema_org_model
    from schorg.MedicalRiskCalculator import create_medicalriskcalculator_model
    from schorg.MedicalRiskCalculator import MedicalRiskCalculator

    a = create_schema_org_model(type_=MedicalRiskCalculatorInheritedProperties)
    b = create_schema_org_model(type_=MedicalRiskCalculatorProperties)
    c = create_schema_org_model(type_=MedicalRiskCalculatorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalRiskCalculator.schema()
    create_medicalriskcalculator_model(MedicalRiskCalculatorAllProperties).schema()
    create_medicalriskcalculator_model(
        MedicalRiskCalculatorInheritedProperties
    ).schema()
    create_medicalriskcalculator_model(MedicalRiskCalculatorProperties).schema()


def MovieTheater_test():
    from schorg.MovieTheater import MovieTheaterInheritedProperties
    from schorg.MovieTheater import MovieTheaterProperties
    from schorg.MovieTheater import MovieTheaterAllProperties
    from schorg.MovieTheater import create_schema_org_model
    from schorg.MovieTheater import create_movietheater_model
    from schorg.MovieTheater import MovieTheater

    a = create_schema_org_model(type_=MovieTheaterInheritedProperties)
    b = create_schema_org_model(type_=MovieTheaterProperties)
    c = create_schema_org_model(type_=MovieTheaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MovieTheater.schema()
    create_movietheater_model(MovieTheaterAllProperties).schema()
    create_movietheater_model(MovieTheaterInheritedProperties).schema()
    create_movietheater_model(MovieTheaterProperties).schema()


def ShippingRateSettings_test():
    from schorg.ShippingRateSettings import ShippingRateSettingsInheritedProperties
    from schorg.ShippingRateSettings import ShippingRateSettingsProperties
    from schorg.ShippingRateSettings import ShippingRateSettingsAllProperties
    from schorg.ShippingRateSettings import create_schema_org_model
    from schorg.ShippingRateSettings import create_shippingratesettings_model
    from schorg.ShippingRateSettings import ShippingRateSettings

    a = create_schema_org_model(type_=ShippingRateSettingsInheritedProperties)
    b = create_schema_org_model(type_=ShippingRateSettingsProperties)
    c = create_schema_org_model(type_=ShippingRateSettingsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShippingRateSettings.schema()
    create_shippingratesettings_model(ShippingRateSettingsAllProperties).schema()
    create_shippingratesettings_model(ShippingRateSettingsInheritedProperties).schema()
    create_shippingratesettings_model(ShippingRateSettingsProperties).schema()


def RsvpResponseMaybe_test():
    from schorg.RsvpResponseMaybe import RsvpResponseMaybeInheritedProperties
    from schorg.RsvpResponseMaybe import RsvpResponseMaybeProperties
    from schorg.RsvpResponseMaybe import RsvpResponseMaybeAllProperties
    from schorg.RsvpResponseMaybe import create_schema_org_model
    from schorg.RsvpResponseMaybe import create_rsvpresponsemaybe_model
    from schorg.RsvpResponseMaybe import RsvpResponseMaybe

    a = create_schema_org_model(type_=RsvpResponseMaybeInheritedProperties)
    b = create_schema_org_model(type_=RsvpResponseMaybeProperties)
    c = create_schema_org_model(type_=RsvpResponseMaybeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RsvpResponseMaybe.schema()
    create_rsvpresponsemaybe_model(RsvpResponseMaybeAllProperties).schema()
    create_rsvpresponsemaybe_model(RsvpResponseMaybeInheritedProperties).schema()
    create_rsvpresponsemaybe_model(RsvpResponseMaybeProperties).schema()


def Ear_test():
    from schorg.Ear import EarInheritedProperties
    from schorg.Ear import EarProperties
    from schorg.Ear import EarAllProperties
    from schorg.Ear import create_schema_org_model
    from schorg.Ear import create_ear_model
    from schorg.Ear import Ear

    a = create_schema_org_model(type_=EarInheritedProperties)
    b = create_schema_org_model(type_=EarProperties)
    c = create_schema_org_model(type_=EarAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Ear.schema()
    create_ear_model(EarAllProperties).schema()
    create_ear_model(EarInheritedProperties).schema()
    create_ear_model(EarProperties).schema()


def WearAction_test():
    from schorg.WearAction import WearActionInheritedProperties
    from schorg.WearAction import WearActionProperties
    from schorg.WearAction import WearActionAllProperties
    from schorg.WearAction import create_schema_org_model
    from schorg.WearAction import create_wearaction_model
    from schorg.WearAction import WearAction

    a = create_schema_org_model(type_=WearActionInheritedProperties)
    b = create_schema_org_model(type_=WearActionProperties)
    c = create_schema_org_model(type_=WearActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearAction.schema()
    create_wearaction_model(WearActionAllProperties).schema()
    create_wearaction_model(WearActionInheritedProperties).schema()
    create_wearaction_model(WearActionProperties).schema()


def BusReservation_test():
    from schorg.BusReservation import BusReservationInheritedProperties
    from schorg.BusReservation import BusReservationProperties
    from schorg.BusReservation import BusReservationAllProperties
    from schorg.BusReservation import create_schema_org_model
    from schorg.BusReservation import create_busreservation_model
    from schorg.BusReservation import BusReservation

    a = create_schema_org_model(type_=BusReservationInheritedProperties)
    b = create_schema_org_model(type_=BusReservationProperties)
    c = create_schema_org_model(type_=BusReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BusReservation.schema()
    create_busreservation_model(BusReservationAllProperties).schema()
    create_busreservation_model(BusReservationInheritedProperties).schema()
    create_busreservation_model(BusReservationProperties).schema()


def ArchiveComponent_test():
    from schorg.ArchiveComponent import ArchiveComponentInheritedProperties
    from schorg.ArchiveComponent import ArchiveComponentProperties
    from schorg.ArchiveComponent import ArchiveComponentAllProperties
    from schorg.ArchiveComponent import create_schema_org_model
    from schorg.ArchiveComponent import create_archivecomponent_model
    from schorg.ArchiveComponent import ArchiveComponent

    a = create_schema_org_model(type_=ArchiveComponentInheritedProperties)
    b = create_schema_org_model(type_=ArchiveComponentProperties)
    c = create_schema_org_model(type_=ArchiveComponentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ArchiveComponent.schema()
    create_archivecomponent_model(ArchiveComponentAllProperties).schema()
    create_archivecomponent_model(ArchiveComponentInheritedProperties).schema()
    create_archivecomponent_model(ArchiveComponentProperties).schema()


def Library_test():
    from schorg.Library import LibraryInheritedProperties
    from schorg.Library import LibraryProperties
    from schorg.Library import LibraryAllProperties
    from schorg.Library import create_schema_org_model
    from schorg.Library import create_library_model
    from schorg.Library import Library

    a = create_schema_org_model(type_=LibraryInheritedProperties)
    b = create_schema_org_model(type_=LibraryProperties)
    c = create_schema_org_model(type_=LibraryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Library.schema()
    create_library_model(LibraryAllProperties).schema()
    create_library_model(LibraryInheritedProperties).schema()
    create_library_model(LibraryProperties).schema()


def MerchantReturnFiniteReturnWindow_test():
    from schorg.MerchantReturnFiniteReturnWindow import (
        MerchantReturnFiniteReturnWindowInheritedProperties,
    )
    from schorg.MerchantReturnFiniteReturnWindow import (
        MerchantReturnFiniteReturnWindowProperties,
    )
    from schorg.MerchantReturnFiniteReturnWindow import (
        MerchantReturnFiniteReturnWindowAllProperties,
    )
    from schorg.MerchantReturnFiniteReturnWindow import create_schema_org_model
    from schorg.MerchantReturnFiniteReturnWindow import (
        create_merchantreturnfinitereturnwindow_model,
    )
    from schorg.MerchantReturnFiniteReturnWindow import MerchantReturnFiniteReturnWindow

    a = create_schema_org_model(
        type_=MerchantReturnFiniteReturnWindowInheritedProperties
    )
    b = create_schema_org_model(type_=MerchantReturnFiniteReturnWindowProperties)
    c = create_schema_org_model(type_=MerchantReturnFiniteReturnWindowAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MerchantReturnFiniteReturnWindow.schema()
    create_merchantreturnfinitereturnwindow_model(
        MerchantReturnFiniteReturnWindowAllProperties
    ).schema()
    create_merchantreturnfinitereturnwindow_model(
        MerchantReturnFiniteReturnWindowInheritedProperties
    ).schema()
    create_merchantreturnfinitereturnwindow_model(
        MerchantReturnFiniteReturnWindowProperties
    ).schema()


def SpecialAnnouncement_test():
    from schorg.SpecialAnnouncement import SpecialAnnouncementInheritedProperties
    from schorg.SpecialAnnouncement import SpecialAnnouncementProperties
    from schorg.SpecialAnnouncement import SpecialAnnouncementAllProperties
    from schorg.SpecialAnnouncement import create_schema_org_model
    from schorg.SpecialAnnouncement import create_specialannouncement_model
    from schorg.SpecialAnnouncement import SpecialAnnouncement

    a = create_schema_org_model(type_=SpecialAnnouncementInheritedProperties)
    b = create_schema_org_model(type_=SpecialAnnouncementProperties)
    c = create_schema_org_model(type_=SpecialAnnouncementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SpecialAnnouncement.schema()
    create_specialannouncement_model(SpecialAnnouncementAllProperties).schema()
    create_specialannouncement_model(SpecialAnnouncementInheritedProperties).schema()
    create_specialannouncement_model(SpecialAnnouncementProperties).schema()


def EmployerReview_test():
    from schorg.EmployerReview import EmployerReviewInheritedProperties
    from schorg.EmployerReview import EmployerReviewProperties
    from schorg.EmployerReview import EmployerReviewAllProperties
    from schorg.EmployerReview import create_schema_org_model
    from schorg.EmployerReview import create_employerreview_model
    from schorg.EmployerReview import EmployerReview

    a = create_schema_org_model(type_=EmployerReviewInheritedProperties)
    b = create_schema_org_model(type_=EmployerReviewProperties)
    c = create_schema_org_model(type_=EmployerReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmployerReview.schema()
    create_employerreview_model(EmployerReviewAllProperties).schema()
    create_employerreview_model(EmployerReviewInheritedProperties).schema()
    create_employerreview_model(EmployerReviewProperties).schema()


def RsvpResponseNo_test():
    from schorg.RsvpResponseNo import RsvpResponseNoInheritedProperties
    from schorg.RsvpResponseNo import RsvpResponseNoProperties
    from schorg.RsvpResponseNo import RsvpResponseNoAllProperties
    from schorg.RsvpResponseNo import create_schema_org_model
    from schorg.RsvpResponseNo import create_rsvpresponseno_model
    from schorg.RsvpResponseNo import RsvpResponseNo

    a = create_schema_org_model(type_=RsvpResponseNoInheritedProperties)
    b = create_schema_org_model(type_=RsvpResponseNoProperties)
    c = create_schema_org_model(type_=RsvpResponseNoAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RsvpResponseNo.schema()
    create_rsvpresponseno_model(RsvpResponseNoAllProperties).schema()
    create_rsvpresponseno_model(RsvpResponseNoInheritedProperties).schema()
    create_rsvpresponseno_model(RsvpResponseNoProperties).schema()


def HyperTocEntry_test():
    from schorg.HyperTocEntry import HyperTocEntryInheritedProperties
    from schorg.HyperTocEntry import HyperTocEntryProperties
    from schorg.HyperTocEntry import HyperTocEntryAllProperties
    from schorg.HyperTocEntry import create_schema_org_model
    from schorg.HyperTocEntry import create_hypertocentry_model
    from schorg.HyperTocEntry import HyperTocEntry

    a = create_schema_org_model(type_=HyperTocEntryInheritedProperties)
    b = create_schema_org_model(type_=HyperTocEntryProperties)
    c = create_schema_org_model(type_=HyperTocEntryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HyperTocEntry.schema()
    create_hypertocentry_model(HyperTocEntryAllProperties).schema()
    create_hypertocentry_model(HyperTocEntryInheritedProperties).schema()
    create_hypertocentry_model(HyperTocEntryProperties).schema()


def SurgicalProcedure_test():
    from schorg.SurgicalProcedure import SurgicalProcedureInheritedProperties
    from schorg.SurgicalProcedure import SurgicalProcedureProperties
    from schorg.SurgicalProcedure import SurgicalProcedureAllProperties
    from schorg.SurgicalProcedure import create_schema_org_model
    from schorg.SurgicalProcedure import create_surgicalprocedure_model
    from schorg.SurgicalProcedure import SurgicalProcedure

    a = create_schema_org_model(type_=SurgicalProcedureInheritedProperties)
    b = create_schema_org_model(type_=SurgicalProcedureProperties)
    c = create_schema_org_model(type_=SurgicalProcedureAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SurgicalProcedure.schema()
    create_surgicalprocedure_model(SurgicalProcedureAllProperties).schema()
    create_surgicalprocedure_model(SurgicalProcedureInheritedProperties).schema()
    create_surgicalprocedure_model(SurgicalProcedureProperties).schema()


def GettingAccessHealthAspect_test():
    from schorg.GettingAccessHealthAspect import (
        GettingAccessHealthAspectInheritedProperties,
    )
    from schorg.GettingAccessHealthAspect import GettingAccessHealthAspectProperties
    from schorg.GettingAccessHealthAspect import GettingAccessHealthAspectAllProperties
    from schorg.GettingAccessHealthAspect import create_schema_org_model
    from schorg.GettingAccessHealthAspect import create_gettingaccesshealthaspect_model
    from schorg.GettingAccessHealthAspect import GettingAccessHealthAspect

    a = create_schema_org_model(type_=GettingAccessHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=GettingAccessHealthAspectProperties)
    c = create_schema_org_model(type_=GettingAccessHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GettingAccessHealthAspect.schema()
    create_gettingaccesshealthaspect_model(
        GettingAccessHealthAspectAllProperties
    ).schema()
    create_gettingaccesshealthaspect_model(
        GettingAccessHealthAspectInheritedProperties
    ).schema()
    create_gettingaccesshealthaspect_model(GettingAccessHealthAspectProperties).schema()


def VideoGallery_test():
    from schorg.VideoGallery import VideoGalleryInheritedProperties
    from schorg.VideoGallery import VideoGalleryProperties
    from schorg.VideoGallery import VideoGalleryAllProperties
    from schorg.VideoGallery import create_schema_org_model
    from schorg.VideoGallery import create_videogallery_model
    from schorg.VideoGallery import VideoGallery

    a = create_schema_org_model(type_=VideoGalleryInheritedProperties)
    b = create_schema_org_model(type_=VideoGalleryProperties)
    c = create_schema_org_model(type_=VideoGalleryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    VideoGallery.schema()
    create_videogallery_model(VideoGalleryAllProperties).schema()
    create_videogallery_model(VideoGalleryInheritedProperties).schema()
    create_videogallery_model(VideoGalleryProperties).schema()


def ScreeningEvent_test():
    from schorg.ScreeningEvent import ScreeningEventInheritedProperties
    from schorg.ScreeningEvent import ScreeningEventProperties
    from schorg.ScreeningEvent import ScreeningEventAllProperties
    from schorg.ScreeningEvent import create_schema_org_model
    from schorg.ScreeningEvent import create_screeningevent_model
    from schorg.ScreeningEvent import ScreeningEvent

    a = create_schema_org_model(type_=ScreeningEventInheritedProperties)
    b = create_schema_org_model(type_=ScreeningEventProperties)
    c = create_schema_org_model(type_=ScreeningEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ScreeningEvent.schema()
    create_screeningevent_model(ScreeningEventAllProperties).schema()
    create_screeningevent_model(ScreeningEventInheritedProperties).schema()
    create_screeningevent_model(ScreeningEventProperties).schema()


def AndroidPlatform_test():
    from schorg.AndroidPlatform import AndroidPlatformInheritedProperties
    from schorg.AndroidPlatform import AndroidPlatformProperties
    from schorg.AndroidPlatform import AndroidPlatformAllProperties
    from schorg.AndroidPlatform import create_schema_org_model
    from schorg.AndroidPlatform import create_androidplatform_model
    from schorg.AndroidPlatform import AndroidPlatform

    a = create_schema_org_model(type_=AndroidPlatformInheritedProperties)
    b = create_schema_org_model(type_=AndroidPlatformProperties)
    c = create_schema_org_model(type_=AndroidPlatformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AndroidPlatform.schema()
    create_androidplatform_model(AndroidPlatformAllProperties).schema()
    create_androidplatform_model(AndroidPlatformInheritedProperties).schema()
    create_androidplatform_model(AndroidPlatformProperties).schema()


def Claim_test():
    from schorg.Claim import ClaimInheritedProperties
    from schorg.Claim import ClaimProperties
    from schorg.Claim import ClaimAllProperties
    from schorg.Claim import create_schema_org_model
    from schorg.Claim import create_claim_model
    from schorg.Claim import Claim

    a = create_schema_org_model(type_=ClaimInheritedProperties)
    b = create_schema_org_model(type_=ClaimProperties)
    c = create_schema_org_model(type_=ClaimAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Claim.schema()
    create_claim_model(ClaimAllProperties).schema()
    create_claim_model(ClaimInheritedProperties).schema()
    create_claim_model(ClaimProperties).schema()


def Mosque_test():
    from schorg.Mosque import MosqueInheritedProperties
    from schorg.Mosque import MosqueProperties
    from schorg.Mosque import MosqueAllProperties
    from schorg.Mosque import create_schema_org_model
    from schorg.Mosque import create_mosque_model
    from schorg.Mosque import Mosque

    a = create_schema_org_model(type_=MosqueInheritedProperties)
    b = create_schema_org_model(type_=MosqueProperties)
    c = create_schema_org_model(type_=MosqueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Mosque.schema()
    create_mosque_model(MosqueAllProperties).schema()
    create_mosque_model(MosqueInheritedProperties).schema()
    create_mosque_model(MosqueProperties).schema()


def LibrarySystem_test():
    from schorg.LibrarySystem import LibrarySystemInheritedProperties
    from schorg.LibrarySystem import LibrarySystemProperties
    from schorg.LibrarySystem import LibrarySystemAllProperties
    from schorg.LibrarySystem import create_schema_org_model
    from schorg.LibrarySystem import create_librarysystem_model
    from schorg.LibrarySystem import LibrarySystem

    a = create_schema_org_model(type_=LibrarySystemInheritedProperties)
    b = create_schema_org_model(type_=LibrarySystemProperties)
    c = create_schema_org_model(type_=LibrarySystemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LibrarySystem.schema()
    create_librarysystem_model(LibrarySystemAllProperties).schema()
    create_librarysystem_model(LibrarySystemInheritedProperties).schema()
    create_librarysystem_model(LibrarySystemProperties).schema()


def Nerve_test():
    from schorg.Nerve import NerveInheritedProperties
    from schorg.Nerve import NerveProperties
    from schorg.Nerve import NerveAllProperties
    from schorg.Nerve import create_schema_org_model
    from schorg.Nerve import create_nerve_model
    from schorg.Nerve import Nerve

    a = create_schema_org_model(type_=NerveInheritedProperties)
    b = create_schema_org_model(type_=NerveProperties)
    c = create_schema_org_model(type_=NerveAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nerve.schema()
    create_nerve_model(NerveAllProperties).schema()
    create_nerve_model(NerveInheritedProperties).schema()
    create_nerve_model(NerveProperties).schema()


def Notary_test():
    from schorg.Notary import NotaryInheritedProperties
    from schorg.Notary import NotaryProperties
    from schorg.Notary import NotaryAllProperties
    from schorg.Notary import create_schema_org_model
    from schorg.Notary import create_notary_model
    from schorg.Notary import Notary

    a = create_schema_org_model(type_=NotaryInheritedProperties)
    b = create_schema_org_model(type_=NotaryProperties)
    c = create_schema_org_model(type_=NotaryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Notary.schema()
    create_notary_model(NotaryAllProperties).schema()
    create_notary_model(NotaryInheritedProperties).schema()
    create_notary_model(NotaryProperties).schema()


def WatchAction_test():
    from schorg.WatchAction import WatchActionInheritedProperties
    from schorg.WatchAction import WatchActionProperties
    from schorg.WatchAction import WatchActionAllProperties
    from schorg.WatchAction import create_schema_org_model
    from schorg.WatchAction import create_watchaction_model
    from schorg.WatchAction import WatchAction

    a = create_schema_org_model(type_=WatchActionInheritedProperties)
    b = create_schema_org_model(type_=WatchActionProperties)
    c = create_schema_org_model(type_=WatchActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WatchAction.schema()
    create_watchaction_model(WatchActionAllProperties).schema()
    create_watchaction_model(WatchActionInheritedProperties).schema()
    create_watchaction_model(WatchActionProperties).schema()


def AutoWash_test():
    from schorg.AutoWash import AutoWashInheritedProperties
    from schorg.AutoWash import AutoWashProperties
    from schorg.AutoWash import AutoWashAllProperties
    from schorg.AutoWash import create_schema_org_model
    from schorg.AutoWash import create_autowash_model
    from schorg.AutoWash import AutoWash

    a = create_schema_org_model(type_=AutoWashInheritedProperties)
    b = create_schema_org_model(type_=AutoWashProperties)
    c = create_schema_org_model(type_=AutoWashAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoWash.schema()
    create_autowash_model(AutoWashAllProperties).schema()
    create_autowash_model(AutoWashInheritedProperties).schema()
    create_autowash_model(AutoWashProperties).schema()


def UsageOrScheduleHealthAspect_test():
    from schorg.UsageOrScheduleHealthAspect import (
        UsageOrScheduleHealthAspectInheritedProperties,
    )
    from schorg.UsageOrScheduleHealthAspect import UsageOrScheduleHealthAspectProperties
    from schorg.UsageOrScheduleHealthAspect import (
        UsageOrScheduleHealthAspectAllProperties,
    )
    from schorg.UsageOrScheduleHealthAspect import create_schema_org_model
    from schorg.UsageOrScheduleHealthAspect import (
        create_usageorschedulehealthaspect_model,
    )
    from schorg.UsageOrScheduleHealthAspect import UsageOrScheduleHealthAspect

    a = create_schema_org_model(type_=UsageOrScheduleHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=UsageOrScheduleHealthAspectProperties)
    c = create_schema_org_model(type_=UsageOrScheduleHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UsageOrScheduleHealthAspect.schema()
    create_usageorschedulehealthaspect_model(
        UsageOrScheduleHealthAspectAllProperties
    ).schema()
    create_usageorschedulehealthaspect_model(
        UsageOrScheduleHealthAspectInheritedProperties
    ).schema()
    create_usageorschedulehealthaspect_model(
        UsageOrScheduleHealthAspectProperties
    ).schema()


def CommentAction_test():
    from schorg.CommentAction import CommentActionInheritedProperties
    from schorg.CommentAction import CommentActionProperties
    from schorg.CommentAction import CommentActionAllProperties
    from schorg.CommentAction import create_schema_org_model
    from schorg.CommentAction import create_commentaction_model
    from schorg.CommentAction import CommentAction

    a = create_schema_org_model(type_=CommentActionInheritedProperties)
    b = create_schema_org_model(type_=CommentActionProperties)
    c = create_schema_org_model(type_=CommentActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CommentAction.schema()
    create_commentaction_model(CommentActionAllProperties).schema()
    create_commentaction_model(CommentActionInheritedProperties).schema()
    create_commentaction_model(CommentActionProperties).schema()


def JewelryStore_test():
    from schorg.JewelryStore import JewelryStoreInheritedProperties
    from schorg.JewelryStore import JewelryStoreProperties
    from schorg.JewelryStore import JewelryStoreAllProperties
    from schorg.JewelryStore import create_schema_org_model
    from schorg.JewelryStore import create_jewelrystore_model
    from schorg.JewelryStore import JewelryStore

    a = create_schema_org_model(type_=JewelryStoreInheritedProperties)
    b = create_schema_org_model(type_=JewelryStoreProperties)
    c = create_schema_org_model(type_=JewelryStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    JewelryStore.schema()
    create_jewelrystore_model(JewelryStoreAllProperties).schema()
    create_jewelrystore_model(JewelryStoreInheritedProperties).schema()
    create_jewelrystore_model(JewelryStoreProperties).schema()


def Skin_test():
    from schorg.Skin import SkinInheritedProperties
    from schorg.Skin import SkinProperties
    from schorg.Skin import SkinAllProperties
    from schorg.Skin import create_schema_org_model
    from schorg.Skin import create_skin_model
    from schorg.Skin import Skin

    a = create_schema_org_model(type_=SkinInheritedProperties)
    b = create_schema_org_model(type_=SkinProperties)
    c = create_schema_org_model(type_=SkinAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Skin.schema()
    create_skin_model(SkinAllProperties).schema()
    create_skin_model(SkinInheritedProperties).schema()
    create_skin_model(SkinProperties).schema()


def ReviewAction_test():
    from schorg.ReviewAction import ReviewActionInheritedProperties
    from schorg.ReviewAction import ReviewActionProperties
    from schorg.ReviewAction import ReviewActionAllProperties
    from schorg.ReviewAction import create_schema_org_model
    from schorg.ReviewAction import create_reviewaction_model
    from schorg.ReviewAction import ReviewAction

    a = create_schema_org_model(type_=ReviewActionInheritedProperties)
    b = create_schema_org_model(type_=ReviewActionProperties)
    c = create_schema_org_model(type_=ReviewActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReviewAction.schema()
    create_reviewaction_model(ReviewActionAllProperties).schema()
    create_reviewaction_model(ReviewActionInheritedProperties).schema()
    create_reviewaction_model(ReviewActionProperties).schema()


def WearableSizeGroupMisses_test():
    from schorg.WearableSizeGroupMisses import (
        WearableSizeGroupMissesInheritedProperties,
    )
    from schorg.WearableSizeGroupMisses import WearableSizeGroupMissesProperties
    from schorg.WearableSizeGroupMisses import WearableSizeGroupMissesAllProperties
    from schorg.WearableSizeGroupMisses import create_schema_org_model
    from schorg.WearableSizeGroupMisses import create_wearablesizegroupmisses_model
    from schorg.WearableSizeGroupMisses import WearableSizeGroupMisses

    a = create_schema_org_model(type_=WearableSizeGroupMissesInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupMissesProperties)
    c = create_schema_org_model(type_=WearableSizeGroupMissesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupMisses.schema()
    create_wearablesizegroupmisses_model(WearableSizeGroupMissesAllProperties).schema()
    create_wearablesizegroupmisses_model(
        WearableSizeGroupMissesInheritedProperties
    ).schema()
    create_wearablesizegroupmisses_model(WearableSizeGroupMissesProperties).schema()


def MusculoskeletalExam_test():
    from schorg.MusculoskeletalExam import MusculoskeletalExamInheritedProperties
    from schorg.MusculoskeletalExam import MusculoskeletalExamProperties
    from schorg.MusculoskeletalExam import MusculoskeletalExamAllProperties
    from schorg.MusculoskeletalExam import create_schema_org_model
    from schorg.MusculoskeletalExam import create_musculoskeletalexam_model
    from schorg.MusculoskeletalExam import MusculoskeletalExam

    a = create_schema_org_model(type_=MusculoskeletalExamInheritedProperties)
    b = create_schema_org_model(type_=MusculoskeletalExamProperties)
    c = create_schema_org_model(type_=MusculoskeletalExamAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusculoskeletalExam.schema()
    create_musculoskeletalexam_model(MusculoskeletalExamAllProperties).schema()
    create_musculoskeletalexam_model(MusculoskeletalExamInheritedProperties).schema()
    create_musculoskeletalexam_model(MusculoskeletalExamProperties).schema()


def AnimalShelter_test():
    from schorg.AnimalShelter import AnimalShelterInheritedProperties
    from schorg.AnimalShelter import AnimalShelterProperties
    from schorg.AnimalShelter import AnimalShelterAllProperties
    from schorg.AnimalShelter import create_schema_org_model
    from schorg.AnimalShelter import create_animalshelter_model
    from schorg.AnimalShelter import AnimalShelter

    a = create_schema_org_model(type_=AnimalShelterInheritedProperties)
    b = create_schema_org_model(type_=AnimalShelterProperties)
    c = create_schema_org_model(type_=AnimalShelterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AnimalShelter.schema()
    create_animalshelter_model(AnimalShelterAllProperties).schema()
    create_animalshelter_model(AnimalShelterInheritedProperties).schema()
    create_animalshelter_model(AnimalShelterProperties).schema()


def Emergency_test():
    from schorg.Emergency import EmergencyInheritedProperties
    from schorg.Emergency import EmergencyProperties
    from schorg.Emergency import EmergencyAllProperties
    from schorg.Emergency import create_schema_org_model
    from schorg.Emergency import create_emergency_model
    from schorg.Emergency import Emergency

    a = create_schema_org_model(type_=EmergencyInheritedProperties)
    b = create_schema_org_model(type_=EmergencyProperties)
    c = create_schema_org_model(type_=EmergencyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Emergency.schema()
    create_emergency_model(EmergencyAllProperties).schema()
    create_emergency_model(EmergencyInheritedProperties).schema()
    create_emergency_model(EmergencyProperties).schema()


def ImageGallery_test():
    from schorg.ImageGallery import ImageGalleryInheritedProperties
    from schorg.ImageGallery import ImageGalleryProperties
    from schorg.ImageGallery import ImageGalleryAllProperties
    from schorg.ImageGallery import create_schema_org_model
    from schorg.ImageGallery import create_imagegallery_model
    from schorg.ImageGallery import ImageGallery

    a = create_schema_org_model(type_=ImageGalleryInheritedProperties)
    b = create_schema_org_model(type_=ImageGalleryProperties)
    c = create_schema_org_model(type_=ImageGalleryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ImageGallery.schema()
    create_imagegallery_model(ImageGalleryAllProperties).schema()
    create_imagegallery_model(ImageGalleryInheritedProperties).schema()
    create_imagegallery_model(ImageGalleryProperties).schema()


def LiveBlogPosting_test():
    from schorg.LiveBlogPosting import LiveBlogPostingInheritedProperties
    from schorg.LiveBlogPosting import LiveBlogPostingProperties
    from schorg.LiveBlogPosting import LiveBlogPostingAllProperties
    from schorg.LiveBlogPosting import create_schema_org_model
    from schorg.LiveBlogPosting import create_liveblogposting_model
    from schorg.LiveBlogPosting import LiveBlogPosting

    a = create_schema_org_model(type_=LiveBlogPostingInheritedProperties)
    b = create_schema_org_model(type_=LiveBlogPostingProperties)
    c = create_schema_org_model(type_=LiveBlogPostingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LiveBlogPosting.schema()
    create_liveblogposting_model(LiveBlogPostingAllProperties).schema()
    create_liveblogposting_model(LiveBlogPostingInheritedProperties).schema()
    create_liveblogposting_model(LiveBlogPostingProperties).schema()


def WearableSizeGroupInfants_test():
    from schorg.WearableSizeGroupInfants import (
        WearableSizeGroupInfantsInheritedProperties,
    )
    from schorg.WearableSizeGroupInfants import WearableSizeGroupInfantsProperties
    from schorg.WearableSizeGroupInfants import WearableSizeGroupInfantsAllProperties
    from schorg.WearableSizeGroupInfants import create_schema_org_model
    from schorg.WearableSizeGroupInfants import create_wearablesizegroupinfants_model
    from schorg.WearableSizeGroupInfants import WearableSizeGroupInfants

    a = create_schema_org_model(type_=WearableSizeGroupInfantsInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupInfantsProperties)
    c = create_schema_org_model(type_=WearableSizeGroupInfantsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupInfants.schema()
    create_wearablesizegroupinfants_model(
        WearableSizeGroupInfantsAllProperties
    ).schema()
    create_wearablesizegroupinfants_model(
        WearableSizeGroupInfantsInheritedProperties
    ).schema()
    create_wearablesizegroupinfants_model(WearableSizeGroupInfantsProperties).schema()


def PublicToilet_test():
    from schorg.PublicToilet import PublicToiletInheritedProperties
    from schorg.PublicToilet import PublicToiletProperties
    from schorg.PublicToilet import PublicToiletAllProperties
    from schorg.PublicToilet import create_schema_org_model
    from schorg.PublicToilet import create_publictoilet_model
    from schorg.PublicToilet import PublicToilet

    a = create_schema_org_model(type_=PublicToiletInheritedProperties)
    b = create_schema_org_model(type_=PublicToiletProperties)
    c = create_schema_org_model(type_=PublicToiletAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PublicToilet.schema()
    create_publictoilet_model(PublicToiletAllProperties).schema()
    create_publictoilet_model(PublicToiletInheritedProperties).schema()
    create_publictoilet_model(PublicToiletProperties).schema()


def FDAcategoryA_test():
    from schorg.FDAcategoryA import FDAcategoryAInheritedProperties
    from schorg.FDAcategoryA import FDAcategoryAProperties
    from schorg.FDAcategoryA import FDAcategoryAAllProperties
    from schorg.FDAcategoryA import create_schema_org_model
    from schorg.FDAcategoryA import create_fdacategorya_model
    from schorg.FDAcategoryA import FDAcategoryA

    a = create_schema_org_model(type_=FDAcategoryAInheritedProperties)
    b = create_schema_org_model(type_=FDAcategoryAProperties)
    c = create_schema_org_model(type_=FDAcategoryAAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FDAcategoryA.schema()
    create_fdacategorya_model(FDAcategoryAAllProperties).schema()
    create_fdacategorya_model(FDAcategoryAInheritedProperties).schema()
    create_fdacategorya_model(FDAcategoryAProperties).schema()


def MedicalContraindication_test():
    from schorg.MedicalContraindication import (
        MedicalContraindicationInheritedProperties,
    )
    from schorg.MedicalContraindication import MedicalContraindicationProperties
    from schorg.MedicalContraindication import MedicalContraindicationAllProperties
    from schorg.MedicalContraindication import create_schema_org_model
    from schorg.MedicalContraindication import create_medicalcontraindication_model
    from schorg.MedicalContraindication import MedicalContraindication

    a = create_schema_org_model(type_=MedicalContraindicationInheritedProperties)
    b = create_schema_org_model(type_=MedicalContraindicationProperties)
    c = create_schema_org_model(type_=MedicalContraindicationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalContraindication.schema()
    create_medicalcontraindication_model(MedicalContraindicationAllProperties).schema()
    create_medicalcontraindication_model(
        MedicalContraindicationInheritedProperties
    ).schema()
    create_medicalcontraindication_model(MedicalContraindicationProperties).schema()


def ComedyEvent_test():
    from schorg.ComedyEvent import ComedyEventInheritedProperties
    from schorg.ComedyEvent import ComedyEventProperties
    from schorg.ComedyEvent import ComedyEventAllProperties
    from schorg.ComedyEvent import create_schema_org_model
    from schorg.ComedyEvent import create_comedyevent_model
    from schorg.ComedyEvent import ComedyEvent

    a = create_schema_org_model(type_=ComedyEventInheritedProperties)
    b = create_schema_org_model(type_=ComedyEventProperties)
    c = create_schema_org_model(type_=ComedyEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComedyEvent.schema()
    create_comedyevent_model(ComedyEventAllProperties).schema()
    create_comedyevent_model(ComedyEventInheritedProperties).schema()
    create_comedyevent_model(ComedyEventProperties).schema()


def SuspendAction_test():
    from schorg.SuspendAction import SuspendActionInheritedProperties
    from schorg.SuspendAction import SuspendActionProperties
    from schorg.SuspendAction import SuspendActionAllProperties
    from schorg.SuspendAction import create_schema_org_model
    from schorg.SuspendAction import create_suspendaction_model
    from schorg.SuspendAction import SuspendAction

    a = create_schema_org_model(type_=SuspendActionInheritedProperties)
    b = create_schema_org_model(type_=SuspendActionProperties)
    c = create_schema_org_model(type_=SuspendActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SuspendAction.schema()
    create_suspendaction_model(SuspendActionAllProperties).schema()
    create_suspendaction_model(SuspendActionInheritedProperties).schema()
    create_suspendaction_model(SuspendActionProperties).schema()


def Pathology_test():
    from schorg.Pathology import PathologyInheritedProperties
    from schorg.Pathology import PathologyProperties
    from schorg.Pathology import PathologyAllProperties
    from schorg.Pathology import create_schema_org_model
    from schorg.Pathology import create_pathology_model
    from schorg.Pathology import Pathology

    a = create_schema_org_model(type_=PathologyInheritedProperties)
    b = create_schema_org_model(type_=PathologyProperties)
    c = create_schema_org_model(type_=PathologyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Pathology.schema()
    create_pathology_model(PathologyAllProperties).schema()
    create_pathology_model(PathologyInheritedProperties).schema()
    create_pathology_model(PathologyProperties).schema()


def ParentalSupport_test():
    from schorg.ParentalSupport import ParentalSupportInheritedProperties
    from schorg.ParentalSupport import ParentalSupportProperties
    from schorg.ParentalSupport import ParentalSupportAllProperties
    from schorg.ParentalSupport import create_schema_org_model
    from schorg.ParentalSupport import create_parentalsupport_model
    from schorg.ParentalSupport import ParentalSupport

    a = create_schema_org_model(type_=ParentalSupportInheritedProperties)
    b = create_schema_org_model(type_=ParentalSupportProperties)
    c = create_schema_org_model(type_=ParentalSupportAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParentalSupport.schema()
    create_parentalsupport_model(ParentalSupportAllProperties).schema()
    create_parentalsupport_model(ParentalSupportInheritedProperties).schema()
    create_parentalsupport_model(ParentalSupportProperties).schema()


def LendAction_test():
    from schorg.LendAction import LendActionInheritedProperties
    from schorg.LendAction import LendActionProperties
    from schorg.LendAction import LendActionAllProperties
    from schorg.LendAction import create_schema_org_model
    from schorg.LendAction import create_lendaction_model
    from schorg.LendAction import LendAction

    a = create_schema_org_model(type_=LendActionInheritedProperties)
    b = create_schema_org_model(type_=LendActionProperties)
    c = create_schema_org_model(type_=LendActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LendAction.schema()
    create_lendaction_model(LendActionAllProperties).schema()
    create_lendaction_model(LendActionInheritedProperties).schema()
    create_lendaction_model(LendActionProperties).schema()


def Hardcover_test():
    from schorg.Hardcover import HardcoverInheritedProperties
    from schorg.Hardcover import HardcoverProperties
    from schorg.Hardcover import HardcoverAllProperties
    from schorg.Hardcover import create_schema_org_model
    from schorg.Hardcover import create_hardcover_model
    from schorg.Hardcover import Hardcover

    a = create_schema_org_model(type_=HardcoverInheritedProperties)
    b = create_schema_org_model(type_=HardcoverProperties)
    c = create_schema_org_model(type_=HardcoverAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hardcover.schema()
    create_hardcover_model(HardcoverAllProperties).schema()
    create_hardcover_model(HardcoverInheritedProperties).schema()
    create_hardcover_model(HardcoverProperties).schema()


def FundingScheme_test():
    from schorg.FundingScheme import FundingSchemeInheritedProperties
    from schorg.FundingScheme import FundingSchemeProperties
    from schorg.FundingScheme import FundingSchemeAllProperties
    from schorg.FundingScheme import create_schema_org_model
    from schorg.FundingScheme import create_fundingscheme_model
    from schorg.FundingScheme import FundingScheme

    a = create_schema_org_model(type_=FundingSchemeInheritedProperties)
    b = create_schema_org_model(type_=FundingSchemeProperties)
    c = create_schema_org_model(type_=FundingSchemeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FundingScheme.schema()
    create_fundingscheme_model(FundingSchemeAllProperties).schema()
    create_fundingscheme_model(FundingSchemeInheritedProperties).schema()
    create_fundingscheme_model(FundingSchemeProperties).schema()


def PatientExperienceHealthAspect_test():
    from schorg.PatientExperienceHealthAspect import (
        PatientExperienceHealthAspectInheritedProperties,
    )
    from schorg.PatientExperienceHealthAspect import (
        PatientExperienceHealthAspectProperties,
    )
    from schorg.PatientExperienceHealthAspect import (
        PatientExperienceHealthAspectAllProperties,
    )
    from schorg.PatientExperienceHealthAspect import create_schema_org_model
    from schorg.PatientExperienceHealthAspect import (
        create_patientexperiencehealthaspect_model,
    )
    from schorg.PatientExperienceHealthAspect import PatientExperienceHealthAspect

    a = create_schema_org_model(type_=PatientExperienceHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=PatientExperienceHealthAspectProperties)
    c = create_schema_org_model(type_=PatientExperienceHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PatientExperienceHealthAspect.schema()
    create_patientexperiencehealthaspect_model(
        PatientExperienceHealthAspectAllProperties
    ).schema()
    create_patientexperiencehealthaspect_model(
        PatientExperienceHealthAspectInheritedProperties
    ).schema()
    create_patientexperiencehealthaspect_model(
        PatientExperienceHealthAspectProperties
    ).schema()


def TelevisionStation_test():
    from schorg.TelevisionStation import TelevisionStationInheritedProperties
    from schorg.TelevisionStation import TelevisionStationProperties
    from schorg.TelevisionStation import TelevisionStationAllProperties
    from schorg.TelevisionStation import create_schema_org_model
    from schorg.TelevisionStation import create_televisionstation_model
    from schorg.TelevisionStation import TelevisionStation

    a = create_schema_org_model(type_=TelevisionStationInheritedProperties)
    b = create_schema_org_model(type_=TelevisionStationProperties)
    c = create_schema_org_model(type_=TelevisionStationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TelevisionStation.schema()
    create_televisionstation_model(TelevisionStationAllProperties).schema()
    create_televisionstation_model(TelevisionStationInheritedProperties).schema()
    create_televisionstation_model(TelevisionStationProperties).schema()


def MRI_test():
    from schorg.MRI import MRIInheritedProperties
    from schorg.MRI import MRIProperties
    from schorg.MRI import MRIAllProperties
    from schorg.MRI import create_schema_org_model
    from schorg.MRI import create_mri_model
    from schorg.MRI import MRI

    a = create_schema_org_model(type_=MRIInheritedProperties)
    b = create_schema_org_model(type_=MRIProperties)
    c = create_schema_org_model(type_=MRIAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MRI.schema()
    create_mri_model(MRIAllProperties).schema()
    create_mri_model(MRIInheritedProperties).schema()
    create_mri_model(MRIProperties).schema()


def MotorizedBicycle_test():
    from schorg.MotorizedBicycle import MotorizedBicycleInheritedProperties
    from schorg.MotorizedBicycle import MotorizedBicycleProperties
    from schorg.MotorizedBicycle import MotorizedBicycleAllProperties
    from schorg.MotorizedBicycle import create_schema_org_model
    from schorg.MotorizedBicycle import create_motorizedbicycle_model
    from schorg.MotorizedBicycle import MotorizedBicycle

    a = create_schema_org_model(type_=MotorizedBicycleInheritedProperties)
    b = create_schema_org_model(type_=MotorizedBicycleProperties)
    c = create_schema_org_model(type_=MotorizedBicycleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MotorizedBicycle.schema()
    create_motorizedbicycle_model(MotorizedBicycleAllProperties).schema()
    create_motorizedbicycle_model(MotorizedBicycleInheritedProperties).schema()
    create_motorizedbicycle_model(MotorizedBicycleProperties).schema()


def Poster_test():
    from schorg.Poster import PosterInheritedProperties
    from schorg.Poster import PosterProperties
    from schorg.Poster import PosterAllProperties
    from schorg.Poster import create_schema_org_model
    from schorg.Poster import create_poster_model
    from schorg.Poster import Poster

    a = create_schema_org_model(type_=PosterInheritedProperties)
    b = create_schema_org_model(type_=PosterProperties)
    c = create_schema_org_model(type_=PosterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Poster.schema()
    create_poster_model(PosterAllProperties).schema()
    create_poster_model(PosterInheritedProperties).schema()
    create_poster_model(PosterProperties).schema()


def RsvpResponseYes_test():
    from schorg.RsvpResponseYes import RsvpResponseYesInheritedProperties
    from schorg.RsvpResponseYes import RsvpResponseYesProperties
    from schorg.RsvpResponseYes import RsvpResponseYesAllProperties
    from schorg.RsvpResponseYes import create_schema_org_model
    from schorg.RsvpResponseYes import create_rsvpresponseyes_model
    from schorg.RsvpResponseYes import RsvpResponseYes

    a = create_schema_org_model(type_=RsvpResponseYesInheritedProperties)
    b = create_schema_org_model(type_=RsvpResponseYesProperties)
    c = create_schema_org_model(type_=RsvpResponseYesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RsvpResponseYes.schema()
    create_rsvpresponseyes_model(RsvpResponseYesAllProperties).schema()
    create_rsvpresponseyes_model(RsvpResponseYesInheritedProperties).schema()
    create_rsvpresponseyes_model(RsvpResponseYesProperties).schema()


def EventRescheduled_test():
    from schorg.EventRescheduled import EventRescheduledInheritedProperties
    from schorg.EventRescheduled import EventRescheduledProperties
    from schorg.EventRescheduled import EventRescheduledAllProperties
    from schorg.EventRescheduled import create_schema_org_model
    from schorg.EventRescheduled import create_eventrescheduled_model
    from schorg.EventRescheduled import EventRescheduled

    a = create_schema_org_model(type_=EventRescheduledInheritedProperties)
    b = create_schema_org_model(type_=EventRescheduledProperties)
    c = create_schema_org_model(type_=EventRescheduledAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventRescheduled.schema()
    create_eventrescheduled_model(EventRescheduledAllProperties).schema()
    create_eventrescheduled_model(EventRescheduledInheritedProperties).schema()
    create_eventrescheduled_model(EventRescheduledProperties).schema()


def BodyMeasurementHead_test():
    from schorg.BodyMeasurementHead import BodyMeasurementHeadInheritedProperties
    from schorg.BodyMeasurementHead import BodyMeasurementHeadProperties
    from schorg.BodyMeasurementHead import BodyMeasurementHeadAllProperties
    from schorg.BodyMeasurementHead import create_schema_org_model
    from schorg.BodyMeasurementHead import create_bodymeasurementhead_model
    from schorg.BodyMeasurementHead import BodyMeasurementHead

    a = create_schema_org_model(type_=BodyMeasurementHeadInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementHeadProperties)
    c = create_schema_org_model(type_=BodyMeasurementHeadAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementHead.schema()
    create_bodymeasurementhead_model(BodyMeasurementHeadAllProperties).schema()
    create_bodymeasurementhead_model(BodyMeasurementHeadInheritedProperties).schema()
    create_bodymeasurementhead_model(BodyMeasurementHeadProperties).schema()


def UserPlays_test():
    from schorg.UserPlays import UserPlaysInheritedProperties
    from schorg.UserPlays import UserPlaysProperties
    from schorg.UserPlays import UserPlaysAllProperties
    from schorg.UserPlays import create_schema_org_model
    from schorg.UserPlays import create_userplays_model
    from schorg.UserPlays import UserPlays

    a = create_schema_org_model(type_=UserPlaysInheritedProperties)
    b = create_schema_org_model(type_=UserPlaysProperties)
    c = create_schema_org_model(type_=UserPlaysAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserPlays.schema()
    create_userplays_model(UserPlaysAllProperties).schema()
    create_userplays_model(UserPlaysInheritedProperties).schema()
    create_userplays_model(UserPlaysProperties).schema()


def MiddleSchool_test():
    from schorg.MiddleSchool import MiddleSchoolInheritedProperties
    from schorg.MiddleSchool import MiddleSchoolProperties
    from schorg.MiddleSchool import MiddleSchoolAllProperties
    from schorg.MiddleSchool import create_schema_org_model
    from schorg.MiddleSchool import create_middleschool_model
    from schorg.MiddleSchool import MiddleSchool

    a = create_schema_org_model(type_=MiddleSchoolInheritedProperties)
    b = create_schema_org_model(type_=MiddleSchoolProperties)
    c = create_schema_org_model(type_=MiddleSchoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MiddleSchool.schema()
    create_middleschool_model(MiddleSchoolAllProperties).schema()
    create_middleschool_model(MiddleSchoolInheritedProperties).schema()
    create_middleschool_model(MiddleSchoolProperties).schema()


def LakeBodyOfWater_test():
    from schorg.LakeBodyOfWater import LakeBodyOfWaterInheritedProperties
    from schorg.LakeBodyOfWater import LakeBodyOfWaterProperties
    from schorg.LakeBodyOfWater import LakeBodyOfWaterAllProperties
    from schorg.LakeBodyOfWater import create_schema_org_model
    from schorg.LakeBodyOfWater import create_lakebodyofwater_model
    from schorg.LakeBodyOfWater import LakeBodyOfWater

    a = create_schema_org_model(type_=LakeBodyOfWaterInheritedProperties)
    b = create_schema_org_model(type_=LakeBodyOfWaterProperties)
    c = create_schema_org_model(type_=LakeBodyOfWaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LakeBodyOfWater.schema()
    create_lakebodyofwater_model(LakeBodyOfWaterAllProperties).schema()
    create_lakebodyofwater_model(LakeBodyOfWaterInheritedProperties).schema()
    create_lakebodyofwater_model(LakeBodyOfWaterProperties).schema()


def Monday_test():
    from schorg.Monday import MondayInheritedProperties
    from schorg.Monday import MondayProperties
    from schorg.Monday import MondayAllProperties
    from schorg.Monday import create_schema_org_model
    from schorg.Monday import create_monday_model
    from schorg.Monday import Monday

    a = create_schema_org_model(type_=MondayInheritedProperties)
    b = create_schema_org_model(type_=MondayProperties)
    c = create_schema_org_model(type_=MondayAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Monday.schema()
    create_monday_model(MondayAllProperties).schema()
    create_monday_model(MondayInheritedProperties).schema()
    create_monday_model(MondayProperties).schema()


def AboutPage_test():
    from schorg.AboutPage import AboutPageInheritedProperties
    from schorg.AboutPage import AboutPageProperties
    from schorg.AboutPage import AboutPageAllProperties
    from schorg.AboutPage import create_schema_org_model
    from schorg.AboutPage import create_aboutpage_model
    from schorg.AboutPage import AboutPage

    a = create_schema_org_model(type_=AboutPageInheritedProperties)
    b = create_schema_org_model(type_=AboutPageProperties)
    c = create_schema_org_model(type_=AboutPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AboutPage.schema()
    create_aboutpage_model(AboutPageAllProperties).schema()
    create_aboutpage_model(AboutPageInheritedProperties).schema()
    create_aboutpage_model(AboutPageProperties).schema()


def GameServer_test():
    from schorg.GameServer import GameServerInheritedProperties
    from schorg.GameServer import GameServerProperties
    from schorg.GameServer import GameServerAllProperties
    from schorg.GameServer import create_schema_org_model
    from schorg.GameServer import create_gameserver_model
    from schorg.GameServer import GameServer

    a = create_schema_org_model(type_=GameServerInheritedProperties)
    b = create_schema_org_model(type_=GameServerProperties)
    c = create_schema_org_model(type_=GameServerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GameServer.schema()
    create_gameserver_model(GameServerAllProperties).schema()
    create_gameserver_model(GameServerInheritedProperties).schema()
    create_gameserver_model(GameServerProperties).schema()


def PreOrderAction_test():
    from schorg.PreOrderAction import PreOrderActionInheritedProperties
    from schorg.PreOrderAction import PreOrderActionProperties
    from schorg.PreOrderAction import PreOrderActionAllProperties
    from schorg.PreOrderAction import create_schema_org_model
    from schorg.PreOrderAction import create_preorderaction_model
    from schorg.PreOrderAction import PreOrderAction

    a = create_schema_org_model(type_=PreOrderActionInheritedProperties)
    b = create_schema_org_model(type_=PreOrderActionProperties)
    c = create_schema_org_model(type_=PreOrderActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PreOrderAction.schema()
    create_preorderaction_model(PreOrderActionAllProperties).schema()
    create_preorderaction_model(PreOrderActionInheritedProperties).schema()
    create_preorderaction_model(PreOrderActionProperties).schema()


def Duration_test():
    from schorg.Duration import DurationInheritedProperties
    from schorg.Duration import DurationProperties
    from schorg.Duration import DurationAllProperties
    from schorg.Duration import create_schema_org_model
    from schorg.Duration import create_duration_model
    from schorg.Duration import Duration

    a = create_schema_org_model(type_=DurationInheritedProperties)
    b = create_schema_org_model(type_=DurationProperties)
    c = create_schema_org_model(type_=DurationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Duration.schema()
    create_duration_model(DurationAllProperties).schema()
    create_duration_model(DurationInheritedProperties).schema()
    create_duration_model(DurationProperties).schema()


def BroadcastEvent_test():
    from schorg.BroadcastEvent import BroadcastEventInheritedProperties
    from schorg.BroadcastEvent import BroadcastEventProperties
    from schorg.BroadcastEvent import BroadcastEventAllProperties
    from schorg.BroadcastEvent import create_schema_org_model
    from schorg.BroadcastEvent import create_broadcastevent_model
    from schorg.BroadcastEvent import BroadcastEvent

    a = create_schema_org_model(type_=BroadcastEventInheritedProperties)
    b = create_schema_org_model(type_=BroadcastEventProperties)
    c = create_schema_org_model(type_=BroadcastEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BroadcastEvent.schema()
    create_broadcastevent_model(BroadcastEventAllProperties).schema()
    create_broadcastevent_model(BroadcastEventInheritedProperties).schema()
    create_broadcastevent_model(BroadcastEventProperties).schema()


def MedicalRiskFactor_test():
    from schorg.MedicalRiskFactor import MedicalRiskFactorInheritedProperties
    from schorg.MedicalRiskFactor import MedicalRiskFactorProperties
    from schorg.MedicalRiskFactor import MedicalRiskFactorAllProperties
    from schorg.MedicalRiskFactor import create_schema_org_model
    from schorg.MedicalRiskFactor import create_medicalriskfactor_model
    from schorg.MedicalRiskFactor import MedicalRiskFactor

    a = create_schema_org_model(type_=MedicalRiskFactorInheritedProperties)
    b = create_schema_org_model(type_=MedicalRiskFactorProperties)
    c = create_schema_org_model(type_=MedicalRiskFactorAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalRiskFactor.schema()
    create_medicalriskfactor_model(MedicalRiskFactorAllProperties).schema()
    create_medicalriskfactor_model(MedicalRiskFactorInheritedProperties).schema()
    create_medicalriskfactor_model(MedicalRiskFactorProperties).schema()


def ConvenienceStore_test():
    from schorg.ConvenienceStore import ConvenienceStoreInheritedProperties
    from schorg.ConvenienceStore import ConvenienceStoreProperties
    from schorg.ConvenienceStore import ConvenienceStoreAllProperties
    from schorg.ConvenienceStore import create_schema_org_model
    from schorg.ConvenienceStore import create_conveniencestore_model
    from schorg.ConvenienceStore import ConvenienceStore

    a = create_schema_org_model(type_=ConvenienceStoreInheritedProperties)
    b = create_schema_org_model(type_=ConvenienceStoreProperties)
    c = create_schema_org_model(type_=ConvenienceStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ConvenienceStore.schema()
    create_conveniencestore_model(ConvenienceStoreAllProperties).schema()
    create_conveniencestore_model(ConvenienceStoreInheritedProperties).schema()
    create_conveniencestore_model(ConvenienceStoreProperties).schema()


def AlbumRelease_test():
    from schorg.AlbumRelease import AlbumReleaseInheritedProperties
    from schorg.AlbumRelease import AlbumReleaseProperties
    from schorg.AlbumRelease import AlbumReleaseAllProperties
    from schorg.AlbumRelease import create_schema_org_model
    from schorg.AlbumRelease import create_albumrelease_model
    from schorg.AlbumRelease import AlbumRelease

    a = create_schema_org_model(type_=AlbumReleaseInheritedProperties)
    b = create_schema_org_model(type_=AlbumReleaseProperties)
    c = create_schema_org_model(type_=AlbumReleaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AlbumRelease.schema()
    create_albumrelease_model(AlbumReleaseAllProperties).schema()
    create_albumrelease_model(AlbumReleaseInheritedProperties).schema()
    create_albumrelease_model(AlbumReleaseProperties).schema()


def SingleFamilyResidence_test():
    from schorg.SingleFamilyResidence import SingleFamilyResidenceInheritedProperties
    from schorg.SingleFamilyResidence import SingleFamilyResidenceProperties
    from schorg.SingleFamilyResidence import SingleFamilyResidenceAllProperties
    from schorg.SingleFamilyResidence import create_schema_org_model
    from schorg.SingleFamilyResidence import create_singlefamilyresidence_model
    from schorg.SingleFamilyResidence import SingleFamilyResidence

    a = create_schema_org_model(type_=SingleFamilyResidenceInheritedProperties)
    b = create_schema_org_model(type_=SingleFamilyResidenceProperties)
    c = create_schema_org_model(type_=SingleFamilyResidenceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SingleFamilyResidence.schema()
    create_singlefamilyresidence_model(SingleFamilyResidenceAllProperties).schema()
    create_singlefamilyresidence_model(
        SingleFamilyResidenceInheritedProperties
    ).schema()
    create_singlefamilyresidence_model(SingleFamilyResidenceProperties).schema()


def MusicRelease_test():
    from schorg.MusicRelease import MusicReleaseInheritedProperties
    from schorg.MusicRelease import MusicReleaseProperties
    from schorg.MusicRelease import MusicReleaseAllProperties
    from schorg.MusicRelease import create_schema_org_model
    from schorg.MusicRelease import create_musicrelease_model
    from schorg.MusicRelease import MusicRelease

    a = create_schema_org_model(type_=MusicReleaseInheritedProperties)
    b = create_schema_org_model(type_=MusicReleaseProperties)
    c = create_schema_org_model(type_=MusicReleaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicRelease.schema()
    create_musicrelease_model(MusicReleaseAllProperties).schema()
    create_musicrelease_model(MusicReleaseInheritedProperties).schema()
    create_musicrelease_model(MusicReleaseProperties).schema()


def EmployerAggregateRating_test():
    from schorg.EmployerAggregateRating import (
        EmployerAggregateRatingInheritedProperties,
    )
    from schorg.EmployerAggregateRating import EmployerAggregateRatingProperties
    from schorg.EmployerAggregateRating import EmployerAggregateRatingAllProperties
    from schorg.EmployerAggregateRating import create_schema_org_model
    from schorg.EmployerAggregateRating import create_employeraggregaterating_model
    from schorg.EmployerAggregateRating import EmployerAggregateRating

    a = create_schema_org_model(type_=EmployerAggregateRatingInheritedProperties)
    b = create_schema_org_model(type_=EmployerAggregateRatingProperties)
    c = create_schema_org_model(type_=EmployerAggregateRatingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EmployerAggregateRating.schema()
    create_employeraggregaterating_model(EmployerAggregateRatingAllProperties).schema()
    create_employeraggregaterating_model(
        EmployerAggregateRatingInheritedProperties
    ).schema()
    create_employeraggregaterating_model(EmployerAggregateRatingProperties).schema()


def Female_test():
    from schorg.Female import FemaleInheritedProperties
    from schorg.Female import FemaleProperties
    from schorg.Female import FemaleAllProperties
    from schorg.Female import create_schema_org_model
    from schorg.Female import create_female_model
    from schorg.Female import Female

    a = create_schema_org_model(type_=FemaleInheritedProperties)
    b = create_schema_org_model(type_=FemaleProperties)
    c = create_schema_org_model(type_=FemaleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Female.schema()
    create_female_model(FemaleAllProperties).schema()
    create_female_model(FemaleInheritedProperties).schema()
    create_female_model(FemaleProperties).schema()


def ReviewNewsArticle_test():
    from schorg.ReviewNewsArticle import ReviewNewsArticleInheritedProperties
    from schorg.ReviewNewsArticle import ReviewNewsArticleProperties
    from schorg.ReviewNewsArticle import ReviewNewsArticleAllProperties
    from schorg.ReviewNewsArticle import create_schema_org_model
    from schorg.ReviewNewsArticle import create_reviewnewsarticle_model
    from schorg.ReviewNewsArticle import ReviewNewsArticle

    a = create_schema_org_model(type_=ReviewNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=ReviewNewsArticleProperties)
    c = create_schema_org_model(type_=ReviewNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReviewNewsArticle.schema()
    create_reviewnewsarticle_model(ReviewNewsArticleAllProperties).schema()
    create_reviewnewsarticle_model(ReviewNewsArticleInheritedProperties).schema()
    create_reviewnewsarticle_model(ReviewNewsArticleProperties).schema()


def SeatingMap_test():
    from schorg.SeatingMap import SeatingMapInheritedProperties
    from schorg.SeatingMap import SeatingMapProperties
    from schorg.SeatingMap import SeatingMapAllProperties
    from schorg.SeatingMap import create_schema_org_model
    from schorg.SeatingMap import create_seatingmap_model
    from schorg.SeatingMap import SeatingMap

    a = create_schema_org_model(type_=SeatingMapInheritedProperties)
    b = create_schema_org_model(type_=SeatingMapProperties)
    c = create_schema_org_model(type_=SeatingMapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SeatingMap.schema()
    create_seatingmap_model(SeatingMapAllProperties).schema()
    create_seatingmap_model(SeatingMapInheritedProperties).schema()
    create_seatingmap_model(SeatingMapProperties).schema()


def EvidenceLevelB_test():
    from schorg.EvidenceLevelB import EvidenceLevelBInheritedProperties
    from schorg.EvidenceLevelB import EvidenceLevelBProperties
    from schorg.EvidenceLevelB import EvidenceLevelBAllProperties
    from schorg.EvidenceLevelB import create_schema_org_model
    from schorg.EvidenceLevelB import create_evidencelevelb_model
    from schorg.EvidenceLevelB import EvidenceLevelB

    a = create_schema_org_model(type_=EvidenceLevelBInheritedProperties)
    b = create_schema_org_model(type_=EvidenceLevelBProperties)
    c = create_schema_org_model(type_=EvidenceLevelBAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EvidenceLevelB.schema()
    create_evidencelevelb_model(EvidenceLevelBAllProperties).schema()
    create_evidencelevelb_model(EvidenceLevelBInheritedProperties).schema()
    create_evidencelevelb_model(EvidenceLevelBProperties).schema()


def BodyMeasurementBust_test():
    from schorg.BodyMeasurementBust import BodyMeasurementBustInheritedProperties
    from schorg.BodyMeasurementBust import BodyMeasurementBustProperties
    from schorg.BodyMeasurementBust import BodyMeasurementBustAllProperties
    from schorg.BodyMeasurementBust import create_schema_org_model
    from schorg.BodyMeasurementBust import create_bodymeasurementbust_model
    from schorg.BodyMeasurementBust import BodyMeasurementBust

    a = create_schema_org_model(type_=BodyMeasurementBustInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementBustProperties)
    c = create_schema_org_model(type_=BodyMeasurementBustAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementBust.schema()
    create_bodymeasurementbust_model(BodyMeasurementBustAllProperties).schema()
    create_bodymeasurementbust_model(BodyMeasurementBustInheritedProperties).schema()
    create_bodymeasurementbust_model(BodyMeasurementBustProperties).schema()


def HomeGoodsStore_test():
    from schorg.HomeGoodsStore import HomeGoodsStoreInheritedProperties
    from schorg.HomeGoodsStore import HomeGoodsStoreProperties
    from schorg.HomeGoodsStore import HomeGoodsStoreAllProperties
    from schorg.HomeGoodsStore import create_schema_org_model
    from schorg.HomeGoodsStore import create_homegoodsstore_model
    from schorg.HomeGoodsStore import HomeGoodsStore

    a = create_schema_org_model(type_=HomeGoodsStoreInheritedProperties)
    b = create_schema_org_model(type_=HomeGoodsStoreProperties)
    c = create_schema_org_model(type_=HomeGoodsStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HomeGoodsStore.schema()
    create_homegoodsstore_model(HomeGoodsStoreAllProperties).schema()
    create_homegoodsstore_model(HomeGoodsStoreInheritedProperties).schema()
    create_homegoodsstore_model(HomeGoodsStoreProperties).schema()


def ClaimReview_test():
    from schorg.ClaimReview import ClaimReviewInheritedProperties
    from schorg.ClaimReview import ClaimReviewProperties
    from schorg.ClaimReview import ClaimReviewAllProperties
    from schorg.ClaimReview import create_schema_org_model
    from schorg.ClaimReview import create_claimreview_model
    from schorg.ClaimReview import ClaimReview

    a = create_schema_org_model(type_=ClaimReviewInheritedProperties)
    b = create_schema_org_model(type_=ClaimReviewProperties)
    c = create_schema_org_model(type_=ClaimReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ClaimReview.schema()
    create_claimreview_model(ClaimReviewAllProperties).schema()
    create_claimreview_model(ClaimReviewInheritedProperties).schema()
    create_claimreview_model(ClaimReviewProperties).schema()


def NutritionInformation_test():
    from schorg.NutritionInformation import NutritionInformationInheritedProperties
    from schorg.NutritionInformation import NutritionInformationProperties
    from schorg.NutritionInformation import NutritionInformationAllProperties
    from schorg.NutritionInformation import create_schema_org_model
    from schorg.NutritionInformation import create_nutritioninformation_model
    from schorg.NutritionInformation import NutritionInformation

    a = create_schema_org_model(type_=NutritionInformationInheritedProperties)
    b = create_schema_org_model(type_=NutritionInformationProperties)
    c = create_schema_org_model(type_=NutritionInformationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NutritionInformation.schema()
    create_nutritioninformation_model(NutritionInformationAllProperties).schema()
    create_nutritioninformation_model(NutritionInformationInheritedProperties).schema()
    create_nutritioninformation_model(NutritionInformationProperties).schema()


def CT_test():
    from schorg.CT import CTInheritedProperties
    from schorg.CT import CTProperties
    from schorg.CT import CTAllProperties
    from schorg.CT import create_schema_org_model
    from schorg.CT import create_ct_model
    from schorg.CT import CT

    a = create_schema_org_model(type_=CTInheritedProperties)
    b = create_schema_org_model(type_=CTProperties)
    c = create_schema_org_model(type_=CTAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CT.schema()
    create_ct_model(CTAllProperties).schema()
    create_ct_model(CTInheritedProperties).schema()
    create_ct_model(CTProperties).schema()


def Nonprofit527_test():
    from schorg.Nonprofit527 import Nonprofit527InheritedProperties
    from schorg.Nonprofit527 import Nonprofit527Properties
    from schorg.Nonprofit527 import Nonprofit527AllProperties
    from schorg.Nonprofit527 import create_schema_org_model
    from schorg.Nonprofit527 import create_nonprofit527_model
    from schorg.Nonprofit527 import Nonprofit527

    a = create_schema_org_model(type_=Nonprofit527InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit527Properties)
    c = create_schema_org_model(type_=Nonprofit527AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit527.schema()
    create_nonprofit527_model(Nonprofit527AllProperties).schema()
    create_nonprofit527_model(Nonprofit527InheritedProperties).schema()
    create_nonprofit527_model(Nonprofit527Properties).schema()


def MenuItem_test():
    from schorg.MenuItem import MenuItemInheritedProperties
    from schorg.MenuItem import MenuItemProperties
    from schorg.MenuItem import MenuItemAllProperties
    from schorg.MenuItem import create_schema_org_model
    from schorg.MenuItem import create_menuitem_model
    from schorg.MenuItem import MenuItem

    a = create_schema_org_model(type_=MenuItemInheritedProperties)
    b = create_schema_org_model(type_=MenuItemProperties)
    c = create_schema_org_model(type_=MenuItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MenuItem.schema()
    create_menuitem_model(MenuItemAllProperties).schema()
    create_menuitem_model(MenuItemInheritedProperties).schema()
    create_menuitem_model(MenuItemProperties).schema()


def OnlineEventAttendanceMode_test():
    from schorg.OnlineEventAttendanceMode import (
        OnlineEventAttendanceModeInheritedProperties,
    )
    from schorg.OnlineEventAttendanceMode import OnlineEventAttendanceModeProperties
    from schorg.OnlineEventAttendanceMode import OnlineEventAttendanceModeAllProperties
    from schorg.OnlineEventAttendanceMode import create_schema_org_model
    from schorg.OnlineEventAttendanceMode import create_onlineeventattendancemode_model
    from schorg.OnlineEventAttendanceMode import OnlineEventAttendanceMode

    a = create_schema_org_model(type_=OnlineEventAttendanceModeInheritedProperties)
    b = create_schema_org_model(type_=OnlineEventAttendanceModeProperties)
    c = create_schema_org_model(type_=OnlineEventAttendanceModeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnlineEventAttendanceMode.schema()
    create_onlineeventattendancemode_model(
        OnlineEventAttendanceModeAllProperties
    ).schema()
    create_onlineeventattendancemode_model(
        OnlineEventAttendanceModeInheritedProperties
    ).schema()
    create_onlineeventattendancemode_model(OnlineEventAttendanceModeProperties).schema()


def SizeSystemImperial_test():
    from schorg.SizeSystemImperial import SizeSystemImperialInheritedProperties
    from schorg.SizeSystemImperial import SizeSystemImperialProperties
    from schorg.SizeSystemImperial import SizeSystemImperialAllProperties
    from schorg.SizeSystemImperial import create_schema_org_model
    from schorg.SizeSystemImperial import create_sizesystemimperial_model
    from schorg.SizeSystemImperial import SizeSystemImperial

    a = create_schema_org_model(type_=SizeSystemImperialInheritedProperties)
    b = create_schema_org_model(type_=SizeSystemImperialProperties)
    c = create_schema_org_model(type_=SizeSystemImperialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SizeSystemImperial.schema()
    create_sizesystemimperial_model(SizeSystemImperialAllProperties).schema()
    create_sizesystemimperial_model(SizeSystemImperialInheritedProperties).schema()
    create_sizesystemimperial_model(SizeSystemImperialProperties).schema()


def Recruiting_test():
    from schorg.Recruiting import RecruitingInheritedProperties
    from schorg.Recruiting import RecruitingProperties
    from schorg.Recruiting import RecruitingAllProperties
    from schorg.Recruiting import create_schema_org_model
    from schorg.Recruiting import create_recruiting_model
    from schorg.Recruiting import Recruiting

    a = create_schema_org_model(type_=RecruitingInheritedProperties)
    b = create_schema_org_model(type_=RecruitingProperties)
    c = create_schema_org_model(type_=RecruitingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Recruiting.schema()
    create_recruiting_model(RecruitingAllProperties).schema()
    create_recruiting_model(RecruitingInheritedProperties).schema()
    create_recruiting_model(RecruitingProperties).schema()


def Nonprofit501c23_test():
    from schorg.Nonprofit501c23 import Nonprofit501c23InheritedProperties
    from schorg.Nonprofit501c23 import Nonprofit501c23Properties
    from schorg.Nonprofit501c23 import Nonprofit501c23AllProperties
    from schorg.Nonprofit501c23 import create_schema_org_model
    from schorg.Nonprofit501c23 import create_nonprofit501c23_model
    from schorg.Nonprofit501c23 import Nonprofit501c23

    a = create_schema_org_model(type_=Nonprofit501c23InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c23Properties)
    c = create_schema_org_model(type_=Nonprofit501c23AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c23.schema()
    create_nonprofit501c23_model(Nonprofit501c23AllProperties).schema()
    create_nonprofit501c23_model(Nonprofit501c23InheritedProperties).schema()
    create_nonprofit501c23_model(Nonprofit501c23Properties).schema()


def PotentialActionStatus_test():
    from schorg.PotentialActionStatus import PotentialActionStatusInheritedProperties
    from schorg.PotentialActionStatus import PotentialActionStatusProperties
    from schorg.PotentialActionStatus import PotentialActionStatusAllProperties
    from schorg.PotentialActionStatus import create_schema_org_model
    from schorg.PotentialActionStatus import create_potentialactionstatus_model
    from schorg.PotentialActionStatus import PotentialActionStatus

    a = create_schema_org_model(type_=PotentialActionStatusInheritedProperties)
    b = create_schema_org_model(type_=PotentialActionStatusProperties)
    c = create_schema_org_model(type_=PotentialActionStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PotentialActionStatus.schema()
    create_potentialactionstatus_model(PotentialActionStatusAllProperties).schema()
    create_potentialactionstatus_model(
        PotentialActionStatusInheritedProperties
    ).schema()
    create_potentialactionstatus_model(PotentialActionStatusProperties).schema()


def OneTimePayments_test():
    from schorg.OneTimePayments import OneTimePaymentsInheritedProperties
    from schorg.OneTimePayments import OneTimePaymentsProperties
    from schorg.OneTimePayments import OneTimePaymentsAllProperties
    from schorg.OneTimePayments import create_schema_org_model
    from schorg.OneTimePayments import create_onetimepayments_model
    from schorg.OneTimePayments import OneTimePayments

    a = create_schema_org_model(type_=OneTimePaymentsInheritedProperties)
    b = create_schema_org_model(type_=OneTimePaymentsProperties)
    c = create_schema_org_model(type_=OneTimePaymentsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OneTimePayments.schema()
    create_onetimepayments_model(OneTimePaymentsAllProperties).schema()
    create_onetimepayments_model(OneTimePaymentsInheritedProperties).schema()
    create_onetimepayments_model(OneTimePaymentsProperties).schema()


def TravelAction_test():
    from schorg.TravelAction import TravelActionInheritedProperties
    from schorg.TravelAction import TravelActionProperties
    from schorg.TravelAction import TravelActionAllProperties
    from schorg.TravelAction import create_schema_org_model
    from schorg.TravelAction import create_travelaction_model
    from schorg.TravelAction import TravelAction

    a = create_schema_org_model(type_=TravelActionInheritedProperties)
    b = create_schema_org_model(type_=TravelActionProperties)
    c = create_schema_org_model(type_=TravelActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TravelAction.schema()
    create_travelaction_model(TravelActionAllProperties).schema()
    create_travelaction_model(TravelActionInheritedProperties).schema()
    create_travelaction_model(TravelActionProperties).schema()


def EUEnergyEfficiencyCategoryD_test():
    from schorg.EUEnergyEfficiencyCategoryD import (
        EUEnergyEfficiencyCategoryDInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryD import EUEnergyEfficiencyCategoryDProperties
    from schorg.EUEnergyEfficiencyCategoryD import (
        EUEnergyEfficiencyCategoryDAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryD import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryD import (
        create_euenergyefficiencycategoryd_model,
    )
    from schorg.EUEnergyEfficiencyCategoryD import EUEnergyEfficiencyCategoryD

    a = create_schema_org_model(type_=EUEnergyEfficiencyCategoryDInheritedProperties)
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryDProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryDAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryD.schema()
    create_euenergyefficiencycategoryd_model(
        EUEnergyEfficiencyCategoryDAllProperties
    ).schema()
    create_euenergyefficiencycategoryd_model(
        EUEnergyEfficiencyCategoryDInheritedProperties
    ).schema()
    create_euenergyefficiencycategoryd_model(
        EUEnergyEfficiencyCategoryDProperties
    ).schema()


def MaximumDoseSchedule_test():
    from schorg.MaximumDoseSchedule import MaximumDoseScheduleInheritedProperties
    from schorg.MaximumDoseSchedule import MaximumDoseScheduleProperties
    from schorg.MaximumDoseSchedule import MaximumDoseScheduleAllProperties
    from schorg.MaximumDoseSchedule import create_schema_org_model
    from schorg.MaximumDoseSchedule import create_maximumdoseschedule_model
    from schorg.MaximumDoseSchedule import MaximumDoseSchedule

    a = create_schema_org_model(type_=MaximumDoseScheduleInheritedProperties)
    b = create_schema_org_model(type_=MaximumDoseScheduleProperties)
    c = create_schema_org_model(type_=MaximumDoseScheduleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MaximumDoseSchedule.schema()
    create_maximumdoseschedule_model(MaximumDoseScheduleAllProperties).schema()
    create_maximumdoseschedule_model(MaximumDoseScheduleInheritedProperties).schema()
    create_maximumdoseschedule_model(MaximumDoseScheduleProperties).schema()


def Brand_test():
    from schorg.Brand import BrandInheritedProperties
    from schorg.Brand import BrandProperties
    from schorg.Brand import BrandAllProperties
    from schorg.Brand import create_schema_org_model
    from schorg.Brand import create_brand_model
    from schorg.Brand import Brand

    a = create_schema_org_model(type_=BrandInheritedProperties)
    b = create_schema_org_model(type_=BrandProperties)
    c = create_schema_org_model(type_=BrandAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Brand.schema()
    create_brand_model(BrandAllProperties).schema()
    create_brand_model(BrandInheritedProperties).schema()
    create_brand_model(BrandProperties).schema()


def HowToSupply_test():
    from schorg.HowToSupply import HowToSupplyInheritedProperties
    from schorg.HowToSupply import HowToSupplyProperties
    from schorg.HowToSupply import HowToSupplyAllProperties
    from schorg.HowToSupply import create_schema_org_model
    from schorg.HowToSupply import create_howtosupply_model
    from schorg.HowToSupply import HowToSupply

    a = create_schema_org_model(type_=HowToSupplyInheritedProperties)
    b = create_schema_org_model(type_=HowToSupplyProperties)
    c = create_schema_org_model(type_=HowToSupplyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowToSupply.schema()
    create_howtosupply_model(HowToSupplyAllProperties).schema()
    create_howtosupply_model(HowToSupplyInheritedProperties).schema()
    create_howtosupply_model(HowToSupplyProperties).schema()


def ZoneBoardingPolicy_test():
    from schorg.ZoneBoardingPolicy import ZoneBoardingPolicyInheritedProperties
    from schorg.ZoneBoardingPolicy import ZoneBoardingPolicyProperties
    from schorg.ZoneBoardingPolicy import ZoneBoardingPolicyAllProperties
    from schorg.ZoneBoardingPolicy import create_schema_org_model
    from schorg.ZoneBoardingPolicy import create_zoneboardingpolicy_model
    from schorg.ZoneBoardingPolicy import ZoneBoardingPolicy

    a = create_schema_org_model(type_=ZoneBoardingPolicyInheritedProperties)
    b = create_schema_org_model(type_=ZoneBoardingPolicyProperties)
    c = create_schema_org_model(type_=ZoneBoardingPolicyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ZoneBoardingPolicy.schema()
    create_zoneboardingpolicy_model(ZoneBoardingPolicyAllProperties).schema()
    create_zoneboardingpolicy_model(ZoneBoardingPolicyInheritedProperties).schema()
    create_zoneboardingpolicy_model(ZoneBoardingPolicyProperties).schema()


def Nonprofit501f_test():
    from schorg.Nonprofit501f import Nonprofit501fInheritedProperties
    from schorg.Nonprofit501f import Nonprofit501fProperties
    from schorg.Nonprofit501f import Nonprofit501fAllProperties
    from schorg.Nonprofit501f import create_schema_org_model
    from schorg.Nonprofit501f import create_nonprofit501f_model
    from schorg.Nonprofit501f import Nonprofit501f

    a = create_schema_org_model(type_=Nonprofit501fInheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501fProperties)
    c = create_schema_org_model(type_=Nonprofit501fAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501f.schema()
    create_nonprofit501f_model(Nonprofit501fAllProperties).schema()
    create_nonprofit501f_model(Nonprofit501fInheritedProperties).schema()
    create_nonprofit501f_model(Nonprofit501fProperties).schema()


def ParcelDelivery_test():
    from schorg.ParcelDelivery import ParcelDeliveryInheritedProperties
    from schorg.ParcelDelivery import ParcelDeliveryProperties
    from schorg.ParcelDelivery import ParcelDeliveryAllProperties
    from schorg.ParcelDelivery import create_schema_org_model
    from schorg.ParcelDelivery import create_parceldelivery_model
    from schorg.ParcelDelivery import ParcelDelivery

    a = create_schema_org_model(type_=ParcelDeliveryInheritedProperties)
    b = create_schema_org_model(type_=ParcelDeliveryProperties)
    c = create_schema_org_model(type_=ParcelDeliveryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ParcelDelivery.schema()
    create_parceldelivery_model(ParcelDeliveryAllProperties).schema()
    create_parceldelivery_model(ParcelDeliveryInheritedProperties).schema()
    create_parceldelivery_model(ParcelDeliveryProperties).schema()


def SeekToAction_test():
    from schorg.SeekToAction import SeekToActionInheritedProperties
    from schorg.SeekToAction import SeekToActionProperties
    from schorg.SeekToAction import SeekToActionAllProperties
    from schorg.SeekToAction import create_schema_org_model
    from schorg.SeekToAction import create_seektoaction_model
    from schorg.SeekToAction import SeekToAction

    a = create_schema_org_model(type_=SeekToActionInheritedProperties)
    b = create_schema_org_model(type_=SeekToActionProperties)
    c = create_schema_org_model(type_=SeekToActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SeekToAction.schema()
    create_seektoaction_model(SeekToActionAllProperties).schema()
    create_seektoaction_model(SeekToActionInheritedProperties).schema()
    create_seektoaction_model(SeekToActionProperties).schema()


def Balance_test():
    from schorg.Balance import BalanceInheritedProperties
    from schorg.Balance import BalanceProperties
    from schorg.Balance import BalanceAllProperties
    from schorg.Balance import create_schema_org_model
    from schorg.Balance import create_balance_model
    from schorg.Balance import Balance

    a = create_schema_org_model(type_=BalanceInheritedProperties)
    b = create_schema_org_model(type_=BalanceProperties)
    c = create_schema_org_model(type_=BalanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Balance.schema()
    create_balance_model(BalanceAllProperties).schema()
    create_balance_model(BalanceInheritedProperties).schema()
    create_balance_model(BalanceProperties).schema()


def InForce_test():
    from schorg.InForce import InForceInheritedProperties
    from schorg.InForce import InForceProperties
    from schorg.InForce import InForceAllProperties
    from schorg.InForce import create_schema_org_model
    from schorg.InForce import create_inforce_model
    from schorg.InForce import InForce

    a = create_schema_org_model(type_=InForceInheritedProperties)
    b = create_schema_org_model(type_=InForceProperties)
    c = create_schema_org_model(type_=InForceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InForce.schema()
    create_inforce_model(InForceAllProperties).schema()
    create_inforce_model(InForceInheritedProperties).schema()
    create_inforce_model(InForceProperties).schema()


def AuthorizeAction_test():
    from schorg.AuthorizeAction import AuthorizeActionInheritedProperties
    from schorg.AuthorizeAction import AuthorizeActionProperties
    from schorg.AuthorizeAction import AuthorizeActionAllProperties
    from schorg.AuthorizeAction import create_schema_org_model
    from schorg.AuthorizeAction import create_authorizeaction_model
    from schorg.AuthorizeAction import AuthorizeAction

    a = create_schema_org_model(type_=AuthorizeActionInheritedProperties)
    b = create_schema_org_model(type_=AuthorizeActionProperties)
    c = create_schema_org_model(type_=AuthorizeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AuthorizeAction.schema()
    create_authorizeaction_model(AuthorizeActionAllProperties).schema()
    create_authorizeaction_model(AuthorizeActionInheritedProperties).schema()
    create_authorizeaction_model(AuthorizeActionProperties).schema()


def InvoicePrice_test():
    from schorg.InvoicePrice import InvoicePriceInheritedProperties
    from schorg.InvoicePrice import InvoicePriceProperties
    from schorg.InvoicePrice import InvoicePriceAllProperties
    from schorg.InvoicePrice import create_schema_org_model
    from schorg.InvoicePrice import create_invoiceprice_model
    from schorg.InvoicePrice import InvoicePrice

    a = create_schema_org_model(type_=InvoicePriceInheritedProperties)
    b = create_schema_org_model(type_=InvoicePriceProperties)
    c = create_schema_org_model(type_=InvoicePriceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InvoicePrice.schema()
    create_invoiceprice_model(InvoicePriceAllProperties).schema()
    create_invoiceprice_model(InvoicePriceInheritedProperties).schema()
    create_invoiceprice_model(InvoicePriceProperties).schema()


def Neurologic_test():
    from schorg.Neurologic import NeurologicInheritedProperties
    from schorg.Neurologic import NeurologicProperties
    from schorg.Neurologic import NeurologicAllProperties
    from schorg.Neurologic import create_schema_org_model
    from schorg.Neurologic import create_neurologic_model
    from schorg.Neurologic import Neurologic

    a = create_schema_org_model(type_=NeurologicInheritedProperties)
    b = create_schema_org_model(type_=NeurologicProperties)
    c = create_schema_org_model(type_=NeurologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Neurologic.schema()
    create_neurologic_model(NeurologicAllProperties).schema()
    create_neurologic_model(NeurologicInheritedProperties).schema()
    create_neurologic_model(NeurologicProperties).schema()


def CassetteFormat_test():
    from schorg.CassetteFormat import CassetteFormatInheritedProperties
    from schorg.CassetteFormat import CassetteFormatProperties
    from schorg.CassetteFormat import CassetteFormatAllProperties
    from schorg.CassetteFormat import create_schema_org_model
    from schorg.CassetteFormat import create_cassetteformat_model
    from schorg.CassetteFormat import CassetteFormat

    a = create_schema_org_model(type_=CassetteFormatInheritedProperties)
    b = create_schema_org_model(type_=CassetteFormatProperties)
    c = create_schema_org_model(type_=CassetteFormatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CassetteFormat.schema()
    create_cassetteformat_model(CassetteFormatAllProperties).schema()
    create_cassetteformat_model(CassetteFormatInheritedProperties).schema()
    create_cassetteformat_model(CassetteFormatProperties).schema()


def TraditionalChinese_test():
    from schorg.TraditionalChinese import TraditionalChineseInheritedProperties
    from schorg.TraditionalChinese import TraditionalChineseProperties
    from schorg.TraditionalChinese import TraditionalChineseAllProperties
    from schorg.TraditionalChinese import create_schema_org_model
    from schorg.TraditionalChinese import create_traditionalchinese_model
    from schorg.TraditionalChinese import TraditionalChinese

    a = create_schema_org_model(type_=TraditionalChineseInheritedProperties)
    b = create_schema_org_model(type_=TraditionalChineseProperties)
    c = create_schema_org_model(type_=TraditionalChineseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TraditionalChinese.schema()
    create_traditionalchinese_model(TraditionalChineseAllProperties).schema()
    create_traditionalchinese_model(TraditionalChineseInheritedProperties).schema()
    create_traditionalchinese_model(TraditionalChineseProperties).schema()


def Homeopathic_test():
    from schorg.Homeopathic import HomeopathicInheritedProperties
    from schorg.Homeopathic import HomeopathicProperties
    from schorg.Homeopathic import HomeopathicAllProperties
    from schorg.Homeopathic import create_schema_org_model
    from schorg.Homeopathic import create_homeopathic_model
    from schorg.Homeopathic import Homeopathic

    a = create_schema_org_model(type_=HomeopathicInheritedProperties)
    b = create_schema_org_model(type_=HomeopathicProperties)
    c = create_schema_org_model(type_=HomeopathicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Homeopathic.schema()
    create_homeopathic_model(HomeopathicAllProperties).schema()
    create_homeopathic_model(HomeopathicInheritedProperties).schema()
    create_homeopathic_model(HomeopathicProperties).schema()


def TouristAttraction_test():
    from schorg.TouristAttraction import TouristAttractionInheritedProperties
    from schorg.TouristAttraction import TouristAttractionProperties
    from schorg.TouristAttraction import TouristAttractionAllProperties
    from schorg.TouristAttraction import create_schema_org_model
    from schorg.TouristAttraction import create_touristattraction_model
    from schorg.TouristAttraction import TouristAttraction

    a = create_schema_org_model(type_=TouristAttractionInheritedProperties)
    b = create_schema_org_model(type_=TouristAttractionProperties)
    c = create_schema_org_model(type_=TouristAttractionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TouristAttraction.schema()
    create_touristattraction_model(TouristAttractionAllProperties).schema()
    create_touristattraction_model(TouristAttractionInheritedProperties).schema()
    create_touristattraction_model(TouristAttractionProperties).schema()


def Energy_test():
    from schorg.Energy import EnergyInheritedProperties
    from schorg.Energy import EnergyProperties
    from schorg.Energy import EnergyAllProperties
    from schorg.Energy import create_schema_org_model
    from schorg.Energy import create_energy_model
    from schorg.Energy import Energy

    a = create_schema_org_model(type_=EnergyInheritedProperties)
    b = create_schema_org_model(type_=EnergyProperties)
    c = create_schema_org_model(type_=EnergyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Energy.schema()
    create_energy_model(EnergyAllProperties).schema()
    create_energy_model(EnergyInheritedProperties).schema()
    create_energy_model(EnergyProperties).schema()


def Nonprofit501c19_test():
    from schorg.Nonprofit501c19 import Nonprofit501c19InheritedProperties
    from schorg.Nonprofit501c19 import Nonprofit501c19Properties
    from schorg.Nonprofit501c19 import Nonprofit501c19AllProperties
    from schorg.Nonprofit501c19 import create_schema_org_model
    from schorg.Nonprofit501c19 import create_nonprofit501c19_model
    from schorg.Nonprofit501c19 import Nonprofit501c19

    a = create_schema_org_model(type_=Nonprofit501c19InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c19Properties)
    c = create_schema_org_model(type_=Nonprofit501c19AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c19.schema()
    create_nonprofit501c19_model(Nonprofit501c19AllProperties).schema()
    create_nonprofit501c19_model(Nonprofit501c19InheritedProperties).schema()
    create_nonprofit501c19_model(Nonprofit501c19Properties).schema()


def OfferForPurchase_test():
    from schorg.OfferForPurchase import OfferForPurchaseInheritedProperties
    from schorg.OfferForPurchase import OfferForPurchaseProperties
    from schorg.OfferForPurchase import OfferForPurchaseAllProperties
    from schorg.OfferForPurchase import create_schema_org_model
    from schorg.OfferForPurchase import create_offerforpurchase_model
    from schorg.OfferForPurchase import OfferForPurchase

    a = create_schema_org_model(type_=OfferForPurchaseInheritedProperties)
    b = create_schema_org_model(type_=OfferForPurchaseProperties)
    c = create_schema_org_model(type_=OfferForPurchaseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfferForPurchase.schema()
    create_offerforpurchase_model(OfferForPurchaseAllProperties).schema()
    create_offerforpurchase_model(OfferForPurchaseInheritedProperties).schema()
    create_offerforpurchase_model(OfferForPurchaseProperties).schema()


def EntryPoint_test():
    from schorg.EntryPoint import EntryPointInheritedProperties
    from schorg.EntryPoint import EntryPointProperties
    from schorg.EntryPoint import EntryPointAllProperties
    from schorg.EntryPoint import create_schema_org_model
    from schorg.EntryPoint import create_entrypoint_model
    from schorg.EntryPoint import EntryPoint

    a = create_schema_org_model(type_=EntryPointInheritedProperties)
    b = create_schema_org_model(type_=EntryPointProperties)
    c = create_schema_org_model(type_=EntryPointAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EntryPoint.schema()
    create_entrypoint_model(EntryPointAllProperties).schema()
    create_entrypoint_model(EntryPointInheritedProperties).schema()
    create_entrypoint_model(EntryPointProperties).schema()


def OfficialLegalValue_test():
    from schorg.OfficialLegalValue import OfficialLegalValueInheritedProperties
    from schorg.OfficialLegalValue import OfficialLegalValueProperties
    from schorg.OfficialLegalValue import OfficialLegalValueAllProperties
    from schorg.OfficialLegalValue import create_schema_org_model
    from schorg.OfficialLegalValue import create_officiallegalvalue_model
    from schorg.OfficialLegalValue import OfficialLegalValue

    a = create_schema_org_model(type_=OfficialLegalValueInheritedProperties)
    b = create_schema_org_model(type_=OfficialLegalValueProperties)
    c = create_schema_org_model(type_=OfficialLegalValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfficialLegalValue.schema()
    create_officiallegalvalue_model(OfficialLegalValueAllProperties).schema()
    create_officiallegalvalue_model(OfficialLegalValueInheritedProperties).schema()
    create_officiallegalvalue_model(OfficialLegalValueProperties).schema()


def HowItWorksHealthAspect_test():
    from schorg.HowItWorksHealthAspect import HowItWorksHealthAspectInheritedProperties
    from schorg.HowItWorksHealthAspect import HowItWorksHealthAspectProperties
    from schorg.HowItWorksHealthAspect import HowItWorksHealthAspectAllProperties
    from schorg.HowItWorksHealthAspect import create_schema_org_model
    from schorg.HowItWorksHealthAspect import create_howitworkshealthaspect_model
    from schorg.HowItWorksHealthAspect import HowItWorksHealthAspect

    a = create_schema_org_model(type_=HowItWorksHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=HowItWorksHealthAspectProperties)
    c = create_schema_org_model(type_=HowItWorksHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HowItWorksHealthAspect.schema()
    create_howitworkshealthaspect_model(HowItWorksHealthAspectAllProperties).schema()
    create_howitworkshealthaspect_model(
        HowItWorksHealthAspectInheritedProperties
    ).schema()
    create_howitworkshealthaspect_model(HowItWorksHealthAspectProperties).schema()


def Table_test():
    from schorg.Table import TableInheritedProperties
    from schorg.Table import TableProperties
    from schorg.Table import TableAllProperties
    from schorg.Table import create_schema_org_model
    from schorg.Table import create_table_model
    from schorg.Table import Table

    a = create_schema_org_model(type_=TableInheritedProperties)
    b = create_schema_org_model(type_=TableProperties)
    c = create_schema_org_model(type_=TableAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Table.schema()
    create_table_model(TableAllProperties).schema()
    create_table_model(TableInheritedProperties).schema()
    create_table_model(TableProperties).schema()


def EnrollingByInvitation_test():
    from schorg.EnrollingByInvitation import EnrollingByInvitationInheritedProperties
    from schorg.EnrollingByInvitation import EnrollingByInvitationProperties
    from schorg.EnrollingByInvitation import EnrollingByInvitationAllProperties
    from schorg.EnrollingByInvitation import create_schema_org_model
    from schorg.EnrollingByInvitation import create_enrollingbyinvitation_model
    from schorg.EnrollingByInvitation import EnrollingByInvitation

    a = create_schema_org_model(type_=EnrollingByInvitationInheritedProperties)
    b = create_schema_org_model(type_=EnrollingByInvitationProperties)
    c = create_schema_org_model(type_=EnrollingByInvitationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EnrollingByInvitation.schema()
    create_enrollingbyinvitation_model(EnrollingByInvitationAllProperties).schema()
    create_enrollingbyinvitation_model(
        EnrollingByInvitationInheritedProperties
    ).schema()
    create_enrollingbyinvitation_model(EnrollingByInvitationProperties).schema()


def MayTreatHealthAspect_test():
    from schorg.MayTreatHealthAspect import MayTreatHealthAspectInheritedProperties
    from schorg.MayTreatHealthAspect import MayTreatHealthAspectProperties
    from schorg.MayTreatHealthAspect import MayTreatHealthAspectAllProperties
    from schorg.MayTreatHealthAspect import create_schema_org_model
    from schorg.MayTreatHealthAspect import create_maytreathealthaspect_model
    from schorg.MayTreatHealthAspect import MayTreatHealthAspect

    a = create_schema_org_model(type_=MayTreatHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=MayTreatHealthAspectProperties)
    c = create_schema_org_model(type_=MayTreatHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MayTreatHealthAspect.schema()
    create_maytreathealthaspect_model(MayTreatHealthAspectAllProperties).schema()
    create_maytreathealthaspect_model(MayTreatHealthAspectInheritedProperties).schema()
    create_maytreathealthaspect_model(MayTreatHealthAspectProperties).schema()


def OrderReturned_test():
    from schorg.OrderReturned import OrderReturnedInheritedProperties
    from schorg.OrderReturned import OrderReturnedProperties
    from schorg.OrderReturned import OrderReturnedAllProperties
    from schorg.OrderReturned import create_schema_org_model
    from schorg.OrderReturned import create_orderreturned_model
    from schorg.OrderReturned import OrderReturned

    a = create_schema_org_model(type_=OrderReturnedInheritedProperties)
    b = create_schema_org_model(type_=OrderReturnedProperties)
    c = create_schema_org_model(type_=OrderReturnedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderReturned.schema()
    create_orderreturned_model(OrderReturnedAllProperties).schema()
    create_orderreturned_model(OrderReturnedInheritedProperties).schema()
    create_orderreturned_model(OrderReturnedProperties).schema()


def FoodEvent_test():
    from schorg.FoodEvent import FoodEventInheritedProperties
    from schorg.FoodEvent import FoodEventProperties
    from schorg.FoodEvent import FoodEventAllProperties
    from schorg.FoodEvent import create_schema_org_model
    from schorg.FoodEvent import create_foodevent_model
    from schorg.FoodEvent import FoodEvent

    a = create_schema_org_model(type_=FoodEventInheritedProperties)
    b = create_schema_org_model(type_=FoodEventProperties)
    c = create_schema_org_model(type_=FoodEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FoodEvent.schema()
    create_foodevent_model(FoodEventAllProperties).schema()
    create_foodevent_model(FoodEventInheritedProperties).schema()
    create_foodevent_model(FoodEventProperties).schema()


def CrossSectional_test():
    from schorg.CrossSectional import CrossSectionalInheritedProperties
    from schorg.CrossSectional import CrossSectionalProperties
    from schorg.CrossSectional import CrossSectionalAllProperties
    from schorg.CrossSectional import create_schema_org_model
    from schorg.CrossSectional import create_crosssectional_model
    from schorg.CrossSectional import CrossSectional

    a = create_schema_org_model(type_=CrossSectionalInheritedProperties)
    b = create_schema_org_model(type_=CrossSectionalProperties)
    c = create_schema_org_model(type_=CrossSectionalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CrossSectional.schema()
    create_crosssectional_model(CrossSectionalAllProperties).schema()
    create_crosssectional_model(CrossSectionalInheritedProperties).schema()
    create_crosssectional_model(CrossSectionalProperties).schema()


def AutoDealer_test():
    from schorg.AutoDealer import AutoDealerInheritedProperties
    from schorg.AutoDealer import AutoDealerProperties
    from schorg.AutoDealer import AutoDealerAllProperties
    from schorg.AutoDealer import create_schema_org_model
    from schorg.AutoDealer import create_autodealer_model
    from schorg.AutoDealer import AutoDealer

    a = create_schema_org_model(type_=AutoDealerInheritedProperties)
    b = create_schema_org_model(type_=AutoDealerProperties)
    c = create_schema_org_model(type_=AutoDealerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoDealer.schema()
    create_autodealer_model(AutoDealerAllProperties).schema()
    create_autodealer_model(AutoDealerInheritedProperties).schema()
    create_autodealer_model(AutoDealerProperties).schema()


def InsuranceAgency_test():
    from schorg.InsuranceAgency import InsuranceAgencyInheritedProperties
    from schorg.InsuranceAgency import InsuranceAgencyProperties
    from schorg.InsuranceAgency import InsuranceAgencyAllProperties
    from schorg.InsuranceAgency import create_schema_org_model
    from schorg.InsuranceAgency import create_insuranceagency_model
    from schorg.InsuranceAgency import InsuranceAgency

    a = create_schema_org_model(type_=InsuranceAgencyInheritedProperties)
    b = create_schema_org_model(type_=InsuranceAgencyProperties)
    c = create_schema_org_model(type_=InsuranceAgencyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InsuranceAgency.schema()
    create_insuranceagency_model(InsuranceAgencyAllProperties).schema()
    create_insuranceagency_model(InsuranceAgencyInheritedProperties).schema()
    create_insuranceagency_model(InsuranceAgencyProperties).schema()


def MusicRecording_test():
    from schorg.MusicRecording import MusicRecordingInheritedProperties
    from schorg.MusicRecording import MusicRecordingProperties
    from schorg.MusicRecording import MusicRecordingAllProperties
    from schorg.MusicRecording import create_schema_org_model
    from schorg.MusicRecording import create_musicrecording_model
    from schorg.MusicRecording import MusicRecording

    a = create_schema_org_model(type_=MusicRecordingInheritedProperties)
    b = create_schema_org_model(type_=MusicRecordingProperties)
    c = create_schema_org_model(type_=MusicRecordingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicRecording.schema()
    create_musicrecording_model(MusicRecordingAllProperties).schema()
    create_musicrecording_model(MusicRecordingInheritedProperties).schema()
    create_musicrecording_model(MusicRecordingProperties).schema()


def HalalDiet_test():
    from schorg.HalalDiet import HalalDietInheritedProperties
    from schorg.HalalDiet import HalalDietProperties
    from schorg.HalalDiet import HalalDietAllProperties
    from schorg.HalalDiet import create_schema_org_model
    from schorg.HalalDiet import create_halaldiet_model
    from schorg.HalalDiet import HalalDiet

    a = create_schema_org_model(type_=HalalDietInheritedProperties)
    b = create_schema_org_model(type_=HalalDietProperties)
    c = create_schema_org_model(type_=HalalDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HalalDiet.schema()
    create_halaldiet_model(HalalDietAllProperties).schema()
    create_halaldiet_model(HalalDietInheritedProperties).schema()
    create_halaldiet_model(HalalDietProperties).schema()


def Time_test():
    from schorg.Time import TimeInheritedProperties
    from schorg.Time import TimeProperties
    from schorg.Time import TimeAllProperties
    from schorg.Time import create_schema_org_model
    from schorg.Time import create_time_model
    from schorg.Time import Time

    a = create_schema_org_model(type_=TimeInheritedProperties)
    b = create_schema_org_model(type_=TimeProperties)
    c = create_schema_org_model(type_=TimeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Time.schema()
    create_time_model(TimeAllProperties).schema()
    create_time_model(TimeInheritedProperties).schema()
    create_time_model(TimeProperties).schema()


def WearableSizeGroupBig_test():
    from schorg.WearableSizeGroupBig import WearableSizeGroupBigInheritedProperties
    from schorg.WearableSizeGroupBig import WearableSizeGroupBigProperties
    from schorg.WearableSizeGroupBig import WearableSizeGroupBigAllProperties
    from schorg.WearableSizeGroupBig import create_schema_org_model
    from schorg.WearableSizeGroupBig import create_wearablesizegroupbig_model
    from schorg.WearableSizeGroupBig import WearableSizeGroupBig

    a = create_schema_org_model(type_=WearableSizeGroupBigInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupBigProperties)
    c = create_schema_org_model(type_=WearableSizeGroupBigAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupBig.schema()
    create_wearablesizegroupbig_model(WearableSizeGroupBigAllProperties).schema()
    create_wearablesizegroupbig_model(WearableSizeGroupBigInheritedProperties).schema()
    create_wearablesizegroupbig_model(WearableSizeGroupBigProperties).schema()


def GatedResidenceCommunity_test():
    from schorg.GatedResidenceCommunity import (
        GatedResidenceCommunityInheritedProperties,
    )
    from schorg.GatedResidenceCommunity import GatedResidenceCommunityProperties
    from schorg.GatedResidenceCommunity import GatedResidenceCommunityAllProperties
    from schorg.GatedResidenceCommunity import create_schema_org_model
    from schorg.GatedResidenceCommunity import create_gatedresidencecommunity_model
    from schorg.GatedResidenceCommunity import GatedResidenceCommunity

    a = create_schema_org_model(type_=GatedResidenceCommunityInheritedProperties)
    b = create_schema_org_model(type_=GatedResidenceCommunityProperties)
    c = create_schema_org_model(type_=GatedResidenceCommunityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GatedResidenceCommunity.schema()
    create_gatedresidencecommunity_model(GatedResidenceCommunityAllProperties).schema()
    create_gatedresidencecommunity_model(
        GatedResidenceCommunityInheritedProperties
    ).schema()
    create_gatedresidencecommunity_model(GatedResidenceCommunityProperties).schema()


def Diagnostic_test():
    from schorg.Diagnostic import DiagnosticInheritedProperties
    from schorg.Diagnostic import DiagnosticProperties
    from schorg.Diagnostic import DiagnosticAllProperties
    from schorg.Diagnostic import create_schema_org_model
    from schorg.Diagnostic import create_diagnostic_model
    from schorg.Diagnostic import Diagnostic

    a = create_schema_org_model(type_=DiagnosticInheritedProperties)
    b = create_schema_org_model(type_=DiagnosticProperties)
    c = create_schema_org_model(type_=DiagnosticAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Diagnostic.schema()
    create_diagnostic_model(DiagnosticAllProperties).schema()
    create_diagnostic_model(DiagnosticInheritedProperties).schema()
    create_diagnostic_model(DiagnosticProperties).schema()


def Courthouse_test():
    from schorg.Courthouse import CourthouseInheritedProperties
    from schorg.Courthouse import CourthouseProperties
    from schorg.Courthouse import CourthouseAllProperties
    from schorg.Courthouse import create_schema_org_model
    from schorg.Courthouse import create_courthouse_model
    from schorg.Courthouse import Courthouse

    a = create_schema_org_model(type_=CourthouseInheritedProperties)
    b = create_schema_org_model(type_=CourthouseProperties)
    c = create_schema_org_model(type_=CourthouseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Courthouse.schema()
    create_courthouse_model(CourthouseAllProperties).schema()
    create_courthouse_model(CourthouseInheritedProperties).schema()
    create_courthouse_model(CourthouseProperties).schema()


def ComedyClub_test():
    from schorg.ComedyClub import ComedyClubInheritedProperties
    from schorg.ComedyClub import ComedyClubProperties
    from schorg.ComedyClub import ComedyClubAllProperties
    from schorg.ComedyClub import create_schema_org_model
    from schorg.ComedyClub import create_comedyclub_model
    from schorg.ComedyClub import ComedyClub

    a = create_schema_org_model(type_=ComedyClubInheritedProperties)
    b = create_schema_org_model(type_=ComedyClubProperties)
    c = create_schema_org_model(type_=ComedyClubAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ComedyClub.schema()
    create_comedyclub_model(ComedyClubAllProperties).schema()
    create_comedyclub_model(ComedyClubInheritedProperties).schema()
    create_comedyclub_model(ComedyClubProperties).schema()


def AerobicActivity_test():
    from schorg.AerobicActivity import AerobicActivityInheritedProperties
    from schorg.AerobicActivity import AerobicActivityProperties
    from schorg.AerobicActivity import AerobicActivityAllProperties
    from schorg.AerobicActivity import create_schema_org_model
    from schorg.AerobicActivity import create_aerobicactivity_model
    from schorg.AerobicActivity import AerobicActivity

    a = create_schema_org_model(type_=AerobicActivityInheritedProperties)
    b = create_schema_org_model(type_=AerobicActivityProperties)
    c = create_schema_org_model(type_=AerobicActivityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AerobicActivity.schema()
    create_aerobicactivity_model(AerobicActivityAllProperties).schema()
    create_aerobicactivity_model(AerobicActivityInheritedProperties).schema()
    create_aerobicactivity_model(AerobicActivityProperties).schema()


def SpreadsheetDigitalDocument_test():
    from schorg.SpreadsheetDigitalDocument import (
        SpreadsheetDigitalDocumentInheritedProperties,
    )
    from schorg.SpreadsheetDigitalDocument import SpreadsheetDigitalDocumentProperties
    from schorg.SpreadsheetDigitalDocument import (
        SpreadsheetDigitalDocumentAllProperties,
    )
    from schorg.SpreadsheetDigitalDocument import create_schema_org_model
    from schorg.SpreadsheetDigitalDocument import (
        create_spreadsheetdigitaldocument_model,
    )
    from schorg.SpreadsheetDigitalDocument import SpreadsheetDigitalDocument

    a = create_schema_org_model(type_=SpreadsheetDigitalDocumentInheritedProperties)
    b = create_schema_org_model(type_=SpreadsheetDigitalDocumentProperties)
    c = create_schema_org_model(type_=SpreadsheetDigitalDocumentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SpreadsheetDigitalDocument.schema()
    create_spreadsheetdigitaldocument_model(
        SpreadsheetDigitalDocumentAllProperties
    ).schema()
    create_spreadsheetdigitaldocument_model(
        SpreadsheetDigitalDocumentInheritedProperties
    ).schema()
    create_spreadsheetdigitaldocument_model(
        SpreadsheetDigitalDocumentProperties
    ).schema()


def Locksmith_test():
    from schorg.Locksmith import LocksmithInheritedProperties
    from schorg.Locksmith import LocksmithProperties
    from schorg.Locksmith import LocksmithAllProperties
    from schorg.Locksmith import create_schema_org_model
    from schorg.Locksmith import create_locksmith_model
    from schorg.Locksmith import Locksmith

    a = create_schema_org_model(type_=LocksmithInheritedProperties)
    b = create_schema_org_model(type_=LocksmithProperties)
    c = create_schema_org_model(type_=LocksmithAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Locksmith.schema()
    create_locksmith_model(LocksmithAllProperties).schema()
    create_locksmith_model(LocksmithInheritedProperties).schema()
    create_locksmith_model(LocksmithProperties).schema()


def Boolean_test():
    from schorg.Boolean import BooleanInheritedProperties
    from schorg.Boolean import BooleanProperties
    from schorg.Boolean import BooleanAllProperties
    from schorg.Boolean import create_schema_org_model
    from schorg.Boolean import create_boolean_model
    from schorg.Boolean import Boolean

    a = create_schema_org_model(type_=BooleanInheritedProperties)
    b = create_schema_org_model(type_=BooleanProperties)
    c = create_schema_org_model(type_=BooleanAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Boolean.schema()
    create_boolean_model(BooleanAllProperties).schema()
    create_boolean_model(BooleanInheritedProperties).schema()
    create_boolean_model(BooleanProperties).schema()


def True__test():
    from schorg.True_ import True_InheritedProperties
    from schorg.True_ import True_Properties
    from schorg.True_ import True_AllProperties
    from schorg.True_ import create_schema_org_model
    from schorg.True_ import create_true__model
    from schorg.True_ import True_

    a = create_schema_org_model(type_=True_InheritedProperties)
    b = create_schema_org_model(type_=True_Properties)
    c = create_schema_org_model(type_=True_AllProperties)
    a.schema()
    b.schema()
    c.schema()
    True_.schema()
    create_true__model(True_AllProperties).schema()
    create_true__model(True_InheritedProperties).schema()
    create_true__model(True_Properties).schema()


def DietarySupplement_test():
    from schorg.DietarySupplement import DietarySupplementInheritedProperties
    from schorg.DietarySupplement import DietarySupplementProperties
    from schorg.DietarySupplement import DietarySupplementAllProperties
    from schorg.DietarySupplement import create_schema_org_model
    from schorg.DietarySupplement import create_dietarysupplement_model
    from schorg.DietarySupplement import DietarySupplement

    a = create_schema_org_model(type_=DietarySupplementInheritedProperties)
    b = create_schema_org_model(type_=DietarySupplementProperties)
    c = create_schema_org_model(type_=DietarySupplementAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DietarySupplement.schema()
    create_dietarysupplement_model(DietarySupplementAllProperties).schema()
    create_dietarysupplement_model(DietarySupplementInheritedProperties).schema()
    create_dietarysupplement_model(DietarySupplementProperties).schema()


def WeaponConsideration_test():
    from schorg.WeaponConsideration import WeaponConsiderationInheritedProperties
    from schorg.WeaponConsideration import WeaponConsiderationProperties
    from schorg.WeaponConsideration import WeaponConsiderationAllProperties
    from schorg.WeaponConsideration import create_schema_org_model
    from schorg.WeaponConsideration import create_weaponconsideration_model
    from schorg.WeaponConsideration import WeaponConsideration

    a = create_schema_org_model(type_=WeaponConsiderationInheritedProperties)
    b = create_schema_org_model(type_=WeaponConsiderationProperties)
    c = create_schema_org_model(type_=WeaponConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WeaponConsideration.schema()
    create_weaponconsideration_model(WeaponConsiderationAllProperties).schema()
    create_weaponconsideration_model(WeaponConsiderationInheritedProperties).schema()
    create_weaponconsideration_model(WeaponConsiderationProperties).schema()


def WearableSizeSystemUS_test():
    from schorg.WearableSizeSystemUS import WearableSizeSystemUSInheritedProperties
    from schorg.WearableSizeSystemUS import WearableSizeSystemUSProperties
    from schorg.WearableSizeSystemUS import WearableSizeSystemUSAllProperties
    from schorg.WearableSizeSystemUS import create_schema_org_model
    from schorg.WearableSizeSystemUS import create_wearablesizesystemus_model
    from schorg.WearableSizeSystemUS import WearableSizeSystemUS

    a = create_schema_org_model(type_=WearableSizeSystemUSInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemUSProperties)
    c = create_schema_org_model(type_=WearableSizeSystemUSAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemUS.schema()
    create_wearablesizesystemus_model(WearableSizeSystemUSAllProperties).schema()
    create_wearablesizesystemus_model(WearableSizeSystemUSInheritedProperties).schema()
    create_wearablesizesystemus_model(WearableSizeSystemUSProperties).schema()


def Withdrawn_test():
    from schorg.Withdrawn import WithdrawnInheritedProperties
    from schorg.Withdrawn import WithdrawnProperties
    from schorg.Withdrawn import WithdrawnAllProperties
    from schorg.Withdrawn import create_schema_org_model
    from schorg.Withdrawn import create_withdrawn_model
    from schorg.Withdrawn import Withdrawn

    a = create_schema_org_model(type_=WithdrawnInheritedProperties)
    b = create_schema_org_model(type_=WithdrawnProperties)
    c = create_schema_org_model(type_=WithdrawnAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Withdrawn.schema()
    create_withdrawn_model(WithdrawnAllProperties).schema()
    create_withdrawn_model(WithdrawnInheritedProperties).schema()
    create_withdrawn_model(WithdrawnProperties).schema()


def OwnershipInfo_test():
    from schorg.OwnershipInfo import OwnershipInfoInheritedProperties
    from schorg.OwnershipInfo import OwnershipInfoProperties
    from schorg.OwnershipInfo import OwnershipInfoAllProperties
    from schorg.OwnershipInfo import create_schema_org_model
    from schorg.OwnershipInfo import create_ownershipinfo_model
    from schorg.OwnershipInfo import OwnershipInfo

    a = create_schema_org_model(type_=OwnershipInfoInheritedProperties)
    b = create_schema_org_model(type_=OwnershipInfoProperties)
    c = create_schema_org_model(type_=OwnershipInfoAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OwnershipInfo.schema()
    create_ownershipinfo_model(OwnershipInfoAllProperties).schema()
    create_ownershipinfo_model(OwnershipInfoInheritedProperties).schema()
    create_ownershipinfo_model(OwnershipInfoProperties).schema()


def Completed_test():
    from schorg.Completed import CompletedInheritedProperties
    from schorg.Completed import CompletedProperties
    from schorg.Completed import CompletedAllProperties
    from schorg.Completed import create_schema_org_model
    from schorg.Completed import create_completed_model
    from schorg.Completed import Completed

    a = create_schema_org_model(type_=CompletedInheritedProperties)
    b = create_schema_org_model(type_=CompletedProperties)
    c = create_schema_org_model(type_=CompletedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Completed.schema()
    create_completed_model(CompletedAllProperties).schema()
    create_completed_model(CompletedInheritedProperties).schema()
    create_completed_model(CompletedProperties).schema()


def NoteDigitalDocument_test():
    from schorg.NoteDigitalDocument import NoteDigitalDocumentInheritedProperties
    from schorg.NoteDigitalDocument import NoteDigitalDocumentProperties
    from schorg.NoteDigitalDocument import NoteDigitalDocumentAllProperties
    from schorg.NoteDigitalDocument import create_schema_org_model
    from schorg.NoteDigitalDocument import create_notedigitaldocument_model
    from schorg.NoteDigitalDocument import NoteDigitalDocument

    a = create_schema_org_model(type_=NoteDigitalDocumentInheritedProperties)
    b = create_schema_org_model(type_=NoteDigitalDocumentProperties)
    c = create_schema_org_model(type_=NoteDigitalDocumentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NoteDigitalDocument.schema()
    create_notedigitaldocument_model(NoteDigitalDocumentAllProperties).schema()
    create_notedigitaldocument_model(NoteDigitalDocumentInheritedProperties).schema()
    create_notedigitaldocument_model(NoteDigitalDocumentProperties).schema()


def Float_test():
    from schorg.Float import FloatInheritedProperties
    from schorg.Float import FloatProperties
    from schorg.Float import FloatAllProperties
    from schorg.Float import create_schema_org_model
    from schorg.Float import create_float_model
    from schorg.Float import Float

    a = create_schema_org_model(type_=FloatInheritedProperties)
    b = create_schema_org_model(type_=FloatProperties)
    c = create_schema_org_model(type_=FloatAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Float.schema()
    create_float_model(FloatAllProperties).schema()
    create_float_model(FloatInheritedProperties).schema()
    create_float_model(FloatProperties).schema()


def Consortium_test():
    from schorg.Consortium import ConsortiumInheritedProperties
    from schorg.Consortium import ConsortiumProperties
    from schorg.Consortium import ConsortiumAllProperties
    from schorg.Consortium import create_schema_org_model
    from schorg.Consortium import create_consortium_model
    from schorg.Consortium import Consortium

    a = create_schema_org_model(type_=ConsortiumInheritedProperties)
    b = create_schema_org_model(type_=ConsortiumProperties)
    c = create_schema_org_model(type_=ConsortiumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Consortium.schema()
    create_consortium_model(ConsortiumAllProperties).schema()
    create_consortium_model(ConsortiumInheritedProperties).schema()
    create_consortium_model(ConsortiumProperties).schema()


def PrescriptionOnly_test():
    from schorg.PrescriptionOnly import PrescriptionOnlyInheritedProperties
    from schorg.PrescriptionOnly import PrescriptionOnlyProperties
    from schorg.PrescriptionOnly import PrescriptionOnlyAllProperties
    from schorg.PrescriptionOnly import create_schema_org_model
    from schorg.PrescriptionOnly import create_prescriptiononly_model
    from schorg.PrescriptionOnly import PrescriptionOnly

    a = create_schema_org_model(type_=PrescriptionOnlyInheritedProperties)
    b = create_schema_org_model(type_=PrescriptionOnlyProperties)
    c = create_schema_org_model(type_=PrescriptionOnlyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PrescriptionOnly.schema()
    create_prescriptiononly_model(PrescriptionOnlyAllProperties).schema()
    create_prescriptiononly_model(PrescriptionOnlyInheritedProperties).schema()
    create_prescriptiononly_model(PrescriptionOnlyProperties).schema()


def GovernmentOrganization_test():
    from schorg.GovernmentOrganization import GovernmentOrganizationInheritedProperties
    from schorg.GovernmentOrganization import GovernmentOrganizationProperties
    from schorg.GovernmentOrganization import GovernmentOrganizationAllProperties
    from schorg.GovernmentOrganization import create_schema_org_model
    from schorg.GovernmentOrganization import create_governmentorganization_model
    from schorg.GovernmentOrganization import GovernmentOrganization

    a = create_schema_org_model(type_=GovernmentOrganizationInheritedProperties)
    b = create_schema_org_model(type_=GovernmentOrganizationProperties)
    c = create_schema_org_model(type_=GovernmentOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GovernmentOrganization.schema()
    create_governmentorganization_model(GovernmentOrganizationAllProperties).schema()
    create_governmentorganization_model(
        GovernmentOrganizationInheritedProperties
    ).schema()
    create_governmentorganization_model(GovernmentOrganizationProperties).schema()


def CurrencyConversionService_test():
    from schorg.CurrencyConversionService import (
        CurrencyConversionServiceInheritedProperties,
    )
    from schorg.CurrencyConversionService import CurrencyConversionServiceProperties
    from schorg.CurrencyConversionService import CurrencyConversionServiceAllProperties
    from schorg.CurrencyConversionService import create_schema_org_model
    from schorg.CurrencyConversionService import create_currencyconversionservice_model
    from schorg.CurrencyConversionService import CurrencyConversionService

    a = create_schema_org_model(type_=CurrencyConversionServiceInheritedProperties)
    b = create_schema_org_model(type_=CurrencyConversionServiceProperties)
    c = create_schema_org_model(type_=CurrencyConversionServiceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CurrencyConversionService.schema()
    create_currencyconversionservice_model(
        CurrencyConversionServiceAllProperties
    ).schema()
    create_currencyconversionservice_model(
        CurrencyConversionServiceInheritedProperties
    ).schema()
    create_currencyconversionservice_model(CurrencyConversionServiceProperties).schema()


def UnincorporatedAssociationCharity_test():
    from schorg.UnincorporatedAssociationCharity import (
        UnincorporatedAssociationCharityInheritedProperties,
    )
    from schorg.UnincorporatedAssociationCharity import (
        UnincorporatedAssociationCharityProperties,
    )
    from schorg.UnincorporatedAssociationCharity import (
        UnincorporatedAssociationCharityAllProperties,
    )
    from schorg.UnincorporatedAssociationCharity import create_schema_org_model
    from schorg.UnincorporatedAssociationCharity import (
        create_unincorporatedassociationcharity_model,
    )
    from schorg.UnincorporatedAssociationCharity import UnincorporatedAssociationCharity

    a = create_schema_org_model(
        type_=UnincorporatedAssociationCharityInheritedProperties
    )
    b = create_schema_org_model(type_=UnincorporatedAssociationCharityProperties)
    c = create_schema_org_model(type_=UnincorporatedAssociationCharityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UnincorporatedAssociationCharity.schema()
    create_unincorporatedassociationcharity_model(
        UnincorporatedAssociationCharityAllProperties
    ).schema()
    create_unincorporatedassociationcharity_model(
        UnincorporatedAssociationCharityInheritedProperties
    ).schema()
    create_unincorporatedassociationcharity_model(
        UnincorporatedAssociationCharityProperties
    ).schema()


def WearableSizeGroupGirls_test():
    from schorg.WearableSizeGroupGirls import WearableSizeGroupGirlsInheritedProperties
    from schorg.WearableSizeGroupGirls import WearableSizeGroupGirlsProperties
    from schorg.WearableSizeGroupGirls import WearableSizeGroupGirlsAllProperties
    from schorg.WearableSizeGroupGirls import create_schema_org_model
    from schorg.WearableSizeGroupGirls import create_wearablesizegroupgirls_model
    from schorg.WearableSizeGroupGirls import WearableSizeGroupGirls

    a = create_schema_org_model(type_=WearableSizeGroupGirlsInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupGirlsProperties)
    c = create_schema_org_model(type_=WearableSizeGroupGirlsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupGirls.schema()
    create_wearablesizegroupgirls_model(WearableSizeGroupGirlsAllProperties).schema()
    create_wearablesizegroupgirls_model(
        WearableSizeGroupGirlsInheritedProperties
    ).schema()
    create_wearablesizegroupgirls_model(WearableSizeGroupGirlsProperties).schema()


def AssignAction_test():
    from schorg.AssignAction import AssignActionInheritedProperties
    from schorg.AssignAction import AssignActionProperties
    from schorg.AssignAction import AssignActionAllProperties
    from schorg.AssignAction import create_schema_org_model
    from schorg.AssignAction import create_assignaction_model
    from schorg.AssignAction import AssignAction

    a = create_schema_org_model(type_=AssignActionInheritedProperties)
    b = create_schema_org_model(type_=AssignActionProperties)
    c = create_schema_org_model(type_=AssignActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AssignAction.schema()
    create_assignaction_model(AssignActionAllProperties).schema()
    create_assignaction_model(AssignActionInheritedProperties).schema()
    create_assignaction_model(AssignActionProperties).schema()


def DigitalDocumentPermission_test():
    from schorg.DigitalDocumentPermission import (
        DigitalDocumentPermissionInheritedProperties,
    )
    from schorg.DigitalDocumentPermission import DigitalDocumentPermissionProperties
    from schorg.DigitalDocumentPermission import DigitalDocumentPermissionAllProperties
    from schorg.DigitalDocumentPermission import create_schema_org_model
    from schorg.DigitalDocumentPermission import create_digitaldocumentpermission_model
    from schorg.DigitalDocumentPermission import DigitalDocumentPermission

    a = create_schema_org_model(type_=DigitalDocumentPermissionInheritedProperties)
    b = create_schema_org_model(type_=DigitalDocumentPermissionProperties)
    c = create_schema_org_model(type_=DigitalDocumentPermissionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DigitalDocumentPermission.schema()
    create_digitaldocumentpermission_model(
        DigitalDocumentPermissionAllProperties
    ).schema()
    create_digitaldocumentpermission_model(
        DigitalDocumentPermissionInheritedProperties
    ).schema()
    create_digitaldocumentpermission_model(DigitalDocumentPermissionProperties).schema()


def BookmarkAction_test():
    from schorg.BookmarkAction import BookmarkActionInheritedProperties
    from schorg.BookmarkAction import BookmarkActionProperties
    from schorg.BookmarkAction import BookmarkActionAllProperties
    from schorg.BookmarkAction import create_schema_org_model
    from schorg.BookmarkAction import create_bookmarkaction_model
    from schorg.BookmarkAction import BookmarkAction

    a = create_schema_org_model(type_=BookmarkActionInheritedProperties)
    b = create_schema_org_model(type_=BookmarkActionProperties)
    c = create_schema_org_model(type_=BookmarkActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BookmarkAction.schema()
    create_bookmarkaction_model(BookmarkActionAllProperties).schema()
    create_bookmarkaction_model(BookmarkActionInheritedProperties).schema()
    create_bookmarkaction_model(BookmarkActionProperties).schema()


def BedDetails_test():
    from schorg.BedDetails import BedDetailsInheritedProperties
    from schorg.BedDetails import BedDetailsProperties
    from schorg.BedDetails import BedDetailsAllProperties
    from schorg.BedDetails import create_schema_org_model
    from schorg.BedDetails import create_beddetails_model
    from schorg.BedDetails import BedDetails

    a = create_schema_org_model(type_=BedDetailsInheritedProperties)
    b = create_schema_org_model(type_=BedDetailsProperties)
    c = create_schema_org_model(type_=BedDetailsAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BedDetails.schema()
    create_beddetails_model(BedDetailsAllProperties).schema()
    create_beddetails_model(BedDetailsInheritedProperties).schema()
    create_beddetails_model(BedDetailsProperties).schema()


def ReturnLabelCustomerResponsibility_test():
    from schorg.ReturnLabelCustomerResponsibility import (
        ReturnLabelCustomerResponsibilityInheritedProperties,
    )
    from schorg.ReturnLabelCustomerResponsibility import (
        ReturnLabelCustomerResponsibilityProperties,
    )
    from schorg.ReturnLabelCustomerResponsibility import (
        ReturnLabelCustomerResponsibilityAllProperties,
    )
    from schorg.ReturnLabelCustomerResponsibility import create_schema_org_model
    from schorg.ReturnLabelCustomerResponsibility import (
        create_returnlabelcustomerresponsibility_model,
    )
    from schorg.ReturnLabelCustomerResponsibility import (
        ReturnLabelCustomerResponsibility,
    )

    a = create_schema_org_model(
        type_=ReturnLabelCustomerResponsibilityInheritedProperties
    )
    b = create_schema_org_model(type_=ReturnLabelCustomerResponsibilityProperties)
    c = create_schema_org_model(type_=ReturnLabelCustomerResponsibilityAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnLabelCustomerResponsibility.schema()
    create_returnlabelcustomerresponsibility_model(
        ReturnLabelCustomerResponsibilityAllProperties
    ).schema()
    create_returnlabelcustomerresponsibility_model(
        ReturnLabelCustomerResponsibilityInheritedProperties
    ).schema()
    create_returnlabelcustomerresponsibility_model(
        ReturnLabelCustomerResponsibilityProperties
    ).schema()


def EventPostponed_test():
    from schorg.EventPostponed import EventPostponedInheritedProperties
    from schorg.EventPostponed import EventPostponedProperties
    from schorg.EventPostponed import EventPostponedAllProperties
    from schorg.EventPostponed import create_schema_org_model
    from schorg.EventPostponed import create_eventpostponed_model
    from schorg.EventPostponed import EventPostponed

    a = create_schema_org_model(type_=EventPostponedInheritedProperties)
    b = create_schema_org_model(type_=EventPostponedProperties)
    c = create_schema_org_model(type_=EventPostponedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EventPostponed.schema()
    create_eventpostponed_model(EventPostponedAllProperties).schema()
    create_eventpostponed_model(EventPostponedInheritedProperties).schema()
    create_eventpostponed_model(EventPostponedProperties).schema()


def Psychiatric_test():
    from schorg.Psychiatric import PsychiatricInheritedProperties
    from schorg.Psychiatric import PsychiatricProperties
    from schorg.Psychiatric import PsychiatricAllProperties
    from schorg.Psychiatric import create_schema_org_model
    from schorg.Psychiatric import create_psychiatric_model
    from schorg.Psychiatric import Psychiatric

    a = create_schema_org_model(type_=PsychiatricInheritedProperties)
    b = create_schema_org_model(type_=PsychiatricProperties)
    c = create_schema_org_model(type_=PsychiatricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Psychiatric.schema()
    create_psychiatric_model(PsychiatricAllProperties).schema()
    create_psychiatric_model(PsychiatricInheritedProperties).schema()
    create_psychiatric_model(PsychiatricProperties).schema()


def Muscle_test():
    from schorg.Muscle import MuscleInheritedProperties
    from schorg.Muscle import MuscleProperties
    from schorg.Muscle import MuscleAllProperties
    from schorg.Muscle import create_schema_org_model
    from schorg.Muscle import create_muscle_model
    from schorg.Muscle import Muscle

    a = create_schema_org_model(type_=MuscleInheritedProperties)
    b = create_schema_org_model(type_=MuscleProperties)
    c = create_schema_org_model(type_=MuscleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Muscle.schema()
    create_muscle_model(MuscleAllProperties).schema()
    create_muscle_model(MuscleInheritedProperties).schema()
    create_muscle_model(MuscleProperties).schema()


def Ultrasound_test():
    from schorg.Ultrasound import UltrasoundInheritedProperties
    from schorg.Ultrasound import UltrasoundProperties
    from schorg.Ultrasound import UltrasoundAllProperties
    from schorg.Ultrasound import create_schema_org_model
    from schorg.Ultrasound import create_ultrasound_model
    from schorg.Ultrasound import Ultrasound

    a = create_schema_org_model(type_=UltrasoundInheritedProperties)
    b = create_schema_org_model(type_=UltrasoundProperties)
    c = create_schema_org_model(type_=UltrasoundAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Ultrasound.schema()
    create_ultrasound_model(UltrasoundAllProperties).schema()
    create_ultrasound_model(UltrasoundInheritedProperties).schema()
    create_ultrasound_model(UltrasoundProperties).schema()


def BroadcastFrequencySpecification_test():
    from schorg.BroadcastFrequencySpecification import (
        BroadcastFrequencySpecificationInheritedProperties,
    )
    from schorg.BroadcastFrequencySpecification import (
        BroadcastFrequencySpecificationProperties,
    )
    from schorg.BroadcastFrequencySpecification import (
        BroadcastFrequencySpecificationAllProperties,
    )
    from schorg.BroadcastFrequencySpecification import create_schema_org_model
    from schorg.BroadcastFrequencySpecification import (
        create_broadcastfrequencyspecification_model,
    )
    from schorg.BroadcastFrequencySpecification import BroadcastFrequencySpecification

    a = create_schema_org_model(
        type_=BroadcastFrequencySpecificationInheritedProperties
    )
    b = create_schema_org_model(type_=BroadcastFrequencySpecificationProperties)
    c = create_schema_org_model(type_=BroadcastFrequencySpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BroadcastFrequencySpecification.schema()
    create_broadcastfrequencyspecification_model(
        BroadcastFrequencySpecificationAllProperties
    ).schema()
    create_broadcastfrequencyspecification_model(
        BroadcastFrequencySpecificationInheritedProperties
    ).schema()
    create_broadcastfrequencyspecification_model(
        BroadcastFrequencySpecificationProperties
    ).schema()


def TripleBlindedTrial_test():
    from schorg.TripleBlindedTrial import TripleBlindedTrialInheritedProperties
    from schorg.TripleBlindedTrial import TripleBlindedTrialProperties
    from schorg.TripleBlindedTrial import TripleBlindedTrialAllProperties
    from schorg.TripleBlindedTrial import create_schema_org_model
    from schorg.TripleBlindedTrial import create_tripleblindedtrial_model
    from schorg.TripleBlindedTrial import TripleBlindedTrial

    a = create_schema_org_model(type_=TripleBlindedTrialInheritedProperties)
    b = create_schema_org_model(type_=TripleBlindedTrialProperties)
    c = create_schema_org_model(type_=TripleBlindedTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TripleBlindedTrial.schema()
    create_tripleblindedtrial_model(TripleBlindedTrialAllProperties).schema()
    create_tripleblindedtrial_model(TripleBlindedTrialInheritedProperties).schema()
    create_tripleblindedtrial_model(TripleBlindedTrialProperties).schema()


def AllergiesHealthAspect_test():
    from schorg.AllergiesHealthAspect import AllergiesHealthAspectInheritedProperties
    from schorg.AllergiesHealthAspect import AllergiesHealthAspectProperties
    from schorg.AllergiesHealthAspect import AllergiesHealthAspectAllProperties
    from schorg.AllergiesHealthAspect import create_schema_org_model
    from schorg.AllergiesHealthAspect import create_allergieshealthaspect_model
    from schorg.AllergiesHealthAspect import AllergiesHealthAspect

    a = create_schema_org_model(type_=AllergiesHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=AllergiesHealthAspectProperties)
    c = create_schema_org_model(type_=AllergiesHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AllergiesHealthAspect.schema()
    create_allergieshealthaspect_model(AllergiesHealthAspectAllProperties).schema()
    create_allergieshealthaspect_model(
        AllergiesHealthAspectInheritedProperties
    ).schema()
    create_allergieshealthaspect_model(AllergiesHealthAspectProperties).schema()


def OfflineTemporarily_test():
    from schorg.OfflineTemporarily import OfflineTemporarilyInheritedProperties
    from schorg.OfflineTemporarily import OfflineTemporarilyProperties
    from schorg.OfflineTemporarily import OfflineTemporarilyAllProperties
    from schorg.OfflineTemporarily import create_schema_org_model
    from schorg.OfflineTemporarily import create_offlinetemporarily_model
    from schorg.OfflineTemporarily import OfflineTemporarily

    a = create_schema_org_model(type_=OfflineTemporarilyInheritedProperties)
    b = create_schema_org_model(type_=OfflineTemporarilyProperties)
    c = create_schema_org_model(type_=OfflineTemporarilyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfflineTemporarily.schema()
    create_offlinetemporarily_model(OfflineTemporarilyAllProperties).schema()
    create_offlinetemporarily_model(OfflineTemporarilyInheritedProperties).schema()
    create_offlinetemporarily_model(OfflineTemporarilyProperties).schema()


def Nose_test():
    from schorg.Nose import NoseInheritedProperties
    from schorg.Nose import NoseProperties
    from schorg.Nose import NoseAllProperties
    from schorg.Nose import create_schema_org_model
    from schorg.Nose import create_nose_model
    from schorg.Nose import Nose

    a = create_schema_org_model(type_=NoseInheritedProperties)
    b = create_schema_org_model(type_=NoseProperties)
    c = create_schema_org_model(type_=NoseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nose.schema()
    create_nose_model(NoseAllProperties).schema()
    create_nose_model(NoseInheritedProperties).schema()
    create_nose_model(NoseProperties).schema()


def FundingAgency_test():
    from schorg.FundingAgency import FundingAgencyInheritedProperties
    from schorg.FundingAgency import FundingAgencyProperties
    from schorg.FundingAgency import FundingAgencyAllProperties
    from schorg.FundingAgency import create_schema_org_model
    from schorg.FundingAgency import create_fundingagency_model
    from schorg.FundingAgency import FundingAgency

    a = create_schema_org_model(type_=FundingAgencyInheritedProperties)
    b = create_schema_org_model(type_=FundingAgencyProperties)
    c = create_schema_org_model(type_=FundingAgencyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FundingAgency.schema()
    create_fundingagency_model(FundingAgencyAllProperties).schema()
    create_fundingagency_model(FundingAgencyInheritedProperties).schema()
    create_fundingagency_model(FundingAgencyProperties).schema()


def CourseInstance_test():
    from schorg.CourseInstance import CourseInstanceInheritedProperties
    from schorg.CourseInstance import CourseInstanceProperties
    from schorg.CourseInstance import CourseInstanceAllProperties
    from schorg.CourseInstance import create_schema_org_model
    from schorg.CourseInstance import create_courseinstance_model
    from schorg.CourseInstance import CourseInstance

    a = create_schema_org_model(type_=CourseInstanceInheritedProperties)
    b = create_schema_org_model(type_=CourseInstanceProperties)
    c = create_schema_org_model(type_=CourseInstanceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CourseInstance.schema()
    create_courseinstance_model(CourseInstanceAllProperties).schema()
    create_courseinstance_model(CourseInstanceInheritedProperties).schema()
    create_courseinstance_model(CourseInstanceProperties).schema()


def PlasticSurgery_test():
    from schorg.PlasticSurgery import PlasticSurgeryInheritedProperties
    from schorg.PlasticSurgery import PlasticSurgeryProperties
    from schorg.PlasticSurgery import PlasticSurgeryAllProperties
    from schorg.PlasticSurgery import create_schema_org_model
    from schorg.PlasticSurgery import create_plasticsurgery_model
    from schorg.PlasticSurgery import PlasticSurgery

    a = create_schema_org_model(type_=PlasticSurgeryInheritedProperties)
    b = create_schema_org_model(type_=PlasticSurgeryProperties)
    c = create_schema_org_model(type_=PlasticSurgeryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PlasticSurgery.schema()
    create_plasticsurgery_model(PlasticSurgeryAllProperties).schema()
    create_plasticsurgery_model(PlasticSurgeryInheritedProperties).schema()
    create_plasticsurgery_model(PlasticSurgeryProperties).schema()


def Dentistry_test():
    from schorg.Dentistry import DentistryInheritedProperties
    from schorg.Dentistry import DentistryProperties
    from schorg.Dentistry import DentistryAllProperties
    from schorg.Dentistry import create_schema_org_model
    from schorg.Dentistry import create_dentistry_model
    from schorg.Dentistry import Dentistry

    a = create_schema_org_model(type_=DentistryInheritedProperties)
    b = create_schema_org_model(type_=DentistryProperties)
    c = create_schema_org_model(type_=DentistryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Dentistry.schema()
    create_dentistry_model(DentistryAllProperties).schema()
    create_dentistry_model(DentistryInheritedProperties).schema()
    create_dentistry_model(DentistryProperties).schema()


def ExchangeRateSpecification_test():
    from schorg.ExchangeRateSpecification import (
        ExchangeRateSpecificationInheritedProperties,
    )
    from schorg.ExchangeRateSpecification import ExchangeRateSpecificationProperties
    from schorg.ExchangeRateSpecification import ExchangeRateSpecificationAllProperties
    from schorg.ExchangeRateSpecification import create_schema_org_model
    from schorg.ExchangeRateSpecification import create_exchangeratespecification_model
    from schorg.ExchangeRateSpecification import ExchangeRateSpecification

    a = create_schema_org_model(type_=ExchangeRateSpecificationInheritedProperties)
    b = create_schema_org_model(type_=ExchangeRateSpecificationProperties)
    c = create_schema_org_model(type_=ExchangeRateSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExchangeRateSpecification.schema()
    create_exchangeratespecification_model(
        ExchangeRateSpecificationAllProperties
    ).schema()
    create_exchangeratespecification_model(
        ExchangeRateSpecificationInheritedProperties
    ).schema()
    create_exchangeratespecification_model(ExchangeRateSpecificationProperties).schema()


def SportsEvent_test():
    from schorg.SportsEvent import SportsEventInheritedProperties
    from schorg.SportsEvent import SportsEventProperties
    from schorg.SportsEvent import SportsEventAllProperties
    from schorg.SportsEvent import create_schema_org_model
    from schorg.SportsEvent import create_sportsevent_model
    from schorg.SportsEvent import SportsEvent

    a = create_schema_org_model(type_=SportsEventInheritedProperties)
    b = create_schema_org_model(type_=SportsEventProperties)
    c = create_schema_org_model(type_=SportsEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SportsEvent.schema()
    create_sportsevent_model(SportsEventAllProperties).schema()
    create_sportsevent_model(SportsEventInheritedProperties).schema()
    create_sportsevent_model(SportsEventProperties).schema()


def Nonprofit501c17_test():
    from schorg.Nonprofit501c17 import Nonprofit501c17InheritedProperties
    from schorg.Nonprofit501c17 import Nonprofit501c17Properties
    from schorg.Nonprofit501c17 import Nonprofit501c17AllProperties
    from schorg.Nonprofit501c17 import create_schema_org_model
    from schorg.Nonprofit501c17 import create_nonprofit501c17_model
    from schorg.Nonprofit501c17 import Nonprofit501c17

    a = create_schema_org_model(type_=Nonprofit501c17InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c17Properties)
    c = create_schema_org_model(type_=Nonprofit501c17AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c17.schema()
    create_nonprofit501c17_model(Nonprofit501c17AllProperties).schema()
    create_nonprofit501c17_model(Nonprofit501c17InheritedProperties).schema()
    create_nonprofit501c17_model(Nonprofit501c17Properties).schema()


def MedicalCause_test():
    from schorg.MedicalCause import MedicalCauseInheritedProperties
    from schorg.MedicalCause import MedicalCauseProperties
    from schorg.MedicalCause import MedicalCauseAllProperties
    from schorg.MedicalCause import create_schema_org_model
    from schorg.MedicalCause import create_medicalcause_model
    from schorg.MedicalCause import MedicalCause

    a = create_schema_org_model(type_=MedicalCauseInheritedProperties)
    b = create_schema_org_model(type_=MedicalCauseProperties)
    c = create_schema_org_model(type_=MedicalCauseAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalCause.schema()
    create_medicalcause_model(MedicalCauseAllProperties).schema()
    create_medicalcause_model(MedicalCauseInheritedProperties).schema()
    create_medicalcause_model(MedicalCauseProperties).schema()


def HealthPlanFormulary_test():
    from schorg.HealthPlanFormulary import HealthPlanFormularyInheritedProperties
    from schorg.HealthPlanFormulary import HealthPlanFormularyProperties
    from schorg.HealthPlanFormulary import HealthPlanFormularyAllProperties
    from schorg.HealthPlanFormulary import create_schema_org_model
    from schorg.HealthPlanFormulary import create_healthplanformulary_model
    from schorg.HealthPlanFormulary import HealthPlanFormulary

    a = create_schema_org_model(type_=HealthPlanFormularyInheritedProperties)
    b = create_schema_org_model(type_=HealthPlanFormularyProperties)
    c = create_schema_org_model(type_=HealthPlanFormularyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HealthPlanFormulary.schema()
    create_healthplanformulary_model(HealthPlanFormularyAllProperties).schema()
    create_healthplanformulary_model(HealthPlanFormularyInheritedProperties).schema()
    create_healthplanformulary_model(HealthPlanFormularyProperties).schema()


def SpokenWordAlbum_test():
    from schorg.SpokenWordAlbum import SpokenWordAlbumInheritedProperties
    from schorg.SpokenWordAlbum import SpokenWordAlbumProperties
    from schorg.SpokenWordAlbum import SpokenWordAlbumAllProperties
    from schorg.SpokenWordAlbum import create_schema_org_model
    from schorg.SpokenWordAlbum import create_spokenwordalbum_model
    from schorg.SpokenWordAlbum import SpokenWordAlbum

    a = create_schema_org_model(type_=SpokenWordAlbumInheritedProperties)
    b = create_schema_org_model(type_=SpokenWordAlbumProperties)
    c = create_schema_org_model(type_=SpokenWordAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SpokenWordAlbum.schema()
    create_spokenwordalbum_model(SpokenWordAlbumAllProperties).schema()
    create_spokenwordalbum_model(SpokenWordAlbumInheritedProperties).schema()
    create_spokenwordalbum_model(SpokenWordAlbumProperties).schema()


def FilmAction_test():
    from schorg.FilmAction import FilmActionInheritedProperties
    from schorg.FilmAction import FilmActionProperties
    from schorg.FilmAction import FilmActionAllProperties
    from schorg.FilmAction import create_schema_org_model
    from schorg.FilmAction import create_filmaction_model
    from schorg.FilmAction import FilmAction

    a = create_schema_org_model(type_=FilmActionInheritedProperties)
    b = create_schema_org_model(type_=FilmActionProperties)
    c = create_schema_org_model(type_=FilmActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FilmAction.schema()
    create_filmaction_model(FilmActionAllProperties).schema()
    create_filmaction_model(FilmActionInheritedProperties).schema()
    create_filmaction_model(FilmActionProperties).schema()


def SelfStorage_test():
    from schorg.SelfStorage import SelfStorageInheritedProperties
    from schorg.SelfStorage import SelfStorageProperties
    from schorg.SelfStorage import SelfStorageAllProperties
    from schorg.SelfStorage import create_schema_org_model
    from schorg.SelfStorage import create_selfstorage_model
    from schorg.SelfStorage import SelfStorage

    a = create_schema_org_model(type_=SelfStorageInheritedProperties)
    b = create_schema_org_model(type_=SelfStorageProperties)
    c = create_schema_org_model(type_=SelfStorageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SelfStorage.schema()
    create_selfstorage_model(SelfStorageAllProperties).schema()
    create_selfstorage_model(SelfStorageInheritedProperties).schema()
    create_selfstorage_model(SelfStorageProperties).schema()


def WPFooter_test():
    from schorg.WPFooter import WPFooterInheritedProperties
    from schorg.WPFooter import WPFooterProperties
    from schorg.WPFooter import WPFooterAllProperties
    from schorg.WPFooter import create_schema_org_model
    from schorg.WPFooter import create_wpfooter_model
    from schorg.WPFooter import WPFooter

    a = create_schema_org_model(type_=WPFooterInheritedProperties)
    b = create_schema_org_model(type_=WPFooterProperties)
    c = create_schema_org_model(type_=WPFooterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WPFooter.schema()
    create_wpfooter_model(WPFooterAllProperties).schema()
    create_wpfooter_model(WPFooterInheritedProperties).schema()
    create_wpfooter_model(WPFooterProperties).schema()


def DesktopWebPlatform_test():
    from schorg.DesktopWebPlatform import DesktopWebPlatformInheritedProperties
    from schorg.DesktopWebPlatform import DesktopWebPlatformProperties
    from schorg.DesktopWebPlatform import DesktopWebPlatformAllProperties
    from schorg.DesktopWebPlatform import create_schema_org_model
    from schorg.DesktopWebPlatform import create_desktopwebplatform_model
    from schorg.DesktopWebPlatform import DesktopWebPlatform

    a = create_schema_org_model(type_=DesktopWebPlatformInheritedProperties)
    b = create_schema_org_model(type_=DesktopWebPlatformProperties)
    c = create_schema_org_model(type_=DesktopWebPlatformAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DesktopWebPlatform.schema()
    create_desktopwebplatform_model(DesktopWebPlatformAllProperties).schema()
    create_desktopwebplatform_model(DesktopWebPlatformInheritedProperties).schema()
    create_desktopwebplatform_model(DesktopWebPlatformProperties).schema()


def MulticellularParasite_test():
    from schorg.MulticellularParasite import MulticellularParasiteInheritedProperties
    from schorg.MulticellularParasite import MulticellularParasiteProperties
    from schorg.MulticellularParasite import MulticellularParasiteAllProperties
    from schorg.MulticellularParasite import create_schema_org_model
    from schorg.MulticellularParasite import create_multicellularparasite_model
    from schorg.MulticellularParasite import MulticellularParasite

    a = create_schema_org_model(type_=MulticellularParasiteInheritedProperties)
    b = create_schema_org_model(type_=MulticellularParasiteProperties)
    c = create_schema_org_model(type_=MulticellularParasiteAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MulticellularParasite.schema()
    create_multicellularparasite_model(MulticellularParasiteAllProperties).schema()
    create_multicellularparasite_model(
        MulticellularParasiteInheritedProperties
    ).schema()
    create_multicellularparasite_model(MulticellularParasiteProperties).schema()


def ViolenceConsideration_test():
    from schorg.ViolenceConsideration import ViolenceConsiderationInheritedProperties
    from schorg.ViolenceConsideration import ViolenceConsiderationProperties
    from schorg.ViolenceConsideration import ViolenceConsiderationAllProperties
    from schorg.ViolenceConsideration import create_schema_org_model
    from schorg.ViolenceConsideration import create_violenceconsideration_model
    from schorg.ViolenceConsideration import ViolenceConsideration

    a = create_schema_org_model(type_=ViolenceConsiderationInheritedProperties)
    b = create_schema_org_model(type_=ViolenceConsiderationProperties)
    c = create_schema_org_model(type_=ViolenceConsiderationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ViolenceConsideration.schema()
    create_violenceconsideration_model(ViolenceConsiderationAllProperties).schema()
    create_violenceconsideration_model(
        ViolenceConsiderationInheritedProperties
    ).schema()
    create_violenceconsideration_model(ViolenceConsiderationProperties).schema()


def BodyMeasurementChest_test():
    from schorg.BodyMeasurementChest import BodyMeasurementChestInheritedProperties
    from schorg.BodyMeasurementChest import BodyMeasurementChestProperties
    from schorg.BodyMeasurementChest import BodyMeasurementChestAllProperties
    from schorg.BodyMeasurementChest import create_schema_org_model
    from schorg.BodyMeasurementChest import create_bodymeasurementchest_model
    from schorg.BodyMeasurementChest import BodyMeasurementChest

    a = create_schema_org_model(type_=BodyMeasurementChestInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementChestProperties)
    c = create_schema_org_model(type_=BodyMeasurementChestAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementChest.schema()
    create_bodymeasurementchest_model(BodyMeasurementChestAllProperties).schema()
    create_bodymeasurementchest_model(BodyMeasurementChestInheritedProperties).schema()
    create_bodymeasurementchest_model(BodyMeasurementChestProperties).schema()


def DataFeedItem_test():
    from schorg.DataFeedItem import DataFeedItemInheritedProperties
    from schorg.DataFeedItem import DataFeedItemProperties
    from schorg.DataFeedItem import DataFeedItemAllProperties
    from schorg.DataFeedItem import create_schema_org_model
    from schorg.DataFeedItem import create_datafeeditem_model
    from schorg.DataFeedItem import DataFeedItem

    a = create_schema_org_model(type_=DataFeedItemInheritedProperties)
    b = create_schema_org_model(type_=DataFeedItemProperties)
    c = create_schema_org_model(type_=DataFeedItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DataFeedItem.schema()
    create_datafeeditem_model(DataFeedItemAllProperties).schema()
    create_datafeeditem_model(DataFeedItemInheritedProperties).schema()
    create_datafeeditem_model(DataFeedItemProperties).schema()


def Oncologic_test():
    from schorg.Oncologic import OncologicInheritedProperties
    from schorg.Oncologic import OncologicProperties
    from schorg.Oncologic import OncologicAllProperties
    from schorg.Oncologic import create_schema_org_model
    from schorg.Oncologic import create_oncologic_model
    from schorg.Oncologic import Oncologic

    a = create_schema_org_model(type_=OncologicInheritedProperties)
    b = create_schema_org_model(type_=OncologicProperties)
    c = create_schema_org_model(type_=OncologicAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Oncologic.schema()
    create_oncologic_model(OncologicAllProperties).schema()
    create_oncologic_model(OncologicInheritedProperties).schema()
    create_oncologic_model(OncologicProperties).schema()


def CompoundPriceSpecification_test():
    from schorg.CompoundPriceSpecification import (
        CompoundPriceSpecificationInheritedProperties,
    )
    from schorg.CompoundPriceSpecification import CompoundPriceSpecificationProperties
    from schorg.CompoundPriceSpecification import (
        CompoundPriceSpecificationAllProperties,
    )
    from schorg.CompoundPriceSpecification import create_schema_org_model
    from schorg.CompoundPriceSpecification import (
        create_compoundpricespecification_model,
    )
    from schorg.CompoundPriceSpecification import CompoundPriceSpecification

    a = create_schema_org_model(type_=CompoundPriceSpecificationInheritedProperties)
    b = create_schema_org_model(type_=CompoundPriceSpecificationProperties)
    c = create_schema_org_model(type_=CompoundPriceSpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CompoundPriceSpecification.schema()
    create_compoundpricespecification_model(
        CompoundPriceSpecificationAllProperties
    ).schema()
    create_compoundpricespecification_model(
        CompoundPriceSpecificationInheritedProperties
    ).schema()
    create_compoundpricespecification_model(
        CompoundPriceSpecificationProperties
    ).schema()


def AutoPartsStore_test():
    from schorg.AutoPartsStore import AutoPartsStoreInheritedProperties
    from schorg.AutoPartsStore import AutoPartsStoreProperties
    from schorg.AutoPartsStore import AutoPartsStoreAllProperties
    from schorg.AutoPartsStore import create_schema_org_model
    from schorg.AutoPartsStore import create_autopartsstore_model
    from schorg.AutoPartsStore import AutoPartsStore

    a = create_schema_org_model(type_=AutoPartsStoreInheritedProperties)
    b = create_schema_org_model(type_=AutoPartsStoreProperties)
    c = create_schema_org_model(type_=AutoPartsStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AutoPartsStore.schema()
    create_autopartsstore_model(AutoPartsStoreAllProperties).schema()
    create_autopartsstore_model(AutoPartsStoreInheritedProperties).schema()
    create_autopartsstore_model(AutoPartsStoreProperties).schema()


def DatedMoneySpecification_test():
    from schorg.DatedMoneySpecification import (
        DatedMoneySpecificationInheritedProperties,
    )
    from schorg.DatedMoneySpecification import DatedMoneySpecificationProperties
    from schorg.DatedMoneySpecification import DatedMoneySpecificationAllProperties
    from schorg.DatedMoneySpecification import create_schema_org_model
    from schorg.DatedMoneySpecification import create_datedmoneyspecification_model
    from schorg.DatedMoneySpecification import DatedMoneySpecification

    a = create_schema_org_model(type_=DatedMoneySpecificationInheritedProperties)
    b = create_schema_org_model(type_=DatedMoneySpecificationProperties)
    c = create_schema_org_model(type_=DatedMoneySpecificationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DatedMoneySpecification.schema()
    create_datedmoneyspecification_model(DatedMoneySpecificationAllProperties).schema()
    create_datedmoneyspecification_model(
        DatedMoneySpecificationInheritedProperties
    ).schema()
    create_datedmoneyspecification_model(DatedMoneySpecificationProperties).schema()


def Hospital_test():
    from schorg.Hospital import HospitalInheritedProperties
    from schorg.Hospital import HospitalProperties
    from schorg.Hospital import HospitalAllProperties
    from schorg.Hospital import create_schema_org_model
    from schorg.Hospital import create_hospital_model
    from schorg.Hospital import Hospital

    a = create_schema_org_model(type_=HospitalInheritedProperties)
    b = create_schema_org_model(type_=HospitalProperties)
    c = create_schema_org_model(type_=HospitalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Hospital.schema()
    create_hospital_model(HospitalAllProperties).schema()
    create_hospital_model(HospitalInheritedProperties).schema()
    create_hospital_model(HospitalProperties).schema()


def EndorseAction_test():
    from schorg.EndorseAction import EndorseActionInheritedProperties
    from schorg.EndorseAction import EndorseActionProperties
    from schorg.EndorseAction import EndorseActionAllProperties
    from schorg.EndorseAction import create_schema_org_model
    from schorg.EndorseAction import create_endorseaction_model
    from schorg.EndorseAction import EndorseAction

    a = create_schema_org_model(type_=EndorseActionInheritedProperties)
    b = create_schema_org_model(type_=EndorseActionProperties)
    c = create_schema_org_model(type_=EndorseActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EndorseAction.schema()
    create_endorseaction_model(EndorseActionAllProperties).schema()
    create_endorseaction_model(EndorseActionInheritedProperties).schema()
    create_endorseaction_model(EndorseActionProperties).schema()


def RandomizedTrial_test():
    from schorg.RandomizedTrial import RandomizedTrialInheritedProperties
    from schorg.RandomizedTrial import RandomizedTrialProperties
    from schorg.RandomizedTrial import RandomizedTrialAllProperties
    from schorg.RandomizedTrial import create_schema_org_model
    from schorg.RandomizedTrial import create_randomizedtrial_model
    from schorg.RandomizedTrial import RandomizedTrial

    a = create_schema_org_model(type_=RandomizedTrialInheritedProperties)
    b = create_schema_org_model(type_=RandomizedTrialProperties)
    c = create_schema_org_model(type_=RandomizedTrialAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RandomizedTrial.schema()
    create_randomizedtrial_model(RandomizedTrialAllProperties).schema()
    create_randomizedtrial_model(RandomizedTrialInheritedProperties).schema()
    create_randomizedtrial_model(RandomizedTrialProperties).schema()


def EUEnergyEfficiencyCategoryA2Plus_test():
    from schorg.EUEnergyEfficiencyCategoryA2Plus import (
        EUEnergyEfficiencyCategoryA2PlusInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA2Plus import (
        EUEnergyEfficiencyCategoryA2PlusProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA2Plus import (
        EUEnergyEfficiencyCategoryA2PlusAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA2Plus import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryA2Plus import (
        create_euenergyefficiencycategorya2plus_model,
    )
    from schorg.EUEnergyEfficiencyCategoryA2Plus import EUEnergyEfficiencyCategoryA2Plus

    a = create_schema_org_model(
        type_=EUEnergyEfficiencyCategoryA2PlusInheritedProperties
    )
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA2PlusProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA2PlusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryA2Plus.schema()
    create_euenergyefficiencycategorya2plus_model(
        EUEnergyEfficiencyCategoryA2PlusAllProperties
    ).schema()
    create_euenergyefficiencycategorya2plus_model(
        EUEnergyEfficiencyCategoryA2PlusInheritedProperties
    ).schema()
    create_euenergyefficiencycategorya2plus_model(
        EUEnergyEfficiencyCategoryA2PlusProperties
    ).schema()


def Renal_test():
    from schorg.Renal import RenalInheritedProperties
    from schorg.Renal import RenalProperties
    from schorg.Renal import RenalAllProperties
    from schorg.Renal import create_schema_org_model
    from schorg.Renal import create_renal_model
    from schorg.Renal import Renal

    a = create_schema_org_model(type_=RenalInheritedProperties)
    b = create_schema_org_model(type_=RenalProperties)
    c = create_schema_org_model(type_=RenalAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Renal.schema()
    create_renal_model(RenalAllProperties).schema()
    create_renal_model(RenalInheritedProperties).schema()
    create_renal_model(RenalProperties).schema()


def BoatReservation_test():
    from schorg.BoatReservation import BoatReservationInheritedProperties
    from schorg.BoatReservation import BoatReservationProperties
    from schorg.BoatReservation import BoatReservationAllProperties
    from schorg.BoatReservation import create_schema_org_model
    from schorg.BoatReservation import create_boatreservation_model
    from schorg.BoatReservation import BoatReservation

    a = create_schema_org_model(type_=BoatReservationInheritedProperties)
    b = create_schema_org_model(type_=BoatReservationProperties)
    c = create_schema_org_model(type_=BoatReservationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BoatReservation.schema()
    create_boatreservation_model(BoatReservationAllProperties).schema()
    create_boatreservation_model(BoatReservationInheritedProperties).schema()
    create_boatreservation_model(BoatReservationProperties).schema()


def SuperficialAnatomy_test():
    from schorg.SuperficialAnatomy import SuperficialAnatomyInheritedProperties
    from schorg.SuperficialAnatomy import SuperficialAnatomyProperties
    from schorg.SuperficialAnatomy import SuperficialAnatomyAllProperties
    from schorg.SuperficialAnatomy import create_schema_org_model
    from schorg.SuperficialAnatomy import create_superficialanatomy_model
    from schorg.SuperficialAnatomy import SuperficialAnatomy

    a = create_schema_org_model(type_=SuperficialAnatomyInheritedProperties)
    b = create_schema_org_model(type_=SuperficialAnatomyProperties)
    c = create_schema_org_model(type_=SuperficialAnatomyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SuperficialAnatomy.schema()
    create_superficialanatomy_model(SuperficialAnatomyAllProperties).schema()
    create_superficialanatomy_model(SuperficialAnatomyInheritedProperties).schema()
    create_superficialanatomy_model(SuperficialAnatomyProperties).schema()


def TheaterEvent_test():
    from schorg.TheaterEvent import TheaterEventInheritedProperties
    from schorg.TheaterEvent import TheaterEventProperties
    from schorg.TheaterEvent import TheaterEventAllProperties
    from schorg.TheaterEvent import create_schema_org_model
    from schorg.TheaterEvent import create_theaterevent_model
    from schorg.TheaterEvent import TheaterEvent

    a = create_schema_org_model(type_=TheaterEventInheritedProperties)
    b = create_schema_org_model(type_=TheaterEventProperties)
    c = create_schema_org_model(type_=TheaterEventAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TheaterEvent.schema()
    create_theaterevent_model(TheaterEventAllProperties).schema()
    create_theaterevent_model(TheaterEventInheritedProperties).schema()
    create_theaterevent_model(TheaterEventProperties).schema()


def InStoreOnly_test():
    from schorg.InStoreOnly import InStoreOnlyInheritedProperties
    from schorg.InStoreOnly import InStoreOnlyProperties
    from schorg.InStoreOnly import InStoreOnlyAllProperties
    from schorg.InStoreOnly import create_schema_org_model
    from schorg.InStoreOnly import create_instoreonly_model
    from schorg.InStoreOnly import InStoreOnly

    a = create_schema_org_model(type_=InStoreOnlyInheritedProperties)
    b = create_schema_org_model(type_=InStoreOnlyProperties)
    c = create_schema_org_model(type_=InStoreOnlyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    InStoreOnly.schema()
    create_instoreonly_model(InStoreOnlyAllProperties).schema()
    create_instoreonly_model(InStoreOnlyInheritedProperties).schema()
    create_instoreonly_model(InStoreOnlyProperties).schema()


def ReadAction_test():
    from schorg.ReadAction import ReadActionInheritedProperties
    from schorg.ReadAction import ReadActionProperties
    from schorg.ReadAction import ReadActionAllProperties
    from schorg.ReadAction import create_schema_org_model
    from schorg.ReadAction import create_readaction_model
    from schorg.ReadAction import ReadAction

    a = create_schema_org_model(type_=ReadActionInheritedProperties)
    b = create_schema_org_model(type_=ReadActionProperties)
    c = create_schema_org_model(type_=ReadActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReadAction.schema()
    create_readaction_model(ReadActionAllProperties).schema()
    create_readaction_model(ReadActionInheritedProperties).schema()
    create_readaction_model(ReadActionProperties).schema()


def Answer_test():
    from schorg.Answer import AnswerInheritedProperties
    from schorg.Answer import AnswerProperties
    from schorg.Answer import AnswerAllProperties
    from schorg.Answer import create_schema_org_model
    from schorg.Answer import create_answer_model
    from schorg.Answer import Answer

    a = create_schema_org_model(type_=AnswerInheritedProperties)
    b = create_schema_org_model(type_=AnswerProperties)
    c = create_schema_org_model(type_=AnswerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Answer.schema()
    create_answer_model(AnswerAllProperties).schema()
    create_answer_model(AnswerInheritedProperties).schema()
    create_answer_model(AnswerProperties).schema()


def Registry_test():
    from schorg.Registry import RegistryInheritedProperties
    from schorg.Registry import RegistryProperties
    from schorg.Registry import RegistryAllProperties
    from schorg.Registry import create_schema_org_model
    from schorg.Registry import create_registry_model
    from schorg.Registry import Registry

    a = create_schema_org_model(type_=RegistryInheritedProperties)
    b = create_schema_org_model(type_=RegistryProperties)
    c = create_schema_org_model(type_=RegistryAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Registry.schema()
    create_registry_model(RegistryAllProperties).schema()
    create_registry_model(RegistryInheritedProperties).schema()
    create_registry_model(RegistryProperties).schema()


def ActivationFee_test():
    from schorg.ActivationFee import ActivationFeeInheritedProperties
    from schorg.ActivationFee import ActivationFeeProperties
    from schorg.ActivationFee import ActivationFeeAllProperties
    from schorg.ActivationFee import create_schema_org_model
    from schorg.ActivationFee import create_activationfee_model
    from schorg.ActivationFee import ActivationFee

    a = create_schema_org_model(type_=ActivationFeeInheritedProperties)
    b = create_schema_org_model(type_=ActivationFeeProperties)
    c = create_schema_org_model(type_=ActivationFeeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ActivationFee.schema()
    create_activationfee_model(ActivationFeeAllProperties).schema()
    create_activationfee_model(ActivationFeeInheritedProperties).schema()
    create_activationfee_model(ActivationFeeProperties).schema()


def LaboratoryScience_test():
    from schorg.LaboratoryScience import LaboratoryScienceInheritedProperties
    from schorg.LaboratoryScience import LaboratoryScienceProperties
    from schorg.LaboratoryScience import LaboratoryScienceAllProperties
    from schorg.LaboratoryScience import create_schema_org_model
    from schorg.LaboratoryScience import create_laboratoryscience_model
    from schorg.LaboratoryScience import LaboratoryScience

    a = create_schema_org_model(type_=LaboratoryScienceInheritedProperties)
    b = create_schema_org_model(type_=LaboratoryScienceProperties)
    c = create_schema_org_model(type_=LaboratoryScienceAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LaboratoryScience.schema()
    create_laboratoryscience_model(LaboratoryScienceAllProperties).schema()
    create_laboratoryscience_model(LaboratoryScienceInheritedProperties).schema()
    create_laboratoryscience_model(LaboratoryScienceProperties).schema()


def SafetyHealthAspect_test():
    from schorg.SafetyHealthAspect import SafetyHealthAspectInheritedProperties
    from schorg.SafetyHealthAspect import SafetyHealthAspectProperties
    from schorg.SafetyHealthAspect import SafetyHealthAspectAllProperties
    from schorg.SafetyHealthAspect import create_schema_org_model
    from schorg.SafetyHealthAspect import create_safetyhealthaspect_model
    from schorg.SafetyHealthAspect import SafetyHealthAspect

    a = create_schema_org_model(type_=SafetyHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=SafetyHealthAspectProperties)
    c = create_schema_org_model(type_=SafetyHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SafetyHealthAspect.schema()
    create_safetyhealthaspect_model(SafetyHealthAspectAllProperties).schema()
    create_safetyhealthaspect_model(SafetyHealthAspectInheritedProperties).schema()
    create_safetyhealthaspect_model(SafetyHealthAspectProperties).schema()


def Map_test():
    from schorg.Map import MapInheritedProperties
    from schorg.Map import MapProperties
    from schorg.Map import MapAllProperties
    from schorg.Map import create_schema_org_model
    from schorg.Map import create_map_model
    from schorg.Map import Map

    a = create_schema_org_model(type_=MapInheritedProperties)
    b = create_schema_org_model(type_=MapProperties)
    c = create_schema_org_model(type_=MapAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Map.schema()
    create_map_model(MapAllProperties).schema()
    create_map_model(MapInheritedProperties).schema()
    create_map_model(MapProperties).schema()


def PostalAddress_test():
    from schorg.PostalAddress import PostalAddressInheritedProperties
    from schorg.PostalAddress import PostalAddressProperties
    from schorg.PostalAddress import PostalAddressAllProperties
    from schorg.PostalAddress import create_schema_org_model
    from schorg.PostalAddress import create_postaladdress_model
    from schorg.PostalAddress import PostalAddress

    a = create_schema_org_model(type_=PostalAddressInheritedProperties)
    b = create_schema_org_model(type_=PostalAddressProperties)
    c = create_schema_org_model(type_=PostalAddressAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PostalAddress.schema()
    create_postaladdress_model(PostalAddressAllProperties).schema()
    create_postaladdress_model(PostalAddressInheritedProperties).schema()
    create_postaladdress_model(PostalAddressProperties).schema()


def JobPosting_test():
    from schorg.JobPosting import JobPostingInheritedProperties
    from schorg.JobPosting import JobPostingProperties
    from schorg.JobPosting import JobPostingAllProperties
    from schorg.JobPosting import create_schema_org_model
    from schorg.JobPosting import create_jobposting_model
    from schorg.JobPosting import JobPosting

    a = create_schema_org_model(type_=JobPostingInheritedProperties)
    b = create_schema_org_model(type_=JobPostingProperties)
    c = create_schema_org_model(type_=JobPostingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    JobPosting.schema()
    create_jobposting_model(JobPostingAllProperties).schema()
    create_jobposting_model(JobPostingInheritedProperties).schema()
    create_jobposting_model(JobPostingProperties).schema()


def DonateAction_test():
    from schorg.DonateAction import DonateActionInheritedProperties
    from schorg.DonateAction import DonateActionProperties
    from schorg.DonateAction import DonateActionAllProperties
    from schorg.DonateAction import create_schema_org_model
    from schorg.DonateAction import create_donateaction_model
    from schorg.DonateAction import DonateAction

    a = create_schema_org_model(type_=DonateActionInheritedProperties)
    b = create_schema_org_model(type_=DonateActionProperties)
    c = create_schema_org_model(type_=DonateActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DonateAction.schema()
    create_donateaction_model(DonateActionAllProperties).schema()
    create_donateaction_model(DonateActionInheritedProperties).schema()
    create_donateaction_model(DonateActionProperties).schema()


def GlutenFreeDiet_test():
    from schorg.GlutenFreeDiet import GlutenFreeDietInheritedProperties
    from schorg.GlutenFreeDiet import GlutenFreeDietProperties
    from schorg.GlutenFreeDiet import GlutenFreeDietAllProperties
    from schorg.GlutenFreeDiet import create_schema_org_model
    from schorg.GlutenFreeDiet import create_glutenfreediet_model
    from schorg.GlutenFreeDiet import GlutenFreeDiet

    a = create_schema_org_model(type_=GlutenFreeDietInheritedProperties)
    b = create_schema_org_model(type_=GlutenFreeDietProperties)
    c = create_schema_org_model(type_=GlutenFreeDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    GlutenFreeDiet.schema()
    create_glutenfreediet_model(GlutenFreeDietAllProperties).schema()
    create_glutenfreediet_model(GlutenFreeDietInheritedProperties).schema()
    create_glutenfreediet_model(GlutenFreeDietProperties).schema()


def DrawAction_test():
    from schorg.DrawAction import DrawActionInheritedProperties
    from schorg.DrawAction import DrawActionProperties
    from schorg.DrawAction import DrawActionAllProperties
    from schorg.DrawAction import create_schema_org_model
    from schorg.DrawAction import create_drawaction_model
    from schorg.DrawAction import DrawAction

    a = create_schema_org_model(type_=DrawActionInheritedProperties)
    b = create_schema_org_model(type_=DrawActionProperties)
    c = create_schema_org_model(type_=DrawActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrawAction.schema()
    create_drawaction_model(DrawActionAllProperties).schema()
    create_drawaction_model(DrawActionInheritedProperties).schema()
    create_drawaction_model(DrawActionProperties).schema()


def OrderDelivered_test():
    from schorg.OrderDelivered import OrderDeliveredInheritedProperties
    from schorg.OrderDelivered import OrderDeliveredProperties
    from schorg.OrderDelivered import OrderDeliveredAllProperties
    from schorg.OrderDelivered import create_schema_org_model
    from schorg.OrderDelivered import create_orderdelivered_model
    from schorg.OrderDelivered import OrderDelivered

    a = create_schema_org_model(type_=OrderDeliveredInheritedProperties)
    b = create_schema_org_model(type_=OrderDeliveredProperties)
    c = create_schema_org_model(type_=OrderDeliveredAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderDelivered.schema()
    create_orderdelivered_model(OrderDeliveredAllProperties).schema()
    create_orderdelivered_model(OrderDeliveredInheritedProperties).schema()
    create_orderdelivered_model(OrderDeliveredProperties).schema()


def ExerciseGym_test():
    from schorg.ExerciseGym import ExerciseGymInheritedProperties
    from schorg.ExerciseGym import ExerciseGymProperties
    from schorg.ExerciseGym import ExerciseGymAllProperties
    from schorg.ExerciseGym import create_schema_org_model
    from schorg.ExerciseGym import create_exercisegym_model
    from schorg.ExerciseGym import ExerciseGym

    a = create_schema_org_model(type_=ExerciseGymInheritedProperties)
    b = create_schema_org_model(type_=ExerciseGymProperties)
    c = create_schema_org_model(type_=ExerciseGymAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExerciseGym.schema()
    create_exercisegym_model(ExerciseGymAllProperties).schema()
    create_exercisegym_model(ExerciseGymInheritedProperties).schema()
    create_exercisegym_model(ExerciseGymProperties).schema()


def ReturnInStore_test():
    from schorg.ReturnInStore import ReturnInStoreInheritedProperties
    from schorg.ReturnInStore import ReturnInStoreProperties
    from schorg.ReturnInStore import ReturnInStoreAllProperties
    from schorg.ReturnInStore import create_schema_org_model
    from schorg.ReturnInStore import create_returninstore_model
    from schorg.ReturnInStore import ReturnInStore

    a = create_schema_org_model(type_=ReturnInStoreInheritedProperties)
    b = create_schema_org_model(type_=ReturnInStoreProperties)
    c = create_schema_org_model(type_=ReturnInStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnInStore.schema()
    create_returninstore_model(ReturnInStoreAllProperties).schema()
    create_returninstore_model(ReturnInStoreInheritedProperties).schema()
    create_returninstore_model(ReturnInStoreProperties).schema()


def BenefitsHealthAspect_test():
    from schorg.BenefitsHealthAspect import BenefitsHealthAspectInheritedProperties
    from schorg.BenefitsHealthAspect import BenefitsHealthAspectProperties
    from schorg.BenefitsHealthAspect import BenefitsHealthAspectAllProperties
    from schorg.BenefitsHealthAspect import create_schema_org_model
    from schorg.BenefitsHealthAspect import create_benefitshealthaspect_model
    from schorg.BenefitsHealthAspect import BenefitsHealthAspect

    a = create_schema_org_model(type_=BenefitsHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=BenefitsHealthAspectProperties)
    c = create_schema_org_model(type_=BenefitsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BenefitsHealthAspect.schema()
    create_benefitshealthaspect_model(BenefitsHealthAspectAllProperties).schema()
    create_benefitshealthaspect_model(BenefitsHealthAspectInheritedProperties).schema()
    create_benefitshealthaspect_model(BenefitsHealthAspectProperties).schema()


def Therapeutic_test():
    from schorg.Therapeutic import TherapeuticInheritedProperties
    from schorg.Therapeutic import TherapeuticProperties
    from schorg.Therapeutic import TherapeuticAllProperties
    from schorg.Therapeutic import create_schema_org_model
    from schorg.Therapeutic import create_therapeutic_model
    from schorg.Therapeutic import Therapeutic

    a = create_schema_org_model(type_=TherapeuticInheritedProperties)
    b = create_schema_org_model(type_=TherapeuticProperties)
    c = create_schema_org_model(type_=TherapeuticAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Therapeutic.schema()
    create_therapeutic_model(TherapeuticAllProperties).schema()
    create_therapeutic_model(TherapeuticInheritedProperties).schema()
    create_therapeutic_model(TherapeuticProperties).schema()


def LegislativeBuilding_test():
    from schorg.LegislativeBuilding import LegislativeBuildingInheritedProperties
    from schorg.LegislativeBuilding import LegislativeBuildingProperties
    from schorg.LegislativeBuilding import LegislativeBuildingAllProperties
    from schorg.LegislativeBuilding import create_schema_org_model
    from schorg.LegislativeBuilding import create_legislativebuilding_model
    from schorg.LegislativeBuilding import LegislativeBuilding

    a = create_schema_org_model(type_=LegislativeBuildingInheritedProperties)
    b = create_schema_org_model(type_=LegislativeBuildingProperties)
    c = create_schema_org_model(type_=LegislativeBuildingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LegislativeBuilding.schema()
    create_legislativebuilding_model(LegislativeBuildingAllProperties).schema()
    create_legislativebuilding_model(LegislativeBuildingInheritedProperties).schema()
    create_legislativebuilding_model(LegislativeBuildingProperties).schema()


def DefinitiveLegalValue_test():
    from schorg.DefinitiveLegalValue import DefinitiveLegalValueInheritedProperties
    from schorg.DefinitiveLegalValue import DefinitiveLegalValueProperties
    from schorg.DefinitiveLegalValue import DefinitiveLegalValueAllProperties
    from schorg.DefinitiveLegalValue import create_schema_org_model
    from schorg.DefinitiveLegalValue import create_definitivelegalvalue_model
    from schorg.DefinitiveLegalValue import DefinitiveLegalValue

    a = create_schema_org_model(type_=DefinitiveLegalValueInheritedProperties)
    b = create_schema_org_model(type_=DefinitiveLegalValueProperties)
    c = create_schema_org_model(type_=DefinitiveLegalValueAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DefinitiveLegalValue.schema()
    create_definitivelegalvalue_model(DefinitiveLegalValueAllProperties).schema()
    create_definitivelegalvalue_model(DefinitiveLegalValueInheritedProperties).schema()
    create_definitivelegalvalue_model(DefinitiveLegalValueProperties).schema()


def ShoeStore_test():
    from schorg.ShoeStore import ShoeStoreInheritedProperties
    from schorg.ShoeStore import ShoeStoreProperties
    from schorg.ShoeStore import ShoeStoreAllProperties
    from schorg.ShoeStore import create_schema_org_model
    from schorg.ShoeStore import create_shoestore_model
    from schorg.ShoeStore import ShoeStore

    a = create_schema_org_model(type_=ShoeStoreInheritedProperties)
    b = create_schema_org_model(type_=ShoeStoreProperties)
    c = create_schema_org_model(type_=ShoeStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ShoeStore.schema()
    create_shoestore_model(ShoeStoreAllProperties).schema()
    create_shoestore_model(ShoeStoreInheritedProperties).schema()
    create_shoestore_model(ShoeStoreProperties).schema()


def FurnitureStore_test():
    from schorg.FurnitureStore import FurnitureStoreInheritedProperties
    from schorg.FurnitureStore import FurnitureStoreProperties
    from schorg.FurnitureStore import FurnitureStoreAllProperties
    from schorg.FurnitureStore import create_schema_org_model
    from schorg.FurnitureStore import create_furniturestore_model
    from schorg.FurnitureStore import FurnitureStore

    a = create_schema_org_model(type_=FurnitureStoreInheritedProperties)
    b = create_schema_org_model(type_=FurnitureStoreProperties)
    c = create_schema_org_model(type_=FurnitureStoreAllProperties)
    a.schema()
    b.schema()
    c.schema()
    FurnitureStore.schema()
    create_furniturestore_model(FurnitureStoreAllProperties).schema()
    create_furniturestore_model(FurnitureStoreInheritedProperties).schema()
    create_furniturestore_model(FurnitureStoreProperties).schema()


def MusicVideoObject_test():
    from schorg.MusicVideoObject import MusicVideoObjectInheritedProperties
    from schorg.MusicVideoObject import MusicVideoObjectProperties
    from schorg.MusicVideoObject import MusicVideoObjectAllProperties
    from schorg.MusicVideoObject import create_schema_org_model
    from schorg.MusicVideoObject import create_musicvideoobject_model
    from schorg.MusicVideoObject import MusicVideoObject

    a = create_schema_org_model(type_=MusicVideoObjectInheritedProperties)
    b = create_schema_org_model(type_=MusicVideoObjectProperties)
    c = create_schema_org_model(type_=MusicVideoObjectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MusicVideoObject.schema()
    create_musicvideoobject_model(MusicVideoObjectAllProperties).schema()
    create_musicvideoobject_model(MusicVideoObjectInheritedProperties).schema()
    create_musicvideoobject_model(MusicVideoObjectProperties).schema()


def DrugLegalStatus_test():
    from schorg.DrugLegalStatus import DrugLegalStatusInheritedProperties
    from schorg.DrugLegalStatus import DrugLegalStatusProperties
    from schorg.DrugLegalStatus import DrugLegalStatusAllProperties
    from schorg.DrugLegalStatus import create_schema_org_model
    from schorg.DrugLegalStatus import create_druglegalstatus_model
    from schorg.DrugLegalStatus import DrugLegalStatus

    a = create_schema_org_model(type_=DrugLegalStatusInheritedProperties)
    b = create_schema_org_model(type_=DrugLegalStatusProperties)
    c = create_schema_org_model(type_=DrugLegalStatusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DrugLegalStatus.schema()
    create_druglegalstatus_model(DrugLegalStatusAllProperties).schema()
    create_druglegalstatus_model(DrugLegalStatusInheritedProperties).schema()
    create_druglegalstatus_model(DrugLegalStatusProperties).schema()


def TireShop_test():
    from schorg.TireShop import TireShopInheritedProperties
    from schorg.TireShop import TireShopProperties
    from schorg.TireShop import TireShopAllProperties
    from schorg.TireShop import create_schema_org_model
    from schorg.TireShop import create_tireshop_model
    from schorg.TireShop import TireShop

    a = create_schema_org_model(type_=TireShopInheritedProperties)
    b = create_schema_org_model(type_=TireShopProperties)
    c = create_schema_org_model(type_=TireShopAllProperties)
    a.schema()
    b.schema()
    c.schema()
    TireShop.schema()
    create_tireshop_model(TireShopAllProperties).schema()
    create_tireshop_model(TireShopInheritedProperties).schema()
    create_tireshop_model(TireShopProperties).schema()


def Obstetric_test():
    from schorg.Obstetric import ObstetricInheritedProperties
    from schorg.Obstetric import ObstetricProperties
    from schorg.Obstetric import ObstetricAllProperties
    from schorg.Obstetric import create_schema_org_model
    from schorg.Obstetric import create_obstetric_model
    from schorg.Obstetric import Obstetric

    a = create_schema_org_model(type_=ObstetricInheritedProperties)
    b = create_schema_org_model(type_=ObstetricProperties)
    c = create_schema_org_model(type_=ObstetricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Obstetric.schema()
    create_obstetric_model(ObstetricAllProperties).schema()
    create_obstetric_model(ObstetricInheritedProperties).schema()
    create_obstetric_model(ObstetricProperties).schema()


def Nonprofit501c13_test():
    from schorg.Nonprofit501c13 import Nonprofit501c13InheritedProperties
    from schorg.Nonprofit501c13 import Nonprofit501c13Properties
    from schorg.Nonprofit501c13 import Nonprofit501c13AllProperties
    from schorg.Nonprofit501c13 import create_schema_org_model
    from schorg.Nonprofit501c13 import create_nonprofit501c13_model
    from schorg.Nonprofit501c13 import Nonprofit501c13

    a = create_schema_org_model(type_=Nonprofit501c13InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c13Properties)
    c = create_schema_org_model(type_=Nonprofit501c13AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c13.schema()
    create_nonprofit501c13_model(Nonprofit501c13AllProperties).schema()
    create_nonprofit501c13_model(Nonprofit501c13InheritedProperties).schema()
    create_nonprofit501c13_model(Nonprofit501c13Properties).schema()


def Mountain_test():
    from schorg.Mountain import MountainInheritedProperties
    from schorg.Mountain import MountainProperties
    from schorg.Mountain import MountainAllProperties
    from schorg.Mountain import create_schema_org_model
    from schorg.Mountain import create_mountain_model
    from schorg.Mountain import Mountain

    a = create_schema_org_model(type_=MountainInheritedProperties)
    b = create_schema_org_model(type_=MountainProperties)
    c = create_schema_org_model(type_=MountainAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Mountain.schema()
    create_mountain_model(MountainAllProperties).schema()
    create_mountain_model(MountainInheritedProperties).schema()
    create_mountain_model(MountainProperties).schema()


def Pediatric_test():
    from schorg.Pediatric import PediatricInheritedProperties
    from schorg.Pediatric import PediatricProperties
    from schorg.Pediatric import PediatricAllProperties
    from schorg.Pediatric import create_schema_org_model
    from schorg.Pediatric import create_pediatric_model
    from schorg.Pediatric import Pediatric

    a = create_schema_org_model(type_=PediatricInheritedProperties)
    b = create_schema_org_model(type_=PediatricProperties)
    c = create_schema_org_model(type_=PediatricAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Pediatric.schema()
    create_pediatric_model(PediatricAllProperties).schema()
    create_pediatric_model(PediatricInheritedProperties).schema()
    create_pediatric_model(PediatricProperties).schema()


def Nonprofit501c14_test():
    from schorg.Nonprofit501c14 import Nonprofit501c14InheritedProperties
    from schorg.Nonprofit501c14 import Nonprofit501c14Properties
    from schorg.Nonprofit501c14 import Nonprofit501c14AllProperties
    from schorg.Nonprofit501c14 import create_schema_org_model
    from schorg.Nonprofit501c14 import create_nonprofit501c14_model
    from schorg.Nonprofit501c14 import Nonprofit501c14

    a = create_schema_org_model(type_=Nonprofit501c14InheritedProperties)
    b = create_schema_org_model(type_=Nonprofit501c14Properties)
    c = create_schema_org_model(type_=Nonprofit501c14AllProperties)
    a.schema()
    b.schema()
    c.schema()
    Nonprofit501c14.schema()
    create_nonprofit501c14_model(Nonprofit501c14AllProperties).schema()
    create_nonprofit501c14_model(Nonprofit501c14InheritedProperties).schema()
    create_nonprofit501c14_model(Nonprofit501c14Properties).schema()


def Corporation_test():
    from schorg.Corporation import CorporationInheritedProperties
    from schorg.Corporation import CorporationProperties
    from schorg.Corporation import CorporationAllProperties
    from schorg.Corporation import create_schema_org_model
    from schorg.Corporation import create_corporation_model
    from schorg.Corporation import Corporation

    a = create_schema_org_model(type_=CorporationInheritedProperties)
    b = create_schema_org_model(type_=CorporationProperties)
    c = create_schema_org_model(type_=CorporationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Corporation.schema()
    create_corporation_model(CorporationAllProperties).schema()
    create_corporation_model(CorporationInheritedProperties).schema()
    create_corporation_model(CorporationProperties).schema()


def RsvpAction_test():
    from schorg.RsvpAction import RsvpActionInheritedProperties
    from schorg.RsvpAction import RsvpActionProperties
    from schorg.RsvpAction import RsvpActionAllProperties
    from schorg.RsvpAction import create_schema_org_model
    from schorg.RsvpAction import create_rsvpaction_model
    from schorg.RsvpAction import RsvpAction

    a = create_schema_org_model(type_=RsvpActionInheritedProperties)
    b = create_schema_org_model(type_=RsvpActionProperties)
    c = create_schema_org_model(type_=RsvpActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RsvpAction.schema()
    create_rsvpaction_model(RsvpActionAllProperties).schema()
    create_rsvpaction_model(RsvpActionInheritedProperties).schema()
    create_rsvpaction_model(RsvpActionProperties).schema()


def UserReview_test():
    from schorg.UserReview import UserReviewInheritedProperties
    from schorg.UserReview import UserReviewProperties
    from schorg.UserReview import UserReviewAllProperties
    from schorg.UserReview import create_schema_org_model
    from schorg.UserReview import create_userreview_model
    from schorg.UserReview import UserReview

    a = create_schema_org_model(type_=UserReviewInheritedProperties)
    b = create_schema_org_model(type_=UserReviewProperties)
    c = create_schema_org_model(type_=UserReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    UserReview.schema()
    create_userreview_model(UserReviewAllProperties).schema()
    create_userreview_model(UserReviewInheritedProperties).schema()
    create_userreview_model(UserReviewProperties).schema()


def DateTime_test():
    from schorg.DateTime import DateTimeInheritedProperties
    from schorg.DateTime import DateTimeProperties
    from schorg.DateTime import DateTimeAllProperties
    from schorg.DateTime import create_schema_org_model
    from schorg.DateTime import create_datetime_model
    from schorg.DateTime import DateTime

    a = create_schema_org_model(type_=DateTimeInheritedProperties)
    b = create_schema_org_model(type_=DateTimeProperties)
    c = create_schema_org_model(type_=DateTimeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DateTime.schema()
    create_datetime_model(DateTimeAllProperties).schema()
    create_datetime_model(DateTimeInheritedProperties).schema()
    create_datetime_model(DateTimeProperties).schema()


def PaymentAutomaticallyApplied_test():
    from schorg.PaymentAutomaticallyApplied import (
        PaymentAutomaticallyAppliedInheritedProperties,
    )
    from schorg.PaymentAutomaticallyApplied import PaymentAutomaticallyAppliedProperties
    from schorg.PaymentAutomaticallyApplied import (
        PaymentAutomaticallyAppliedAllProperties,
    )
    from schorg.PaymentAutomaticallyApplied import create_schema_org_model
    from schorg.PaymentAutomaticallyApplied import (
        create_paymentautomaticallyapplied_model,
    )
    from schorg.PaymentAutomaticallyApplied import PaymentAutomaticallyApplied

    a = create_schema_org_model(type_=PaymentAutomaticallyAppliedInheritedProperties)
    b = create_schema_org_model(type_=PaymentAutomaticallyAppliedProperties)
    c = create_schema_org_model(type_=PaymentAutomaticallyAppliedAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaymentAutomaticallyApplied.schema()
    create_paymentautomaticallyapplied_model(
        PaymentAutomaticallyAppliedAllProperties
    ).schema()
    create_paymentautomaticallyapplied_model(
        PaymentAutomaticallyAppliedInheritedProperties
    ).schema()
    create_paymentautomaticallyapplied_model(
        PaymentAutomaticallyAppliedProperties
    ).schema()


def Atlas_test():
    from schorg.Atlas import AtlasInheritedProperties
    from schorg.Atlas import AtlasProperties
    from schorg.Atlas import AtlasAllProperties
    from schorg.Atlas import create_schema_org_model
    from schorg.Atlas import create_atlas_model
    from schorg.Atlas import Atlas

    a = create_schema_org_model(type_=AtlasInheritedProperties)
    b = create_schema_org_model(type_=AtlasProperties)
    c = create_schema_org_model(type_=AtlasAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Atlas.schema()
    create_atlas_model(AtlasAllProperties).schema()
    create_atlas_model(AtlasInheritedProperties).schema()
    create_atlas_model(AtlasProperties).schema()


def PaintAction_test():
    from schorg.PaintAction import PaintActionInheritedProperties
    from schorg.PaintAction import PaintActionProperties
    from schorg.PaintAction import PaintActionAllProperties
    from schorg.PaintAction import create_schema_org_model
    from schorg.PaintAction import create_paintaction_model
    from schorg.PaintAction import PaintAction

    a = create_schema_org_model(type_=PaintActionInheritedProperties)
    b = create_schema_org_model(type_=PaintActionProperties)
    c = create_schema_org_model(type_=PaintActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    PaintAction.schema()
    create_paintaction_model(PaintActionAllProperties).schema()
    create_paintaction_model(PaintActionInheritedProperties).schema()
    create_paintaction_model(PaintActionProperties).schema()


def OrderAction_test():
    from schorg.OrderAction import OrderActionInheritedProperties
    from schorg.OrderAction import OrderActionProperties
    from schorg.OrderAction import OrderActionAllProperties
    from schorg.OrderAction import create_schema_org_model
    from schorg.OrderAction import create_orderaction_model
    from schorg.OrderAction import OrderAction

    a = create_schema_org_model(type_=OrderActionInheritedProperties)
    b = create_schema_org_model(type_=OrderActionProperties)
    c = create_schema_org_model(type_=OrderActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderAction.schema()
    create_orderaction_model(OrderActionAllProperties).schema()
    create_orderaction_model(OrderActionInheritedProperties).schema()
    create_orderaction_model(OrderActionProperties).schema()


def WearableSizeSystemDE_test():
    from schorg.WearableSizeSystemDE import WearableSizeSystemDEInheritedProperties
    from schorg.WearableSizeSystemDE import WearableSizeSystemDEProperties
    from schorg.WearableSizeSystemDE import WearableSizeSystemDEAllProperties
    from schorg.WearableSizeSystemDE import create_schema_org_model
    from schorg.WearableSizeSystemDE import create_wearablesizesystemde_model
    from schorg.WearableSizeSystemDE import WearableSizeSystemDE

    a = create_schema_org_model(type_=WearableSizeSystemDEInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemDEProperties)
    c = create_schema_org_model(type_=WearableSizeSystemDEAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemDE.schema()
    create_wearablesizesystemde_model(WearableSizeSystemDEAllProperties).schema()
    create_wearablesizesystemde_model(WearableSizeSystemDEInheritedProperties).schema()
    create_wearablesizesystemde_model(WearableSizeSystemDEProperties).schema()


def Newspaper_test():
    from schorg.Newspaper import NewspaperInheritedProperties
    from schorg.Newspaper import NewspaperProperties
    from schorg.Newspaper import NewspaperAllProperties
    from schorg.Newspaper import create_schema_org_model
    from schorg.Newspaper import create_newspaper_model
    from schorg.Newspaper import Newspaper

    a = create_schema_org_model(type_=NewspaperInheritedProperties)
    b = create_schema_org_model(type_=NewspaperProperties)
    c = create_schema_org_model(type_=NewspaperAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Newspaper.schema()
    create_newspaper_model(NewspaperAllProperties).schema()
    create_newspaper_model(NewspaperInheritedProperties).schema()
    create_newspaper_model(NewspaperProperties).schema()


def RiverBodyOfWater_test():
    from schorg.RiverBodyOfWater import RiverBodyOfWaterInheritedProperties
    from schorg.RiverBodyOfWater import RiverBodyOfWaterProperties
    from schorg.RiverBodyOfWater import RiverBodyOfWaterAllProperties
    from schorg.RiverBodyOfWater import create_schema_org_model
    from schorg.RiverBodyOfWater import create_riverbodyofwater_model
    from schorg.RiverBodyOfWater import RiverBodyOfWater

    a = create_schema_org_model(type_=RiverBodyOfWaterInheritedProperties)
    b = create_schema_org_model(type_=RiverBodyOfWaterProperties)
    c = create_schema_org_model(type_=RiverBodyOfWaterAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RiverBodyOfWater.schema()
    create_riverbodyofwater_model(RiverBodyOfWaterAllProperties).schema()
    create_riverbodyofwater_model(RiverBodyOfWaterInheritedProperties).schema()
    create_riverbodyofwater_model(RiverBodyOfWaterProperties).schema()


def Question_test():
    from schorg.Question import QuestionInheritedProperties
    from schorg.Question import QuestionProperties
    from schorg.Question import QuestionAllProperties
    from schorg.Question import create_schema_org_model
    from schorg.Question import create_question_model
    from schorg.Question import Question

    a = create_schema_org_model(type_=QuestionInheritedProperties)
    b = create_schema_org_model(type_=QuestionProperties)
    c = create_schema_org_model(type_=QuestionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Question.schema()
    create_question_model(QuestionAllProperties).schema()
    create_question_model(QuestionInheritedProperties).schema()
    create_question_model(QuestionProperties).schema()


def DiagnosticLab_test():
    from schorg.DiagnosticLab import DiagnosticLabInheritedProperties
    from schorg.DiagnosticLab import DiagnosticLabProperties
    from schorg.DiagnosticLab import DiagnosticLabAllProperties
    from schorg.DiagnosticLab import create_schema_org_model
    from schorg.DiagnosticLab import create_diagnosticlab_model
    from schorg.DiagnosticLab import DiagnosticLab

    a = create_schema_org_model(type_=DiagnosticLabInheritedProperties)
    b = create_schema_org_model(type_=DiagnosticLabProperties)
    c = create_schema_org_model(type_=DiagnosticLabAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DiagnosticLab.schema()
    create_diagnosticlab_model(DiagnosticLabAllProperties).schema()
    create_diagnosticlab_model(DiagnosticLabInheritedProperties).schema()
    create_diagnosticlab_model(DiagnosticLabProperties).schema()


def Paperback_test():
    from schorg.Paperback import PaperbackInheritedProperties
    from schorg.Paperback import PaperbackProperties
    from schorg.Paperback import PaperbackAllProperties
    from schorg.Paperback import create_schema_org_model
    from schorg.Paperback import create_paperback_model
    from schorg.Paperback import Paperback

    a = create_schema_org_model(type_=PaperbackInheritedProperties)
    b = create_schema_org_model(type_=PaperbackProperties)
    c = create_schema_org_model(type_=PaperbackAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Paperback.schema()
    create_paperback_model(PaperbackAllProperties).schema()
    create_paperback_model(PaperbackInheritedProperties).schema()
    create_paperback_model(PaperbackProperties).schema()


def LowCalorieDiet_test():
    from schorg.LowCalorieDiet import LowCalorieDietInheritedProperties
    from schorg.LowCalorieDiet import LowCalorieDietProperties
    from schorg.LowCalorieDiet import LowCalorieDietAllProperties
    from schorg.LowCalorieDiet import create_schema_org_model
    from schorg.LowCalorieDiet import create_lowcaloriediet_model
    from schorg.LowCalorieDiet import LowCalorieDiet

    a = create_schema_org_model(type_=LowCalorieDietInheritedProperties)
    b = create_schema_org_model(type_=LowCalorieDietProperties)
    c = create_schema_org_model(type_=LowCalorieDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LowCalorieDiet.schema()
    create_lowcaloriediet_model(LowCalorieDietAllProperties).schema()
    create_lowcaloriediet_model(LowCalorieDietInheritedProperties).schema()
    create_lowcaloriediet_model(LowCalorieDietProperties).schema()


def CheckoutPage_test():
    from schorg.CheckoutPage import CheckoutPageInheritedProperties
    from schorg.CheckoutPage import CheckoutPageProperties
    from schorg.CheckoutPage import CheckoutPageAllProperties
    from schorg.CheckoutPage import create_schema_org_model
    from schorg.CheckoutPage import create_checkoutpage_model
    from schorg.CheckoutPage import CheckoutPage

    a = create_schema_org_model(type_=CheckoutPageInheritedProperties)
    b = create_schema_org_model(type_=CheckoutPageProperties)
    c = create_schema_org_model(type_=CheckoutPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CheckoutPage.schema()
    create_checkoutpage_model(CheckoutPageAllProperties).schema()
    create_checkoutpage_model(CheckoutPageInheritedProperties).schema()
    create_checkoutpage_model(CheckoutPageProperties).schema()


def DemoAlbum_test():
    from schorg.DemoAlbum import DemoAlbumInheritedProperties
    from schorg.DemoAlbum import DemoAlbumProperties
    from schorg.DemoAlbum import DemoAlbumAllProperties
    from schorg.DemoAlbum import create_schema_org_model
    from schorg.DemoAlbum import create_demoalbum_model
    from schorg.DemoAlbum import DemoAlbum

    a = create_schema_org_model(type_=DemoAlbumInheritedProperties)
    b = create_schema_org_model(type_=DemoAlbumProperties)
    c = create_schema_org_model(type_=DemoAlbumAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DemoAlbum.schema()
    create_demoalbum_model(DemoAlbumAllProperties).schema()
    create_demoalbum_model(DemoAlbumInheritedProperties).schema()
    create_demoalbum_model(DemoAlbumProperties).schema()


def NewsMediaOrganization_test():
    from schorg.NewsMediaOrganization import NewsMediaOrganizationInheritedProperties
    from schorg.NewsMediaOrganization import NewsMediaOrganizationProperties
    from schorg.NewsMediaOrganization import NewsMediaOrganizationAllProperties
    from schorg.NewsMediaOrganization import create_schema_org_model
    from schorg.NewsMediaOrganization import create_newsmediaorganization_model
    from schorg.NewsMediaOrganization import NewsMediaOrganization

    a = create_schema_org_model(type_=NewsMediaOrganizationInheritedProperties)
    b = create_schema_org_model(type_=NewsMediaOrganizationProperties)
    c = create_schema_org_model(type_=NewsMediaOrganizationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NewsMediaOrganization.schema()
    create_newsmediaorganization_model(NewsMediaOrganizationAllProperties).schema()
    create_newsmediaorganization_model(
        NewsMediaOrganizationInheritedProperties
    ).schema()
    create_newsmediaorganization_model(NewsMediaOrganizationProperties).schema()


def DefenceEstablishment_test():
    from schorg.DefenceEstablishment import DefenceEstablishmentInheritedProperties
    from schorg.DefenceEstablishment import DefenceEstablishmentProperties
    from schorg.DefenceEstablishment import DefenceEstablishmentAllProperties
    from schorg.DefenceEstablishment import create_schema_org_model
    from schorg.DefenceEstablishment import create_defenceestablishment_model
    from schorg.DefenceEstablishment import DefenceEstablishment

    a = create_schema_org_model(type_=DefenceEstablishmentInheritedProperties)
    b = create_schema_org_model(type_=DefenceEstablishmentProperties)
    c = create_schema_org_model(type_=DefenceEstablishmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DefenceEstablishment.schema()
    create_defenceestablishment_model(DefenceEstablishmentAllProperties).schema()
    create_defenceestablishment_model(DefenceEstablishmentInheritedProperties).schema()
    create_defenceestablishment_model(DefenceEstablishmentProperties).schema()


def MedicalGuidelineRecommendation_test():
    from schorg.MedicalGuidelineRecommendation import (
        MedicalGuidelineRecommendationInheritedProperties,
    )
    from schorg.MedicalGuidelineRecommendation import (
        MedicalGuidelineRecommendationProperties,
    )
    from schorg.MedicalGuidelineRecommendation import (
        MedicalGuidelineRecommendationAllProperties,
    )
    from schorg.MedicalGuidelineRecommendation import create_schema_org_model
    from schorg.MedicalGuidelineRecommendation import (
        create_medicalguidelinerecommendation_model,
    )
    from schorg.MedicalGuidelineRecommendation import MedicalGuidelineRecommendation

    a = create_schema_org_model(type_=MedicalGuidelineRecommendationInheritedProperties)
    b = create_schema_org_model(type_=MedicalGuidelineRecommendationProperties)
    c = create_schema_org_model(type_=MedicalGuidelineRecommendationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MedicalGuidelineRecommendation.schema()
    create_medicalguidelinerecommendation_model(
        MedicalGuidelineRecommendationAllProperties
    ).schema()
    create_medicalguidelinerecommendation_model(
        MedicalGuidelineRecommendationInheritedProperties
    ).schema()
    create_medicalguidelinerecommendation_model(
        MedicalGuidelineRecommendationProperties
    ).schema()


def HotelRoom_test():
    from schorg.HotelRoom import HotelRoomInheritedProperties
    from schorg.HotelRoom import HotelRoomProperties
    from schorg.HotelRoom import HotelRoomAllProperties
    from schorg.HotelRoom import create_schema_org_model
    from schorg.HotelRoom import create_hotelroom_model
    from schorg.HotelRoom import HotelRoom

    a = create_schema_org_model(type_=HotelRoomInheritedProperties)
    b = create_schema_org_model(type_=HotelRoomProperties)
    c = create_schema_org_model(type_=HotelRoomAllProperties)
    a.schema()
    b.schema()
    c.schema()
    HotelRoom.schema()
    create_hotelroom_model(HotelRoomAllProperties).schema()
    create_hotelroom_model(HotelRoomInheritedProperties).schema()
    create_hotelroom_model(HotelRoomProperties).schema()


def Infectious_test():
    from schorg.Infectious import InfectiousInheritedProperties
    from schorg.Infectious import InfectiousProperties
    from schorg.Infectious import InfectiousAllProperties
    from schorg.Infectious import create_schema_org_model
    from schorg.Infectious import create_infectious_model
    from schorg.Infectious import Infectious

    a = create_schema_org_model(type_=InfectiousInheritedProperties)
    b = create_schema_org_model(type_=InfectiousProperties)
    c = create_schema_org_model(type_=InfectiousAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Infectious.schema()
    create_infectious_model(InfectiousAllProperties).schema()
    create_infectious_model(InfectiousInheritedProperties).schema()
    create_infectious_model(InfectiousProperties).schema()


def WearableSizeGroupShort_test():
    from schorg.WearableSizeGroupShort import WearableSizeGroupShortInheritedProperties
    from schorg.WearableSizeGroupShort import WearableSizeGroupShortProperties
    from schorg.WearableSizeGroupShort import WearableSizeGroupShortAllProperties
    from schorg.WearableSizeGroupShort import create_schema_org_model
    from schorg.WearableSizeGroupShort import create_wearablesizegroupshort_model
    from schorg.WearableSizeGroupShort import WearableSizeGroupShort

    a = create_schema_org_model(type_=WearableSizeGroupShortInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeGroupShortProperties)
    c = create_schema_org_model(type_=WearableSizeGroupShortAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeGroupShort.schema()
    create_wearablesizegroupshort_model(WearableSizeGroupShortAllProperties).schema()
    create_wearablesizegroupshort_model(
        WearableSizeGroupShortInheritedProperties
    ).schema()
    create_wearablesizegroupshort_model(WearableSizeGroupShortProperties).schema()


def School_test():
    from schorg.School import SchoolInheritedProperties
    from schorg.School import SchoolProperties
    from schorg.School import SchoolAllProperties
    from schorg.School import create_schema_org_model
    from schorg.School import create_school_model
    from schorg.School import School

    a = create_schema_org_model(type_=SchoolInheritedProperties)
    b = create_schema_org_model(type_=SchoolProperties)
    c = create_schema_org_model(type_=SchoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    School.schema()
    create_school_model(SchoolAllProperties).schema()
    create_school_model(SchoolInheritedProperties).schema()
    create_school_model(SchoolProperties).schema()


def AnalysisNewsArticle_test():
    from schorg.AnalysisNewsArticle import AnalysisNewsArticleInheritedProperties
    from schorg.AnalysisNewsArticle import AnalysisNewsArticleProperties
    from schorg.AnalysisNewsArticle import AnalysisNewsArticleAllProperties
    from schorg.AnalysisNewsArticle import create_schema_org_model
    from schorg.AnalysisNewsArticle import create_analysisnewsarticle_model
    from schorg.AnalysisNewsArticle import AnalysisNewsArticle

    a = create_schema_org_model(type_=AnalysisNewsArticleInheritedProperties)
    b = create_schema_org_model(type_=AnalysisNewsArticleProperties)
    c = create_schema_org_model(type_=AnalysisNewsArticleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AnalysisNewsArticle.schema()
    create_analysisnewsarticle_model(AnalysisNewsArticleAllProperties).schema()
    create_analysisnewsarticle_model(AnalysisNewsArticleInheritedProperties).schema()
    create_analysisnewsarticle_model(AnalysisNewsArticleProperties).schema()


def Installment_test():
    from schorg.Installment import InstallmentInheritedProperties
    from schorg.Installment import InstallmentProperties
    from schorg.Installment import InstallmentAllProperties
    from schorg.Installment import create_schema_org_model
    from schorg.Installment import create_installment_model
    from schorg.Installment import Installment

    a = create_schema_org_model(type_=InstallmentInheritedProperties)
    b = create_schema_org_model(type_=InstallmentProperties)
    c = create_schema_org_model(type_=InstallmentAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Installment.schema()
    create_installment_model(InstallmentAllProperties).schema()
    create_installment_model(InstallmentInheritedProperties).schema()
    create_installment_model(InstallmentProperties).schema()


def AnatomicalSystem_test():
    from schorg.AnatomicalSystem import AnatomicalSystemInheritedProperties
    from schorg.AnatomicalSystem import AnatomicalSystemProperties
    from schorg.AnatomicalSystem import AnatomicalSystemAllProperties
    from schorg.AnatomicalSystem import create_schema_org_model
    from schorg.AnatomicalSystem import create_anatomicalsystem_model
    from schorg.AnatomicalSystem import AnatomicalSystem

    a = create_schema_org_model(type_=AnatomicalSystemInheritedProperties)
    b = create_schema_org_model(type_=AnatomicalSystemProperties)
    c = create_schema_org_model(type_=AnatomicalSystemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    AnatomicalSystem.schema()
    create_anatomicalsystem_model(AnatomicalSystemAllProperties).schema()
    create_anatomicalsystem_model(AnatomicalSystemInheritedProperties).schema()
    create_anatomicalsystem_model(AnatomicalSystemProperties).schema()


def MediaReview_test():
    from schorg.MediaReview import MediaReviewInheritedProperties
    from schorg.MediaReview import MediaReviewProperties
    from schorg.MediaReview import MediaReviewAllProperties
    from schorg.MediaReview import create_schema_org_model
    from schorg.MediaReview import create_mediareview_model
    from schorg.MediaReview import MediaReview

    a = create_schema_org_model(type_=MediaReviewInheritedProperties)
    b = create_schema_org_model(type_=MediaReviewProperties)
    c = create_schema_org_model(type_=MediaReviewAllProperties)
    a.schema()
    b.schema()
    c.schema()
    MediaReview.schema()
    create_mediareview_model(MediaReviewAllProperties).schema()
    create_mediareview_model(MediaReviewInheritedProperties).schema()
    create_mediareview_model(MediaReviewProperties).schema()


def ExercisePlan_test():
    from schorg.ExercisePlan import ExercisePlanInheritedProperties
    from schorg.ExercisePlan import ExercisePlanProperties
    from schorg.ExercisePlan import ExercisePlanAllProperties
    from schorg.ExercisePlan import create_schema_org_model
    from schorg.ExercisePlan import create_exerciseplan_model
    from schorg.ExercisePlan import ExercisePlan

    a = create_schema_org_model(type_=ExercisePlanInheritedProperties)
    b = create_schema_org_model(type_=ExercisePlanProperties)
    c = create_schema_org_model(type_=ExercisePlanAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ExercisePlan.schema()
    create_exerciseplan_model(ExercisePlanAllProperties).schema()
    create_exerciseplan_model(ExercisePlanInheritedProperties).schema()
    create_exerciseplan_model(ExercisePlanProperties).schema()


def LowLactoseDiet_test():
    from schorg.LowLactoseDiet import LowLactoseDietInheritedProperties
    from schorg.LowLactoseDiet import LowLactoseDietProperties
    from schorg.LowLactoseDiet import LowLactoseDietAllProperties
    from schorg.LowLactoseDiet import create_schema_org_model
    from schorg.LowLactoseDiet import create_lowlactosediet_model
    from schorg.LowLactoseDiet import LowLactoseDiet

    a = create_schema_org_model(type_=LowLactoseDietInheritedProperties)
    b = create_schema_org_model(type_=LowLactoseDietProperties)
    c = create_schema_org_model(type_=LowLactoseDietAllProperties)
    a.schema()
    b.schema()
    c.schema()
    LowLactoseDiet.schema()
    create_lowlactosediet_model(LowLactoseDietAllProperties).schema()
    create_lowlactosediet_model(LowLactoseDietInheritedProperties).schema()
    create_lowlactosediet_model(LowLactoseDietProperties).schema()


def Quotation_test():
    from schorg.Quotation import QuotationInheritedProperties
    from schorg.Quotation import QuotationProperties
    from schorg.Quotation import QuotationAllProperties
    from schorg.Quotation import create_schema_org_model
    from schorg.Quotation import create_quotation_model
    from schorg.Quotation import Quotation

    a = create_schema_org_model(type_=QuotationInheritedProperties)
    b = create_schema_org_model(type_=QuotationProperties)
    c = create_schema_org_model(type_=QuotationAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Quotation.schema()
    create_quotation_model(QuotationAllProperties).schema()
    create_quotation_model(QuotationInheritedProperties).schema()
    create_quotation_model(QuotationProperties).schema()


def DisagreeAction_test():
    from schorg.DisagreeAction import DisagreeActionInheritedProperties
    from schorg.DisagreeAction import DisagreeActionProperties
    from schorg.DisagreeAction import DisagreeActionAllProperties
    from schorg.DisagreeAction import create_schema_org_model
    from schorg.DisagreeAction import create_disagreeaction_model
    from schorg.DisagreeAction import DisagreeAction

    a = create_schema_org_model(type_=DisagreeActionInheritedProperties)
    b = create_schema_org_model(type_=DisagreeActionProperties)
    c = create_schema_org_model(type_=DisagreeActionAllProperties)
    a.schema()
    b.schema()
    c.schema()
    DisagreeAction.schema()
    create_disagreeaction_model(DisagreeActionAllProperties).schema()
    create_disagreeaction_model(DisagreeActionInheritedProperties).schema()
    create_disagreeaction_model(DisagreeActionProperties).schema()


def OnlineOnly_test():
    from schorg.OnlineOnly import OnlineOnlyInheritedProperties
    from schorg.OnlineOnly import OnlineOnlyProperties
    from schorg.OnlineOnly import OnlineOnlyAllProperties
    from schorg.OnlineOnly import create_schema_org_model
    from schorg.OnlineOnly import create_onlineonly_model
    from schorg.OnlineOnly import OnlineOnly

    a = create_schema_org_model(type_=OnlineOnlyInheritedProperties)
    b = create_schema_org_model(type_=OnlineOnlyProperties)
    c = create_schema_org_model(type_=OnlineOnlyAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OnlineOnly.schema()
    create_onlineonly_model(OnlineOnlyAllProperties).schema()
    create_onlineonly_model(OnlineOnlyInheritedProperties).schema()
    create_onlineonly_model(OnlineOnlyProperties).schema()


def WearableSizeSystemUK_test():
    from schorg.WearableSizeSystemUK import WearableSizeSystemUKInheritedProperties
    from schorg.WearableSizeSystemUK import WearableSizeSystemUKProperties
    from schorg.WearableSizeSystemUK import WearableSizeSystemUKAllProperties
    from schorg.WearableSizeSystemUK import create_schema_org_model
    from schorg.WearableSizeSystemUK import create_wearablesizesystemuk_model
    from schorg.WearableSizeSystemUK import WearableSizeSystemUK

    a = create_schema_org_model(type_=WearableSizeSystemUKInheritedProperties)
    b = create_schema_org_model(type_=WearableSizeSystemUKProperties)
    c = create_schema_org_model(type_=WearableSizeSystemUKAllProperties)
    a.schema()
    b.schema()
    c.schema()
    WearableSizeSystemUK.schema()
    create_wearablesizesystemuk_model(WearableSizeSystemUKAllProperties).schema()
    create_wearablesizesystemuk_model(WearableSizeSystemUKInheritedProperties).schema()
    create_wearablesizesystemuk_model(WearableSizeSystemUKProperties).schema()


def ReturnLabelDownloadAndPrint_test():
    from schorg.ReturnLabelDownloadAndPrint import (
        ReturnLabelDownloadAndPrintInheritedProperties,
    )
    from schorg.ReturnLabelDownloadAndPrint import ReturnLabelDownloadAndPrintProperties
    from schorg.ReturnLabelDownloadAndPrint import (
        ReturnLabelDownloadAndPrintAllProperties,
    )
    from schorg.ReturnLabelDownloadAndPrint import create_schema_org_model
    from schorg.ReturnLabelDownloadAndPrint import (
        create_returnlabeldownloadandprint_model,
    )
    from schorg.ReturnLabelDownloadAndPrint import ReturnLabelDownloadAndPrint

    a = create_schema_org_model(type_=ReturnLabelDownloadAndPrintInheritedProperties)
    b = create_schema_org_model(type_=ReturnLabelDownloadAndPrintProperties)
    c = create_schema_org_model(type_=ReturnLabelDownloadAndPrintAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ReturnLabelDownloadAndPrint.schema()
    create_returnlabeldownloadandprint_model(
        ReturnLabelDownloadAndPrintAllProperties
    ).schema()
    create_returnlabeldownloadandprint_model(
        ReturnLabelDownloadAndPrintInheritedProperties
    ).schema()
    create_returnlabeldownloadandprint_model(
        ReturnLabelDownloadAndPrintProperties
    ).schema()


def Wholesale_test():
    from schorg.Wholesale import WholesaleInheritedProperties
    from schorg.Wholesale import WholesaleProperties
    from schorg.Wholesale import WholesaleAllProperties
    from schorg.Wholesale import create_schema_org_model
    from schorg.Wholesale import create_wholesale_model
    from schorg.Wholesale import Wholesale

    a = create_schema_org_model(type_=WholesaleInheritedProperties)
    b = create_schema_org_model(type_=WholesaleProperties)
    c = create_schema_org_model(type_=WholesaleAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Wholesale.schema()
    create_wholesale_model(WholesaleAllProperties).schema()
    create_wholesale_model(WholesaleInheritedProperties).schema()
    create_wholesale_model(WholesaleProperties).schema()


def ItemPage_test():
    from schorg.ItemPage import ItemPageInheritedProperties
    from schorg.ItemPage import ItemPageProperties
    from schorg.ItemPage import ItemPageAllProperties
    from schorg.ItemPage import create_schema_org_model
    from schorg.ItemPage import create_itempage_model
    from schorg.ItemPage import ItemPage

    a = create_schema_org_model(type_=ItemPageInheritedProperties)
    b = create_schema_org_model(type_=ItemPageProperties)
    c = create_schema_org_model(type_=ItemPageAllProperties)
    a.schema()
    b.schema()
    c.schema()
    ItemPage.schema()
    create_itempage_model(ItemPageAllProperties).schema()
    create_itempage_model(ItemPageInheritedProperties).schema()
    create_itempage_model(ItemPageProperties).schema()


def EUEnergyEfficiencyCategoryA1Plus_test():
    from schorg.EUEnergyEfficiencyCategoryA1Plus import (
        EUEnergyEfficiencyCategoryA1PlusInheritedProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA1Plus import (
        EUEnergyEfficiencyCategoryA1PlusProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA1Plus import (
        EUEnergyEfficiencyCategoryA1PlusAllProperties,
    )
    from schorg.EUEnergyEfficiencyCategoryA1Plus import create_schema_org_model
    from schorg.EUEnergyEfficiencyCategoryA1Plus import (
        create_euenergyefficiencycategorya1plus_model,
    )
    from schorg.EUEnergyEfficiencyCategoryA1Plus import EUEnergyEfficiencyCategoryA1Plus

    a = create_schema_org_model(
        type_=EUEnergyEfficiencyCategoryA1PlusInheritedProperties
    )
    b = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA1PlusProperties)
    c = create_schema_org_model(type_=EUEnergyEfficiencyCategoryA1PlusAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EUEnergyEfficiencyCategoryA1Plus.schema()
    create_euenergyefficiencycategorya1plus_model(
        EUEnergyEfficiencyCategoryA1PlusAllProperties
    ).schema()
    create_euenergyefficiencycategorya1plus_model(
        EUEnergyEfficiencyCategoryA1PlusInheritedProperties
    ).schema()
    create_euenergyefficiencycategorya1plus_model(
        EUEnergyEfficiencyCategoryA1PlusProperties
    ).schema()


def Reservoir_test():
    from schorg.Reservoir import ReservoirInheritedProperties
    from schorg.Reservoir import ReservoirProperties
    from schorg.Reservoir import ReservoirAllProperties
    from schorg.Reservoir import create_schema_org_model
    from schorg.Reservoir import create_reservoir_model
    from schorg.Reservoir import Reservoir

    a = create_schema_org_model(type_=ReservoirInheritedProperties)
    b = create_schema_org_model(type_=ReservoirProperties)
    c = create_schema_org_model(type_=ReservoirAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Reservoir.schema()
    create_reservoir_model(ReservoirAllProperties).schema()
    create_reservoir_model(ReservoirInheritedProperties).schema()
    create_reservoir_model(ReservoirProperties).schema()


def EBook_test():
    from schorg.EBook import EBookInheritedProperties
    from schorg.EBook import EBookProperties
    from schorg.EBook import EBookAllProperties
    from schorg.EBook import create_schema_org_model
    from schorg.EBook import create_ebook_model
    from schorg.EBook import EBook

    a = create_schema_org_model(type_=EBookInheritedProperties)
    b = create_schema_org_model(type_=EBookProperties)
    c = create_schema_org_model(type_=EBookAllProperties)
    a.schema()
    b.schema()
    c.schema()
    EBook.schema()
    create_ebook_model(EBookAllProperties).schema()
    create_ebook_model(EBookInheritedProperties).schema()
    create_ebook_model(EBookProperties).schema()


def SelfCareHealthAspect_test():
    from schorg.SelfCareHealthAspect import SelfCareHealthAspectInheritedProperties
    from schorg.SelfCareHealthAspect import SelfCareHealthAspectProperties
    from schorg.SelfCareHealthAspect import SelfCareHealthAspectAllProperties
    from schorg.SelfCareHealthAspect import create_schema_org_model
    from schorg.SelfCareHealthAspect import create_selfcarehealthaspect_model
    from schorg.SelfCareHealthAspect import SelfCareHealthAspect

    a = create_schema_org_model(type_=SelfCareHealthAspectInheritedProperties)
    b = create_schema_org_model(type_=SelfCareHealthAspectProperties)
    c = create_schema_org_model(type_=SelfCareHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    SelfCareHealthAspect.schema()
    create_selfcarehealthaspect_model(SelfCareHealthAspectAllProperties).schema()
    create_selfcarehealthaspect_model(SelfCareHealthAspectInheritedProperties).schema()
    create_selfcarehealthaspect_model(SelfCareHealthAspectProperties).schema()


def RisksOrComplicationsHealthAspect_test():
    from schorg.RisksOrComplicationsHealthAspect import (
        RisksOrComplicationsHealthAspectInheritedProperties,
    )
    from schorg.RisksOrComplicationsHealthAspect import (
        RisksOrComplicationsHealthAspectProperties,
    )
    from schorg.RisksOrComplicationsHealthAspect import (
        RisksOrComplicationsHealthAspectAllProperties,
    )
    from schorg.RisksOrComplicationsHealthAspect import create_schema_org_model
    from schorg.RisksOrComplicationsHealthAspect import (
        create_risksorcomplicationshealthaspect_model,
    )
    from schorg.RisksOrComplicationsHealthAspect import RisksOrComplicationsHealthAspect

    a = create_schema_org_model(
        type_=RisksOrComplicationsHealthAspectInheritedProperties
    )
    b = create_schema_org_model(type_=RisksOrComplicationsHealthAspectProperties)
    c = create_schema_org_model(type_=RisksOrComplicationsHealthAspectAllProperties)
    a.schema()
    b.schema()
    c.schema()
    RisksOrComplicationsHealthAspect.schema()
    create_risksorcomplicationshealthaspect_model(
        RisksOrComplicationsHealthAspectAllProperties
    ).schema()
    create_risksorcomplicationshealthaspect_model(
        RisksOrComplicationsHealthAspectInheritedProperties
    ).schema()
    create_risksorcomplicationshealthaspect_model(
        RisksOrComplicationsHealthAspectProperties
    ).schema()


def Movie_test():
    from schorg.Movie import MovieInheritedProperties
    from schorg.Movie import MovieProperties
    from schorg.Movie import MovieAllProperties
    from schorg.Movie import create_schema_org_model
    from schorg.Movie import create_movie_model
    from schorg.Movie import Movie

    a = create_schema_org_model(type_=MovieInheritedProperties)
    b = create_schema_org_model(type_=MovieProperties)
    c = create_schema_org_model(type_=MovieAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Movie.schema()
    create_movie_model(MovieAllProperties).schema()
    create_movie_model(MovieInheritedProperties).schema()
    create_movie_model(MovieProperties).schema()


def False__test():
    from schorg.False_ import False_InheritedProperties
    from schorg.False_ import False_Properties
    from schorg.False_ import False_AllProperties
    from schorg.False_ import create_schema_org_model
    from schorg.False_ import create_false__model
    from schorg.False_ import False_

    a = create_schema_org_model(type_=False_InheritedProperties)
    b = create_schema_org_model(type_=False_Properties)
    c = create_schema_org_model(type_=False_AllProperties)
    a.schema()
    b.schema()
    c.schema()
    False_.schema()
    create_false__model(False_AllProperties).schema()
    create_false__model(False_InheritedProperties).schema()
    create_false__model(False_Properties).schema()


def OfflineEventAttendanceMode_test():
    from schorg.OfflineEventAttendanceMode import (
        OfflineEventAttendanceModeInheritedProperties,
    )
    from schorg.OfflineEventAttendanceMode import OfflineEventAttendanceModeProperties
    from schorg.OfflineEventAttendanceMode import (
        OfflineEventAttendanceModeAllProperties,
    )
    from schorg.OfflineEventAttendanceMode import create_schema_org_model
    from schorg.OfflineEventAttendanceMode import (
        create_offlineeventattendancemode_model,
    )
    from schorg.OfflineEventAttendanceMode import OfflineEventAttendanceMode

    a = create_schema_org_model(type_=OfflineEventAttendanceModeInheritedProperties)
    b = create_schema_org_model(type_=OfflineEventAttendanceModeProperties)
    c = create_schema_org_model(type_=OfflineEventAttendanceModeAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OfflineEventAttendanceMode.schema()
    create_offlineeventattendancemode_model(
        OfflineEventAttendanceModeAllProperties
    ).schema()
    create_offlineeventattendancemode_model(
        OfflineEventAttendanceModeInheritedProperties
    ).schema()
    create_offlineeventattendancemode_model(
        OfflineEventAttendanceModeProperties
    ).schema()


def Integer_test():
    from schorg.Integer import IntegerInheritedProperties
    from schorg.Integer import IntegerProperties
    from schorg.Integer import IntegerAllProperties
    from schorg.Integer import create_schema_org_model
    from schorg.Integer import create_integer_model
    from schorg.Integer import Integer

    a = create_schema_org_model(type_=IntegerInheritedProperties)
    b = create_schema_org_model(type_=IntegerProperties)
    c = create_schema_org_model(type_=IntegerAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Integer.schema()
    create_integer_model(IntegerAllProperties).schema()
    create_integer_model(IntegerInheritedProperties).schema()
    create_integer_model(IntegerProperties).schema()


def OrderItem_test():
    from schorg.OrderItem import OrderItemInheritedProperties
    from schorg.OrderItem import OrderItemProperties
    from schorg.OrderItem import OrderItemAllProperties
    from schorg.OrderItem import create_schema_org_model
    from schorg.OrderItem import create_orderitem_model
    from schorg.OrderItem import OrderItem

    a = create_schema_org_model(type_=OrderItemInheritedProperties)
    b = create_schema_org_model(type_=OrderItemProperties)
    c = create_schema_org_model(type_=OrderItemAllProperties)
    a.schema()
    b.schema()
    c.schema()
    OrderItem.schema()
    create_orderitem_model(OrderItemAllProperties).schema()
    create_orderitem_model(OrderItemInheritedProperties).schema()
    create_orderitem_model(OrderItemProperties).schema()


def CaseSeries_test():
    from schorg.CaseSeries import CaseSeriesInheritedProperties
    from schorg.CaseSeries import CaseSeriesProperties
    from schorg.CaseSeries import CaseSeriesAllProperties
    from schorg.CaseSeries import create_schema_org_model
    from schorg.CaseSeries import create_caseseries_model
    from schorg.CaseSeries import CaseSeries

    a = create_schema_org_model(type_=CaseSeriesInheritedProperties)
    b = create_schema_org_model(type_=CaseSeriesProperties)
    c = create_schema_org_model(type_=CaseSeriesAllProperties)
    a.schema()
    b.schema()
    c.schema()
    CaseSeries.schema()
    create_caseseries_model(CaseSeriesAllProperties).schema()
    create_caseseries_model(CaseSeriesInheritedProperties).schema()
    create_caseseries_model(CaseSeriesProperties).schema()


def Preschool_test():
    from schorg.Preschool import PreschoolInheritedProperties
    from schorg.Preschool import PreschoolProperties
    from schorg.Preschool import PreschoolAllProperties
    from schorg.Preschool import create_schema_org_model
    from schorg.Preschool import create_preschool_model
    from schorg.Preschool import Preschool

    a = create_schema_org_model(type_=PreschoolInheritedProperties)
    b = create_schema_org_model(type_=PreschoolProperties)
    c = create_schema_org_model(type_=PreschoolAllProperties)
    a.schema()
    b.schema()
    c.schema()
    Preschool.schema()
    create_preschool_model(PreschoolAllProperties).schema()
    create_preschool_model(PreschoolInheritedProperties).schema()
    create_preschool_model(PreschoolProperties).schema()


def BodyMeasurementWaist_test():
    from schorg.BodyMeasurementWaist import BodyMeasurementWaistInheritedProperties
    from schorg.BodyMeasurementWaist import BodyMeasurementWaistProperties
    from schorg.BodyMeasurementWaist import BodyMeasurementWaistAllProperties
    from schorg.BodyMeasurementWaist import create_schema_org_model
    from schorg.BodyMeasurementWaist import create_bodymeasurementwaist_model
    from schorg.BodyMeasurementWaist import BodyMeasurementWaist

    a = create_schema_org_model(type_=BodyMeasurementWaistInheritedProperties)
    b = create_schema_org_model(type_=BodyMeasurementWaistProperties)
    c = create_schema_org_model(type_=BodyMeasurementWaistAllProperties)
    a.schema()
    b.schema()
    c.schema()
    BodyMeasurementWaist.schema()
    create_bodymeasurementwaist_model(BodyMeasurementWaistAllProperties).schema()
    create_bodymeasurementwaist_model(BodyMeasurementWaistInheritedProperties).schema()
    create_bodymeasurementwaist_model(BodyMeasurementWaistProperties).schema()


def NotYetRecruiting_test():
    from schorg.NotYetRecruiting import NotYetRecruitingInheritedProperties
    from schorg.NotYetRecruiting import NotYetRecruitingProperties
    from schorg.NotYetRecruiting import NotYetRecruitingAllProperties
    from schorg.NotYetRecruiting import create_schema_org_model
    from schorg.NotYetRecruiting import create_notyetrecruiting_model
    from schorg.NotYetRecruiting import NotYetRecruiting

    a = create_schema_org_model(type_=NotYetRecruitingInheritedProperties)
    b = create_schema_org_model(type_=NotYetRecruitingProperties)
    c = create_schema_org_model(type_=NotYetRecruitingAllProperties)
    a.schema()
    b.schema()
    c.schema()
    NotYetRecruiting.schema()
    create_notyetrecruiting_model(NotYetRecruitingAllProperties).schema()
    create_notyetrecruiting_model(NotYetRecruitingInheritedProperties).schema()
    create_notyetrecruiting_model(NotYetRecruitingProperties).schema()


def run_all():
    print("running thing_test")
    Thing_test()
    print("running intangible_test")
    Intangible_test()
    print("running structuredvalue_test")
    StructuredValue_test()
    print("running geoshape_test")
    GeoShape_test()
    print("running enumeration_test")
    Enumeration_test()
    print("running sizegroupenumeration_test")
    SizeGroupEnumeration_test()
    print("running wearablesizegroupenumeration_test")
    WearableSizeGroupEnumeration_test()
    print("running wearablesizegroupmens_test")
    WearableSizeGroupMens_test()
    print("running qualitativevalue_test")
    QualitativeValue_test()
    print("running drivewheelconfigurationvalue_test")
    DriveWheelConfigurationValue_test()
    print("running frontwheeldriveconfiguration_test")
    FrontWheelDriveConfiguration_test()
    print("running quantitativevaluedistribution_test")
    QuantitativeValueDistribution_test()
    print("running monetaryamountdistribution_test")
    MonetaryAmountDistribution_test()
    print("running organization_test")
    Organization_test()
    print("running workersunion_test")
    WorkersUnion_test()
    print("running place_test")
    Place_test()
    print("running civicstructure_test")
    CivicStructure_test()
    print("running park_test")
    Park_test()
    print("running localbusiness_test")
    LocalBusiness_test()
    print("running store_test")
    Store_test()
    print("running petstore_test")
    PetStore_test()
    print("running medicalentity_test")
    MedicalEntity_test()
    print("running medicalintangible_test")
    MedicalIntangible_test()
    print("running ddxelement_test")
    DDxElement_test()
    print("running returnfeesenumeration_test")
    ReturnFeesEnumeration_test()
    print("running returnshippingfees_test")
    ReturnShippingFees_test()
    print("running florist_test")
    Florist_test()
    print("running anatomicalstructure_test")
    AnatomicalStructure_test()
    print("running sizesystemenumeration_test")
    SizeSystemEnumeration_test()
    print("running wearablesizesystemenumeration_test")
    WearableSizeSystemEnumeration_test()
    print("running wearablesizesystembr_test")
    WearableSizeSystemBR_test()
    print("running nonprofittype_test")
    NonprofitType_test()
    print("running nlnonprofittype_test")
    NLNonprofitType_test()
    print("running nonprofitsbbi_test")
    NonprofitSBBI_test()
    print("running creativework_test")
    CreativeWork_test()
    print("running datacatalog_test")
    DataCatalog_test()
    print("running webpageelement_test")
    WebPageElement_test()
    print("running accommodation_test")
    Accommodation_test()
    print("running apartment_test")
    Apartment_test()
    print("running event_test")
    Event_test()
    print("running literaryevent_test")
    LiteraryEvent_test()
    print("running clip_test")
    Clip_test()
    print("running movieclip_test")
    MovieClip_test()
    print("running educationevent_test")
    EducationEvent_test()
    print("running medicalprocedure_test")
    MedicalProcedure_test()
    print("running medicalenumeration_test")
    MedicalEnumeration_test()
    print("running physicalexam_test")
    PhysicalExam_test()
    print("running abdomen_test")
    Abdomen_test()
    print("running socialevent_test")
    SocialEvent_test()
    print("running medicaltest_test")
    MedicalTest_test()
    print("running imagingtest_test")
    ImagingTest_test()
    print("running interactioncounter_test")
    InteractionCounter_test()
    print("running audience_test")
    Audience_test()
    print("running peopleaudience_test")
    PeopleAudience_test()
    print("running parentaudience_test")
    ParentAudience_test()
    print("running product_test")
    Product_test()
    print("running productmodel_test")
    ProductModel_test()
    print("running medicaltrialdesign_test")
    MedicalTrialDesign_test()
    print("running placebocontrolledtrial_test")
    PlaceboControlledTrial_test()
    print("running action_test")
    Action_test()
    print("running createaction_test")
    CreateAction_test()
    print("running photographaction_test")
    PhotographAction_test()
    print("running usnonprofittype_test")
    USNonprofitType_test()
    print("running nonprofit501c4_test")
    Nonprofit501c4_test()
    print("running measurementtypeenumeration_test")
    MeasurementTypeEnumeration_test()
    print("running bodymeasurementtypeenumeration_test")
    BodyMeasurementTypeEnumeration_test()
    print("running bodymeasurementweight_test")
    BodyMeasurementWeight_test()
    print("running reservation_test")
    Reservation_test()
    print("running flightreservation_test")
    FlightReservation_test()
    print("running grant_test")
    Grant_test()
    print("running monetarygrant_test")
    MonetaryGrant_test()
    print("running medicalindication_test")
    MedicalIndication_test()
    print("running treatmentindication_test")
    TreatmentIndication_test()
    print("running cemetery_test")
    Cemetery_test()
    print("running energyefficiencyenumeration_test")
    EnergyEfficiencyEnumeration_test()
    print("running euenergyefficiencyenumeration_test")
    EUEnergyEfficiencyEnumeration_test()
    print("running euenergyefficiencycategorya3plus_test")
    EUEnergyEfficiencyCategoryA3Plus_test()
    print("running digitalplatformenumeration_test")
    DigitalPlatformEnumeration_test()
    print("running specialty_test")
    Specialty_test()
    print("running medicalspecialty_test")
    MedicalSpecialty_test()
    print("running medicalbusiness_test")
    MedicalBusiness_test()
    print("running publichealth_test")
    PublicHealth_test()
    print("running wearablesizesystemen13402_test")
    WearableSizeSystemEN13402_test()
    print("running interactaction_test")
    InteractAction_test()
    print("running communicateaction_test")
    CommunicateAction_test()
    print("running checkinaction_test")
    CheckInAction_test()
    print("running pricecomponenttypeenumeration_test")
    PriceComponentTypeEnumeration_test()
    print("running distancefee_test")
    DistanceFee_test()
    print("running wearablesizegroupextrashort_test")
    WearableSizeGroupExtraShort_test()
    print("running eventattendancemodeenumeration_test")
    EventAttendanceModeEnumeration_test()
    print("running wearablesizesystemjp_test")
    WearableSizeSystemJP_test()
    print("running statusenumeration_test")
    StatusEnumeration_test()
    print("running orderstatus_test")
    OrderStatus_test()
    print("running ordercancelled_test")
    OrderCancelled_test()
    print("running physicalactivitycategory_test")
    PhysicalActivityCategory_test()
    print("running strengthtraining_test")
    StrengthTraining_test()
    print("running foodestablishmentreservation_test")
    FoodEstablishmentReservation_test()
    print("running visualartwork_test")
    VisualArtwork_test()
    print("running coverart_test")
    CoverArt_test()
    print("running medicinesystem_test")
    MedicineSystem_test()
    print("running osteopathic_test")
    Osteopathic_test()
    print("running musicreleaseformattype_test")
    MusicReleaseFormatType_test()
    print("running digitalaudiotapeformat_test")
    DigitalAudioTapeFormat_test()
    print("running healthinsuranceplan_test")
    HealthInsurancePlan_test()
    print("running sportsorganization_test")
    SportsOrganization_test()
    print("running automotivebusiness_test")
    AutomotiveBusiness_test()
    print("running autorepair_test")
    AutoRepair_test()
    print("running onlinebusiness_test")
    OnlineBusiness_test()
    print("running medicalstudystatus_test")
    MedicalStudyStatus_test()
    print("running resultsavailable_test")
    ResultsAvailable_test()
    print("running suite_test")
    Suite_test()
    print("running euenergyefficiencycategoryg_test")
    EUEnergyEfficiencyCategoryG_test()
    print("running deliverymethod_test")
    DeliveryMethod_test()
    print("running parcelservice_test")
    ParcelService_test()
    print("running tradeaction_test")
    TradeAction_test()
    print("running tipaction_test")
    TipAction_test()
    print("running learningresource_test")
    LearningResource_test()
    print("running medicalaudiencetype_test")
    MedicalAudienceType_test()
    print("running lodgingbusiness_test")
    LodgingBusiness_test()
    print("running bedandbreakfast_test")
    BedAndBreakfast_test()
    print("running enginespecification_test")
    EngineSpecification_test()
    print("running bridge_test")
    Bridge_test()
    print("running onlinestore_test")
    OnlineStore_test()
    print("running reservationstatustype_test")
    ReservationStatusType_test()
    print("running reservationcancelled_test")
    ReservationCancelled_test()
    print("running thesis_test")
    Thesis_test()
    print("running businessaudience_test")
    BusinessAudience_test()
    print("running service_test")
    Service_test()
    print("running financialproduct_test")
    FinancialProduct_test()
    print("running investmentordeposit_test")
    InvestmentOrDeposit_test()
    print("running brokerageaccount_test")
    BrokerageAccount_test()
    print("running financialservice_test")
    FinancialService_test()
    print("running automatedteller_test")
    AutomatedTeller_test()
    print("running dayofweek_test")
    DayOfWeek_test()
    print("running thursday_test")
    Thursday_test()
    print("running crematorium_test")
    Crematorium_test()
    print("running medicalconditionstage_test")
    MedicalConditionStage_test()
    print("running dietnutrition_test")
    DietNutrition_test()
    print("running rheumatologic_test")
    Rheumatologic_test()
    print("running assessaction_test")
    AssessAction_test()
    print("running emergencyservice_test")
    EmergencyService_test()
    print("running firestation_test")
    FireStation_test()
    print("running class_test")
    Class_test()
    print("running datatype_test")
    DataType_test()
    print("running text_test")
    Text_test()
    print("running cssselectortype_test")
    CssSelectorType_test()
    print("running laserdiscformat_test")
    LaserDiscFormat_test()
    print("running ticket_test")
    Ticket_test()
    print("running offeritemcondition_test")
    OfferItemCondition_test()
    print("running usedcondition_test")
    UsedCondition_test()
    print("running webpage_test")
    WebPage_test()
    print("running collectionpage_test")
    CollectionPage_test()
    print("running lifestylemodification_test")
    LifestyleModification_test()
    print("running physicalactivity_test")
    PhysicalActivity_test()
    print("running liquorstore_test")
    LiquorStore_test()
    print("running drugpregnancycategory_test")
    DrugPregnancyCategory_test()
    print("running fdacategoryx_test")
    FDAcategoryX_test()
    print("running educationalorganization_test")
    EducationalOrganization_test()
    print("running series_test")
    Series_test()
    print("running eventseries_test")
    EventSeries_test()
    print("running wearablesizegrouppetite_test")
    WearableSizeGroupPetite_test()
    print("running healthaspectenumeration_test")
    HealthAspectEnumeration_test()
    print("running prognosishealthaspect_test")
    PrognosisHealthAspect_test()
    print("running legalforcestatus_test")
    LegalForceStatus_test()
    print("running partiallyinforce_test")
    PartiallyInForce_test()
    print("running restockingfees_test")
    RestockingFees_test()
    print("running wearablemeasurementtypeenumeration_test")
    WearableMeasurementTypeEnumeration_test()
    print("running wearablemeasurementhips_test")
    WearableMeasurementHips_test()
    print("running userinteraction_test")
    UserInteraction_test()
    print("running userpagevisits_test")
    UserPageVisits_test()
    print("running digitaldocumentpermissiontype_test")
    DigitalDocumentPermissionType_test()
    print("running commentpermission_test")
    CommentPermission_test()
    print("running mediamanipulationratingenumeration_test")
    MediaManipulationRatingEnumeration_test()
    print("running originalmediacontent_test")
    OriginalMediaContent_test()
    print("running dvdformat_test")
    DVDFormat_test()
    print("running userdownloads_test")
    UserDownloads_test()
    print("running trainreservation_test")
    TrainReservation_test()
    print("running musicplaylist_test")
    MusicPlaylist_test()
    print("running virtuallocation_test")
    VirtualLocation_test()
    print("running entertainmentbusiness_test")
    EntertainmentBusiness_test()
    print("running adultentertainment_test")
    AdultEntertainment_test()
    print("running review_test")
    Review_test()
    print("running recommendation_test")
    Recommendation_test()
    print("running mediaobject_test")
    MediaObject_test()
    print("running audioobject_test")
    AudioObject_test()
    print("running book_test")
    Book_test()
    print("running audiobook_test")
    Audiobook_test()
    print("running medicalaudience_test")
    MedicalAudience_test()
    print("running person_test")
    Person_test()
    print("running patient_test")
    Patient_test()
    print("running governmentbenefitstype_test")
    GovernmentBenefitsType_test()
    print("running businesssupport_test")
    BusinessSupport_test()
    print("running satireorparodycontent_test")
    SatireOrParodyContent_test()
    print("running genitourinary_test")
    Genitourinary_test()
    print("running collection_test")
    Collection_test()
    print("running productcollection_test")
    ProductCollection_test()
    print("running role_test")
    Role_test()
    print("running organizationrole_test")
    OrganizationRole_test()
    print("running findaction_test")
    FindAction_test()
    print("running geocircle_test")
    GeoCircle_test()
    print("running sportsactivitylocation_test")
    SportsActivityLocation_test()
    print("running room_test")
    Room_test()
    print("running meetingroom_test")
    MeetingRoom_test()
    print("running uknonprofittype_test")
    UKNonprofitType_test()
    print("running trip_test")
    Trip_test()
    print("running boattrip_test")
    BoatTrip_test()
    print("running employeerole_test")
    EmployeeRole_test()
    print("running bookstore_test")
    BookStore_test()
    print("running gastroenterologic_test")
    Gastroenterologic_test()
    print("running updateaction_test")
    UpdateAction_test()
    print("running softwareapplication_test")
    SoftwareApplication_test()
    print("running mobileapplication_test")
    MobileApplication_test()
    print("running diagnosticprocedure_test")
    DiagnosticProcedure_test()
    print("running legalservice_test")
    LegalService_test()
    print("running attorney_test")
    Attorney_test()
    print("running euenergyefficiencycategorya_test")
    EUEnergyEfficiencyCategoryA_test()
    print("running bloodtest_test")
    BloodTest_test()
    print("running radiostation_test")
    RadioStation_test()
    print("running computerstore_test")
    ComputerStore_test()
    print("running rentalcarreservation_test")
    RentalCarReservation_test()
    print("running itemlist_test")
    ItemList_test()
    print("running causeshealthaspect_test")
    CausesHealthAspect_test()
    print("running restricteddiet_test")
    RestrictedDiet_test()
    print("running vegetariandiet_test")
    VegetarianDiet_test()
    print("running merchantreturnpolicyseasonaloverride_test")
    MerchantReturnPolicySeasonalOverride_test()
    print("running rearwheeldriveconfiguration_test")
    RearWheelDriveConfiguration_test()
    print("running contactpointoption_test")
    ContactPointOption_test()
    print("running ignoreaction_test")
    IgnoreAction_test()
    print("running usercheckins_test")
    UserCheckins_test()
    print("running moveaction_test")
    MoveAction_test()
    print("running arriveaction_test")
    ArriveAction_test()
    print("running recyclingcenter_test")
    RecyclingCenter_test()
    print("running homeandconstructionbusiness_test")
    HomeAndConstructionBusiness_test()
    print("running roofingcontractor_test")
    RoofingContractor_test()
    print("running wearablemeasurementlength_test")
    WearableMeasurementLength_test()
    print("running reservationconfirmed_test")
    ReservationConfirmed_test()
    print("running euenergyefficiencycategoryc_test")
    EUEnergyEfficiencyCategoryC_test()
    print("running geocoordinates_test")
    GeoCoordinates_test()
    print("running pricetypeenumeration_test")
    PriceTypeEnumeration_test()
    print("running srp_test")
    SRP_test()
    print("running taxistand_test")
    TaxiStand_test()
    print("running nonprofit501c2_test")
    Nonprofit501c2_test()
    print("running clothingstore_test")
    ClothingStore_test()
    print("running videoobject_test")
    VideoObject_test()
    print("running videoobjectsnapshot_test")
    VideoObjectSnapshot_test()
    print("running overviewhealthaspect_test")
    OverviewHealthAspect_test()
    print("running guide_test")
    Guide_test()
    print("running transferaction_test")
    TransferAction_test()
    print("running moneytransfer_test")
    MoneyTransfer_test()
    print("running festival_test")
    Festival_test()
    print("running endocrine_test")
    Endocrine_test()
    print("running wearablemeasurementoutsideleg_test")
    WearableMeasurementOutsideLeg_test()
    print("running musicalbum_test")
    MusicAlbum_test()
    print("running article_test")
    Article_test()
    print("running newsarticle_test")
    NewsArticle_test()
    print("running askpublicnewsarticle_test")
    AskPublicNewsArticle_test()
    print("running servicechannel_test")
    ServiceChannel_test()
    print("running saturday_test")
    Saturday_test()
    print("running occupationalexperiencerequirements_test")
    OccupationalExperienceRequirements_test()
    print("running healthplannetwork_test")
    HealthPlanNetwork_test()
    print("running touristtrip_test")
    TouristTrip_test()
    print("running symptomshealthaspect_test")
    SymptomsHealthAspect_test()
    print("running neuro_test")
    Neuro_test()
    print("running hobbyshop_test")
    HobbyShop_test()
    print("running bodymeasurementfoot_test")
    BodyMeasurementFoot_test()
    print("running casino_test")
    Casino_test()
    print("running softwaresourcecode_test")
    SoftwareSourceCode_test()
    print("running multicentertrial_test")
    MultiCenterTrial_test()
    print("running itemavailability_test")
    ItemAvailability_test()
    print("running backorder_test")
    BackOrder_test()
    print("running creativeworkseason_test")
    CreativeWorkSeason_test()
    print("running podcastseason_test")
    PodcastSeason_test()
    print("running eventreservation_test")
    EventReservation_test()
    print("running medicalproceduretype_test")
    MedicalProcedureType_test()
    print("running rating_test")
    Rating_test()
    print("running aggregaterating_test")
    AggregateRating_test()
    print("running datadownload_test")
    DataDownload_test()
    print("running merchantreturnenumeration_test")
    MerchantReturnEnumeration_test()
    print("running merchantreturnunlimitedwindow_test")
    MerchantReturnUnlimitedWindow_test()
    print("running creativeworkseries_test")
    CreativeWorkSeries_test()
    print("running periodical_test")
    Periodical_test()
    print("running comicseries_test")
    ComicSeries_test()
    print("running adultorientedenumeration_test")
    AdultOrientedEnumeration_test()
    print("running sexualcontentconsideration_test")
    SexualContentConsideration_test()
    print("running governmentservice_test")
    GovernmentService_test()
    print("running landform_test")
    Landform_test()
    print("running continent_test")
    Continent_test()
    print("running educationaloccupationalcredential_test")
    EducationalOccupationalCredential_test()
    print("running medicalcondition_test")
    MedicalCondition_test()
    print("running infectiousdisease_test")
    InfectiousDisease_test()
    print("running returnmethodenumeration_test")
    ReturnMethodEnumeration_test()
    print("running returnbymail_test")
    ReturnByMail_test()
    print("running infectiousagentclass_test")
    InfectiousAgentClass_test()
    print("running prion_test")
    Prion_test()
    print("running performinggroup_test")
    PerformingGroup_test()
    print("running musicgroup_test")
    MusicGroup_test()
    print("running singlecentertrial_test")
    SingleCenterTrial_test()
    print("running nonprofit501c10_test")
    Nonprofit501c10_test()
    print("running medicaltestpanel_test")
    MedicalTestPanel_test()
    print("running drugstrength_test")
    DrugStrength_test()
    print("running typeandquantitynode_test")
    TypeAndQuantityNode_test()
    print("running mediasubscription_test")
    MediaSubscription_test()
    print("running drugcostcategory_test")
    DrugCostCategory_test()
    print("running retail_test")
    Retail_test()
    print("running wearablesizegrouphusky_test")
    WearableSizeGroupHusky_test()
    print("running diabeticdiet_test")
    DiabeticDiet_test()
    print("running medicalimagingtechnique_test")
    MedicalImagingTechnique_test()
    print("running xray_test")
    XRay_test()
    print("running wearablemeasurementinseam_test")
    WearableMeasurementInseam_test()
    print("running seedoctorhealthaspect_test")
    SeeDoctorHealthAspect_test()
    print("running musicevent_test")
    MusicEvent_test()
    print("running mixedeventattendancemode_test")
    MixedEventAttendanceMode_test()
    print("running dermatology_test")
    Dermatology_test()
    print("running therapeuticprocedure_test")
    TherapeuticProcedure_test()
    print("running medicaltherapy_test")
    MedicalTherapy_test()
    print("running episode_test")
    Episode_test()
    print("running radioepisode_test")
    RadioEpisode_test()
    print("running medicalsignorsymptom_test")
    MedicalSignOrSymptom_test()
    print("running bodymeasurementarm_test")
    BodyMeasurementArm_test()
    print("running chooseaction_test")
    ChooseAction_test()
    print("running voteaction_test")
    VoteAction_test()
    print("running wpsidebar_test")
    WPSideBar_test()
    print("running residence_test")
    Residence_test()
    print("running apartmentcomplex_test")
    ApartmentComplex_test()
    print("running sculpture_test")
    Sculpture_test()
    print("running surgical_test")
    Surgical_test()
    print("running terminated_test")
    Terminated_test()
    print("running energystarenergyefficiencyenumeration_test")
    EnergyStarEnergyEfficiencyEnumeration_test()
    print("running bankaccount_test")
    BankAccount_test()
    print("running depositaccount_test")
    DepositAccount_test()
    print("running movingcompany_test")
    MovingCompany_test()
    print("running offer_test")
    Offer_test()
    print("running aggregateoffer_test")
    AggregateOffer_test()
    print("running wearablesizesystemgs1_test")
    WearableSizeSystemGS1_test()
    print("running employmentagency_test")
    EmploymentAgency_test()
    print("running ligament_test")
    Ligament_test()
    print("running fdacategoryc_test")
    FDAcategoryC_test()
    print("running optometric_test")
    Optometric_test()
    print("running outletstore_test")
    OutletStore_test()
    print("running refundtypeenumeration_test")
    RefundTypeEnumeration_test()
    print("running storecreditrefund_test")
    StoreCreditRefund_test()
    print("running internetcafe_test")
    InternetCafe_test()
    print("running administrativearea_test")
    AdministrativeArea_test()
    print("running gameserverstatus_test")
    GameServerStatus_test()
    print("running onlinefull_test")
    OnlineFull_test()
    print("running consumeaction_test")
    ConsumeAction_test()
    print("running listenaction_test")
    ListenAction_test()
    print("running socialmediaposting_test")
    SocialMediaPosting_test()
    print("running musicvenue_test")
    MusicVenue_test()
    print("running genetic_test")
    Genetic_test()
    print("running head_test")
    Head_test()
    print("running msrp_test")
    MSRP_test()
    print("running policestation_test")
    PoliceStation_test()
    print("running friday_test")
    Friday_test()
    print("running paymentstatustype_test")
    PaymentStatusType_test()
    print("running paymentcomplete_test")
    PaymentComplete_test()
    print("running cableorsatelliteservice_test")
    CableOrSatelliteService_test()
    print("running payaction_test")
    PayAction_test()
    print("running deliverytimesettings_test")
    DeliveryTimeSettings_test()
    print("running warrantypromise_test")
    WarrantyPromise_test()
    print("running mobilephonestore_test")
    MobilePhoneStore_test()
    print("running nonprofit501q_test")
    Nonprofit501q_test()
    print("running drugcost_test")
    DrugCost_test()
    print("running readpermission_test")
    ReadPermission_test()
    print("running wearablesizesystemcontinental_test")
    WearableSizeSystemContinental_test()
    print("running rentaction_test")
    RentAction_test()
    print("running shortstory_test")
    ShortStory_test()
    print("running breadcrumblist_test")
    BreadcrumbList_test()
    print("running medicalobservationalstudydesign_test")
    MedicalObservationalStudyDesign_test()
    print("running observational_test")
    Observational_test()
    print("running landmarksorhistoricalbuildings_test")
    LandmarksOrHistoricalBuildings_test()
    print("running seat_test")
    Seat_test()
    print("running paymentservice_test")
    PaymentService_test()
    print("running percutaneousprocedure_test")
    PercutaneousProcedure_test()
    print("running opentrial_test")
    OpenTrial_test()
    print("running paymentdeclined_test")
    PaymentDeclined_test()
    print("running musicalbumproductiontype_test")
    MusicAlbumProductionType_test()
    print("running museum_test")
    Museum_test()
    print("running taxi_test")
    Taxi_test()
    print("running traintrip_test")
    TrainTrip_test()
    print("running geospatialgeometry_test")
    GeospatialGeometry_test()
    print("running healthandbeautybusiness_test")
    HealthAndBeautyBusiness_test()
    print("running nonprofit501c24_test")
    Nonprofit501c24_test()
    print("running vessel_test")
    Vessel_test()
    print("running vein_test")
    Vein_test()
    print("running itemlistordertype_test")
    ItemListOrderType_test()
    print("running itemlistorderdescending_test")
    ItemListOrderDescending_test()
    print("running medicalevidencelevel_test")
    MedicalEvidenceLevel_test()
    print("running evidencelevelc_test")
    EvidenceLevelC_test()
    print("running artery_test")
    Artery_test()
    print("running noninvasiveprocedure_test")
    NoninvasiveProcedure_test()
    print("running sitenavigationelement_test")
    SiteNavigationElement_test()
    print("running neck_test")
    Neck_test()
    print("running doseschedule_test")
    DoseSchedule_test()
    print("running returnlabelsourceenumeration_test")
    ReturnLabelSourceEnumeration_test()
    print("running returnlabelinbox_test")
    ReturnLabelInBox_test()
    print("running healthcareconsideration_test")
    HealthcareConsideration_test()
    print("running informaction_test")
    InformAction_test()
    print("running confirmaction_test")
    ConfirmAction_test()
    print("running foodservice_test")
    FoodService_test()
    print("running controlaction_test")
    ControlAction_test()
    print("running deactivateaction_test")
    DeactivateAction_test()
    print("running theatergroup_test")
    TheaterGroup_test()
    print("running orderpaymentdue_test")
    OrderPaymentDue_test()
    print("running autorental_test")
    AutoRental_test()
    print("running digitalformat_test")
    DigitalFormat_test()
    print("running inviteaction_test")
    InviteAction_test()
    print("running podcastseries_test")
    PodcastSeries_test()
    print("running sizespecification_test")
    SizeSpecification_test()
    print("running webcontent_test")
    WebContent_test()
    print("running healthtopiccontent_test")
    HealthTopicContent_test()
    print("running criticreview_test")
    CriticReview_test()
    print("running cleaningfee_test")
    CleaningFee_test()
    print("running aquarium_test")
    Aquarium_test()
    print("running wearablesizesystemit_test")
    WearableSizeSystemIT_test()
    print("running publicswimmingpool_test")
    PublicSwimmingPool_test()
    print("running wearablesizegroupplus_test")
    WearableSizeGroupPlus_test()
    print("running podcastepisode_test")
    PodcastEpisode_test()
    print("running dataset_test")
    Dataset_test()
    print("running conversation_test")
    Conversation_test()
    print("running medicalorganization_test")
    MedicalOrganization_test()
    print("running medicalclinic_test")
    MedicalClinic_test()
    print("running covidtestingfacility_test")
    CovidTestingFacility_test()
    print("running outofstock_test")
    OutOfStock_test()
    print("running postalcoderangespecification_test")
    PostalCodeRangeSpecification_test()
    print("running nonprofit501c18_test")
    Nonprofit501c18_test()
    print("running reactaction_test")
    ReactAction_test()
    print("running wantaction_test")
    WantAction_test()
    print("running mixtapealbum_test")
    MixtapeAlbum_test()
    print("running nonprofit501c20_test")
    Nonprofit501c20_test()
    print("running nonprofit501c15_test")
    Nonprofit501c15_test()
    print("running bookformattype_test")
    BookFormatType_test()
    print("running graphicnovel_test")
    GraphicNovel_test()
    print("running taxireservation_test")
    TaxiReservation_test()
    print("running bacteria_test")
    Bacteria_test()
    print("running nightclub_test")
    NightClub_test()
    print("running organizeaction_test")
    OrganizeAction_test()
    print("running planaction_test")
    PlanAction_test()
    print("running scheduleaction_test")
    ScheduleAction_test()
    print("running scholarlyarticle_test")
    ScholarlyArticle_test()
    print("running placeofworship_test")
    PlaceOfWorship_test()
    print("running buddhisttemple_test")
    BuddhistTemple_test()
    print("running satiricalarticle_test")
    SatiricalArticle_test()
    print("running foodestablishment_test")
    FoodEstablishment_test()
    print("running marryaction_test")
    MarryAction_test()
    print("running profilepage_test")
    ProfilePage_test()
    print("running amusementpark_test")
    AmusementPark_test()
    print("running bowlingalley_test")
    BowlingAlley_test()
    print("running sunday_test")
    Sunday_test()
    print("running screeninghealthaspect_test")
    ScreeningHealthAspect_test()
    print("running paymentmethod_test")
    PaymentMethod_test()
    print("running paymentcard_test")
    PaymentCard_test()
    print("running respiratorytherapy_test")
    RespiratoryTherapy_test()
    print("running datafeed_test")
    DataFeed_test()
    print("running carusagetype_test")
    CarUsageType_test()
    print("running taxivehicleusage_test")
    TaxiVehicleUsage_test()
    print("running electronicsstore_test")
    ElectronicsStore_test()
    print("running toxicologic_test")
    Toxicologic_test()
    print("running cdformat_test")
    CDFormat_test()
    print("running videogameclip_test")
    VideoGameClip_test()
    print("running achieveaction_test")
    AchieveAction_test()
    print("running tieaction_test")
    TieAction_test()
    print("running allwheeldriveconfiguration_test")
    AllWheelDriveConfiguration_test()
    print("running bone_test")
    Bone_test()
    print("running broadcastchannel_test")
    BroadcastChannel_test()
    print("running radiochannel_test")
    RadioChannel_test()
    print("running amradiochannel_test")
    AMRadioChannel_test()
    print("running pet_test")
    PET_test()
    print("running musicalbumreleasetype_test")
    MusicAlbumReleaseType_test()
    print("running nonprofit501n_test")
    Nonprofit501n_test()
    print("running project_test")
    Project_test()
    print("running researchproject_test")
    ResearchProject_test()
    print("running dislikeaction_test")
    DislikeAction_test()
    print("running schedule_test")
    Schedule_test()
    print("running contactpage_test")
    ContactPage_test()
    print("running alignmentobject_test")
    AlignmentObject_test()
    print("running pricespecification_test")
    PriceSpecification_test()
    print("running paymentchargespecification_test")
    PaymentChargeSpecification_test()
    print("running webapi_test")
    WebAPI_test()
    print("running tvclip_test")
    TVClip_test()
    print("running quantity_test")
    Quantity_test()
    print("running mass_test")
    Mass_test()
    print("running gendertype_test")
    GenderType_test()
    print("running male_test")
    Male_test()
    print("running dangerousgoodconsideration_test")
    DangerousGoodConsideration_test()
    print("running hypertoc_test")
    HyperToc_test()
    print("running restaurant_test")
    Restaurant_test()
    print("running permit_test")
    Permit_test()
    print("running governmentpermit_test")
    GovernmentPermit_test()
    print("running sportsclub_test")
    SportsClub_test()
    print("running publicationevent_test")
    PublicationEvent_test()
    print("running travelagency_test")
    TravelAgency_test()
    print("running nailsalon_test")
    NailSalon_test()
    print("running refurbishedcondition_test")
    RefurbishedCondition_test()
    print("running plumber_test")
    Plumber_test()
    print("running touristinformationcenter_test")
    TouristInformationCenter_test()
    print("running quoteaction_test")
    QuoteAction_test()
    print("running wearablesizegroupboys_test")
    WearableSizeGroupBoys_test()
    print("running actionstatustype_test")
    ActionStatusType_test()
    print("running completedactionstatus_test")
    CompletedActionStatus_test()
    print("running bodyofwater_test")
    BodyOfWater_test()
    print("running oceanbodyofwater_test")
    OceanBodyOfWater_test()
    print("running playgameaction_test")
    PlayGameAction_test()
    print("running activateaction_test")
    ActivateAction_test()
    print("running menusection_test")
    MenuSection_test()
    print("running movierentalstore_test")
    MovieRentalStore_test()
    print("running chapter_test")
    Chapter_test()
    print("running bodymeasurementunderbust_test")
    BodyMeasurementUnderbust_test()
    print("running order_test")
    Order_test()
    print("running artgallery_test")
    ArtGallery_test()
    print("running nonprofit501c8_test")
    Nonprofit501c8_test()
    print("running steeringpositionvalue_test")
    SteeringPositionValue_test()
    print("running lefthanddriving_test")
    LeftHandDriving_test()
    print("running comicstory_test")
    ComicStory_test()
    print("running comiccoverart_test")
    ComicCoverArt_test()
    print("running likeaction_test")
    LikeAction_test()
    print("running wearablemeasurementcollar_test")
    WearableMeasurementCollar_test()
    print("running itemlistunordered_test")
    ItemListUnordered_test()
    print("running gameavailabilityenumeration_test")
    GameAvailabilityEnumeration_test()
    print("running demogameavailability_test")
    DemoGameAvailability_test()
    print("running canal_test")
    Canal_test()
    print("running sideeffectshealthaspect_test")
    SideEffectsHealthAspect_test()
    print("running audiobookformat_test")
    AudiobookFormat_test()
    print("running mathsolver_test")
    MathSolver_test()
    print("running euenergyefficiencycategoryb_test")
    EUEnergyEfficiencyCategoryB_test()
    print("running playaction_test")
    PlayAction_test()
    print("running exerciseaction_test")
    ExerciseAction_test()
    print("running biochementity_test")
    BioChemEntity_test()
    print("running gene_test")
    Gene_test()
    print("running downpayment_test")
    Downpayment_test()
    print("running invoice_test")
    Invoice_test()
    print("running governmentoffice_test")
    GovernmentOffice_test()
    print("running postoffice_test")
    PostOffice_test()
    print("running digitaldocument_test")
    DigitalDocument_test()
    print("running textdigitaldocument_test")
    TextDigitalDocument_test()
    print("running flight_test")
    Flight_test()
    print("running decontextualizedcontent_test")
    DecontextualizedContent_test()
    print("running bedtype_test")
    BedType_test()
    print("running blogposting_test")
    BlogPosting_test()
    print("running distance_test")
    Distance_test()
    print("running reservationpending_test")
    ReservationPending_test()
    print("running lodgingreservation_test")
    LodgingReservation_test()
    print("running searchresultspage_test")
    SearchResultsPage_test()
    print("running tenniscomplex_test")
    TennisComplex_test()
    print("running governmentbuilding_test")
    GovernmentBuilding_test()
    print("running embassy_test")
    Embassy_test()
    print("running damagedcondition_test")
    DamagedCondition_test()
    print("running legalvaluelevel_test")
    LegalValueLevel_test()
    print("running unofficiallegalvalue_test")
    UnofficialLegalValue_test()
    print("running medicalguideline_test")
    MedicalGuideline_test()
    print("running campingpitch_test")
    CampingPitch_test()
    print("running loseaction_test")
    LoseAction_test()
    print("running wearablesizegrouptall_test")
    WearableSizeGroupTall_test()
    print("running kosherdiet_test")
    KosherDiet_test()
    print("running fdacategoryb_test")
    FDAcategoryB_test()
    print("running wearablesizegroupjuniors_test")
    WearableSizeGroupJuniors_test()
    print("running elementaryschool_test")
    ElementarySchool_test()
    print("running message_test")
    Message_test()
    print("running emailmessage_test")
    EmailMessage_test()
    print("running saleevent_test")
    SaleEvent_test()
    print("running mediareviewitem_test")
    MediaReviewItem_test()
    print("running imageobject_test")
    ImageObject_test()
    print("running imageobjectsnapshot_test")
    ImageObjectSnapshot_test()
    print("running pharmacy_test")
    Pharmacy_test()
    print("running contactpoint_test")
    ContactPoint_test()
    print("running publicholidays_test")
    PublicHolidays_test()
    print("running bustrip_test")
    BusTrip_test()
    print("running physician_test")
    Physician_test()
    print("running eventstatustype_test")
    EventStatusType_test()
    print("running eventcancelled_test")
    EventCancelled_test()
    print("running resultsnotavailable_test")
    ResultsNotAvailable_test()
    print("running campground_test")
    Campground_test()
    print("running joint_test")
    Joint_test()
    print("running merchantreturnpolicy_test")
    MerchantReturnPolicy_test()
    print("running completedatafeed_test")
    CompleteDataFeed_test()
    print("running primarycare_test")
    PrimaryCare_test()
    print("running city_test")
    City_test()
    print("running healthplancostsharingspecification_test")
    HealthPlanCostSharingSpecification_test()
    print("running medicalstudy_test")
    MedicalStudy_test()
    print("running medicalobservationalstudy_test")
    MedicalObservationalStudy_test()
    print("running lockerdelivery_test")
    LockerDelivery_test()
    print("running itemlistorderascending_test")
    ItemListOrderAscending_test()
    print("running audioobjectsnapshot_test")
    AudioObjectSnapshot_test()
    print("running statement_test")
    Statement_test()
    print("running wearablemeasurementwaist_test")
    WearableMeasurementWaist_test()
    print("running wearablemeasurementback_test")
    WearableMeasurementBack_test()
    print("running anaerobicactivity_test")
    AnaerobicActivity_test()
    print("running reducedrelevanceforchildrenconsideration_test")
    ReducedRelevanceForChildrenConsideration_test()
    print("running researchorganization_test")
    ResearchOrganization_test()
    print("running eye_test")
    Eye_test()
    print("running qapage_test")
    QAPage_test()
    print("running playground_test")
    Playground_test()
    print("running chemicalsubstance_test")
    ChemicalSubstance_test()
    print("running wearablesizegroupregular_test")
    WearableSizeGroupRegular_test()
    print("running subwaystation_test")
    SubwayStation_test()
    print("running someproducts_test")
    SomeProducts_test()
    print("running monetaryamount_test")
    MonetaryAmount_test()
    print("running addaction_test")
    AddAction_test()
    print("running insertaction_test")
    InsertAction_test()
    print("running productgroup_test")
    ProductGroup_test()
    print("running livingwithhealthaspect_test")
    LivingWithHealthAspect_test()
    print("running recommendeddoseschedule_test")
    RecommendedDoseSchedule_test()
    print("running actionaccessspecification_test")
    ActionAccessSpecification_test()
    print("running beach_test")
    Beach_test()
    print("running occupationalactivity_test")
    OccupationalActivity_test()
    print("running fdacategoryd_test")
    FDAcategoryD_test()
    print("running podiatric_test")
    Podiatric_test()
    print("running medicalscholarlyarticle_test")
    MedicalScholarlyArticle_test()
    print("running offerforlease_test")
    OfferForLease_test()
    print("running church_test")
    Church_test()
    print("running catholicchurch_test")
    CatholicChurch_test()
    print("running reservationhold_test")
    ReservationHold_test()
    print("running nonprofit501c6_test")
    Nonprofit501c6_test()
    print("running midwifery_test")
    Midwifery_test()
    print("running livealbum_test")
    LiveAlbum_test()
    print("running exhibitionevent_test")
    ExhibitionEvent_test()
    print("running fullgameavailability_test")
    FullGameAvailability_test()
    print("running resumeaction_test")
    ResumeAction_test()
    print("running programmembership_test")
    ProgramMembership_test()
    print("running discoveraction_test")
    DiscoverAction_test()
    print("running offlinepermanently_test")
    OfflinePermanently_test()
    print("running cafeorcoffeeshop_test")
    CafeOrCoffeeShop_test()
    print("running reimbursementcap_test")
    ReimbursementCap_test()
    print("running drycleaningorlaundry_test")
    DryCleaningOrLaundry_test()
    print("running contagiousnesshealthaspect_test")
    ContagiousnessHealthAspect_test()
    print("running rvpark_test")
    RVPark_test()
    print("running lymphaticvessel_test")
    LymphaticVessel_test()
    print("running exchangerefund_test")
    ExchangeRefund_test()
    print("running charitableincorporatedorganization_test")
    CharitableIncorporatedOrganization_test()
    print("running discontinued_test")
    Discontinued_test()
    print("running bodymeasurementneck_test")
    BodyMeasurementNeck_test()
    print("running evidencelevela_test")
    EvidenceLevelA_test()
    print("running speechpathology_test")
    SpeechPathology_test()
    print("running openinghoursspecification_test")
    OpeningHoursSpecification_test()
    print("running presentationdigitaldocument_test")
    PresentationDigitalDocument_test()
    print("running professionalservice_test")
    ProfessionalService_test()
    print("running bankorcreditunion_test")
    BankOrCreditUnion_test()
    print("running ingredientshealthaspect_test")
    IngredientsHealthAspect_test()
    print("running physicaltherapy_test")
    PhysicalTherapy_test()
    print("running substance_test")
    Substance_test()
    print("running drug_test")
    Drug_test()
    print("running season_test")
    Season_test()
    print("running eventvenue_test")
    EventVenue_test()
    print("running eprelease_test")
    EPRelease_test()
    print("running reservationpackage_test")
    ReservationPackage_test()
    print("running autobodyshop_test")
    AutoBodyShop_test()
    print("running typeshealthaspect_test")
    TypesHealthAspect_test()
    print("running checkaction_test")
    CheckAction_test()
    print("running studioalbum_test")
    StudioAlbum_test()
    print("running disabilitysupport_test")
    DisabilitySupport_test()
    print("running stageshealthaspect_test")
    StagesHealthAspect_test()
    print("running legislation_test")
    Legislation_test()
    print("running legislationobject_test")
    LegislationObject_test()
    print("running airport_test")
    Airport_test()
    print("running userlikes_test")
    UserLikes_test()
    print("running ampstory_test")
    AmpStory_test()
    print("running cookaction_test")
    CookAction_test()
    print("running medicalwebpage_test")
    MedicalWebPage_test()
    print("running throat_test")
    Throat_test()
    print("running urologic_test")
    Urologic_test()
    print("running stadiumorarena_test")
    StadiumOrArena_test()
    print("running fdanotevaluated_test")
    FDAnotEvaluated_test()
    print("running cardiovascular_test")
    Cardiovascular_test()
    print("running usercomments_test")
    UserComments_test()
    print("running lung_test")
    Lung_test()
    print("running reserveaction_test")
    ReserveAction_test()
    print("running orderintransit_test")
    OrderInTransit_test()
    print("running businessevent_test")
    BusinessEvent_test()
    print("running musiccomposition_test")
    MusicComposition_test()
    print("running winaction_test")
    WinAction_test()
    print("running saleprice_test")
    SalePrice_test()
    print("running listitem_test")
    ListItem_test()
    print("running howtotip_test")
    HowToTip_test()
    print("running longitudinal_test")
    Longitudinal_test()
    print("running hackathon_test")
    Hackathon_test()
    print("running statisticalpopulation_test")
    StatisticalPopulation_test()
    print("running writeaction_test")
    WriteAction_test()
    print("running howtosection_test")
    HowToSection_test()
    print("running hvacbusiness_test")
    HVACBusiness_test()
    print("running repaymentspecification_test")
    RepaymentSpecification_test()
    print("running relatedtopicshealthaspect_test")
    RelatedTopicsHealthAspect_test()
    print("running userplusones_test")
    UserPlusOnes_test()
    print("running gynecologic_test")
    Gynecologic_test()
    print("running merchantreturnnotpermitted_test")
    MerchantReturnNotPermitted_test()
    print("running orderpickupavailable_test")
    OrderPickupAvailable_test()
    print("running deliveryevent_test")
    DeliveryEvent_test()
    print("running limitedbyguaranteecharity_test")
    LimitedByGuaranteeCharity_test()
    print("running computerlanguage_test")
    ComputerLanguage_test()
    print("running wearablemeasurementcup_test")
    WearableMeasurementCup_test()
    print("running reporteddoseschedule_test")
    ReportedDoseSchedule_test()
    print("running vehicle_test")
    Vehicle_test()
    print("running motorcycle_test")
    Motorcycle_test()
    print("running nonprofit501c21_test")
    Nonprofit501c21_test()
    print("running followaction_test")
    FollowAction_test()
    print("running game_test")
    Game_test()
    print("running videogame_test")
    VideoGame_test()
    print("running opinionnewsarticle_test")
    OpinionNewsArticle_test()
    print("running mapcategorytype_test")
    MapCategoryType_test()
    print("running ngo_test")
    NGO_test()
    print("running busstation_test")
    BusStation_test()
    print("running trainstation_test")
    TrainStation_test()
    print("running sportinggoodsstore_test")
    SportingGoodsStore_test()
    print("running unregisteraction_test")
    UnRegisterAction_test()
    print("running doubleblindedtrial_test")
    DoubleBlindedTrial_test()
    print("running toystore_test")
    ToyStore_test()
    print("running unemploymentsupport_test")
    UnemploymentSupport_test()
    print("running medicalsign_test")
    MedicalSign_test()
    print("running movieseries_test")
    MovieSeries_test()
    print("running car_test")
    Car_test()
    print("running soldout_test")
    SoldOut_test()
    print("running physiotherapy_test")
    Physiotherapy_test()
    print("running pond_test")
    Pond_test()
    print("running propertyvaluespecification_test")
    PropertyValueSpecification_test()
    print("running borrowaction_test")
    BorrowAction_test()
    print("running hindudiet_test")
    HinduDiet_test()
    print("running hematologic_test")
    Hematologic_test()
    print("running lowsaltdiet_test")
    LowSaltDiet_test()
    print("running xpathtype_test")
    XPathType_test()
    print("running singleblindedtrial_test")
    SingleBlindedTrial_test()
    print("running singlerelease_test")
    SingleRelease_test()
    print("running wearablesizesystemau_test")
    WearableSizeSystemAU_test()
    print("running uktrust_test")
    UKTrust_test()
    print("running paidleave_test")
    PaidLeave_test()
    print("running editedorcroppedcontent_test")
    EditedOrCroppedContent_test()
    print("running nonprofit501c12_test")
    Nonprofit501c12_test()
    print("running vitalsign_test")
    VitalSign_test()
    print("running wearablesizesystemmx_test")
    WearableSizeSystemMX_test()
    print("running gardenstore_test")
    GardenStore_test()
    print("running searchrescueorganization_test")
    SearchRescueOrganization_test()
    print("running brainstructure_test")
    BrainStructure_test()
    print("running treatmentshealthaspect_test")
    TreatmentsHealthAspect_test()
    print("running howto_test")
    HowTo_test()
    print("running recipe_test")
    Recipe_test()
    print("running wearablesizegroupmaternity_test")
    WearableSizeGroupMaternity_test()
    print("running replaceaction_test")
    ReplaceAction_test()
    print("running code_test")
    Code_test()
    print("running nonprofit501c16_test")
    Nonprofit501c16_test()
    print("running sizesystemmetric_test")
    SizeSystemMetric_test()
    print("running childcare_test")
    ChildCare_test()
    print("running propertyvalue_test")
    PropertyValue_test()
    print("running locationfeaturespecification_test")
    LocationFeatureSpecification_test()
    print("running remixalbum_test")
    RemixAlbum_test()
    print("running date_test")
    Date_test()
    print("running drugprescriptionstatus_test")
    DrugPrescriptionStatus_test()
    print("running otc_test")
    OTC_test()
    print("running taxon_test")
    Taxon_test()
    print("running accountingservice_test")
    AccountingService_test()
    print("running eventscheduled_test")
    EventScheduled_test()
    print("running wearablemeasurementsleeve_test")
    WearableMeasurementSleeve_test()
    print("running listprice_test")
    ListPrice_test()
    print("running webapplication_test")
    WebApplication_test()
    print("running suspended_test")
    Suspended_test()
    print("running subscription_test")
    Subscription_test()
    print("running freereturn_test")
    FreeReturn_test()
    print("running howtoitem_test")
    HowToItem_test()
    print("running howtotool_test")
    HowToTool_test()
    print("running investmentfund_test")
    InvestmentFund_test()
    print("running failedactionstatus_test")
    FailedActionStatus_test()
    print("running realestateagent_test")
    RealEstateAgent_test()
    print("running advertisercontentarticle_test")
    AdvertiserContentArticle_test()
    print("running drawing_test")
    Drawing_test()
    print("running registeraction_test")
    RegisterAction_test()
    print("running communityhealth_test")
    CommunityHealth_test()
    print("running loanorcredit_test")
    LoanOrCredit_test()
    print("running mortgageloan_test")
    MortgageLoan_test()
    print("running comment_test")
    Comment_test()
    print("running correctioncomment_test")
    CorrectionComment_test()
    print("running busstop_test")
    BusStop_test()
    print("running officeequipmentstore_test")
    OfficeEquipmentStore_test()
    print("running misconceptionshealthaspect_test")
    MisconceptionsHealthAspect_test()
    print("running wearablemeasurementheight_test")
    WearableMeasurementHeight_test()
    print("running prependaction_test")
    PrependAction_test()
    print("running appearance_test")
    Appearance_test()
    print("running resort_test")
    Resort_test()
    print("running skiresort_test")
    SkiResort_test()
    print("running medicaltrial_test")
    MedicalTrial_test()
    print("running nonprofit501c7_test")
    Nonprofit501c7_test()
    print("running dancegroup_test")
    DanceGroup_test()
    print("running photograph_test")
    Photograph_test()
    print("running housepainter_test")
    HousePainter_test()
    print("running orderproblem_test")
    OrderProblem_test()
    print("running nonprofit501a_test")
    Nonprofit501a_test()
    print("running discussionforumposting_test")
    DiscussionForumPosting_test()
    print("running cohortstudy_test")
    CohortStudy_test()
    print("running wednesday_test")
    Wednesday_test()
    print("running unclassifiedadultconsideration_test")
    UnclassifiedAdultConsideration_test()
    print("running transitmap_test")
    TransitMap_test()
    print("running realestatelisting_test")
    RealEstateListing_test()
    print("running sellaction_test")
    SellAction_test()
    print("running shareaction_test")
    ShareAction_test()
    print("running bakery_test")
    Bakery_test()
    print("running wholesalestore_test")
    WholesaleStore_test()
    print("running allocateaction_test")
    AllocateAction_test()
    print("running rejectaction_test")
    RejectAction_test()
    print("running warrantyscope_test")
    WarrantyScope_test()
    print("running speakablespecification_test")
    SpeakableSpecification_test()
    print("running departmentstore_test")
    DepartmentStore_test()
    print("running gasstation_test")
    GasStation_test()
    print("running motorcycledealer_test")
    MotorcycleDealer_test()
    print("running offercatalog_test")
    OfferCatalog_test()
    print("running generalcontractor_test")
    GeneralContractor_test()
    print("running online_test")
    Online_test()
    print("running observation_test")
    Observation_test()
    print("running definedterm_test")
    DefinedTerm_test()
    print("running categorycode_test")
    CategoryCode_test()
    print("running drinkaction_test")
    DrinkAction_test()
    print("running nonprofit501c28_test")
    Nonprofit501c28_test()
    print("running report_test")
    Report_test()
    print("running originalshippingfees_test")
    OriginalShippingFees_test()
    print("running dayspa_test")
    DaySpa_test()
    print("running geriatric_test")
    Geriatric_test()
    print("running appendaction_test")
    AppendAction_test()
    print("running wearablesizegroupwomens_test")
    WearableSizeGroupWomens_test()
    print("running occupation_test")
    Occupation_test()
    print("running radiationtherapy_test")
    RadiationTherapy_test()
    print("running bodymeasurementheight_test")
    BodyMeasurementHeight_test()
    print("running offershippingdetails_test")
    OfferShippingDetails_test()
    print("running nonprofit501c5_test")
    Nonprofit501c5_test()
    print("running nonprofit501c25_test")
    Nonprofit501c25_test()
    print("running medicalresearcher_test")
    MedicalResearcher_test()
    print("running radioseries_test")
    RadioSeries_test()
    print("running medicalsymptom_test")
    MedicalSymptom_test()
    print("running nonprofit501c1_test")
    Nonprofit501c1_test()
    print("running techarticle_test")
    TechArticle_test()
    print("running apireference_test")
    APIReference_test()
    print("running fungus_test")
    Fungus_test()
    print("running medicalriskestimator_test")
    MedicalRiskEstimator_test()
    print("running medicalriskscore_test")
    MedicalRiskScore_test()
    print("running hotel_test")
    Hotel_test()
    print("running askaction_test")
    AskAction_test()
    print("running mediagallery_test")
    MediaGallery_test()
    print("running bodymeasurementhand_test")
    BodyMeasurementHand_test()
    print("running schooldistrict_test")
    SchoolDistrict_test()
    print("running linkrole_test")
    LinkRole_test()
    print("running tvepisode_test")
    TVEpisode_test()
    print("running fmradiochannel_test")
    FMRadioChannel_test()
    print("running writepermission_test")
    WritePermission_test()
    print("running menu_test")
    Menu_test()
    print("running downloadaction_test")
    DownloadAction_test()
    print("running usertweets_test")
    UserTweets_test()
    print("running anesthesia_test")
    Anesthesia_test()
    print("running wearablesizesystemcn_test")
    WearableSizeSystemCN_test()
    print("running vinylformat_test")
    VinylFormat_test()
    print("running fourwheeldriveconfiguration_test")
    FourWheelDriveConfiguration_test()
    print("running performingartstheater_test")
    PerformingArtsTheater_test()
    print("running medicaldevicepurpose_test")
    MedicalDevicePurpose_test()
    print("running zoo_test")
    Zoo_test()
    print("running basicincome_test")
    BasicIncome_test()
    print("running flexibility_test")
    Flexibility_test()
    print("running joinaction_test")
    JoinAction_test()
    print("running icecreamshop_test")
    IceCreamShop_test()
    print("running hindutemple_test")
    HinduTemple_test()
    print("running narcoticconsideration_test")
    NarcoticConsideration_test()
    print("running cancelaction_test")
    CancelAction_test()
    print("running radioseason_test")
    RadioSeason_test()
    print("running dentist_test")
    Dentist_test()
    print("running nonprofit501c11_test")
    Nonprofit501c11_test()
    print("running drugclass_test")
    DrugClass_test()
    print("running musculoskeletal_test")
    Musculoskeletal_test()
    print("running cityhall_test")
    CityHall_test()
    print("running pharmacyspecialty_test")
    PharmacySpecialty_test()
    print("running howtodirection_test")
    HowToDirection_test()
    print("running buyaction_test")
    BuyAction_test()
    print("running nonprofit501e_test")
    Nonprofit501e_test()
    print("running hearingimpairedsupported_test")
    HearingImpairedSupported_test()
    print("running nonprofit501c3_test")
    Nonprofit501c3_test()
    print("running manuscript_test")
    Manuscript_test()
    print("running compilationalbum_test")
    CompilationAlbum_test()
    print("running bookseries_test")
    BookSeries_test()
    print("running returnatkiosk_test")
    ReturnAtKiosk_test()
    print("running touristdestination_test")
    TouristDestination_test()
    print("running rsvpresponsetype_test")
    RsvpResponseType_test()
    print("running broadcastservice_test")
    BroadcastService_test()
    print("running radiobroadcastservice_test")
    RadioBroadcastService_test()
    print("running musicstore_test")
    MusicStore_test()
    print("running installaction_test")
    InstallAction_test()
    print("running nursing_test")
    Nursing_test()
    print("running barorpub_test")
    BarOrPub_test()
    print("running individualproduct_test")
    IndividualProduct_test()
    print("running sportsteam_test")
    SportsTeam_test()
    print("running hairsalon_test")
    HairSalon_test()
    print("running useaction_test")
    UseAction_test()
    print("running soundtrackalbum_test")
    SoundtrackAlbum_test()
    print("running howtostep_test")
    HowToStep_test()
    print("running hardwarestore_test")
    HardwareStore_test()
    print("running virus_test")
    Virus_test()
    print("running endorsementrating_test")
    EndorsementRating_test()
    print("running brewery_test")
    Brewery_test()
    print("running country_test")
    Country_test()
    print("running boatterminal_test")
    BoatTerminal_test()
    print("running play_test")
    Play_test()
    print("running parkingfacility_test")
    ParkingFacility_test()
    print("running medicaldevice_test")
    MedicalDevice_test()
    print("running winery_test")
    Winery_test()
    print("running checkoutaction_test")
    CheckOutAction_test()
    print("running archiveorganization_test")
    ArchiveOrganization_test()
    print("running paymentpastdue_test")
    PaymentPastDue_test()
    print("running grocerystore_test")
    GroceryStore_test()
    print("running effectivenesshealthaspect_test")
    EffectivenessHealthAspect_test()
    print("running occupationaltherapy_test")
    OccupationalTherapy_test()
    print("running venuemap_test")
    VenueMap_test()
    print("running eventmovedonline_test")
    EventMovedOnline_test()
    print("running barcode_test")
    Barcode_test()
    print("running veterinarycare_test")
    VeterinaryCare_test()
    print("running beautysalon_test")
    BeautySalon_test()
    print("running website_test")
    WebSite_test()
    print("running electrician_test")
    Electrician_test()
    print("running euenergyefficiencycategorye_test")
    EUEnergyEfficiencyCategoryE_test()
    print("running businessentitytype_test")
    BusinessEntityType_test()
    print("running returnaction_test")
    ReturnAction_test()
    print("running performancerole_test")
    PerformanceRole_test()
    print("running protein_test")
    Protein_test()
    print("running trackaction_test")
    TrackAction_test()
    print("running deliverychargespecification_test")
    DeliveryChargeSpecification_test()
    print("running publicationissue_test")
    PublicationIssue_test()
    print("running comicissue_test")
    ComicIssue_test()
    print("running agreeaction_test")
    AgreeAction_test()
    print("running activenotrecruiting_test")
    ActiveNotRecruiting_test()
    print("running tuesday_test")
    Tuesday_test()
    print("running protozoa_test")
    Protozoa_test()
    print("running leisuretimeactivity_test")
    LeisureTimeActivity_test()
    print("running acceptaction_test")
    AcceptAction_test()
    print("running nonprofit501c27_test")
    Nonprofit501c27_test()
    print("running alcoholconsideration_test")
    AlcoholConsideration_test()
    print("running cdcpmdrecord_test")
    CDCPMDRecord_test()
    print("running mensclothingstore_test")
    MensClothingStore_test()
    print("running collegeoruniversity_test")
    CollegeOrUniversity_test()
    print("running sheetmusic_test")
    SheetMusic_test()
    print("running wpadblock_test")
    WPAdBlock_test()
    print("running userblocks_test")
    UserBlocks_test()
    print("running seabodyofwater_test")
    SeaBodyOfWater_test()
    print("running wearablemeasurementwidth_test")
    WearableMeasurementWidth_test()
    print("running visualartsevent_test")
    VisualArtsEvent_test()
    print("running language_test")
    Language_test()
    print("running tollfree_test")
    TollFree_test()
    print("running pathologytest_test")
    PathologyTest_test()
    print("running drivingschoolvehicleusage_test")
    DrivingSchoolVehicleUsage_test()
    print("running videogameseries_test")
    VideoGameSeries_test()
    print("running ondemandevent_test")
    OnDemandEvent_test()
    print("running pulmonary_test")
    Pulmonary_test()
    print("running healthclub_test")
    HealthClub_test()
    print("running stagedcontent_test")
    StagedContent_test()
    print("running nonprofit501c9_test")
    Nonprofit501c9_test()
    print("running fastfoodrestaurant_test")
    FastFoodRestaurant_test()
    print("running businessfunction_test")
    BusinessFunction_test()
    print("running dermatologic_test")
    Dermatologic_test()
    print("running paymentdue_test")
    PaymentDue_test()
    print("running djmixalbum_test")
    DJMixAlbum_test()
    print("running url_test")
    URL_test()
    print("running educationalaudience_test")
    EducationalAudience_test()
    print("running gameplaymode_test")
    GamePlayMode_test()
    print("running singleplayer_test")
    SinglePlayer_test()
    print("running healthcare_test")
    HealthCare_test()
    print("running preventionhealthaspect_test")
    PreventionHealthAspect_test()
    print("running departaction_test")
    DepartAction_test()
    print("running energyconsumptiondetails_test")
    EnergyConsumptionDetails_test()
    print("running painting_test")
    Painting_test()
    print("running multiplayer_test")
    MultiPlayer_test()
    print("running creditcard_test")
    CreditCard_test()
    print("running limitedavailability_test")
    LimitedAvailability_test()
    print("running vegandiet_test")
    VeganDiet_test()
    print("running applyaction_test")
    ApplyAction_test()
    print("running parkingmap_test")
    ParkingMap_test()
    print("running giveaction_test")
    GiveAction_test()
    print("running ayurvedic_test")
    Ayurvedic_test()
    print("running wearablesizegroupextratall_test")
    WearableSizeGroupExtraTall_test()
    print("running tvseries_test")
    TVSeries_test()
    print("running floorplan_test")
    FloorPlan_test()
    print("running notinforce_test")
    NotInForce_test()
    print("running radiography_test")
    Radiography_test()
    print("running coop_test")
    CoOp_test()
    print("running _3dmodel_test")
    _3DModel_test()
    print("running backgroundnewsarticle_test")
    BackgroundNewsArticle_test()
    print("running diet_test")
    Diet_test()
    print("running house_test")
    House_test()
    print("running course_test")
    Course_test()
    print("running instock_test")
    InStock_test()
    print("running solvemathaction_test")
    SolveMathAction_test()
    print("running volcano_test")
    Volcano_test()
    print("running rentalvehicleusage_test")
    RentalVehicleUsage_test()
    print("running viewaction_test")
    ViewAction_test()
    print("running nonprofitanbi_test")
    NonprofitANBI_test()
    print("running nonprofit501c22_test")
    Nonprofit501c22_test()
    print("running clinician_test")
    Clinician_test()
    print("running pawnshop_test")
    PawnShop_test()
    print("running danceevent_test")
    DanceEvent_test()
    print("running definedtermset_test")
    DefinedTermSet_test()
    print("running categorycodeset_test")
    CategoryCodeSet_test()
    print("running nonprofit501k_test")
    Nonprofit501k_test()
    print("running pregnancyhealthaspect_test")
    PregnancyHealthAspect_test()
    print("running mobilewebplatform_test")
    MobileWebPlatform_test()
    print("running approvedindication_test")
    ApprovedIndication_test()
    print("running medicalguidelinecontraindication_test")
    MedicalGuidelineContraindication_test()
    print("running golfcourse_test")
    GolfCourse_test()
    print("running befriendaction_test")
    BefriendAction_test()
    print("running motel_test")
    Motel_test()
    print("running eataction_test")
    EatAction_test()
    print("running orderprocessing_test")
    OrderProcessing_test()
    print("running fullrefund_test")
    FullRefund_test()
    print("running preventionindication_test")
    PreventionIndication_test()
    print("running molecularentity_test")
    MolecularEntity_test()
    print("running faqpage_test")
    FAQPage_test()
    print("running bodymeasurementinsideleg_test")
    BodyMeasurementInsideLeg_test()
    print("running reportagenewsarticle_test")
    ReportageNewsArticle_test()
    print("running euenergyefficiencycategoryf_test")
    EUEnergyEfficiencyCategoryF_test()
    print("running tobacconicotineconsideration_test")
    TobaccoNicotineConsideration_test()
    print("running minimumadvertisedprice_test")
    MinimumAdvertisedPrice_test()
    print("running cardiovascularexam_test")
    CardiovascularExam_test()
    print("running quantitativevalue_test")
    QuantitativeValue_test()
    print("running wearablesizesystemeurope_test")
    WearableSizeSystemEurope_test()
    print("running blog_test")
    Blog_test()
    print("running deleteaction_test")
    DeleteAction_test()
    print("running boardingpolicytype_test")
    BoardingPolicyType_test()
    print("running groupboardingpolicy_test")
    GroupBoardingPolicy_test()
    print("running bikestore_test")
    BikeStore_test()
    print("running onsitepickup_test")
    OnSitePickup_test()
    print("running highschool_test")
    HighSchool_test()
    print("running synagogue_test")
    Synagogue_test()
    print("running palliativeprocedure_test")
    PalliativeProcedure_test()
    print("running optician_test")
    Optician_test()
    print("running televisionchannel_test")
    TelevisionChannel_test()
    print("running genericwebplatform_test")
    GenericWebPlatform_test()
    print("running publicationvolume_test")
    PublicationVolume_test()
    print("running shippingdeliverytime_test")
    ShippingDeliveryTime_test()
    print("running unitpricespecification_test")
    UnitPriceSpecification_test()
    print("running radioclip_test")
    RadioClip_test()
    print("running nonprofit501d_test")
    Nonprofit501d_test()
    print("running howorwherehealthaspect_test")
    HowOrWhereHealthAspect_test()
    print("running otolaryngologic_test")
    Otolaryngologic_test()
    print("running presale_test")
    PreSale_test()
    print("running hostel_test")
    Hostel_test()
    print("running psychologicaltreatment_test")
    PsychologicalTreatment_test()
    print("running performaction_test")
    PerformAction_test()
    print("running preorder_test")
    PreOrder_test()
    print("running childrensevent_test")
    ChildrensEvent_test()
    print("running authoritativelegalvalue_test")
    AuthoritativeLegalValue_test()
    print("running wearablesizesystemfr_test")
    WearableSizeSystemFR_test()
    print("running broadcastrelease_test")
    BroadcastRelease_test()
    print("running taxiservice_test")
    TaxiService_test()
    print("running tattooparlor_test")
    TattooParlor_test()
    print("running energystarcertified_test")
    EnergyStarCertified_test()
    print("running sendaction_test")
    SendAction_test()
    print("running demand_test")
    Demand_test()
    print("running subscribeaction_test")
    SubscribeAction_test()
    print("running number_test")
    Number_test()
    print("running waterfall_test")
    Waterfall_test()
    print("running takeaction_test")
    TakeAction_test()
    print("running state_test")
    State_test()
    print("running returnfeescustomerresponsibility_test")
    ReturnFeesCustomerResponsibility_test()
    print("running newcondition_test")
    NewCondition_test()
    print("running leaveaction_test")
    LeaveAction_test()
    print("running wearablemeasurementchestorbust_test")
    WearableMeasurementChestOrBust_test()
    print("running property_test")
    Property_test()
    print("running tvseason_test")
    TVSeason_test()
    print("running wpheader_test")
    WPHeader_test()
    print("running nonprofit501c26_test")
    Nonprofit501c26_test()
    print("running shoppingcenter_test")
    ShoppingCenter_test()
    print("running medicalcode_test")
    MedicalCode_test()
    print("running pronounceabletext_test")
    PronounceableText_test()
    print("running transformedcontent_test")
    TransformedContent_test()
    print("running motorcyclerepair_test")
    MotorcycleRepair_test()
    print("running activeactionstatus_test")
    ActiveActionStatus_test()
    print("running educationaloccupationalprogram_test")
    EducationalOccupationalProgram_test()
    print("running workbasedprogram_test")
    WorkBasedProgram_test()
    print("running definedregion_test")
    DefinedRegion_test()
    print("running distillery_test")
    Distillery_test()
    print("running busorcoach_test")
    BusOrCoach_test()
    print("running bodymeasurementhips_test")
    BodyMeasurementHips_test()
    print("running researcher_test")
    Researcher_test()
    print("running iosplatform_test")
    IOSPlatform_test()
    print("running quiz_test")
    Quiz_test()
    print("running lowfatdiet_test")
    LowFatDiet_test()
    print("running airline_test")
    Airline_test()
    print("running chiropractic_test")
    Chiropractic_test()
    print("running westernconventional_test")
    WesternConventional_test()
    print("running merchantreturnunspecified_test")
    MerchantReturnUnspecified_test()
    print("running receiveaction_test")
    ReceiveAction_test()
    print("running replyaction_test")
    ReplyAction_test()
    print("running righthanddriving_test")
    RightHandDriving_test()
    print("running searchaction_test")
    SearchAction_test()
    print("running internationaltrial_test")
    InternationalTrial_test()
    print("running medicalriskcalculator_test")
    MedicalRiskCalculator_test()
    print("running movietheater_test")
    MovieTheater_test()
    print("running shippingratesettings_test")
    ShippingRateSettings_test()
    print("running rsvpresponsemaybe_test")
    RsvpResponseMaybe_test()
    print("running ear_test")
    Ear_test()
    print("running wearaction_test")
    WearAction_test()
    print("running busreservation_test")
    BusReservation_test()
    print("running archivecomponent_test")
    ArchiveComponent_test()
    print("running library_test")
    Library_test()
    print("running merchantreturnfinitereturnwindow_test")
    MerchantReturnFiniteReturnWindow_test()
    print("running specialannouncement_test")
    SpecialAnnouncement_test()
    print("running employerreview_test")
    EmployerReview_test()
    print("running rsvpresponseno_test")
    RsvpResponseNo_test()
    print("running hypertocentry_test")
    HyperTocEntry_test()
    print("running surgicalprocedure_test")
    SurgicalProcedure_test()
    print("running gettingaccesshealthaspect_test")
    GettingAccessHealthAspect_test()
    print("running videogallery_test")
    VideoGallery_test()
    print("running screeningevent_test")
    ScreeningEvent_test()
    print("running androidplatform_test")
    AndroidPlatform_test()
    print("running claim_test")
    Claim_test()
    print("running mosque_test")
    Mosque_test()
    print("running librarysystem_test")
    LibrarySystem_test()
    print("running nerve_test")
    Nerve_test()
    print("running notary_test")
    Notary_test()
    print("running watchaction_test")
    WatchAction_test()
    print("running autowash_test")
    AutoWash_test()
    print("running usageorschedulehealthaspect_test")
    UsageOrScheduleHealthAspect_test()
    print("running commentaction_test")
    CommentAction_test()
    print("running jewelrystore_test")
    JewelryStore_test()
    print("running skin_test")
    Skin_test()
    print("running reviewaction_test")
    ReviewAction_test()
    print("running wearablesizegroupmisses_test")
    WearableSizeGroupMisses_test()
    print("running musculoskeletalexam_test")
    MusculoskeletalExam_test()
    print("running animalshelter_test")
    AnimalShelter_test()
    print("running emergency_test")
    Emergency_test()
    print("running imagegallery_test")
    ImageGallery_test()
    print("running liveblogposting_test")
    LiveBlogPosting_test()
    print("running wearablesizegroupinfants_test")
    WearableSizeGroupInfants_test()
    print("running publictoilet_test")
    PublicToilet_test()
    print("running fdacategorya_test")
    FDAcategoryA_test()
    print("running medicalcontraindication_test")
    MedicalContraindication_test()
    print("running comedyevent_test")
    ComedyEvent_test()
    print("running suspendaction_test")
    SuspendAction_test()
    print("running pathology_test")
    Pathology_test()
    print("running parentalsupport_test")
    ParentalSupport_test()
    print("running lendaction_test")
    LendAction_test()
    print("running hardcover_test")
    Hardcover_test()
    print("running fundingscheme_test")
    FundingScheme_test()
    print("running patientexperiencehealthaspect_test")
    PatientExperienceHealthAspect_test()
    print("running televisionstation_test")
    TelevisionStation_test()
    print("running mri_test")
    MRI_test()
    print("running motorizedbicycle_test")
    MotorizedBicycle_test()
    print("running poster_test")
    Poster_test()
    print("running rsvpresponseyes_test")
    RsvpResponseYes_test()
    print("running eventrescheduled_test")
    EventRescheduled_test()
    print("running bodymeasurementhead_test")
    BodyMeasurementHead_test()
    print("running userplays_test")
    UserPlays_test()
    print("running middleschool_test")
    MiddleSchool_test()
    print("running lakebodyofwater_test")
    LakeBodyOfWater_test()
    print("running monday_test")
    Monday_test()
    print("running aboutpage_test")
    AboutPage_test()
    print("running gameserver_test")
    GameServer_test()
    print("running preorderaction_test")
    PreOrderAction_test()
    print("running duration_test")
    Duration_test()
    print("running broadcastevent_test")
    BroadcastEvent_test()
    print("running medicalriskfactor_test")
    MedicalRiskFactor_test()
    print("running conveniencestore_test")
    ConvenienceStore_test()
    print("running albumrelease_test")
    AlbumRelease_test()
    print("running singlefamilyresidence_test")
    SingleFamilyResidence_test()
    print("running musicrelease_test")
    MusicRelease_test()
    print("running employeraggregaterating_test")
    EmployerAggregateRating_test()
    print("running female_test")
    Female_test()
    print("running reviewnewsarticle_test")
    ReviewNewsArticle_test()
    print("running seatingmap_test")
    SeatingMap_test()
    print("running evidencelevelb_test")
    EvidenceLevelB_test()
    print("running bodymeasurementbust_test")
    BodyMeasurementBust_test()
    print("running homegoodsstore_test")
    HomeGoodsStore_test()
    print("running claimreview_test")
    ClaimReview_test()
    print("running nutritioninformation_test")
    NutritionInformation_test()
    print("running ct_test")
    CT_test()
    print("running nonprofit527_test")
    Nonprofit527_test()
    print("running menuitem_test")
    MenuItem_test()
    print("running onlineeventattendancemode_test")
    OnlineEventAttendanceMode_test()
    print("running sizesystemimperial_test")
    SizeSystemImperial_test()
    print("running recruiting_test")
    Recruiting_test()
    print("running nonprofit501c23_test")
    Nonprofit501c23_test()
    print("running potentialactionstatus_test")
    PotentialActionStatus_test()
    print("running onetimepayments_test")
    OneTimePayments_test()
    print("running travelaction_test")
    TravelAction_test()
    print("running euenergyefficiencycategoryd_test")
    EUEnergyEfficiencyCategoryD_test()
    print("running maximumdoseschedule_test")
    MaximumDoseSchedule_test()
    print("running brand_test")
    Brand_test()
    print("running howtosupply_test")
    HowToSupply_test()
    print("running zoneboardingpolicy_test")
    ZoneBoardingPolicy_test()
    print("running nonprofit501f_test")
    Nonprofit501f_test()
    print("running parceldelivery_test")
    ParcelDelivery_test()
    print("running seektoaction_test")
    SeekToAction_test()
    print("running balance_test")
    Balance_test()
    print("running inforce_test")
    InForce_test()
    print("running authorizeaction_test")
    AuthorizeAction_test()
    print("running invoiceprice_test")
    InvoicePrice_test()
    print("running neurologic_test")
    Neurologic_test()
    print("running cassetteformat_test")
    CassetteFormat_test()
    print("running traditionalchinese_test")
    TraditionalChinese_test()
    print("running homeopathic_test")
    Homeopathic_test()
    print("running touristattraction_test")
    TouristAttraction_test()
    print("running energy_test")
    Energy_test()
    print("running nonprofit501c19_test")
    Nonprofit501c19_test()
    print("running offerforpurchase_test")
    OfferForPurchase_test()
    print("running entrypoint_test")
    EntryPoint_test()
    print("running officiallegalvalue_test")
    OfficialLegalValue_test()
    print("running howitworkshealthaspect_test")
    HowItWorksHealthAspect_test()
    print("running table_test")
    Table_test()
    print("running enrollingbyinvitation_test")
    EnrollingByInvitation_test()
    print("running maytreathealthaspect_test")
    MayTreatHealthAspect_test()
    print("running orderreturned_test")
    OrderReturned_test()
    print("running foodevent_test")
    FoodEvent_test()
    print("running crosssectional_test")
    CrossSectional_test()
    print("running autodealer_test")
    AutoDealer_test()
    print("running insuranceagency_test")
    InsuranceAgency_test()
    print("running musicrecording_test")
    MusicRecording_test()
    print("running halaldiet_test")
    HalalDiet_test()
    print("running time_test")
    Time_test()
    print("running wearablesizegroupbig_test")
    WearableSizeGroupBig_test()
    print("running gatedresidencecommunity_test")
    GatedResidenceCommunity_test()
    print("running diagnostic_test")
    Diagnostic_test()
    print("running courthouse_test")
    Courthouse_test()
    print("running comedyclub_test")
    ComedyClub_test()
    print("running aerobicactivity_test")
    AerobicActivity_test()
    print("running spreadsheetdigitaldocument_test")
    SpreadsheetDigitalDocument_test()
    print("running locksmith_test")
    Locksmith_test()
    print("running boolean_test")
    Boolean_test()
    print("running true__test")
    True__test()
    print("running dietarysupplement_test")
    DietarySupplement_test()
    print("running weaponconsideration_test")
    WeaponConsideration_test()
    print("running wearablesizesystemus_test")
    WearableSizeSystemUS_test()
    print("running withdrawn_test")
    Withdrawn_test()
    print("running ownershipinfo_test")
    OwnershipInfo_test()
    print("running completed_test")
    Completed_test()
    print("running notedigitaldocument_test")
    NoteDigitalDocument_test()
    print("running float_test")
    Float_test()
    print("running consortium_test")
    Consortium_test()
    print("running prescriptiononly_test")
    PrescriptionOnly_test()
    print("running governmentorganization_test")
    GovernmentOrganization_test()
    print("running currencyconversionservice_test")
    CurrencyConversionService_test()
    print("running unincorporatedassociationcharity_test")
    UnincorporatedAssociationCharity_test()
    print("running wearablesizegroupgirls_test")
    WearableSizeGroupGirls_test()
    print("running assignaction_test")
    AssignAction_test()
    print("running digitaldocumentpermission_test")
    DigitalDocumentPermission_test()
    print("running bookmarkaction_test")
    BookmarkAction_test()
    print("running beddetails_test")
    BedDetails_test()
    print("running returnlabelcustomerresponsibility_test")
    ReturnLabelCustomerResponsibility_test()
    print("running eventpostponed_test")
    EventPostponed_test()
    print("running psychiatric_test")
    Psychiatric_test()
    print("running muscle_test")
    Muscle_test()
    print("running ultrasound_test")
    Ultrasound_test()
    print("running broadcastfrequencyspecification_test")
    BroadcastFrequencySpecification_test()
    print("running tripleblindedtrial_test")
    TripleBlindedTrial_test()
    print("running allergieshealthaspect_test")
    AllergiesHealthAspect_test()
    print("running offlinetemporarily_test")
    OfflineTemporarily_test()
    print("running nose_test")
    Nose_test()
    print("running fundingagency_test")
    FundingAgency_test()
    print("running courseinstance_test")
    CourseInstance_test()
    print("running plasticsurgery_test")
    PlasticSurgery_test()
    print("running dentistry_test")
    Dentistry_test()
    print("running exchangeratespecification_test")
    ExchangeRateSpecification_test()
    print("running sportsevent_test")
    SportsEvent_test()
    print("running nonprofit501c17_test")
    Nonprofit501c17_test()
    print("running medicalcause_test")
    MedicalCause_test()
    print("running healthplanformulary_test")
    HealthPlanFormulary_test()
    print("running spokenwordalbum_test")
    SpokenWordAlbum_test()
    print("running filmaction_test")
    FilmAction_test()
    print("running selfstorage_test")
    SelfStorage_test()
    print("running wpfooter_test")
    WPFooter_test()
    print("running desktopwebplatform_test")
    DesktopWebPlatform_test()
    print("running multicellularparasite_test")
    MulticellularParasite_test()
    print("running violenceconsideration_test")
    ViolenceConsideration_test()
    print("running bodymeasurementchest_test")
    BodyMeasurementChest_test()
    print("running datafeeditem_test")
    DataFeedItem_test()
    print("running oncologic_test")
    Oncologic_test()
    print("running compoundpricespecification_test")
    CompoundPriceSpecification_test()
    print("running autopartsstore_test")
    AutoPartsStore_test()
    print("running datedmoneyspecification_test")
    DatedMoneySpecification_test()
    print("running hospital_test")
    Hospital_test()
    print("running endorseaction_test")
    EndorseAction_test()
    print("running randomizedtrial_test")
    RandomizedTrial_test()
    print("running euenergyefficiencycategorya2plus_test")
    EUEnergyEfficiencyCategoryA2Plus_test()
    print("running renal_test")
    Renal_test()
    print("running boatreservation_test")
    BoatReservation_test()
    print("running superficialanatomy_test")
    SuperficialAnatomy_test()
    print("running theaterevent_test")
    TheaterEvent_test()
    print("running instoreonly_test")
    InStoreOnly_test()
    print("running readaction_test")
    ReadAction_test()
    print("running answer_test")
    Answer_test()
    print("running registry_test")
    Registry_test()
    print("running activationfee_test")
    ActivationFee_test()
    print("running laboratoryscience_test")
    LaboratoryScience_test()
    print("running safetyhealthaspect_test")
    SafetyHealthAspect_test()
    print("running map_test")
    Map_test()
    print("running postaladdress_test")
    PostalAddress_test()
    print("running jobposting_test")
    JobPosting_test()
    print("running donateaction_test")
    DonateAction_test()
    print("running glutenfreediet_test")
    GlutenFreeDiet_test()
    print("running drawaction_test")
    DrawAction_test()
    print("running orderdelivered_test")
    OrderDelivered_test()
    print("running exercisegym_test")
    ExerciseGym_test()
    print("running returninstore_test")
    ReturnInStore_test()
    print("running benefitshealthaspect_test")
    BenefitsHealthAspect_test()
    print("running therapeutic_test")
    Therapeutic_test()
    print("running legislativebuilding_test")
    LegislativeBuilding_test()
    print("running definitivelegalvalue_test")
    DefinitiveLegalValue_test()
    print("running shoestore_test")
    ShoeStore_test()
    print("running furniturestore_test")
    FurnitureStore_test()
    print("running musicvideoobject_test")
    MusicVideoObject_test()
    print("running druglegalstatus_test")
    DrugLegalStatus_test()
    print("running tireshop_test")
    TireShop_test()
    print("running obstetric_test")
    Obstetric_test()
    print("running nonprofit501c13_test")
    Nonprofit501c13_test()
    print("running mountain_test")
    Mountain_test()
    print("running pediatric_test")
    Pediatric_test()
    print("running nonprofit501c14_test")
    Nonprofit501c14_test()
    print("running corporation_test")
    Corporation_test()
    print("running rsvpaction_test")
    RsvpAction_test()
    print("running userreview_test")
    UserReview_test()
    print("running datetime_test")
    DateTime_test()
    print("running paymentautomaticallyapplied_test")
    PaymentAutomaticallyApplied_test()
    print("running atlas_test")
    Atlas_test()
    print("running paintaction_test")
    PaintAction_test()
    print("running orderaction_test")
    OrderAction_test()
    print("running wearablesizesystemde_test")
    WearableSizeSystemDE_test()
    print("running newspaper_test")
    Newspaper_test()
    print("running riverbodyofwater_test")
    RiverBodyOfWater_test()
    print("running question_test")
    Question_test()
    print("running diagnosticlab_test")
    DiagnosticLab_test()
    print("running paperback_test")
    Paperback_test()
    print("running lowcaloriediet_test")
    LowCalorieDiet_test()
    print("running checkoutpage_test")
    CheckoutPage_test()
    print("running demoalbum_test")
    DemoAlbum_test()
    print("running newsmediaorganization_test")
    NewsMediaOrganization_test()
    print("running defenceestablishment_test")
    DefenceEstablishment_test()
    print("running medicalguidelinerecommendation_test")
    MedicalGuidelineRecommendation_test()
    print("running hotelroom_test")
    HotelRoom_test()
    print("running infectious_test")
    Infectious_test()
    print("running wearablesizegroupshort_test")
    WearableSizeGroupShort_test()
    print("running school_test")
    School_test()
    print("running analysisnewsarticle_test")
    AnalysisNewsArticle_test()
    print("running installment_test")
    Installment_test()
    print("running anatomicalsystem_test")
    AnatomicalSystem_test()
    print("running mediareview_test")
    MediaReview_test()
    print("running exerciseplan_test")
    ExercisePlan_test()
    print("running lowlactosediet_test")
    LowLactoseDiet_test()
    print("running quotation_test")
    Quotation_test()
    print("running disagreeaction_test")
    DisagreeAction_test()
    print("running onlineonly_test")
    OnlineOnly_test()
    print("running wearablesizesystemuk_test")
    WearableSizeSystemUK_test()
    print("running returnlabeldownloadandprint_test")
    ReturnLabelDownloadAndPrint_test()
    print("running wholesale_test")
    Wholesale_test()
    print("running itempage_test")
    ItemPage_test()
    print("running euenergyefficiencycategorya1plus_test")
    EUEnergyEfficiencyCategoryA1Plus_test()
    print("running reservoir_test")
    Reservoir_test()
    print("running ebook_test")
    EBook_test()
    print("running selfcarehealthaspect_test")
    SelfCareHealthAspect_test()
    print("running risksorcomplicationshealthaspect_test")
    RisksOrComplicationsHealthAspect_test()
    print("running movie_test")
    Movie_test()
    print("running false__test")
    False__test()
    print("running offlineeventattendancemode_test")
    OfflineEventAttendanceMode_test()
    print("running integer_test")
    Integer_test()
    print("running orderitem_test")
    OrderItem_test()
    print("running caseseries_test")
    CaseSeries_test()
    print("running preschool_test")
    Preschool_test()
    print("running bodymeasurementwaist_test")
    BodyMeasurementWaist_test()
    print("running notyetrecruiting_test")
    NotYetRecruiting_test()


if __name__ == "__main__":
    run_all()
