"""
A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.

https://schema.org/FinancialProduct
"""

from datetime import *
from copy import deepcopy
from typing import *
from time import *

from typing_extensions import TypedDict, NotRequired
from pydantic import *


from schorg.schema_org_obj import SchemaOrgObj, SchemaOrgBase


class FinancialProductInheritedProperties(TypedDict):
    """A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.

    References:
        https://schema.org/FinancialProduct
    Note:
        Model Depth 4
    Attributes:
        serviceArea: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The geographic area where the service is provided.
        broker: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
        provider: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
        areaServed: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The geographic area where a service or offered item is provided.
        slogan: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): A slogan or motto associated with the item.
        award: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): An award won by or for this item.
        termsOfService: (Optional[Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]]): Human-readable terms of service documentation.
        review: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): A review of the item.
        availableChannel: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
        isRelatedTo: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): A pointer to another, somehow related product (or multiple products).
        serviceAudience: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The audience eligible for this service.
        isSimilarTo: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): A pointer to another, functionally similar product (or multiple products).
        audience: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): An intended audience, i.e. a group for whom something was created.
        logo: (Optional[Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]]): An associated logo.
        providerMobility: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
        hoursAvailable: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The hours during which this service or contact is available.
        brand: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
        serviceOutput: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The tangible thing generated by the service, e.g. a passport, permit, etc.
        produces: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The tangible thing generated by the service, e.g. a passport, permit, etc.
        hasOfferCatalog: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): Indicates an OfferCatalog listing for this Organization, Person, or Service.
        category: (Optional[Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]]): A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
        aggregateRating: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The overall rating, based on a collection of reviews or ratings, of the item.
        serviceType: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
        offers: (Optional[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]): An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
    """

    serviceArea: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    broker: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    provider: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    areaServed: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    slogan: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    award: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    termsOfService: NotRequired[
        Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]
    ]
    review: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    availableChannel: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    isRelatedTo: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    serviceAudience: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    isSimilarTo: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    audience: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    logo: NotRequired[
        Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]
    ]
    providerMobility: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    hoursAvailable: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    brand: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    serviceOutput: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    produces: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    hasOfferCatalog: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    category: NotRequired[
        Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]
    ]
    aggregateRating: NotRequired[
        Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]
    ]
    serviceType: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]
    offers: NotRequired[Union[List[Union[str, SchemaOrgObj]], str, SchemaOrgObj]]


class FinancialProductProperties(TypedDict):
    """A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.

    References:
        https://schema.org/FinancialProduct
    Note:
        Model Depth 4
    Attributes:
        annualPercentageRate: (Optional[Union[List[Union[str, StrictInt, StrictFloat, SchemaOrgObj]], str, StrictInt, StrictFloat, SchemaOrgObj]]): The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
        interestRate: (Optional[Union[List[Union[str, StrictInt, StrictFloat, SchemaOrgObj]], str, StrictInt, StrictFloat, SchemaOrgObj]]): The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
        feesAndCommissionsSpecification: (Optional[Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]]): Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
    """

    annualPercentageRate: NotRequired[
        Union[
            List[Union[str, StrictInt, StrictFloat, SchemaOrgObj]],
            str,
            StrictInt,
            StrictFloat,
            SchemaOrgObj,
        ]
    ]
    interestRate: NotRequired[
        Union[
            List[Union[str, StrictInt, StrictFloat, SchemaOrgObj]],
            str,
            StrictInt,
            StrictFloat,
            SchemaOrgObj,
        ]
    ]
    feesAndCommissionsSpecification: NotRequired[
        Union[List[Union[AnyUrl, str, SchemaOrgObj]], AnyUrl, str, SchemaOrgObj]
    ]


class FinancialProductAllProperties(
    FinancialProductInheritedProperties, FinancialProductProperties, TypedDict
):
    pass


class FinancialProductBaseModel(SchemaOrgBase):
    id_: Optional[Any] = Field(default="FinancialProduct", alias="@id")
    context_: Optional[Any] = Field(default=None, alias="@context")
    graph_: Optional[Any] = Field(default=None, alias="@graph")

    class Config:

        fields = {"serviceArea": {"exclude": True}}
        fields = {"broker": {"exclude": True}}
        fields = {"provider": {"exclude": True}}
        fields = {"areaServed": {"exclude": True}}
        fields = {"slogan": {"exclude": True}}
        fields = {"award": {"exclude": True}}
        fields = {"termsOfService": {"exclude": True}}
        fields = {"review": {"exclude": True}}
        fields = {"availableChannel": {"exclude": True}}
        fields = {"isRelatedTo": {"exclude": True}}
        fields = {"serviceAudience": {"exclude": True}}
        fields = {"isSimilarTo": {"exclude": True}}
        fields = {"audience": {"exclude": True}}
        fields = {"logo": {"exclude": True}}
        fields = {"providerMobility": {"exclude": True}}
        fields = {"hoursAvailable": {"exclude": True}}
        fields = {"brand": {"exclude": True}}
        fields = {"serviceOutput": {"exclude": True}}
        fields = {"produces": {"exclude": True}}
        fields = {"hasOfferCatalog": {"exclude": True}}
        fields = {"category": {"exclude": True}}
        fields = {"aggregateRating": {"exclude": True}}
        fields = {"serviceType": {"exclude": True}}
        fields = {"offers": {"exclude": True}}
        fields = {"annualPercentageRate": {"exclude": True}}
        fields = {"interestRate": {"exclude": True}}
        fields = {"feesAndCommissionsSpecification": {"exclude": True}}


def create_schema_org_model(
    type_: Union[
        FinancialProductProperties,
        FinancialProductInheritedProperties,
        FinancialProductAllProperties,
    ] = FinancialProductAllProperties
) -> Type[SchemaOrgBase]:
    model = create_model_from_typeddict(type_, __base__=SchemaOrgBase)
    model.__name__ = "FinancialProduct"
    return model


FinancialProduct = create_schema_org_model()


def create_financialproduct_model(
    model: Union[
        FinancialProductProperties,
        FinancialProductInheritedProperties,
        FinancialProductAllProperties,
    ]
):
    _type = deepcopy(FinancialProductAllProperties)
    for k in model.__annotations__.keys():
        if k not in _type.__annotations__:
            del _type.__annotations__[k]
    return create_schema_org_model(type_=_type)


def schema_json(model: FinancialProductAllProperties):
    pydantic_type = create_financialproduct_model(model=model)
    return pydantic_type(model).schema_json()
