import os
import re
import sys
import cv2
import errno
import numpy
import asyncio
import pkg_resources

from loguru import logger
from PIL import Image, ImageFont, ImageDraw

from telethon.client.telegramclient import TelegramClient
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import KeyboardButtonUrl, KeyboardButtonCallback

from . import exceptions

TEMP_DIR = "temp"  # –ù–µ –º–µ–Ω—è—Ç—å
SESSIONS_DIR = "sessions"  # –ù–µ –º–µ–Ω—è—Ç—å
MAX_ATTEMPTS = 10   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞


class Pattern:
    """
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    received = r'–í—ã –ø–æ–ª—É—á–∏–ª–∏|You received|' \
               r'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏|You successfully received' \
               r'‚è± –ü–æ–ª—É—á–µ–Ω–∏–µ|‚è± Receiving'
    activated = r'–≠—Ç–æ—Ç –º—É–ª—å—Ç–∏-—á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.|This multi-cheque already activated.'
    check_not_found = r'–ú—É–ª—å—Ç–∏-—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.|Multi-cheque not found.'
    activated_or_not_found = r'–≠—Ç–æ—Ç –º—É–ª—å—Ç–∏-—á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.|This multi-cheque already activated.|' \
                             r'–ú—É–ª—å—Ç–∏-—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.|Multi-cheque not found.|' \
                             r'–≠—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.|This transfer not found.|' \
                             r'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.|You cannot activate this transfer.'
    check_activated = r'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –º—É–ª—å—Ç–∏-—á–µ–∫.|You already activated this multi-cheque.'
    need_sub = r'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —á–µ–∫:|' \
               r'You need to subscribe to following resources to activate this cheque:'
    need_pass = r'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –º—É–ª—å—Ç–∏-—á–µ–∫–∞.|Enter password for multi-cheque.'
    need_premium = r'–≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram Premium.|' \
                   r'This cheque only for users with Telegram Premium.'
    own_cheque_error = r'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏.|' \
                       r'You cannot activated cheque created by you.'


# –®—Ä–∏—Ñ—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ emoji
if sys.platform == "darwin":
    font_size = 109
else:
    font_size = 137
font_path = pkg_resources.resource_filename('tgchequeman', 'AppleColorEmoji.ttf')
fnt = ImageFont.truetype(font_path, size=font_size, layout_engine=ImageFont.Layout.RAQM)


async def activate_multicheque(client: TelegramClient, bot_url: dict, password: str):
    async with client.conversation(bot_url['bot']) as conv:
        attemp = 0
        while attemp < MAX_ATTEMPTS:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            await conv.send_message(f'/{bot_url["command"]} {bot_url["args"]}')
            message = await conv.get_response()
            await asyncio.sleep(.5)
            logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message}')
            # –ï—Å–ª–∏ —á–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if re.search(Pattern.activated_or_not_found, message.message):
                attemp = 999
                logger.warning('–ß–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                raise exceptions.ChequeFullyActivatedOrNotFound('–ß–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            # –ï—Å–ª–∏ —á–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            if re.search(Pattern.check_activated, message.message):
                attemp = 999
                logger.warning('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫')
                raise exceptions.ChequeActivated('–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫')
            # –ï—Å–ª–∏ —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º–æ–≤
            if re.search(Pattern.need_premium, message.message):
                attemp = 999
                logger.warning('–≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Premium')
                raise exceptions.ChequeForPremiumUsersOnly('–≠—Ç–æ—Ç —á–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Premium')
            # –ï—Å–ª–∏ —á–µ–∫ —Å–æ–∑–¥–∞–Ω –≤–∞–º–∏
            if re.search(Pattern.own_cheque_error, message.message):
                attemp = 999
                logger.warning('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏')
                raise exceptions.CannotActivateOwnCheque('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏')
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            if re.search(Pattern.need_sub, message.message):
                i = 0
                for _ in message.reply_markup.rows:
                    for button in message.reply_markup.rows[i].buttons:
                        if button.text.startswith('‚ùå') or button.text.startswith('üîé'):
                            if isinstance(button, KeyboardButtonUrl):
                                url = button.url
                                if 't.me/joinchat/' in url:
                                    url = url.split('joinchat/')[1]
                                    await client(ImportChatInviteRequest(url))
                                else:
                                    url = url.split('t.me/')[1]
                                    try:
                                        await client(JoinChannelRequest(url))
                                    except Exception as err:
                                        logger.error(err)
                                        logger.warning('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª')
                                logger.info(f'–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {url}')
                                await asyncio.sleep(1)
                            elif isinstance(button, KeyboardButtonCallback):
                                await message.click(i)
                    i += 1
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø—á—É
            if message.photo:
                await message.download_media(f"{TEMP_DIR}/original.jpg")
                btns = []
                i = 0
                for _ in message.reply_markup.rows:
                    for button in message.reply_markup.rows[i].buttons:
                        btns.append(button.text)
                    i += 1
                _emoji = get_buttons_emoji(btns)
                await message.click(btns.index(_emoji))
                message = await conv.get_response()
                logger.info(f"–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '{_emoji}'")
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            if re.search(Pattern.need_pass, message.message):
                try:
                    await conv.send_message(password)
                except ValueError as err:
                    raise exceptions.PasswordError(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–æ–ª—å –∫ —á–µ–∫—É.\n'
                                                   f' {err.__str__()}')
                logger.info(f"–í–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å {password}")
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
            if re.search(Pattern.received, message.message):
                logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message}')
                return True
            attemp += 1
            if attemp >= 6:
                logger.warning('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
                raise exceptions.UnknownError('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


def parse_url(url: str) -> dict:
    result = {}
    try:
        result = {
            "bot": url.split('t.me/')[1].split('?')[0],
            "command": url.split('t.me/')[1].split('?')[1].split('=')[0],
            "args": url.split('t.me/')[1].split('?')[1].split('=')[1]
        }
    except Exception as err:
        logger.error(err)
        logger.error('–°—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!')
    return result


def check_sessions_folder():
    try:
        os.mkdir(SESSIONS_DIR)
        logger.info('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–∞')
    except OSError as e:
        if e.errno == errno.EEXIST:
            logger.warning('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
        else:
            logger.error('–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–∏–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π')
            raise Exception


def get_sessions_list() -> list:
    check_sessions_folder()

    result = []
    for path in os.listdir(SESSIONS_DIR):
        if os.path.isfile(os.path.join(SESSIONS_DIR, path)):
            if path.endswith(".session"):
                result.append(SESSIONS_DIR + "/" + path)
    if not result:
        logger.error("–ù–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        raise Exception

    return result


def check_temp_folder():
    try:
        os.mkdir(TEMP_DIR)
        logger.info('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞')
    except OSError as e:
        if e.errno == errno.EEXIST:
            logger.warning('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...')
        else:
            logger.error('–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–∏–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
            raise


def get_buttons_emoji(emojis: list[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º emoji

    :param image: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Image –∏–∑ PILLOW –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    :param emojis: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ emoji –∏–∑ –∫–Ω–æ–ø–æ–∫
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º emoji
    """
    check_temp_folder()
    image = Image.open(f"{TEMP_DIR}/original.jpg")
    original = cv2.imread(f"{TEMP_DIR}/original.jpg")
    original = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
    original_color = recognize_color(image)
    i = 0
    _mse = 9999999
    _emoji = ""
    for emoji in emojis:
        image = generate_emoji_image(emoji, original_color)
        image.save(f"{TEMP_DIR}/{i}.jpg")
        different = cv2.imread(f"{TEMP_DIR}/{i}.jpg")
        different = cv2.cvtColor(different, cv2.COLOR_BGR2GRAY)
        mse = eval_mse(original, different)
        if mse < _mse:
            _mse = eval_mse(original, different)
            _emoji = emoji
        i += 1
    logger.info(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —ç–º–æ–¥–∂–∏: {_emoji} (mse: {_mse})')
    return _emoji


def eval_mse(imageA, imageB) -> numpy.ndarray:
    logger.info(f'–°—Ä–∞–≤–Ω–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    err = numpy.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
    err /= float(imageA.shape[0] * imageA.shape[1])
    return err


def recognize_color(imgae: Image) -> tuple:
    logger.info(f'–ü–æ–ª—É—á–∞—é —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    pix = imgae.load()
    return pix[1, 1]


def generate_emoji_image(emoji_text: str, color: tuple) -> Image:
    logger.info(f'–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "{emoji_text}" –∏ —Ü–≤–µ—Ç–æ–º "{color}"')
    text = emoji_text.split(" ")
    ORIGINAL_SIZE = (472, 283)
    SIZE = (472 * 2, 283 * 2)
    W, H = SIZE
    image = Image.new('RGB', SIZE, color)
    draw = ImageDraw.Draw(image)
    _, _, w, h = draw.textbbox((0, 0), " ".join(text), font=fnt)
    draw.text(((W - w) / 2 + 94, (H - h) / 2 - 1), text[0], font=fnt, fill='black', embedded_color=True)
    draw.text(((W - w) / 2 + (w / 2 - 68), (H - h) / 2 - 1), text[1], font=fnt, fill='black', embedded_color=True)
    draw.text(((W - w) / 2 + (w - 229), (H - h) / 2 - 1), text[2], font=fnt, fill='black', embedded_color=True)
    image = image.resize(ORIGINAL_SIZE)
    logger.info(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "{emoji_text}" –∏ —Ü–≤–µ—Ç–æ–º "{color} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ')
    return image
