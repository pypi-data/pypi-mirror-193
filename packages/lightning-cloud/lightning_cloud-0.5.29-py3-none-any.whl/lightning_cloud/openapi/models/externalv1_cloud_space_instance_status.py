# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class Externalv1CloudSpaceInstanceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_url': 'str',
        'compute_config': 'V1UserRequestedComputeConfig',
        'creation_timestamp': 'datetime',
        'phase': 'V1CloudSpaceInstanceState',
        'start_timestamp': 'datetime'
    }

    attribute_map = {
        'app_url': 'appUrl',
        'compute_config': 'computeConfig',
        'creation_timestamp': 'creationTimestamp',
        'phase': 'phase',
        'start_timestamp': 'startTimestamp'
    }

    def __init__(self,
                 app_url: 'str' = None,
                 compute_config: 'V1UserRequestedComputeConfig' = None,
                 creation_timestamp: 'datetime' = None,
                 phase: 'V1CloudSpaceInstanceState' = None,
                 start_timestamp: 'datetime' = None):  # noqa: E501
        """Externalv1CloudSpaceInstanceStatus - a model defined in Swagger"""  # noqa: E501
        self._app_url = None
        self._compute_config = None
        self._creation_timestamp = None
        self._phase = None
        self._start_timestamp = None
        self.discriminator = None
        if app_url is not None:
            self.app_url = app_url
        if compute_config is not None:
            self.compute_config = compute_config
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if phase is not None:
            self.phase = phase
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp

    @property
    def app_url(self) -> 'str':
        """Gets the app_url of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501


        :return: The app_url of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._app_url

    @app_url.setter
    def app_url(self, app_url: 'str'):
        """Sets the app_url of this Externalv1CloudSpaceInstanceStatus.


        :param app_url: The app_url of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :type: str
        """

        self._app_url = app_url

    @property
    def compute_config(self) -> 'V1UserRequestedComputeConfig':
        """Gets the compute_config of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501


        :return: The compute_config of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :rtype: V1UserRequestedComputeConfig
        """
        return self._compute_config

    @compute_config.setter
    def compute_config(self, compute_config: 'V1UserRequestedComputeConfig'):
        """Sets the compute_config of this Externalv1CloudSpaceInstanceStatus.


        :param compute_config: The compute_config of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :type: V1UserRequestedComputeConfig
        """

        self._compute_config = compute_config

    @property
    def creation_timestamp(self) -> 'datetime':
        """Gets the creation_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501


        :return: The creation_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp: 'datetime'):
        """Sets the creation_timestamp of this Externalv1CloudSpaceInstanceStatus.


        :param creation_timestamp: The creation_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def phase(self) -> 'V1CloudSpaceInstanceState':
        """Gets the phase of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501


        :return: The phase of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :rtype: V1CloudSpaceInstanceState
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1CloudSpaceInstanceState'):
        """Sets the phase of this Externalv1CloudSpaceInstanceStatus.


        :param phase: The phase of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :type: V1CloudSpaceInstanceState
        """

        self._phase = phase

    @property
    def start_timestamp(self) -> 'datetime':
        """Gets the start_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501


        :return: The start_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp: 'datetime'):
        """Sets the start_timestamp of this Externalv1CloudSpaceInstanceStatus.


        :param start_timestamp: The start_timestamp of this Externalv1CloudSpaceInstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(Externalv1CloudSpaceInstanceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Externalv1CloudSpaceInstanceStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Externalv1CloudSpaceInstanceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'Externalv1CloudSpaceInstanceStatus') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
