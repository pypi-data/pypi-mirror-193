# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['energypylinear', 'energypylinear.accounting', 'energypylinear.assets']

package_data = \
{'': ['*']}

install_requires = \
['PuLP>=2.7.0,<3.0.0',
 'matplotlib>=3.6.2,<4.0.0',
 'numpy>=1.23.4,<2.0.0',
 'pandas>=1.5.2,<2.0.0',
 'pydantic>=1.10.2,<2.0.0',
 'rich>=12.0.0,<13.0.0',
 'seaborn>=0.12.2,<0.13.0']

setup_kwargs = {
    'name': 'energypylinear',
    'version': '0.1.1',
    'description': 'Optimizing energy assets with mixed-integer linear programming.',
    'long_description': '# energy-py-linear\n\n<img src="./static/coverage.svg"> [![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)\n\nA Python library for optimizing the dispatch of energy assets with mixed-integer linear programming:\n\n- electric batteries,\n- combined heat & power (CHP) generators,\n- electric vehicle smart charging.\n\nModels can be optimized to either maximize profit or minimize carbon emissions.\n\n## Setup\n\nRequires Python 3.10+:\n\n```shell\n$ pip install energypylinear\n```\n\n## Assets\n\n### Battery\n\nDispatch an electric battery operating in wholesale price arbitrage using `epl.Battery`:\n\n```python\nimport energypylinear as epl\n\n#  2.0 MW, 4.0 MWh battery\nasset = epl.battery.Battery(power_mw=2, capacity_mwh=4, efficiency=0.9)\n\nresults = asset.optimize(\n  electricity_prices=[100.0, 50, 200, -100, 0, 200, 100, -100],\n  freq_mins=60,\n  initial_charge_mwh=1,\n  final_charge_mwh=3\n)\n```\n\n### CHP\n\nDispatch a CHP unit to generate electricity and heat from natural gas.\n\nThe `epl.Generator` model can be configured with electric, high and low temperature thermal efficiencies. \n\nThis allows modelling both gas engines and gas turbines:\n\n```python\nimport energypylinear as epl\n\n#  100 MWe gas engine\nasset = epl.chp.Generator(\n    electric_power_max_mw=100,\n    electric_power_min_mw=30,\n    electric_efficiency_pct=0.4,\n    high_temperature_efficiency_pct=0.2,\n    low_temperature_efficiency_pct=0.2,\n)\n\n#  100 MWe gas turbine\nasset = epl.chp.Generator(\n    electric_power_max_mw=100,\n    electric_power_min_mw=50,\n    electric_efficiency_pct=0.3,\n    high_temperature_efficiency_pct=0.5,\n)\n```\n\nWhen optimizing, we can use interval data for the high and low temperature loads.  These thermal loads will be met by gas boilers if the CHP chooses not to generate.  \n\nThe `epl.chp.Generator` is allowed to dump both high temperature and low temperature heat.\n\nDispatch a CHP generator:\n\n```python\nimport energypylinear as epl\n\n#  100 MWe gas engine\nasset = epl.chp.Generator(\n    electric_power_max_mw=100,\n    electric_power_min_mw=10,\n    electric_efficiency_pct=0.4,\n    high_temperature_efficiency_pct=0.2,\n    low_temperature_efficiency_pct=0.2,\n)\n\nresults = asset.optimize(\n  electricity_prices=[100, 50, 200, -100, 0, 200, 100, -100],\n  high_temperature_load_mwh=[100, 50, 200, 40, 0, 200, 100, 100],\n  low_temperature_load_mwh=20\n)\n```\n\n### EVs\n\nControl a number of EV chargers to charge a number of charge events.  \n\nA `charge_event` is a period of time where an EV can be charged.  This is given as a boolean 2D array, with one binary digit for each pair of charge events and intervals.\n\nEach charge event has a required amount of electricity `charge_event_mwh`, that can be delivered anytime the `charge_event` is 1.\n\nChargers are configured by `charger_mws`.  \n\nOptimize two 100 MWe chargers for 4 charge events over 5 intervals:\n\n```python\nimport energypylinear as epl\n\n#  2 100 MW EV chargers\nasset = epl.evs.EVs(charger_mws=[100, 100], charger_turndown=0.1)\n\nelectricity_prices = [-100, 50, 30, 50, 40]\ncharge_events = [\n    [1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 1, 1],\n    [0, 1, 0, 0, 0],\n]\ncharge_event_mwh = [50, 100, 30, 40]\n\nresults = asset.optimize(\n    electricity_prices=electricity_prices,\n    charge_events=charge_events,\n    charge_event_mwh=charge_event_mwh,\n)\n```\n\n## Examples\n\nExamples for exist in `./examples`:\n\n```shell\n$ ls ./examples\n./examples\n├── battery.py\n├── chp.py\n├── evs.py\n└── forecast-accuracy.py\n```\n\n## Use Cases\n\n### Price vs. Carbon Optimization\n\nA key feature of `energypylinear` is the ability to optimize for both price and carbon.\n\nWe can dispatch a battery to minimize carbon emissions by passing in `objective=\'carbon\'`:\n\n```python\nimport energypylinear as epl\n\nasset = epl.battery.Battery(power_mw=2, capacity_mwh=4, efficiency=0.9)\n\nresults = asset.optimize(\n  electricity_prices=[100, 50, 200, -100, 0, 200, 100, -100],\n  electricity_carbon_intensities = [0.1, 0.2, 0.1, 0.15, 0.01, 0.7, 0.5, 0.01],\n  objective=\'carbon\'\n)\n```\n\nWe can compare these results above with a simulation that optimizes for price, using a `energypylinear.accounting.Account` to compare both simulations.  The accounting API is in it\'s first iteration - expect it to change in the future.\n\n```python\nimport energypylinear as epl\n\n#  interval data\nelectricity_prices = [100, 50, 200, -100, 0, 200, 100, -100]\nelectricity_carbon_intensities = [0.1, 0.2, 0.1, 0.15, 0.01, 0.7, 0.5, 0.01]\n\n#  battery asset\nasset = epl.battery.Battery(power_mw=2, capacity_mwh=4, efficiency=0.9)\n\n#  optimize for money\nprice = asset.optimize(electricity_prices=electricity_prices)\n\n#  optimize for the planet\ncarbon = asset.optimize(\n  electricity_prices=electricity_prices,\n  electricity_carbon_intensities=electricity_carbon_intensities,\n  objective=\'carbon\'\n)\n\n#  get an account representing the difference between the two\nprice = epl.get_accounts(\n  price.interval_data,\n  price.simulation,\n)\ncarbon = epl.get_accounts(\n  carbon.interval_data,\n  carbon.simulation,\n)\n\nprint(price)\n# cost=-1057.777778 emissions=0.08222222199999996 profit=1057.777778\n\nprint(carbon)\n# cost=-134.44444399999998 emissions=-2.2733333339999997 profit=134.44444399999998\n\nvariance = price - carbon\nprint(variance)\n# cost=-923.3333339999999 emissions=2.3555555559999997\n\nprint(-variance.cost / variance.emissions)\n# 391.9811322845319\n```\n\nOur optimization for price has a high negative cost.  The optimization for carbon has lower emissions, but at a higher cost.\n\n### Dispatch for Actuals vs. Dispatch for Forecasts\n\nThe same primitives can be used to model the variance in performance of an asset optimized for actual prices versus forecast prices:\n\n```python\nimport energypylinear as epl\n\n#  interval data\nelectricity_prices = [100, 50, 200, -100, 0, 200, 100, -100]\nforecasts = [-100, 0, 200, 100, -100, 100, 50, 200]\n\n#  battery asset\nasset = epl.battery.Battery(power_mw=2, capacity_mwh=4, efficiency=0.9)\n\n#  optimize with perfect foresight\nactual = asset.optimize(electricity_prices=electricity_prices)\n\n#  optimize to the forecast\nforecast = asset.optimize(electricity_prices=forecasts)\n\n# create accounts for the two scenarios \nperfect_foresight = epl.get_accounts(actual.interval_data, actual.simulation)\n\n# in the forecast we use the actual interval_data, not the forecast interval_data\nforecast = epl.get_accounts(actual.interval_data, forecast.simulation)\n\nvariance = perfect_foresight - forecast\nprint(variance)\n# cost=-1197.777778 emissions=0.002222221999999996\n```\n\nThis idea is also modelled in [examples/forecast-accuracy.py](https://github.com/ADGEfficiency/energy-py-linear/blob/main/examples/forecast-accuracy.py).\n\n## Test\n\n```shell\n$ make test\n```\n',
    'author': 'Adam Green',
    'author_email': 'adam.green@adgefficiency.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<3.12',
}


setup(**setup_kwargs)
