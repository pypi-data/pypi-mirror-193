{"version":3,"file":"435a2e4d.js","mappings":";;;;AAoBA;AAIA;;;;;AAMA;ACfA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;;;;AChIA;;ACsGA;;AAEA;AAIA;;AAEA;AAGA;;;AAIA;;;;AAIA;;;;;;;;;;;AAYA;;AAEA;;;;;;AAMA;;AAEA;;;;;;AAMA;;AAEA;;;;;;AAMA;;AAEA;;;;;;AAMA;;AAIA;;AAEA;;AAEA;;;;;;AAMA;;AAEA;;AAEA;;;;;;;;AAQA;AACA;;;;AAIA;;AAEA;AACA;;;;;;;;AAQA;AACA;;;;;;;;AAQA;AACA;;;;;;AAMA;AAEA;;AAEA;AAAA;;;AAMA;;;;;;AAOA;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2LA","sources":["webpack://home-assistant-frontend/./src/components/ha-chip-set.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/media-player/hui-dialog-add-media-source-ais-dialog.ts"],"sourcesContent":["// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-chip-set\")\nexport class HaChipSet extends LitElement {\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip-set\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n\n      slot::slotted(ha-chip) {\n        margin: 4px 4px 4px 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip-set\": HaChipSet;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"./../ha-radio\";\nimport \"./../ha-icon\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-chip-set\";\nimport \"../ha-switch\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { createCloseHeading } from \"../ha-dialog\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface AisAnswer {\n  message: string;\n  error: boolean;\n}\n\nexport const AddMediaSourceAisWs = (\n  hass: HomeAssistant,\n  mediaCategory: string,\n  mediaName: string,\n  mediaType: string,\n  mediaStreamUrl: string,\n  mediaImageUrl: string,\n  mediaShare: boolean\n): Promise<AisAnswer> =>\n  hass.callWS<AisAnswer>({\n    type: \"ais_cloud/add_ais_media_source\",\n    mediaCategory,\n    mediaName,\n    mediaType,\n    mediaStreamUrl,\n    mediaImageUrl,\n    mediaShare,\n  });\n\n@customElement(\"hui-dialog-add-media-source-ais\")\nexport class HuiDialogAddMediaSourceAis extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  @property()\n  private _loading = false;\n\n  @property() private _opened = false;\n\n  @property() private mediaCategory = \"radio\";\n\n  @property() private mediaName = \"\";\n\n  @property() private mediaType = \"\";\n\n  @property() private mediaStreamUrl = \"\";\n\n  @property() private mediaImageUrl = \"\";\n\n  @property() private mediaShare = false;\n\n  @property() private mediaChips: string[] = [];\n\n  @property() private mediaNamePlaceholder =\n    \"Nazwa (komenda: Włącz radio nazwa)\";\n\n  @property() private mediaTypePlaceholder = \"Typ radia\";\n\n  @property() private mediaUrlPlaceholder = \"Adres URL Strumienia\";\n\n  private _aisMediaInfo?: HassEntity;\n\n  public showDialog(): void {\n    this._opened = true;\n    this._aisMediaInfo = this.hass.states[\n      \"media_player.wbudowany_glosnik\"\n    ] as HassEntity;\n    this.mediaCategory = \"radio\";\n    this.mediaName = \"\";\n    this.mediaType = \"\";\n    if (\n      this.hass.states[\"media_player.wbudowany_glosnik\"].attributes\n        .media_content_id\n    ) {\n      this.mediaStreamUrl =\n        this.hass.states[\n          \"media_player.wbudowany_glosnik\"\n        ].attributes.media_content_id;\n    } else {\n      this.mediaStreamUrl = \"\";\n    }\n    this.mediaImageUrl = \"\";\n    this.mediaShare = false;\n\n    this.mediaChips = [];\n    const options =\n      this.hass.states[\"input_select.radio_type\"].attributes.options;\n    options.forEach((element: string) => {\n      if (!element.startsWith(\"Moje\") && !element.startsWith(\"Udostępnione\")) {\n        this.mediaChips.push(element || \"\");\n      }\n    });\n  }\n\n  public closeDialog() {\n    this._opened = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-dialog\n        .open=${this._opened}\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          \"Dodaj nowe Multimedia do biblioteki\"\n        )}\n        @closed=${this.closeDialog}\n      >\n        ${this._loading\n          ? html`<ha-circular-progress active></ha-circular-progress>`\n          : html`<p>\n                ${this._isAudioPlaying() && !this._loading\n                  ? html`\n                  <span class=\"aisUrl\">\n                    Odtwarzasz z URL, <ha-icon icon=\"mdi:web\"></ha-icon>:\n                    <b></b>${this.hass.states[\"media_player.wbudowany_glosnik\"].attributes.media_content_id}</b>\n                    <br/>ten adres został wypełniony automatycznie - sprawdź czy się zgadza.\n                    </span\n                  >\n                  `\n                  : html`\n                      Obecnie na wbudowanym odtwarzaczu nie odtwarzasz żadnych\n                      mediów. Sugerujemy sprawdzenie działania mediów na\n                      odtwarzaczu przed ich dodaniem.\n                    `}\n              </p>\n\n              <label> Typ audio: </label>\n              <div class=\"audio-types\" id=\"audio_types\">\n                <ha-radio\n                  name=\"audioType\"\n                  .checked=${this.mediaCategory === \"radio\"}\n                  value=\"radio\"\n                  @change=${this._mediaCategoryChanged}\n                ></ha-radio>\n                <ha-icon icon=\"mdi:radio\"></ha-icon>\n\n                <ha-radio\n                  name=\"audioType\"\n                  .checked=${this.mediaCategory === \"podcast\"}\n                  value=\"podcast\"\n                  @change=${this._mediaCategoryChanged}\n                ></ha-radio>\n                <ha-icon icon=\"mdi:podcast\"></ha-icon>\n\n                <ha-radio\n                  name=\"audioType\"\n                  .checked=${this.mediaCategory === \"audiobook\"}\n                  value=\"audiobook\"\n                  @change=${this._mediaCategoryChanged}\n                ></ha-radio>\n                <ha-icon icon=\"mdi:book-music\"></ha-icon>\n\n                <ha-radio\n                  name=\"audioType\"\n                  .checked=${this.mediaCategory === \"music\"}\n                  value=\"music\"\n                  @change=${this._mediaCategoryChanged}\n                ></ha-radio>\n                <ha-icon icon=\"mdi:music\"></ha-icon>\n              </div>\n\n              <br />\n              ${this.mediaCategory === \"radio\" ||\n              this.mediaCategory === \"podcast\"\n                ? html`\n                    <paper-input\n                      .placeholder=${this.mediaNamePlaceholder}\n                      type=\"text\"\n                      value=${this.mediaName}\n                      id=\"audio_name\"\n                      @value-changed=${this._mediaNameChanged}\n                    >\n                      <ha-icon icon=\"mdi:account-voice\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n\n                    <paper-input\n                      .placeholder=${this.mediaTypePlaceholder}\n                      type=\"text\"\n                      value=${this.mediaType}\n                      id=\"audio_category\"\n                      @value-changed=${this._mediaTypeChanged}\n                    >\n                      <ha-icon\n                        icon=\"mdi:format-list-bulleted-type\"\n                        slot=\"suffix\"\n                      ></ha-icon>\n                    </paper-input>\n                    <ha-chip-set\n                      @chip-clicked=${this._mediaTypePicket}\n                      .items=${this.mediaChips}\n                    >\n                    </ha-chip-set>\n                    <paper-input\n                      .placeholder=${this.mediaUrlPlaceholder}\n                      type=\"text\"\n                      value=${this.mediaStreamUrl}\n                      @value-changed=${this._mediaStreamUrlChanged}\n                    >\n                      <ha-icon icon=\"mdi:play-network\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n\n                    <paper-input\n                      placeholder=\"Adres URL Okładki\"\n                      type=\"text\"\n                      value=${this.mediaImageUrl}\n                      @value-changed=${this._mediaImageUrlChanged}\n                    >\n                      <ha-icon icon=\"mdi:image-edit\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n                    <br />\n                    <div style=\"text-align:center;\">\n                      <ha-icon icon=\"mdi:share-variant\"></ha-icon>\n                      <ha-switch\n                        .checked=${this.mediaShare}\n                        @change=${this._mediaShareChanged}\n                      >\n                      </ha-switch>\n                      Udostępnij dla wszystkich (po sprawdzeniu w AIS)\n                      <br /><br />\n                    </div>\n                    ${this._canSourceBeAdded()\n                      ? html` <div class=\"sourceCheckButton\">\n                            <mwc-button raised @click=${this._handleAddMedia}>\n                              <ha-icon icon=\"hass:music-note-plus\"></ha-icon>\n                              ${!this.mediaShare\n                                ? html` Dodaj do swojej biblioteki `\n                                : html`Dodaj do swojej biblioteki i udostępnij\n                                  dla wszystkich`}\n                            </mwc-button>\n                          </div>\n                          <br />`\n                      : html`\n                          <div style=\"text-align: center;\">\n                            <h2>Wypełnij wszsytkie wymagane pola.</h2>\n                          </div>\n                          <br />\n                        `}\n                  `\n                : html`<div class=\"WorkInProgress\">\n                      <img src=\"/static/ais_work_in_progress.png\" />\n                    </div>\n                    <div class=\"AisGithub\">\n                      <a href=\"https://github.com/sviete\" target=\"_blank\"\n                        ><ha-icon icon=\"hass:github\"></ha-icon> Join AI-Speaker\n                        on Github</a\n                      >\n                    </div>\n                    <br />`} `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _addMediaToAis(): Promise<AisAnswer> {\n    this._loading = true;\n    let itemData: AisAnswer = { message: \"\", error: false };\n    try {\n      itemData = (await AddMediaSourceAisWs(\n        this.hass,\n        this.mediaCategory,\n        this.mediaName,\n        this.mediaType,\n        this.mediaStreamUrl,\n        this.mediaImageUrl,\n        this.mediaShare\n      )) as AisAnswer;\n    } catch {\n      this._loading = false;\n    }\n    this._loading = false;\n    return itemData;\n  }\n\n  private async _handleAddMedia(): Promise<void> {\n    //\n    const aisAnswer = await this._addMediaToAis();\n    if (aisAnswer.error) {\n      await showAlertDialog(this, {\n        title: \"AIS\",\n        text: aisAnswer.message,\n      });\n      return;\n    }\n\n    // the new url was found\n    const confirmed = await showConfirmationDialog(this, {\n      title: \"AIS\",\n      text: aisAnswer.message + \" Czy chcesz dodać kolejne media?\",\n      confirmText: \"TAK\",\n      dismissText: \"NIE\",\n    });\n\n    if (confirmed) {\n      // clear\n      this.mediaCategory = \"radio\";\n      this.mediaName = \"\";\n      this.mediaType = \"\";\n      this.mediaStreamUrl = \"\";\n      this.mediaImageUrl = \"\";\n      this.mediaShare = false;\n    } else {\n      // close and exit\n      this.closeDialog();\n    }\n  }\n\n  private _isAudioPlaying(): boolean {\n    if (this._aisMediaInfo?.attributes.media_content_id) {\n      return true;\n    }\n    return false;\n  }\n\n  private _canSourceBeAdded(): boolean {\n    if (this.mediaName.length < 3) {\n      return false;\n    }\n    if (this.mediaType.length < 3) {\n      return false;\n    }\n    if (this.mediaStreamUrl.length < 10) {\n      return false;\n    }\n    return true;\n  }\n\n  private _mediaCategoryChanged(ev): void {\n    const newVal = ev.currentTarget.value;\n    if (newVal !== this.mediaCategory) {\n      this.mediaCategory = newVal;\n      if (newVal === \"radio\") {\n        this.mediaNamePlaceholder = \"Nazwa (komenda: Włącz radio nazwa)\";\n        this.mediaTypePlaceholder = \"Typ radia\";\n        this.mediaUrlPlaceholder = \"Adres URL Strumienia\";\n        this.mediaChips = [];\n        const options =\n          this.hass.states[\"input_select.radio_type\"].attributes.options;\n        options.forEach((element) => {\n          if (\n            !element.startsWith(\"Moje\") &&\n            !element.startsWith(\"Udostępnione\")\n          ) {\n            this.mediaChips.push(element);\n          }\n        });\n      } else if (newVal === \"podcast\") {\n        this.mediaNamePlaceholder = \"Nazwa (komenda: Włącz podcast nazwa)\";\n        this.mediaTypePlaceholder = \"Typ podcasta\";\n        this.mediaUrlPlaceholder = \"Adres URL Kanału RSS (rss feed)\";\n        this.mediaChips = [];\n        const options =\n          this.hass.states[\"input_select.podcast_type\"].attributes.options;\n        options.forEach((element) => {\n          if (\n            !element.startsWith(\"Moje\") &&\n            !element.startsWith(\"Udostępnione\")\n          ) {\n            this.mediaChips.push(element);\n          }\n        });\n      }\n    }\n  }\n\n  private _mediaTypeChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaType) {\n      this.mediaType = newVal;\n    }\n  }\n\n  private _mediaTypePicket(ev): void {\n    const newIdx = ev.detail.index;\n    const newType = this.mediaChips[newIdx];\n    if (newType !== this.mediaType) {\n      this.mediaType = newType;\n    }\n  }\n\n  private _mediaStreamUrlChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaStreamUrl) {\n      this.mediaStreamUrl = newVal;\n    }\n  }\n\n  private _mediaImageUrlChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaImageUrl) {\n      this.mediaImageUrl = newVal;\n    }\n  }\n\n  private _mediaShareChanged(ev): void {\n    const newVal = ev.target.checked;\n    if (newVal !== this.mediaShare) {\n      this.mediaShare = newVal;\n    }\n  }\n\n  private _mediaNameChanged(ev): void {\n    const newVal = ev.detail.value;\n    if (newVal !== this.mediaName) {\n      this.mediaName = newVal;\n    }\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0 24px 20px;\n        }\n        div.sourceCheckButton {\n          text-align: center;\n        }\n        div.WorkInProgress {\n          text-align: center;\n        }\n        div.AisGithub {\n          text-align: right;\n        }\n        img {\n          max-width: 500px;\n          max-height: 300px;\n        }\n        span.aisUrl {\n          word-wrap: break-word;\n        }\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin-top: 40px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-add-media-source-ais\": HuiDialogAddMediaSourceAis;\n  }\n}\n"],"names":[],"sourceRoot":""}