{"version":3,"file":"6ed4cf92.js","mappings":";;;;;;;;;;;;;;;;;;;;AA6CA;ACkBA;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsDA;;AAoEA;;;;;AAKA;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;AAKA;;;;;AAMA;;;;;AAMA;AACA;;;;;;;;;;;;;;;;;AAkBA;;;;AAMA;;;;;;AAOA","sources":["webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-logs.ts"],"sourcesContent":["import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema, quotingType: '\"' })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label\n        ? html`<p>${this.label}${this.required ? \" *\" : \"\"}</p>`\n        : \"\"}\n      <ha-code-editor\n        .hass=${this.hass}\n        .value=${this._yaml}\n        .readOnly=${this.readOnly}\n        mode=\"yaml\"\n        autocomplete-entities\n        autocomplete-icons\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import \"../../../components/ha-yaml-editor\";\nimport \"../../../components/ha-code-editor\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { load } from \"js-yaml\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-switch\";\nimport \"@material/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-circular-progress\";\nimport { handleFetchPromise } from \"../../../util/hass-call-api\";\nimport { haStyle } from \"../../../resources/styles\";\n\nexport interface aisSaveDbSettingsResponse {\n  info: string;\n  error: string;\n}\n\nexport const aisSaveDbSettings = (params: {\n  dbEngine: string;\n  dbDrive: string;\n  dbUser: string;\n  dbPassword: string;\n  dbServerIp: string;\n  dbServerName: string;\n  dbKeepDays: number;\n  dbShowLogbook: boolean;\n  dbShowHistory: boolean;\n  dbInclude: any;\n  dbExclude: any;\n}) =>\n  handleFetchPromise<aisSaveDbSettingsResponse>(\n    fetch(\"/api/ais_file/ais_db_view\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      body: JSON.stringify(params),\n    })\n  );\n\n@customElement(\"ha-config-ais-dom-config-logs\")\nclass HaConfigAisDomConfiglLogs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property({ type: String }) private logLevel = \"\";\n\n  @property({ type: String }) private logDrive = \"\";\n\n  @property({ type: Number }) private logRotating = 1;\n\n  @property({ type: String }) private logModeInfo = \"\";\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > div#card-icon {\n          margin: -4px 0;\n          position: absolute;\n          top: 1em;\n          right: 1em;\n          border-radius: 25px;\n        }\n        .center-container {\n          text-align: center;\n          height: 70px;\n        }\n\n        .config-invalid {\n          color: red;\n          text-align: center;\n          padding-bottom: 1em;\n        }\n        .config-valid {\n          color: green;\n          text-align: center;\n          padding-bottom: 1em;\n        }\n        .inportant-info {\n          color: var(--primary-color);\n          font-weight: bold;\n        }\n\n        @keyframes pulse {\n          0% {\n            background-color: var(--card-background-color);\n          }\n          100% {\n            background-color: orange;\n          }\n        }\n        @keyframes pulseRed {\n          0% {\n            background-color: var(--card-background-color);\n          }\n          100% {\n            background-color: red;\n          }\n        }\n      `,\n    ];\n  }\n\n  private getLogError(logSettingsInfo) {\n    let logError = \"\";\n    if (logSettingsInfo.attributes.errorInfo) {\n      logError = logSettingsInfo.attributes.errorInfo + \" \";\n    }\n    if (this.logLevel === \"debug\") {\n      logError +=\n        \"Logowanie w trybie debug generuje duże ilości logów i obciąża system. Używaj go tylko podczas diagnozowania problemu. \";\n    }\n    return logError;\n  }\n\n  private isNotSeleced(option) {\n    if (!option) {\n      return true;\n    }\n    if (option === \"-\") {\n      return true;\n    }\n    if (option === \"\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  private getLogIconAnimationStyle(_logSettingsInfo) {\n    if (!this.isNotSeleced(this.logDrive)) {\n      if (this.logLevel === \"debug\") {\n        return \"animation: pulseRed 2s infinite;\";\n      }\n      if (this.logLevel === \"info\") {\n        return \"animation: pulse 4s infinite;\";\n      }\n      if (this.logLevel === \"warning\") {\n        return \"animation: pulse 7s infinite;\";\n      }\n      if (this.logLevel === \"error\") {\n        return \"animation: pulse 8s infinite;\";\n      }\n      if (this.logLevel === \"critical\") {\n        return \"animation: pulse 10s infinite;\";\n      }\n    }\n    return \"\";\n  }\n\n\n  private _getLogSettings() {\n    // LOG\n    const connectionInfo = this.hass.states[\"sensor.ais_logs_settings_info\"];\n    const connInfoAttr = connectionInfo.attributes;\n    this.logDrive = connInfoAttr.logDrive;\n    this.logLevel = connInfoAttr.logLevel;\n    this.logRotating = connInfoAttr.logRotating;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    // LOG\n    this._getLogSettings();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <ha-config-section .is-wide=${this.isWide}>\n          <span slot=\"header\">Ustawienie zapisu logów systemu</span>\n          <ha-card header=\" Wybór parametrów logowania\">\n            <div\n              id=\"card-icon\"\n              .style=${this.getLogIconAnimationStyle(\n                this.hass.states[\"sensor.ais_logs_settings_info\"]\n              )}\n            >\n              <ha-icon icon=\"mdi:content-save-edit\"></ha-icon>\n            </div>\n            <div class=\"card-content\">\n              <ha-icon icon=\"mdi:bug-check\"></ha-icon>\n\n              <mwc-select\n                label-float=\"Poziomy logowania\"\n                label=\"Poziomy logowania\"\n                .value=${this.logLevel}\n                @selected=${this.logLevelChanged}\n              >\n                <mwc-list-item value=\"critical\">critical</mwc-list-item>\n                <mwc-list-item value=\"error\">error</mwc-list-item>\n                <mwc-list-item value=\"warning\">warning</mwc-list-item>\n                <mwc-list-item value=\"info\">info</mwc-list-item>\n                <mwc-list-item value=\"debug\">debug</mwc-list-item>\n              </mwc-select>\n              <br />\n\n              Jeśli chcesz zapisywać logi trwale do pliku, wybierz dysk wymienny\n              (USB, SD card) na którym będą zapisywane logi: <br />\n              <ha-icon icon=\"mdi:usb-flash-drive\"></ha-icon>\n\n              <mwc-select\n                label-float=\"Dysk wymienny\"\n                label=\"Dysk wymienny\"\n                .value=${this.logDrive}\n                @selected=${this.logDriveChanged}\n              >\n                ${this.hass.states[\n                  \"input_select.ais_usb_flash_drives\"\n                ].attributes.options!.map(\n                  (item: string) =>\n                    html`\n                      <mwc-list-item .value=${item}> ${item}</mwc-list-item>\n                    `\n                )}\n              </mwc-select>\n\n              <br /><br />\n              ${!this.isNotSeleced(this.logDrive)\n                ? html`\n                    Możesz określić liczbę dni przechowywanych w jednym pliku.\n                    Rotacja plików dziennika wykonywna jest o północy.\n                    <paper-input\n                      type=\"number\"\n                      .value=${this.logRotating}\n                      @change=${this.logRotatingDaysChanged}\n                      maxlength=\"4\"\n                      max=\"9999\"\n                      min=\"1\"\n                      label-float=\"Liczba dni przechowywanych w jednym pliku loga\"\n                      label=\"Liczba dni przechowywanych w jednym pliku loga\"\n                    >\n                      <ha-icon icon=\"mdi:calendar\" slot=\"suffix\"></ha-icon>\n                    </paper-input>\n                    Zmiana dysku lub zmiana liczby dni przechowywanych będzie\n                    zralizowana po restartcie systemu.\n                  `\n                : html``}\n            </div>\n\n            <div class=\"card-content\">\n              <div class=\"config-invalid\">\n                <span class=\"text\">\n                  ${this.getLogError(\n                    this.hass.states[\"sensor.ais_logs_settings_info\"]\n                  )}\n                </span>\n              </div>\n            </div>\n            <div class=\"card-content\">${this.logModeInfo}</div>\n          </ha-card>\n        </ha-config-section>\n        <br />\n        <br />\n      </hass-subpage>\n    `;\n  }\n\n  private saveLoggerSettings() {\n    this.hass.callService(\"ais_files\", \"change_logger_settings\", {\n      log_drive: this.logDrive,\n      log_level: this.logLevel,\n      log_rotating: this.logRotating,\n    });\n  }\n\n  private logDriveChanged(ev) {\n    const newValue = ev.target!.selected.value;\n    if (newValue !== this.logDrive) {\n      this.logDrive = newValue;\n      if (!this.isNotSeleced(this.logDrive)) {\n        this.logModeInfo =\n          \"Zapis logów do pliku /dyski-wymienne/\" + this.logDrive + \"/ais.log\";\n      } else {\n        this.logModeInfo = \"Zapis logów do pliku wyłączony \";\n      }\n      this.saveLoggerSettings();\n    }\n  }\n\n  private logLevelChanged(ev) {\n    const newValue = ev.target!.selected.value;\n    if (newValue !== this.logLevel) {\n      this.logLevel = newValue;\n      this.logModeInfo = \"Poziom logowania: \" + this.logLevel;\n      this.saveLoggerSettings();\n    }\n  }\n\n  private logRotatingDaysChanged(ev) {\n    const newValue = Number(ev.target.value);\n    if (this.logRotating !== newValue) {\n      this.logRotating = newValue;\n      if (this.logRotating === 1) {\n        this.logModeInfo = \"Rotacja logów codziennie.\";\n      } else {\n        this.logModeInfo = \"Rotacja logów co \" + this.logRotating + \" dni.\";\n      }\n      this.saveLoggerSettings();\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-logs\": HaConfigAisDomConfiglLogs;\n  }\n}\n"],"names":[],"sourceRoot":""}