{"version":3,"file":"c6563c99.js","mappings":";;;AAmBA;;;AANA;;;;;;;;;;;;;;;;;AA6BA;;AC4EA;;AAEA;;;;AAIA;AACA;AAGA;;;AAGA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA","sources":["webpack://home-assistant-frontend/./src/components/ha-tip.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-system-navigation.ts"],"sourcesContent":["import { mdiLightbulbOutline } from \"@mdi/js\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport { HomeAssistant } from \"../types\";\n\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-tip\")\nclass HaTip extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  public render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-svg-icon .path=${mdiLightbulbOutline}></ha-svg-icon>\n      <span class=\"prefix\"\n        >${this.hass.localize(\"ui.panel.config.tips.tip\")}</span\n      >\n      <span class=\"text\"><slot></slot></span>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      text-align: center;\n    }\n\n    .text {\n      direction: var(--direction);\n      margin-left: 2px;\n      margin-inline-start: 2px;\n      margin-inline-end: initial;\n      color: var(--secondary-text-color);\n    }\n\n    .prefix {\n      font-weight: 500;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tip\": HaTip;\n  }\n}\n","import { mdiPower } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-navigation-list\";\nimport \"../../../components/ha-tip\";\nimport { BackupContent, fetchBackupInfo } from \"../../../data/backup\";\nimport { CloudStatus, fetchCloudStatus } from \"../../../data/cloud\";\nimport { BOARD_NAMES, HardwareInfo } from \"../../../data/hardware\";\nimport { fetchHassioBackups, HassioBackup } from \"../../../data/hassio/backup\";\nimport {\n  fetchHassioHassOsInfo,\n  fetchHassioHostInfo,\n  HassioHassOSInfo,\n  HassioHostInfo,\n} from \"../../../data/hassio/host\";\nimport { showRestartDialog } from \"../../../dialogs/restart/show-dialog-restart\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-config-system-navigation\")\nclass HaConfigSystemNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ attribute: false }) public cloudStatus?: CloudStatus;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() private _latestBackupDate?: string;\n\n  @state() private _boardName?: string;\n\n  @state() private _storageInfo?: { used: number; free: number; total: number };\n\n  @state() private _externalAccess = false;\n\n  protected render(): TemplateResult {\n    const pages = configSections.general\n      .filter((page) => canShowPage(this.hass, page))\n      .map((page) => {\n        let description = \"\";\n\n        switch (page.translationKey) {\n          case \"backup\":\n            description = this._latestBackupDate\n              ? this.hass.localize(\n                  \"ui.panel.config.backup.description\",\n                  \"relative_time\",\n                  relativeTime(\n                    new Date(this._latestBackupDate),\n                    this.hass.locale\n                  )\n                )\n              : this.hass.localize(\n                  \"ui.panel.config.backup.description_no_backup\"\n                );\n            break;\n          case \"network\":\n            description = this.hass.localize(\n              \"ui.panel.config.network.description\",\n              \"state\",\n              this._externalAccess\n                ? this.hass.localize(\"ui.panel.config.network.enabled\")\n                : this.hass.localize(\"ui.panel.config.network.disabled\")\n            );\n            break;\n          case \"storage\":\n            description = this._storageInfo\n              ? this.hass.localize(\n                  \"ui.panel.config.storage.description\",\n                  \"percent_used\",\n                  `${Math.round(\n                    (this._storageInfo.used / this._storageInfo.total) * 100\n                  )}${blankBeforePercent(this.hass.locale)}%`,\n                  \"free_space\",\n                  `${this._storageInfo.free} GB`\n                )\n              : \"\";\n            break;\n          case \"hardware\":\n            description =\n              this._boardName ||\n              this.hass.localize(\"ui.panel.config.hardware.description\");\n            break;\n\n          default:\n            description = this.hass.localize(\n              `ui.panel.config.${page.translationKey}.description`\n            );\n            break;\n        }\n\n        return {\n          ...page,\n          name: page.translationKey\n            ? this.hass.localize(\n                `ui.panel.config.${page.translationKey}.caption`\n              )\n            : page.name,\n          description,\n        };\n      });\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        back-path=\"/config\"\n        .header=${this.hass.localize(\"ui.panel.config.dashboard.system.main\")}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .path=${mdiPower}\n          .label=${this.hass.localize(\n            \"ui.panel.config.system_dashboard.restart_homeassistant\"\n          )}\n          @click=${this._showRestartDialog}\n        ></ha-icon-button>\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          <ha-card outlined>\n            <ha-navigation-list\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .pages=${pages}\n              hasSecondary\n              .label=${this.hass.localize(\n                \"ui.panel.config.dashboard.system.main\"\n              )}\n            ></ha-navigation-list>\n          </ha-card>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(_changedProperties): void {\n    super.firstUpdated(_changedProperties);\n\n    this._fetchNetworkStatus();\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n    this._fetchBackupInfo(isHassioLoaded);\n    this._fetchHardwareInfo(isHassioLoaded);\n    if (isHassioLoaded) {\n      this._fetchStorageInfo();\n    }\n  }\n\n  private async _fetchBackupInfo(isHassioLoaded: boolean) {\n    const backups: BackupContent[] | HassioBackup[] = isHassioLoaded\n      ? await fetchHassioBackups(this.hass)\n      : isComponentLoaded(this.hass, \"backup\")\n      ? await fetchBackupInfo(this.hass).then(\n          (backupData) => backupData.backups\n        )\n      : [];\n\n    if (backups.length > 0) {\n      this._latestBackupDate = (backups as any[]).reduce((a, b) =>\n        a.date > b.date ? a : b\n      ).date;\n    }\n  }\n\n  private async _fetchHardwareInfo(isHassioLoaded: boolean) {\n    if (isComponentLoaded(this.hass, \"hardware\")) {\n      const hardwareInfo: HardwareInfo = await this.hass.callWS({\n        type: \"hardware/info\",\n      });\n      this._boardName = hardwareInfo?.hardware.find(\n        (hw) => hw.board !== null\n      )?.name;\n    } else if (isHassioLoaded) {\n      const osData: HassioHassOSInfo = await fetchHassioHassOsInfo(this.hass);\n      if (osData.board) {\n        this._boardName = BOARD_NAMES[osData.board];\n      }\n    }\n  }\n\n  private async _fetchStorageInfo() {\n    const hostInfo: HassioHostInfo = await fetchHassioHostInfo(this.hass);\n    this._storageInfo = {\n      used: hostInfo.disk_used,\n      free: hostInfo.disk_free,\n      total: hostInfo.disk_total,\n    };\n  }\n\n  private async _fetchNetworkStatus() {\n    if (isComponentLoaded(this.hass, \"cloud\")) {\n      const cloudStatus = await fetchCloudStatus(this.hass);\n      if (cloudStatus.logged_in) {\n        this._externalAccess = true;\n        return;\n      }\n    }\n    this._externalAccess = this.hass.config.external_url !== null;\n  }\n\n  private async _showRestartDialog() {\n    showRestartDialog(this);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host(:not([narrow])) ha-card {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n\n        ha-card {\n          overflow: hidden;\n          margin-bottom: 24px;\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n\n        .restart-section {\n          display: flex;\n          align-items: center;\n          flex-direction: column;\n          justify-content: center;\n          margin-bottom: 24px;\n        }\n\n        @media all and (max-width: 600px) {\n          ha-card {\n            border-width: 1px 0;\n            border-radius: 0;\n            box-shadow: unset;\n          }\n          ha-config-section {\n            margin-top: -42px;\n          }\n        }\n\n        ha-navigation-list {\n          --navigation-list-item-title-font-size: 16px;\n        }\n        ha-tip {\n          margin-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-system-navigation\": HaConfigSystemNavigation;\n  }\n}\n"],"names":[],"sourceRoot":""}