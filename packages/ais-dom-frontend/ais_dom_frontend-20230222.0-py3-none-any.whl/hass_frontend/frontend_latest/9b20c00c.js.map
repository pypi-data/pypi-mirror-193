{"version":3,"file":"9b20c00c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;AC1DA;AAEA;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;ACfA;;ACeA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;ACnKA;;;;;;;;;;;;;;;;;AAqBA;;ACwEA;AACA;;AAEA;;;;;;AAMA;;;;;AAKA;;;;;;AAQA;;AAEA;AAGA;;AAIA;;;;;AAWA;;;;AAKA;;;;;AAKA;;AAEA;;;AAGA;;;;;AAQA;;AAIA;AACA;;AAGA;AACA;;;;AATA;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/components/ha-logo-svg.ts","webpack://home-assistant-frontend/./src/panels/config/info/ha-config-info.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a>${r}</a>`\n      : html`<a target=${this.openNewTab ? \"_blank\" : \"\"} href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import { css, CSSResultGroup, LitElement, svg, SVGTemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-logo-svg\")\nexport class HaLogoSvg extends LitElement {\n  protected render(): SVGTemplateResult {\n    return svg`\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"48.43 66.19 120.58 192.4\"><defs><filter id=\"a\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter><filter id=\"b\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter><filter id=\"c\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter><filter id=\"d\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter><filter id=\"e\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter><filter id=\"f\" color-interpolation-filters=\"sRGB\"><feGaussianBlur stdDeviation=\"0.51 0.5\" result=\"blur\"/></filter></defs><g fill-rule=\"evenodd\" stroke=\"#fff\" stroke-width=\".511\" stroke-miterlimit=\"4\" stroke-dasharray=\"0 5.616\" stroke-dashoffset=\"7.56\" stroke-opacity=\"1\"><path d=\"M39.429 22.429C21.226 22.429 6.57 40.774 6.57 63.56v183.153h65.715V63.56c0-22.787-14.654-41.132-32.857-41.132z\" transform=\"translate(46.109 57.663) scale(.39179)\" opacity=\"1\" fill=\"#d04400\" fill-opacity=\".929\" filter=\"url(#a)\"/><path d=\"M39.429 14.025C21.226 14.025 6.57 32.37 6.57 55.157v98.868h61.354c1.479 0 2.933.089 4.361.246V55.157c0-22.787-14.654-41.132-32.857-41.132z\" transform=\"translate(92.823 93.978) scale(.39179)\" opacity=\"1\" fill=\"#f69562\" fill-opacity=\"1\" filter=\"url(#b)\"/><path d=\"M39.429 8C21.226 8 6.57 26.346 6.57 49.133V88h65.715V49.133C72.286 26.346 57.632 8 39.43 8z\" transform=\"translate(140.432 119.846) scale(.39179)\" opacity=\"1\" fill=\"#ffbd77\" fill-opacity=\"1\" filter=\"url(#c)\"/><path d=\"M39.429 22.429C21.226 22.429 6.57 40.774 6.57 63.56v183.153h65.715V63.56c0-22.787-14.654-41.132-32.857-41.132z\" transform=\"matrix(.39179 0 0 -.39179 46.109 267.13)\" opacity=\"1\" fill=\"#d04400\" fill-opacity=\".929\" filter=\"url(#d)\"/><path d=\"M39.429 14.025C21.226 14.025 6.57 32.37 6.57 55.157v98.868h61.354c1.479 0 2.933.089 4.361.246V55.157c0-22.787-14.654-41.132-32.857-41.132z\" transform=\"matrix(.39179 0 0 -.39179 92.823 230.716)\" opacity=\"1\" fill=\"#f69562\" fill-opacity=\"1\" filter=\"url(#e)\"/><path d=\"M39.429 8C21.226 8 6.57 26.346 6.57 49.133V88h65.715V49.133C72.286 26.346 57.632 8 39.43 8z\" transform=\"matrix(.39179 0 0 -.39179 140.432 204.472)\" opacity=\"1\" fill=\"#ffbd77\" fill-opacity=\"1\" filter=\"url(#f)\"/></g></svg>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: var(--ha-icon-display, inline-flex);\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        vertical-align: middle;\n        fill: currentcolor;\n        width: var(--mdc-icon-size, 24px);\n        height: var(--mdc-icon-size, 24px);\n      }\n      svg {\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        display: block;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-logo-svg\": HaLogoSvg;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport {\n  mdiBug,\n  mdiFileDocument,\n  mdiHandsPray,\n  mdiHelp,\n  mdiHomeAssistant,\n  mdiNewspaperVariant,\n  mdiTshirtCrew,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-logo-svg\";\nimport {\n  fetchHassioHassOsInfo,\n  HassioHassOSInfo,\n} from \"../../../data/hassio/host\";\nimport { fetchHassioInfo, HassioInfo } from \"../../../data/hassio/supervisor\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\nconst JS_TYPE = __BUILD__;\nconst JS_VERSION = __VERSION__;\n\nconst PAGES: Array<{\n  name: string;\n  path: string;\n  iconPath: string;\n  iconColor: string;\n}> = [\n  {\n    name: \"change_log\",\n    path: \"/latest-release-notes/\",\n    iconPath: mdiNewspaperVariant,\n    iconColor: \"#4A5963\",\n  },\n  {\n    name: \"thanks\",\n    path: \"/developers/credits/\",\n    iconPath: mdiHandsPray,\n    iconColor: \"#3B808E\",\n  },\n  {\n    name: \"merch\",\n    path: \"/merch\",\n    iconPath: mdiTshirtCrew,\n    iconColor: \"#C65326\",\n  },\n  {\n    name: \"feature\",\n    path: \"/feature-requests\",\n    iconPath: mdiHomeAssistant,\n    iconColor: \"#0D47A1\",\n  },\n  {\n    name: \"bug\",\n    path: \"/issues\",\n    iconPath: mdiBug,\n    iconColor: \"#F1C447\",\n  },\n  {\n    name: \"help\",\n    path: \"/community\",\n    iconPath: mdiHelp,\n    iconColor: \"#B1345C\",\n  },\n  {\n    name: \"license\",\n    path: \"/developers/license/\",\n    iconPath: mdiFileDocument,\n    iconColor: \"#518C43\",\n  },\n];\n\nclass HaConfigInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _osInfo?: HassioHassOSInfo;\n\n  @state() private _hassioInfo?: HassioInfo;\n\n  protected render(): TemplateResult {\n    const hass = this.hass;\n    const customUiList: Array<{ name: string; url: string; version: string }> =\n      (window as any).CUSTOM_UI_LIST || [];\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .header=${this.hass.localize(\"ui.panel.config.info.caption\")}\n      >\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"logo-versions\">\n              <a\n                href=${documentationUrl(this.hass, \"\")}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <ha-logo-svg\n                  title=${this.hass.localize(\n                    \"ui.panel.config.info.home_assistant_logo\"\n                  )}\n                >\n                </ha-logo-svg>\n              </a>\n              <div class=\"versions\">\n                <span class=\"ha-version\"\n                  >Home Assistant ${hass.connection.haVersion}</span\n                >\n                ${this._hassioInfo\n                  ? html`<span>Supervisor ${this._hassioInfo.supervisor}</span>`\n                  : \"\"}\n                ${this._osInfo?.version\n                  ? html`<span>Operating System ${this._osInfo.version}</span>`\n                  : \"\"}\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.info.frontend_version\",\n                    \"version\",\n                    JS_VERSION,\n                    \"type\",\n                    JS_TYPE\n                  )}\n                </span>\n              </div>\n            </div>\n            <mwc-list>\n              ${PAGES.map(\n                (page) => html`\n                  <ha-clickable-list-item\n                    graphic=\"avatar\"\n                    openNewTab\n                    href=${documentationUrl(this.hass, page.path)}\n                  >\n                    <div\n                      slot=\"graphic\"\n                      class=\"icon-background\"\n                      .style=\"background-color: ${page.iconColor}\"\n                    >\n                      <ha-svg-icon .path=${page.iconPath}></ha-svg-icon>\n                    </div>\n                    <span>\n                      ${this.hass.localize(\n                        `ui.panel.config.info.items.${page.name}`\n                      )}\n                    </span>\n                  </ha-clickable-list-item>\n                `\n              )}\n            </mwc-list>\n            ${!customUiList.length\n              ? \"\"\n              : html`\n                  <div class=\"custom-ui\">\n                    ${this.hass.localize(\"ui.panel.config.info.custom_uis\")}\n                    ${customUiList.map(\n                      (item) => html`\n                        <div>\n                          <a href=${item.url} target=\"_blank\"> ${item.name}</a>:\n                          ${item.version}\n                        </div>\n                      `\n                    )}\n                  </div>\n                `}\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    // Legacy custom UI can be slow to register, give them time.\n    const customUI = ((window as any).CUSTOM_UI_LIST || []).length;\n    setTimeout(() => {\n      if (((window as any).CUSTOM_UI_LIST || []).length !== customUI.length) {\n        this.requestUpdate();\n      }\n    }, 2000);\n\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      this._loadSupervisorInfo();\n    }\n  }\n\n  private async _loadSupervisorInfo(): Promise<void> {\n    const [osInfo, hassioInfo] = await Promise.all([\n      fetchHassioHassOsInfo(this.hass),\n      fetchHassioInfo(this.hass),\n    ]);\n\n    this._hassioInfo = hassioInfo;\n    this._osInfo = osInfo;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 28px 20px 0;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n\n        ha-logo-svg {\n          padding: 12px;\n          height: 150px;\n          width: 150px;\n        }\n\n        ha-card {\n          padding: 16px;\n          max-width: 600px;\n          margin: 0 auto;\n          margin-bottom: 24px;\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        .logo-versions {\n          display: flex;\n          justify-content: flex-start;\n          align-items: center;\n        }\n\n        .versions {\n          display: flex;\n          flex-direction: column;\n          color: var(--secondary-text-color);\n          padding: 12px 0;\n          align-self: stretch;\n          justify-content: flex-start;\n        }\n\n        .ha-version {\n          color: var(--primary-text-color);\n          font-weight: 500;\n          font-size: 16px;\n        }\n\n        mwc-list {\n          --mdc-list-side-padding: 4px;\n        }\n\n        ha-svg-icon {\n          height: 24px;\n          width: 24px;\n          display: block;\n          padding: 8px;\n          color: #fff;\n        }\n\n        .icon-background {\n          border-radius: 50%;\n        }\n\n        @media all and (max-width: 500px), all and (max-height: 500px) {\n          ha-logo-svg {\n            height: 100px;\n            width: 100px;\n          }\n        }\n\n        .custom-ui {\n          color: var(--secondary-text-color);\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-info\": HaConfigInfo;\n  }\n}\n\ncustomElements.define(\"ha-config-info\", HaConfigInfo);\n"],"names":[],"sourceRoot":""}