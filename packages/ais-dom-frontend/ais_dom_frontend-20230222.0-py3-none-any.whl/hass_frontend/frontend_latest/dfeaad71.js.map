{"version":3,"file":"dfeaad71.js","mappings":";AAkCA;;AAGA;AACA;;;;;;AAMA;AA5CA;;;;AAiDA;;AAKA;AACA;AACA;;;;AAIA;AACA;;;AAGA;;AAGA;;AAGA;AAMA;AAEA;AACA;;AAGA;AACA;AACA;AACA;;;;AAMA;;;;;;;;;;;;AAqCA;;AC/EA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;AC3JA;;;;AAOA;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-overflow-menu.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-button-menu\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nexport interface IconOverflowMenuItem {\n  [key: string]: any;\n  path: string;\n  label: string;\n  narrowOnly?: boolean;\n  disabled?: boolean;\n  tooltip?: string;\n  action: () => any;\n  warning?: boolean;\n  divider?: boolean;\n}\n\n@customElement(\"ha-icon-overflow-menu\")\nexport class HaIconOverflowMenu extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public items: IconOverflowMenuItem[] = [];\n\n  @property({ type: Boolean }) public narrow = false;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.narrow\n        ? html` <!-- Collapsed representation for small screens -->\n            <ha-button-menu\n              @click=${this._handleIconOverflowMenuOpened}\n              @closed=${this._handleIconOverflowMenuClosed}\n              class=\"ha-icon-overflow-menu-overflow\"\n              corner=\"BOTTOM_START\"\n              absolute\n            >\n              <ha-icon-button\n                .label=${this.hass.localize(\"ui.common.overflow_menu\")}\n                .path=${mdiDotsVertical}\n                slot=\"trigger\"\n              ></ha-icon-button>\n\n              ${this.items.map((item) =>\n                item.divider\n                  ? html`<li divider role=\"separator\"></li>`\n                  : html`<mwc-list-item\n                      graphic=\"icon\"\n                      ?disabled=${item.disabled}\n                      @click=${item.action}\n                      class=${classMap({ warning: Boolean(item.warning) })}\n                    >\n                      <div slot=\"graphic\">\n                        <ha-svg-icon\n                          class=${classMap({ warning: Boolean(item.warning) })}\n                          .path=${item.path}\n                        ></ha-svg-icon>\n                      </div>\n                      ${item.label}\n                    </mwc-list-item> `\n              )}\n            </ha-button-menu>`\n        : html`\n            <!-- Icon representation for big screens -->\n            ${this.items.map((item) =>\n              item.narrowOnly\n                ? \"\"\n                : item.divider\n                ? html`<div role=\"separator\"></div>`\n                : html`<div>\n                    ${item.tooltip\n                      ? html`<paper-tooltip animation-delay=\"0\" position=\"left\">\n                          ${item.tooltip}\n                        </paper-tooltip>`\n                      : \"\"}\n                    <ha-icon-button\n                      @click=${item.action}\n                      .label=${item.label}\n                      .path=${item.path}\n                      ?disabled=${item.disabled}\n                    ></ha-icon-button>\n                  </div> `\n            )}\n          `}\n    `;\n  }\n\n  protected _handleIconOverflowMenuOpened(e) {\n    e.stopPropagation();\n    // If this component is used inside a data table, the z-index of the row\n    // needs to be increased. Otherwise the ha-button-menu would be displayed\n    // underneath the next row in the table.\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"1\";\n    }\n  }\n\n  protected _handleIconOverflowMenuClosed() {\n    const row = this.closest(\".mdc-data-table__row\") as HTMLDivElement | null;\n    if (row) {\n      row.style.zIndex = \"\";\n    }\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          justify-content: flex-end;\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        div[role=\"separator\"] {\n          border-right: 1px solid var(--divider-color);\n          width: 1px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-overflow-menu\": HaIconOverflowMenu;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n"],"names":[],"sourceRoot":""}