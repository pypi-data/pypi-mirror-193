{"version":3,"file":"65b3bd48.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;;;ACCA;AAIA;;AAEA;AAGA;;AAAA;AAEA;AAGA;;;AAGA;;;;AAIA;AAGA;;AAwBA;;;;;AAMA;;;;;;AAMA;;;AAIA;;;AAGA;;;;;AAKA;;;;;AAhDA;;;;;;;;AAUA;AACA;;;;;AAKA;;;;;;AA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-input/paper-textarea.js","webpack://home-assistant-frontend/./src/components/media-player/hui-dialog-report-problem-to-ais.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@demo demo/index.html\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name$=\"[[name]]\" aria-label$=\"[[label]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" autocapitalize$=\"[[autocapitalize]]\" inputmode$=\"[[inputmode]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" disabled$=\"[[disabled]]\" rows$=\"[[rows]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     *\n     * @type {!boolean}\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `autocapitalize` attribute.\n     */\n    autocapitalize: {type: String, value: 'none'},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return /** @type {!HTMLTextAreaElement} */ (this.$.textarea);\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  /** @override */\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/) &&\n        !navigator.userAgent.match(/OS 1[3456789]/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport {css, CSSResultGroup, html, LitElement, TemplateResult} from \"lit\";\nimport {property, customElement} from 'lit/decorators';\nimport \"../ha-circular-progress\";\nimport { createCloseHeading } from \"../ha-dialog\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { CheckMediaSourceAisDialogParams } from \"./show-check-media-source-ais-dialog\";\n\nexport const ReportProblemToAisWs = (\n  hass: HomeAssistant,\n  problemType: string,\n  problemDesc?: string,\n  problemData?: string\n): Promise<AisAnswer> =>\n  hass.callWS<AisAnswer>({\n    type: \"ais_cloud/report_ais_problem\",\n    problem_type: problemType,\n    problem_desc: problemDesc,\n    problem_data: problemData,\n  });\n\nexport interface AisAnswer {\n  message: string;\n  email: string;\n  report_id: number;\n  error: boolean;\n}\n\n@customElement(\"hui-dialog-report-problem-to-ais\")\nexport class HuiDialogReportProblemToAis extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  private _params?: CheckMediaSourceAisDialogParams;\n\n  @property() private _loading = false;\n\n  @property() private _problemDescription = \"\";\n\n  @property() private _aisAnswer: AisAnswer | undefined;\n\n  private _aisMediaInfo?: HassEntity;\n\n  public showDialog(params: CheckMediaSourceAisDialogParams): void {\n    this._params = params;\n    this._aisMediaInfo = this.hass.states[\n      \"media_player.wbudowany_glosnik\"\n    ] as HassEntity;\n    this._aisAnswer = undefined;\n    this._problemDescription = \"\";\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    this._aisAnswer = undefined;\n    this._problemDescription = \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html` <ha-dialog\n      open\n      hideActions\n      .heading=${createCloseHeading(\n        this.hass,\n        \"Zgłoszenie problemu ze źródłem multimediów\"\n      )}\n      @closed=${this.closeDialog}\n    >\n      ${this._loading\n        ? html`<ha-circular-progress active></ha-circular-progress>`\n        : html``}\n      ${!this._loading\n        ? html`<p>\n                Problem z odtwarzaniem ${\n                  this._aisMediaInfo?.attributes.source\n                },\n                <b></b>${this._aisMediaInfo?.attributes.media_title}</b>\n              <span class=\"aisUrl\">\n                <br>z adresu URL <ha-icon icon=\"mdi:web\"></ha-icon>:\n                <b></b>${this._aisMediaInfo?.attributes.media_content_id}</b>\n                </span\n              >\n              </p>\n              <div class=\"img404\"><img src=\"${\n                this._aisMediaInfo?.attributes.media_stream_image\n              }\"/></div>\n              ${\n                !this._aisAnswer\n                  ? html` <p>\n                        Wyślij zgłoszenie do AI-Speaker. Postaramy się jak\n                        najszybciej naprawić ten problem.\n                      </p>\n                      <paper-textarea\n                        label=\"Dodatkowy opis dla AI-Speaker\"\n                        placeholder=\"Tu możesz np. podać nowy adres zasobu, jeżeli go znasz.\"\n                        name=\"description\"\n                        .value=${this._problemDescription}\n                        @value-changed=${this._handleProblemDescriptionChange}\n                      ></paper-textarea>\n                      <div class=\"sendProblemToAisButton\">\n                        <mwc-button\n                          raised\n                          @click=${this._handleReportProblemToAis}\n                        >\n                          <ha-icon icon=\"hass:email-send\"></ha-icon>\n                          &nbsp; Wyślij zgłoszenie do AI-Speaker\n                        </mwc-button>\n                      </div>`\n                  : html`\n                      <div style=\"text-align: center;\">\n                        ${this._aisAnswer.error\n                          ? html`\n                              <h2>\n                                Podczas przesyłania zgłoszenia wystąpił problem\n                              </h2>\n                              <p>\n                                ${this._aisAnswer?.message}\n                              </p>\n                              <p>\n                                Sprawdz połączenie z Internetem i spróbuj\n                                ponownie później.\n                              </p>\n                            `\n                          : html`\n                              <h2>\n                                Przesłano zgłoszenie do AIS, o numerze:\n                                ${this._aisAnswer.report_id}\n                              </h2>\n                              <p>\n                                ${this._aisAnswer.message}\n                              </p>\n                            `}\n                      </div>\n                      <div class=\"sendProblemToAisButton\">\n                        <mwc-button raised @click=${this.closeDialog}>\n                          <ha-icon icon=\"hass:close-thick\"></ha-icon>\n                          &nbsp; OK\n                        </mwc-button>\n                      </div>\n                    `\n              }`\n        : html` <p>\n            Wysyłam zgłoszenie do AIS\n          </p>`}\n    </ha-dialog>`;\n  }\n\n  private async _reportProblemToAis(): Promise<AisAnswer> {\n    this._loading = true;\n    let itemData: AisAnswer = {\n      message: \"\",\n      email: \"\",\n      report_id: 0,\n      error: false,\n    };\n    try {\n      itemData = (await ReportProblemToAisWs(\n        this.hass,\n        \"media_source\",\n        this._problemDescription,\n        this._aisMediaInfo?.attributes.media_title +\n          \" \" +\n          this._aisMediaInfo?.attributes.media_content_id\n      )) as AisAnswer;\n    } catch (err) {\n      itemData.message = err.message;\n      itemData.error = true;\n      this._loading = false;\n    }\n\n    this._loading = false;\n    return itemData;\n  }\n\n  private async _handleReportProblemToAis(): Promise<void> {\n    this._aisAnswer = await this._reportProblemToAis();\n  }\n\n  private _handleProblemDescriptionChange(ev: CustomEvent) {\n    this._problemDescription = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0 24px 20px;\n        }\n        div.sendProblemToAisButton {\n          text-align: center;\n          margin: 10px;\n        }\n        div.img404 {\n          text-align: center;\n        }\n        img {\n          max-width: 500px;\n          max-height: 300px;\n          -webkit-filter: grayscale(100%);\n          filter: grayscale(100%);\n        }\n        span.aisUrl {\n          word-wrap: break-word;\n        }\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin-top: 40px;\n          margin-bottom: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-report-problem-to-ais\": HuiDialogReportProblemToAis;\n  }\n}\n"],"names":[],"sourceRoot":""}