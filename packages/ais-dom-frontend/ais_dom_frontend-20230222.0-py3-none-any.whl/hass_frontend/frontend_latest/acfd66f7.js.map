{"version":3,"file":"acfd66f7.js","mappings":";AAiDA;AACA;AAmBA;AACA;;AAiEA;;AAIA;;;;AAKA;;AAEA;AAGA;AAWA;;;;AAKA;;AAEA;;AAGA;;AAOA;AAiBA;AACA;AAmBA;AACA;;ACvLA;AACA;;;;;;;;;;;;AAYA;;;;AAIA;;;;;AAKA;;;;AAIA;;;;;AAMA;;;;;;AAMA;;;;;;;;;AAWA;;AAEA;;;;;;;;AAxDA;;;;;;;;;;;;;;;;;;;;;;;AA+FA","sources":["webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-wifi.ts"],"sourcesContent":["import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        hass.loadBackendTranslation(\"selector\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      await hass.loadBackendTranslation(\"selector\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.error.${error}`,\n          step.description_placeholders\n        ) || error\n      );\n    },\n\n    renderShowFormStepFieldLocalizeValue(hass, step, key) {\n      return hass.localize(`component.${step.handler}.selector.${key}`);\n    },\n\n    renderShowFormStepSubmitButton(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.submit`\n        ) ||\n        hass.localize(\n          `ui.panel.config.integrations.config_flow.${\n            step.last_step === false ? \"next\" : \"submit\"\n          }`\n        )\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (reason !== \"loading_flow\" && reason !== \"loading_step\") {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport { css, html, CSSResultArray, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-ais-dom-config-wifi\")\nclass HaConfigAisDomConfigWifi extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  protected async firstUpdated() {\n    // console.log(\"ok\");\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Połączenie WiFi</span>\n            <span slot=\"introduction\"\n              >Możesz sprawdzić lub skonfigurować parametry połączenia\n              WiFi</span\n            >\n            <ha-card header=\"Parametry sieci\">\n              <div class=\"card-content\" style=\"display: flex;\">\n                <div style=\"text-align: center;\">\n                  <div class=\"aisInfoRow\">Lokalna nazwa hosta</div>\n                  <div class=\"aisInfoRow\">\n                    <mwc-button\n                      >${this.hass.states[\"sensor.local_host_name\"].state}\n                      <ha-icon\n                        class=\"user-button\"\n                        icon=\"hass:cog\"\n                        @click=${this.createFlowHostName}\n                      ></ha-icon>\n                    </mwc-button>\n                  </div>\n                </div>\n                <div style=\"text-align: center;\" @click=${this.showLocalIpInfo}>\n                  <div class=\"aisInfoRow\">Lokalny adres IP</div>\n                  <div class=\"aisInfoRow\">\n                    <mwc-button\n                      >${this.hass.states[\"sensor.internal_ip_address\"]\n                        .state}</mwc-button\n                    >\n                  </div>\n                </div>\n                <div\n                  @click=${this.showWiFiSpeedInfo}\n                  style=\"text-align: center;\"\n                >\n                  <div class=\"aisInfoRow\">Prędkość połączenia WiFi</div>\n                  <div class=\"aisInfoRow\">\n                    <mwc-button\n                      >${this.hass.states[\n                        \"sensor.ais_wifi_service_current_network_info\"\n                      ].state}</mwc-button\n                    >\n                  </div>\n                </div>\n              </div>\n              <div class=\"card-actions\">\n                <ha-icon\n                  class=\"user-button\"\n                  icon=\"hass:wifi\"\n                  @click=${this.showWiFiGroup}\n                ></ha-icon\n                ><mwc-button @click=${this.createFlowWifi}\n                  >Konfigurator połączenia z siecą WiFi</mwc-button\n                >\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        div.aisInfoRow {\n          display: inline-block;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        div.card-actions {\n          text-align: center;\n        }\n      `,\n    ];\n  }\n\n  showWiFiGroup() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"group.internet_status\",\n    });\n  }\n\n  showWiFiSpeedInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"sensor.ais_wifi_service_current_network_info\",\n    });\n  }\n\n  showLocalIpInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"sensor.internal_ip_address\",\n    });\n  }\n\n  _continueFlow(flowId) {\n    showConfigFlowDialog(this, {\n      continueFlowId: flowId,\n      dialogClosedCallback: () => {\n        // eslint-disable-next-line no-console\n        console.log(\"OK\");\n      },\n    });\n  }\n\n  createFlowHostName() {\n    this.hass\n      .callApi(\"POST\", \"config/config_entries/flow\", {\n        handler: \"ais_host\",\n      })\n      .then((result) => {\n        // eslint-disable-next-line no-console\n        this._continueFlow(result.flow_id);\n      });\n  }\n\n  createFlowWifi() {\n    this.hass\n      .callApi(\"POST\", \"config/config_entries/flow\", {\n        handler: \"ais_wifi_service\",\n      })\n      .then((result) => {\n        // eslint-disable-next-line no-console\n        console.log(result);\n        this._continueFlow(result.flow_id);\n      });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-wifi\": HaConfigAisDomConfigWifi;\n  }\n}\n"],"names":[],"sourceRoot":""}