{"version":3,"file":"636da184.js","mappings":";;;;;;;;;;;;;AA4CA;;;;AC9BA;;;;;;;;;;;;;;;;;;;;AC+BA;;ACFA;;;;;;;;;;AAUA;;AAIA;;;;;;AAMA;AAEA;;;;;;;AAOA;;;;;;;;AAWA;AAGA;;;;;;;;AASA;;;;;;AAQA;;;;AAKA;AAEA;;;;;;AAQA;;;;;AAQA;;;AAMA;;AAGA;;;;;;AAQA;;;AAIA;;;;AAKA;;;AAMA;AAEA;;;;;;AAQA;;;AAIA;;;;AAKA;;;AAMA;AAEA;;;;;;AAQA;;;AAIA;;;;AAKA;;;AAMA;AAEA;;;;;;AAQA;;;AAIA;;;;AAKA;;;AAMA;;;;;AAMA;;;AAIA;;;AAGA;;AAEA;;AAIA;;AAGA;;AAIA;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;;;;;;;AAOA;;AAEA;;;;;;;AAOA;;AAEA;;;;;;;;;;AAUA;AAuCA;;;;;;AAMA;AA7CA;;AAGA;;;AAIA;AAAA;;AAGA;;;AAIA;;;;;;;AASA;AAEA;AACA;AAIA;;;;AAkBA;;;;;;;;;;AAcA;;;;;;AAQA;;;AAIA;;AAGA;AAEA;;;;;;AAQA;;;AAIA;;AAGA;;;;AAKA;;;;AAKA;;;;;;AAOA;;;;;;AAUA;;AAGA;;;AAGA;AAEA;;;AAKA;;AAGA;;;AAGA;AAEA;;;;;;AAQA;;AAGA;;;AAGA;;;;;;;;AASA;;;;;AAKA;;;;;;;;;;;;;;AAeA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA","sources":["webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-update.ts"],"sourcesContent":["import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          if ((input as any).disabled) {\n            break;\n          }\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"../../../components/ha-radio\";\nimport \"../../../components/ha-formfield\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-icon\";\nimport { css, html, CSSResultArray, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\n\n/*\n *\n */\n@customElement(\"ha-config-ais-dom-config-update\")\nclass HaConfigAisDomConfigUpdate extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public validateConfigInProgress = false;\n\n  @property({ type: String }) public validateLog = \"\";\n\n  @property({ type: String }) public aisButtonVersionCheckUpgrade = \"\";\n\n  @property({ type: String }) public backupType = \"all\";\n\n  @property({ type: String }) public backupType2 = \"all\";\n\n  protected async firstUpdated() {\n    // --- //\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <ha-config-section .isWide=${this.isWide}>\n          <span slot=\"header\">Oprogramowanie bramki</span>\n          <span slot=\"introduction\"\n            >Możesz zaktualizować system do najnowszej wersji, wykonać kopię\n            zapasową ustawień i zsynchronizować bramkę z Portalem\n            Integratora</span\n          >\n          <ha-card header=\"Wersja systemu AI-Speaker\">\n            <div class=\"card-content\" style=\"text-align:center\">\n              <div\n                style=\"color:${this._getTextColor(\n                  this.hass.states[\"sensor.version_info\"]\n                )}\"\n              >\n                ${this.hass.states[\"sensor.version_info\"].state}\n              </div>\n              <img class=\"versionLogo\" src=\"/static/ais_version.png\" />\n              <div style=\"text-align:left\">\n                <div style=\"margin-top:30px;\" id=\"ha-switch-id\">\n                  <ha-switch\n                    .checked=${this.hass.states[\"input_boolean.ais_auto_update\"]\n                      .state === \"on\"}\n                    @change=${this.changeAutoUpdateMode}\n                    style=\"position: absolute; right: 20px;\"\n                  ></ha-switch\n                  ><span\n                    ><h3>\n                      Autoaktualizacja\n                      <ha-icon\n                        icon=${this.hass.states[\"input_boolean.ais_auto_update\"]\n                          .state === \"on\"\n                          ? \"mdi:sync\"\n                          : \"mdi:sync-off\"}\n                      ></ha-icon></h3\n                  ></span>\n                </div>\n              </div>\n\n              <div style=\"display: inline-block; text-align:left;\">\n                <div>\n                  ${this.hass.states[\"input_boolean.ais_auto_update\"].state ===\n                  \"on\"\n                    ? html`Codziennie sprawdzimy i automatycznie zainstalujemy\n                      dostępne aktualizacje.`\n                    : html`Możesz aktualizować system samodzielnie w dogodnym\n                      dla Ciebie czasie lub włączyć aktualizację automatyczną.`}\n                </div>\n                <div style=\"margin-top: 15px;\">\n                  Aktualizacje dostarczają najnowsze funkcjonalności oraz\n                  poprawki zapewniające bezpieczeństwo i stabilność działania\n                  systemu.\n                  <table style=\"margin-top: 10px;\">\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .update_check_time\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"\"></ha-icon>\n                            Sprawdzono o\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .update_check_time}\n                          </td>\n                          <td></td>\n                          <td><ha-icon icon=\"\"></ha-icon></td>\n                        </tr>`\n                      : html``}\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .update_status\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"\"></ha-icon>\n                            Status\n                          </td>\n                          <td>\n                            ${this.getVersionName(\n                              this.hass.states[\"sensor.version_info\"].attributes\n                                .update_status\n                            )}\n                          </td>\n                          <td></td>\n                          <td>\n                            <ha-icon\n                              icon=${this.getVersionIcon(\n                                this.hass.states[\"sensor.version_info\"]\n                                  .attributes.update_status\n                              )}\n                            ></ha-icon>\n                          </td>\n                        </tr>`\n                      : html``}\n                    <tr style=\"height: 1em;\"></tr>\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .zigbee2mqtt_current_version\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"mdi:zigbee\"></ha-icon>\n                            Zigbee\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .zigbee2mqtt_current_version}\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .zigbee2mqtt_newest_version}\n                          </td>\n                          <td>\n                            <ha-icon\n                              icon=${this.hass.states[\"sensor.version_info\"]\n                                .attributes.reinstall_zigbee2mqtt\n                                ? \"hass:alert\"\n                                : \"hass:check\"}\n                            ></ha-icon>\n                          </td>\n                        </tr>`\n                      : html``}\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .zigbee2mqtt_current_version\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"mdi:home-assistant\"></ha-icon>\n                            AIS HA\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .dom_app_current_version}\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .dom_app_newest_version}\n                          </td>\n                          <td>\n                            <ha-icon\n                              icon=${this.hass.states[\"sensor.version_info\"]\n                                .attributes.reinstall_dom_app\n                                ? \"hass:alert\"\n                                : \"hass:check\"}\n                            ></ha-icon>\n                          </td>\n                        </tr>`\n                      : html``}\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .android_app_current_version\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"mdi:android\"></ha-icon>\n                            Android\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .android_app_current_version}\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .android_app_newest_version}\n                          </td>\n                          <td>\n                            <ha-icon\n                              icon=${this.hass.states[\"sensor.version_info\"]\n                                .attributes.reinstall_android_app\n                                ? \"hass:alert\"\n                                : \"hass:check\"}\n                            ></ha-icon>\n                          </td>\n                        </tr>`\n                      : html``}\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .linux_apt_current_version\n                      ? html`<tr>\n                          <td>\n                            <ha-icon icon=\"mdi:linux\"></ha-icon>\n                            Linux\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .linux_apt_current_version}\n                          </td>\n                          <td>\n                            ${this.hass.states[\"sensor.version_info\"].attributes\n                              .linux_apt_newest_version}\n                          </td>\n                          <td>\n                            <ha-icon\n                              icon=${this.hass.states[\"sensor.version_info\"]\n                                .attributes.reinstall_linux_apt\n                                ? \"hass:alert\"\n                                : \"hass:check\"}\n                            ></ha-icon>\n                          </td>\n                        </tr>`\n                      : html``}\n                  </table>\n                </div>\n              </div>\n\n              ${this._showUpdateButton(this.hass.states[\"sensor.version_info\"])\n                ? html` <div class=\"center-container\">\n                    <ha-call-service-button\n                      class=\"warning\"\n                      .hass=${this.hass}\n                      domain=\"ais_updater\"\n                      service=\"execute_upgrade\"\n                      .serviceData=${{ say: true }}\n                    >\n                      ${this._computeAisButtonVersionCheckUpgrade(\n                        this.hass.states[\"sensor.version_info\"]\n                      )}\n                    </ha-call-service-button>\n                  </div>`\n                : html`\n                    <br /><br /><br />\n                    ${this.hass.states[\"sensor.version_info\"].attributes\n                      .progress\n                      ? html` <mwc-linear-progress\n                          determinate\n                          .progress=${this.hass.states[\"sensor.version_info\"]\n                            .attributes.progress}\n                          .buffer=${this.hass.states[\"sensor.version_info\"]\n                            .attributes.buffer}\n                        >\n                        </mwc-linear-progress>`\n                      : html`<mwc-linear-progress indeterminate>\n                        </mwc-linear-progress>`}\n                    <br />\n                  `}\n            </div>\n          </ha-card>\n\n          <ha-card header=\"Kopia konfiguracji Bramki\">\n            <div class=\"card-content\">\n              W tym miejscu możesz, sprawdzić poprawność ustawień bramki,\n              wykonać jej kopię i przesłać ją do portalu integratora.\n              <b\n                >Uwaga, ponieważ konfiguracja może zawierać hasła i tokeny\n                dostępu do usług, zalecamy zaszyfrować ją hasłem</b\n              >. Gdy kopia jest zabezpieczona hasłem, to można ją\n              otworzyć/przywrócić tylko po podaniu hasła.\n              <h2>\n                Nowa kopia ustawień\n                <ha-icon icon=\"mdi:cloud-upload-outline\"></ha-icon>\n              </h2>\n              <br />\n              <div class=\"center-container\">\n                Kopia zapasowa ustawień:\n                <br />\n                <div class=\"backup-types\" id=\"backup_type1\">\n                  <ha-formfield name=\"all\" label=\"Wszystkich\">\n                    <ha-radio\n                      name=\"bt\"\n                      @change=${this._handleBackupTypeValueChanged}\n                      value=\"all\"\n                      .checked=${this.backupType === \"all\"}\n                    >\n                    </ha-radio>\n                  </ha-formfield>\n                  <ha-formfield name=\"ha\" label=\"AIS HA\">\n                    <ha-radio\n                      name=\"bt\"\n                      @change=${this._handleBackupTypeValueChanged}\n                      value=\"ha\"\n                      .checked=${this.backupType === \"ha\"}\n                    >\n                    </ha-radio>\n                  </ha-formfield>\n                  <ha-formfield name=\"zigbee\" label=\"Zigbee\">\n                    <ha-radio\n                      name=\"bt\"\n                      @change=${this._handleBackupTypeValueChanged}\n                      value=\"zigbee\"\n                      .checked=${this.backupType === \"zigbee\"}\n                    >\n                    </ha-radio>\n                  </ha-formfield>\n                </div>\n                Przed wykonaniem nowej kopii ustawień sprawdź poprawność\n                konfiguracji\n              </div>\n              <br />\n              <div>\n                ${!this.validateLog\n                  ? html` <div class=\"validate-container\">\n                      <div class=\"validate-result\" id=\"result\">\n                        ${this.hass.states[\"sensor.ais_backup_info\"].attributes\n                          .backup_info}\n                      </div>\n\n                      ${!this.validateConfigInProgress\n                        ? html` <div class=\"config-invalid\">\n                              <span class=\"text\">\n                                ${this.hass.states[\"sensor.ais_backup_info\"]\n                                  .attributes.backup_error}\n                              </span>\n                            </div>\n                            ${this.hass.states[\"sensor.ais_backup_info\"]\n                              .state === \"1\"\n                              ? html`\n                                  <paper-input\n                                    placeholder=\"hasło\"\n                                    no-label-float=\"\"\n                                    type=\"password\"\n                                    id=\"password1\"\n                                  ></paper-input>\n                                `\n                              : html``}\n                            <mwc-button raised=\"\" @click=${this.doBackup}>\n                              ${this.hass.states[\"sensor.ais_backup_info\"]\n                                .state === \"0\"\n                                ? html` Sprawdź konfigurację `\n                                : html``}\n                              ${this.hass.states[\"sensor.ais_backup_info\"]\n                                .state === \"1\"\n                                ? html` Wykonaj kopie konfiguracji `\n                                : html``}\n                            </mwc-button>`\n                        : html`<mwc-linear-progress indeterminate>\n                          </mwc-linear-progress>`}\n                    </div>`\n                  : html`<div class=\"config-invalid\">\n                        <mwc-button raised=\"\" @click=${this.doBackup}>\n                          Popraw i sprawdź ponownie\n                        </mwc-button>\n                      </div>\n                      <p></p>\n                      <div id=\"configLog\" class=\"validate-log\">\n                        ${this.validateLog}\n                      </div>`}\n              </div>\n              ${this.hass.states[\"sensor.ais_backup_info\"].attributes\n                .file_size ||\n              this.hass.states[\"sensor.ais_backup_info\"].attributes\n                .file_zigbee_size\n                ? html` <h2>\n                      Przywracanie ustawień z kopii\n                      <ha-icon icon=\"mdi:cloud-download-outline\"></ha-icon>\n                    </h2>\n                    W tym miejscu możesz, przywrócić ustawienia bramki z kopii,\n                    która zostanie pobrana z portalu integratora. Jeśli\n                    zaszyfrowałeś kopię hasłem, to podaj je przed wykonaniem\n                    przywracania ustawień z kopii.\n                    <div class=\"validate-container\">\n                      <table style=\"margin-top: 40px; margin-bottom: 10px;\">\n                        ${this.hass.states[\"sensor.ais_backup_info\"].attributes\n                          .file_size\n                          ? html` <tr>\n                              <td>\n                                <ha-icon icon=\"mdi:home-assistant\"></ha-icon>\n                                AIS HA\n                              </td>\n                              <td>\n                                ${this.hass.states[\"sensor.ais_backup_info\"]\n                                  .attributes.file_name}\n                              </td>\n                              <td>\n                                ${this.hass.states[\"sensor.ais_backup_info\"]\n                                  .attributes.file_size}\n                              </td>\n                            </tr>`\n                          : html``}\n                        ${this.hass.states[\"sensor.ais_backup_info\"].attributes\n                          .file_zigbee_size\n                          ? html` <tr>\n                              <td>\n                                <ha-icon icon=\"mdi:zigbee\"></ha-icon>\n                                Zigbee\n                              </td>\n                              <td>\n                                ${this.hass.states[\"sensor.ais_backup_info\"]\n                                  .attributes.file_zigbee_name}\n                              </td>\n                              <td>\n                                ${this.hass.states[\"sensor.ais_backup_info\"]\n                                  .attributes.file_zigbee_size}\n                              </td>\n                            </tr>`\n                          : html``}\n                      </table>\n                      <div class=\"validate-container\">\n                        <div class=\"validate-result\" id=\"result\">\n                          ${this.hass.states[\"sensor.ais_backup_info\"]\n                            .attributes.restore_info}\n                        </div>\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            ${this.hass.states[\"sensor.ais_backup_info\"]\n                              .attributes.restore_error}\n                          </span>\n                        </div>\n                        Przywracanie ustawień z kopii:\n                        <div class=\"center-container\">\n                          <div class=\"backup-types\" id=\"backup_type2\">\n                            ${this.hass.states[\"sensor.ais_backup_info\"]\n                              .attributes.file_size &&\n                            this.hass.states[\"sensor.ais_backup_info\"]\n                              .attributes.file_zigbee_size\n                              ? html` <ha-formfield\n                                  name=\"all\"\n                                  label=\"Wszystkich\"\n                                >\n                                  <ha-radio\n                                    name=\"bt2\"\n                                    @change=${this\n                                      ._handleBackupType2ValueChanged}\n                                    value=\"all\"\n                                    .checked=${this.backupType2 === \"all\"}\n                                  >\n                                  </ha-radio>\n                                </ha-formfield>`\n                              : html``}\n                            ${this.hass.states[\"sensor.ais_backup_info\"]\n                              .attributes.file_size\n                              ? html` <ha-formfield name=\"ha\" label=\"AIS HA\">\n                                  <ha-radio\n                                    name=\"bt2\"\n                                    @change=${this\n                                      ._handleBackupType2ValueChanged}\n                                    value=\"ha\"\n                                    .checked=${this.backupType2 === \"ha\"}\n                                  >\n                                  </ha-radio>\n                                </ha-formfield>`\n                              : html``}\n                            ${this.hass.states[\"sensor.ais_backup_info\"]\n                              .attributes.file_zigbee_size\n                              ? html` <ha-formfield\n                                  name=\"zigbee\"\n                                  label=\"Zigbee\"\n                                >\n                                  <ha-radio\n                                    name=\"bt2\"\n                                    @change=${this\n                                      ._handleBackupType2ValueChanged}\n                                    value=\"zigbee\"\n                                    .checked=${this.backupType2 === \"zigbee\"}\n                                  >\n                                  </ha-radio>\n                                </ha-formfield>`\n                              : html``}\n                          </div>\n                          <paper-input\n                            placeholder=\"hasło\"\n                            no-label-float=\"\"\n                            type=\"password\"\n                            id=\"password2\"\n                          ></paper-input>\n                          <mwc-button raised=\"\" @click=${this.restoreBackup}>\n                            Przywróć konfigurację z kopii\n                          </mwc-button>\n                        </div>\n                      </div>\n                    </div>`\n                : html``}\n            </div>\n          </ha-card>\n\n          <ha-card header=\"Synchronizacja z Portalem Integratora\">\n            <div class=\"card-content\">\n              Jeśli ostatnio wprowadzałeś zmiany w Portalu Integratora, takie\n              jak dodanie nowych typów audio czy też dostęp do zewnętrznych\n              serwisów, to przyciskiem poniżej możesz uruchomić natychmiastowe\n              pobranie tych zmian na bramkę bez czekania na automatyczną\n              synchronizację.\n              <div class=\"center-container\">\n                <ha-call-service-button\n                  class=\"warning\"\n                  .hass=${this.hass}\n                  domain=\"script\"\n                  service=\"ais_cloud_sync\"\n                  >Synchronizuj z Portalem Integratora\n                </ha-call-service-button>\n              </div>\n            </div>\n          </ha-card>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          text-align: center;\n          min-height: 70px;\n        }\n        table {\n          width: 100%;\n        }\n\n        td:first-child {\n          width: 33%;\n        }\n\n        .validate-container {\n          text-align: center;\n          min-height: 140px;\n        }\n\n        .validate-result {\n          color: #0da035;\n        }\n\n        .config-invalid {\n          text-align: center;\n          color: #f44336;\n        }\n\n        .validate-log {\n          white-space: pre-wrap;\n          direction: ltr;\n          color: #f44336;\n        }\n        img.versionLogo {\n          max-width: 30%;\n        }\n      `,\n    ];\n  }\n\n  getVersionName(status) {\n    let retS = status;\n    if (status === \"checking\") {\n      retS = \"Sprawdzanie\";\n    } else if (status === \"outdated\") {\n      retS = \"Nieaktualny\";\n    } else if (status === \"downloading\") {\n      retS = \"Pobieranie\";\n    } else if (status === \"installing\") {\n      retS = \"Instalowanie\";\n    } else if (status === \"updated\") {\n      retS = \"Aktualny\";\n    } else if (status === \"unknown\") {\n      retS = \"Nieznany\";\n    } else if (status === \"restart\") {\n      retS = \"Restartowanie\";\n    }\n    return retS;\n  }\n\n  getVersionIcon(status) {\n    let retS = \"\";\n    if (status === \"checking\") {\n      retS = \"mdi:cloud-sync\";\n    } else if (status === \"outdated\") {\n      retS = \"mdi:clock-alert-outline\";\n    } else if (status === \"downloading\") {\n      retS = \"mdi:progress-download\";\n    } else if (status === \"installing\") {\n      retS = \"mdi:progress-wrench\";\n    } else if (status === \"updated\") {\n      retS = \"mdi:emoticon-happy-outline\";\n    } else if (status === \"unknown\") {\n      retS = \"mdi:help-circle-outline\";\n    } else if (status === \"restart\") {\n      retS = \"mdi:restart-alert\";\n    }\n    return retS;\n  }\n\n  private _handleBackupTypeValueChanged(ev: CustomEvent) {\n    const input = ev.currentTarget;\n    this.backupType = input.value;\n  }\n\n  private _handleBackupType2ValueChanged(ev: CustomEvent) {\n    const input = ev.currentTarget;\n    this.backupType2 = input.value;\n  }\n\n  _computeAisButtonVersionCheckUpgrade(versionInfo) {\n    const attr = versionInfo.attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt ||\n      attr.reinstall_zigbee2mqtt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return \"Zainstaluj teraz aktualizację\";\n      }\n      if (attr.update_status === \"unknown\") {\n        return \"Spróbuj ponownie\";\n      }\n      return \"Aktualizacja -> \" + this.getVersionName(attr.update_status);\n    }\n    return \"Sprawdź dostępność aktualizacji\";\n  }\n\n  _showUpdateButton(versionInfo) {\n    const attr = versionInfo.attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt ||\n      attr.reinstall_zigbee2mqtt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return true;\n      }\n      if (attr.update_status === \"unknown\") {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  _getTextColor(versionInfo) {\n    const attr = versionInfo.attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt ||\n      attr.reinstall_zigbee2mqtt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return \"#f44336\";\n      }\n      if (attr.update_status === \"unknown\") {\n        return \"#ff9800\";\n      }\n      return \"#ff9800\";\n    }\n    return \"#0da035\";\n  }\n\n  changeAutoUpdateMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_auto_update\",\n    });\n  }\n\n  isBackupInProgress(backupInfo) {\n    if (backupInfo.state === \"0\") {\n      return false;\n    }\n    return true;\n  }\n\n  doBackup() {\n    // 1. validation\n    if (this.hass.states[\"sensor.ais_backup_info\"].state === \"0\") {\n      this.validateConfigInProgress = true;\n      this.validateLog = \"\";\n\n      this.hass.callApi(\"POST\", \"config/core/check_config\").then((result) => {\n        this.validateConfigInProgress = false;\n        const valid = result.result === \"valid\" ? \"1\" : \"0\";\n        if (valid === \"0\") {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_error: \"Konfiguracja niepoprawna\",\n          });\n          this.validateLog = result.errors;\n        } else {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_info: \"Konfiguracja poprawna można wykonać kopię\",\n          });\n          this.validateLog = \"\";\n        }\n      });\n    } else {\n      // 2. backup and transfer\n      this.validateLog = \"\";\n      const password = this.shadowRoot.getElementById(\"password1\").value;\n      const type = this.backupType;\n      this.hass.callService(\"ais_cloud\", \"do_backup\", {\n        password: password,\n        type: type,\n      });\n    }\n  }\n\n  restoreBackup() {\n    this.validateLog = \"\";\n    const password = this.shadowRoot.getElementById(\"password2\").value;\n    const type = this.backupType2;\n    this.hass.callService(\"ais_cloud\", \"restore_backup\", {\n      password: password,\n      type: type,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-update\": HaConfigAisDomConfigUpdate;\n  }\n}\n"],"names":[],"sourceRoot":""}