{"version":3,"file":"bd4f76a2.js","mappings":";;AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AAIA;;AAKA;;;;ACjEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsFA;;;;;AC8DA;AACA;;;;;;AAMA;;;;;;;;;AASA;AACA;;;;;AAKA;;;;;;;;;;;AAWA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;;AAEA;;;;AAKA;AACA;;;;;;AAMA;;AAEA;AACA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;;;;;;;;;;;AAaA;AACA;AACA;;;;;;;AAOA;AACA;;AAEA;;AAEA;;;;;;;;;;AAWA;;AAEA;AACA;;;;;AAKA;;;;AAKA;AACA;;;;AAKA;AACA;;;;;AAKA;;AAEA;;;;AAKA;AACA;;AAEA;;;;;;AAOA;;;;;;AAOA;;;;;;;AAQA;AAEA;AAEA;AAOA;AAEA;;;;;;;;;AAUA;;;;AAIA;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAKA;;;;AAOA;;;;AAoCA;;;AAGA;;;;;AAMA;AAKA;AACA;;;;AAKA;;AAEA;;AAEA;;AAEA;;;;AAIA;;;;;AAKA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;;;;AAzeA;;;AAifA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsXA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/aistts/ha-panel-aistts.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n          padding-top: env(safe-area-inset-top);\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"../../layouts/ha-app-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"../../components/ha-icon-button\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@material/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport \"../../components/ha-button-menu\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-slider\";\nimport \"../../components/ha-expansion-panel\";\nimport \"../../components/ha-checkbox\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { mdiDrag } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { property, customElement, query } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { guard } from \"lit/directives/guard\";\nimport {\n  addItem,\n  clearItems,\n  fetchItems,\n  AisTtsItem,\n  updateItem,\n  reorderItems,\n} from \"./aistts\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { navigate } from \"../../common/navigate\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\ninterface Voice {\n  key: string;\n  name: string;\n  lang: string;\n}\n\nlet voices: Voice[] = [];\n\nconst allVoices: Voice[] = [\n  {\n    key: \"jola\",\n    name: \"Jola\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"celina\",\n    name: \"Celina\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"anżela\",\n    name: \"Anżela\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"asia\",\n    name: \"Asia\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"sebastian\",\n    name: \"Sebastian\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"bartek\",\n    name: \"Bartek\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"andrzej\",\n    name: \"Andrzej\",\n    lang: \"pl_PL\",\n  },\n  {\n    key: \"mariya\",\n    name: \"Mariya\",\n    lang: \"uk_UA\",\n  },\n  {\n    key: \"allison\",\n    name: \"Allison\",\n    lang: \"en_GB\",\n  },\n  {\n    key: \"jon\",\n    name: \"Jon\",\n    lang: \"en_GB\",\n  },\n  {\n    key: \"sophia\",\n    name: \"Sophia\",\n    lang: \"en_GB\",\n  },\n  {\n    key: \"sam\",\n    name: \"Sam\",\n    lang: \"en_GB\",\n  },\n];\n\nlet Sortable;\n\n@customElement(\"ha-panel-aistts\")\nexport class HaPanelAisTts extends LitElement {\n  @property() hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() private _uncheckedItems?: AisTtsItem[];\n\n  @property() private _checkedItems?: AisTtsItem[];\n\n  @property() private _textValue = \"\";\n\n  @property() private _selectedLanguage = \"pl_PL\";\n\n  @property() private _selectedVoice = \"pl-pl-x-oda-local\";\n\n  @property() private _speedValue = 1;\n\n  @property() private _pitchValue = 1;\n\n  @property() private _delayValue = 0;\n\n  @property() private _counterValue = 0;\n\n  @property() private _play_counting = false;\n\n  @property() private _fileNameValue = \"\";\n\n  @property() private _reordering = false;\n\n  @property() private _renderEmptySortable = false;\n\n  private _sortable?;\n\n  @query(\"#sortable-tts\", true) private _sortableEl?: HTMLElement;\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    if (this.hass.user!.is_admin) {\n      this.hassSubscribeListUpdate();\n      this.hassSubscribeSayText();\n    }\n\n    this._fetchData();\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>TTS Ręczny</div>\n            <ha-icon-button\n              label=\"Dodaj\"\n              icon=\"hass:music-box-multiple-outline\"\n              @click=${this._showBrowseMedia}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"content\">\n          <ha-card>\n            <paper-radio-group\n              name=\"selectedLanguage\"\n              .selected=${this._selectedLanguage}\n              @selected-changed=${this._setLanguage}\n            >\n              <paper-radio-button\n                name=\"pl_PL\"\n                lang=\"pl_PL\"\n                .disabled=${this._play_counting}\n              >\n                <img\n                  style=\"width: 50px;\"\n                  src=\"/static/ais_dom/Flag_of_Poland.svg\"\n                />\n                Polski\n              </paper-radio-button>\n              <paper-radio-button\n                name=\"en_GB\"\n                lang=\"en_GB\"\n                .disabled=${this._play_counting}\n              >\n                <img\n                  style=\"width: 50px;\"\n                  src=\"/static/ais_dom/Flag_of_the_United_Kingdom.svg\"\n                />\n                English\n              </paper-radio-button>\n              <paper-radio-button\n                name=\"uk_UA\"\n                lang=\"uk_UA\"\n                .disabled=${this._play_counting}\n              >\n                <img\n                  style=\"width: 50px;\"\n                  src=\"/static/ais_dom/Flag_of_Ukraine.svg\"\n                />\n                Український\n              </paper-radio-button>\n            </paper-radio-group>\n            <paper-icon-item>\n              <paper-item-body>\n                <paper-textarea\n                  class=\"addBox\"\n                  label=\"Tekst do przeczytania\"\n                  placeholder=\"wpisz nowy tekst do przeczytania\"\n                  name=\"description\"\n                  maxRows=\"1\"\n                  .disabled=${this._play_counting}\n                  .value=\"${this._textValue}\"\n                  @change=\"${this._textValueChanged}\"\n                ></paper-textarea>\n                ${this.hass.user!.is_admin\n                  ? html`\n                      <!-- <paper-listbox\n                            slot=\"dropdown-content\"\n                            attr-for-selected=\"voice\"\n                            .selected=${this._selectedVoice}\n                            @iron-select=${this._setVoice}\n                          > -->\n                      <div class=\"AisTtsLang\">\n                        <mwc-select\n                          label=\"Głos\"\n                          style=\"margin-left: 30px; width:250px;\"\n                          .disabled=${this._play_counting}\n                          attr-for-selected=\"voice\"\n                          .value=${this._selectedVoice}\n                          @selected=${this._setVoice}\n                        >\n                          ${voices.map(\n                            (voice) => html`\n                              <mwc-list-item value=${voice.key}\n                                >${voice.key}</mwc-list-item\n                              >\n                            `\n                          )}\n                        </mwc-select>\n                        <label\n                          class=\"label-is-floating\"\n                          style=\" font-size: 12px; color: var(--primary-color);\"\n                          >Prędkość</label\n                        >\n                        <ha-slider\n                          editable\n                          pin\n                          step=\"0.1\"\n                          min=\"0.3\"\n                          max=\"4\"\n                          .value=\"${Number(this._speedValue)}\"\n                          @change=\"${this._speedValueChanged}\"\n                          .disabled=${this._play_counting}\n                        ></ha-slider>\n                        <label\n                          class=\"label-is-floating\"\n                          style=\"margin-left: 30px; font-size: 12px; color: var(--primary-color);\"\n                          >Ton</label\n                        >\n                        <ha-slider\n                          editable\n                          pin\n                          step=\"0.1\"\n                          min=\"0.3\"\n                          max=\"4\"\n                          .value=\"${Number(this._pitchValue)}\"\n                          @change=\"${this._pitchValueChanged}\"\n                          .disabled=${this._play_counting}\n                        ></ha-slider>\n                      </div>\n                      <paper-input\n                        label=\"Nazwa pliku\"\n                        placeholder=\"jeśli podasz nazwę pliku to zapiszemy go pod tą nazwą w bibliotece na dysku\"\n                        type=\"text\"\n                        .value=${this._fileNameValue}\n                        @change=${this._fileNameValueChanged}\n                        maxRows=\"1\"\n                        .disabled=${this._play_counting}\n                      ></paper-input>\n                    `\n                  : ``}\n                <div class=\"AisTtsDelay\">\n                  <div class=\"AisTtsDelayItems\">\n                    <paper-input\n                      class=\"AisTtsDelayInput\"\n                      label=\"Opóźnienie wysłania komunikatu w sekundach\"\n                      placeholder=\"0\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"99\"\n                      .value=${this._delayValue}\n                      step=\"1\"\n                      @change=${this._delayValueChanged}\n                      .disabled=${this._play_counting}\n                    ></paper-input>\n                  </div>\n                </div>\n                <div class=\"AisButtons\">\n                  ${Number(this._counterValue) > 0\n                    ? html` <mwc-button\n                        name=\"Opóźnienie\"\n                        style=\"margin-top: 6px;\"\n                      >\n                        Opóźnienie: ${this._counterValue}\n                      </mwc-button>`\n                    : html``}\n                  <ha-icon-button\n                    slot=\"item-icon\"\n                    icon=\"hass:play\"\n                    @click=${this._playItem}\n                    .disabled=${this._play_counting}\n                  ></ha-icon-button>\n                  <ha-icon-button\n                    slot=\"item-icon\"\n                    icon=\"hass:stop\"\n                    @click=${this._stopPlayItem}\n                  ></ha-icon-button>\n                  ${this.hass.user!.is_admin\n                    ? html`\n                        <ha-icon-button\n                          slot=\"item-icon\"\n                          icon=\"hass:plus\"\n                          @click=${this._addItem}\n                          .disabled=${this._play_counting}\n                        ></ha-icon-button>\n                      `\n                    : ``}\n                  <span>&nbsp;</span>\n                </div>\n              </paper-item-body>\n            </paper-icon-item>\n          </ha-card>\n          ${this.hass.user!.is_admin\n            ? html`\n                <div class=\"tip\">\n                  Wpisz tekst, wybierz język i parametry, a następnie kliknij\n                  „Play”, aby usłyszeć czytany tekst.<br />Żeby dodać pozycję do\n                  listy naciśnij \"Plus\".\n                </div>\n              `\n            : html`\n                <div class=\"tip\">\n                  Wpisz tekst a następnie kliknij „Play”, aby usłyszeć czytany\n                  tekst.<br />\n                  Możesz też dodać opóźnienie i wybrać tekst z listy.\n                </div>\n              `}\n          ${!this._play_counting\n            ? html`<ha-card>\n                ${this._reordering\n                  ? html`\n                      ${guard(\n                        [this._uncheckedItems, this._renderEmptySortable],\n                        () =>\n                          this._renderEmptySortable\n                            ? \"\"\n                            : this._renderItems(this._uncheckedItems!)\n                      )}\n                    `\n                  : this._renderItems(this._uncheckedItems!)}\n                ${this._checkedItems && this._checkedItems!.length > 0\n                  ? html`\n                      <div class=\"divider\"></div>\n                      <div class=\"checked\">\n                        <span> Pozycje zaznaczone </span>\n                        <ha-icon\n                          class=\"clearall\"\n                          tabindex=\"0\"\n                          icon=\"hass:delete\"\n                          title=\"Usuń zaznaczone\"\n                          @click=${this._clearItems}\n                        >\n                        </ha-icon>\n                      </div>\n                      ${repeat(\n                        this._checkedItems!,\n                        (item) => item.id,\n                        (item) =>\n                          html`\n                            <div class=\"editRow\">\n                              <ha-checkbox\n                                tabindex=\"0\"\n                                ?checked=${item.complete}\n                                .itemId=${item.id}\n                                @click=${this._completeItem}\n                              ></ha-checkbox>\n                              <paper-input\n                                no-label-float\n                                .value=${item.name}\n                                .itemId=${item.id}\n                                @change=${this._saveEdit}\n                              ></paper-input>\n                            </div>\n                          `\n                      )}\n                    `\n                  : \"\"}\n              </ha-card>`\n            : html``}\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  private _showBrowseMedia(): void {\n    navigate(\"/media-browser\");\n  }\n\n  public hassSubscribeListUpdate(): Promise<UnsubscribeFunc>[] {\n    this._fetchData();\n    return [\n      this.hass!.connection.subscribeEvents(\n        () => this._fetchData(),\n        \"aistts_list_updated\"\n      ),\n    ];\n  }\n\n  public hassSubscribeSayText(): Promise<UnsubscribeFunc>[] {\n    this._fetchData();\n    return [\n      this.hass!.connection.subscribeEvents(\n        () => this._playItem(\"\"),\n        \"aistts_play_item\"\n      ),\n    ];\n  }\n\n  private _renderItems(items: AisTtsItem[]) {\n    if (items === undefined) {\n      return html``;\n    }\n\n    return html` ${this.hass.user!.is_admin\n        ? html`<div class=\"AisButtons\">\n              <ha-icon-button\n                slot=\"item-icon\"\n                icon=\"hass:sort\"\n                @click=${this._toggleReorder}\n              ></ha-icon-button>\n            </div>\n            <div class=\"divider\"></div>`\n        : html``}\n      <div class=\"checked\">\n        <span> Dostępne pozycje </span>\n      </div>\n      <div id=\"sortable-tts\">\n        ${repeat(\n          this._uncheckedItems!,\n          (item) => item.id,\n          (item) =>\n            html`\n              <div class=\"editRow\" tts-item-id=${item.id}>\n                ${this.hass.user!.is_admin\n                  ? html`\n                      <ha-expansion-panel>\n                        <div class=\"ItemInfo\">\n                          <span class=\"ItemInfoLabel\">Język</span\n                          ><span class=\"ItemInfoValue\">${item.language}</span>\n                          <span class=\"ItemInfoLabel\">Prędkość</span\n                          ><span class=\"ItemInfoValue\">${item.pitch}</span>\n                          <span class=\"ItemInfoLabel\">Ton</span\n                          ><span class=\"ItemInfoValue\">${item.rate}</span>\n                          <span class=\"ItemInfoLabel\">Głos</span\n                          ><span class=\"ItemInfoValue\">${item.voice}</span>\n                        </div>\n                        <div>\n                          <span class=\"ItemInfoLabel\">GET Request: </span>\n                          ${this._getItemRow(item, false)}\n                        </div>\n                      </ha-expansion-panel>\n                      <ha-checkbox\n                        tabindex=\"0\"\n                        ?checked=${item.complete}\n                        .itemId=${item.id}\n                        @click=${this._completeItem}\n                      ></ha-checkbox>\n                    `\n                  : ``}\n                <paper-input\n                  no-label-float\n                  .value=${item.name}\n                  .itemId=${item.id}\n                  .disabled=${!this.hass.user!.is_admin}\n                  @change=${this._saveEdit}\n                ></paper-input>\n                <ha-icon-button\n                  slot=\"item-icon\"\n                  icon=\"hass:play\"\n                  .item=${item}\n                  @click=${this._playItemRow}\n                ></ha-icon-button>\n                ${this._reordering\n                  ? html`\n                      <ha-svg-icon\n                        title=\"Reorder\"\n                        class=\"reorderButton\"\n                        .path=${mdiDrag}\n                      >\n                      </ha-svg-icon>\n                    `\n                  : \"\"}\n              </div>\n            `\n        )}\n      </div>`;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const checkedItems: AisTtsItem[] = [];\n    const uncheckedItems: AisTtsItem[] = [];\n    const items = await fetchItems(this.hass);\n    for (const key in items) {\n      if (items[key].complete) {\n        checkedItems.push(items[key]);\n      } else {\n        uncheckedItems.push(items[key]);\n      }\n    }\n    this._checkedItems = checkedItems;\n    this._uncheckedItems = uncheckedItems;\n\n    if (this._reordering) {\n      this._createSortable();\n    }\n  }\n\n  private _completeItem(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      complete: ev.target.checked,\n    }).catch(() => this._fetchData());\n  }\n\n  private _saveEdit(ev): void {\n    updateItem(this.hass!, ev.target.itemId, {\n      name: ev.target.value,\n    }).catch(() => this._fetchData());\n\n    ev.target.blur();\n  }\n\n  private _clearItems() {\n    showConfirmationDialog(this, {\n      text: \"Zaznaczone pozycje zostaną trwale usunięte. Czy jesteś pewny?\",\n      dismissText: \"Anuluj\",\n      confirmText: \"Tak potwierdzam\",\n      confirm: () => {\n        clearItems(this.hass).catch(() => this._fetchData());\n      },\n    });\n  }\n\n  private get _newItem(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\".addBox\") as PaperInputElement;\n  }\n\n  private _updateCounterAndPlay(text) {\n    this._counterValue -= 1;\n    if (this._counterValue > 0 && this._play_counting) {\n      setTimeout(() => this._updateCounterAndPlay(text), 1000);\n      return;\n    }\n\n    // play and unblock\n    if (this._play_counting) {\n      this._play_counting = false;\n      this.hass.callService(\"ais_ai_service\", \"say_it\", {\n        text: text,\n        pitch: this._pitchValue,\n        rate: this._speedValue,\n        language: this._selectedLanguage,\n        voice: this._selectedVoice,\n        path: this._fileNameValue,\n      });\n    }\n  }\n\n  private _playItem(_ev): void {\n    const newItem = this._newItem;\n    let text = newItem.value;\n    if (text === undefined || text === null || text.length === 0) {\n      text = \"Wpisz tekst do przeczytania\";\n      this.hass.callService(\"ais_ai_service\", \"say_it\", {\n        text: text,\n      });\n    } else {\n      this._counterValue = this._delayValue;\n      this._play_counting = true;\n      this._updateCounterAndPlay(text);\n    }\n  }\n\n  private _stopPlayItem(_ev): void {\n    this._play_counting = false;\n    this._counterValue = 0;\n    this.hass.callService(\"ais_tts\", \"stop_talking\", {\n      mode: \"manual\",\n    });\n  }\n\n  private _getItemRow(item, encode): string {\n    const sUrl =\n      \"http://\" +\n      this.hass.states[\"sensor.internal_ip_address\"].state.trim() +\n      \":8122/text_to_speech?language=\" +\n      item.language +\n      \"&voice=\" +\n      item.voice +\n      \"&rate=\" +\n      item.rate +\n      \"&pitch=\" +\n      item.pitch +\n      \"&text=\" +\n      item.name;\n    if (encode) {\n      return encodeURI(sUrl);\n    }\n    return sUrl;\n  }\n\n  private _playItemRow(ev): void {\n    this._fileNameValue = \"\";\n    this._counterValue = this._delayValue;\n    this._pitchValue = ev.target.item.pitch;\n    this._speedValue = ev.target.item.rate;\n    this._selectedLanguage = ev.target.item.language;\n    this._play_counting = true;\n    const name = ev.target.item.name;\n    this._textValue = name;\n    const voice = ev.target.item.voice;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    setTimeout(function () {\n      that._selectedVoice = voice;\n      that._updateCounterAndPlay(name);\n    }, 500);\n  }\n\n  private _addItem(ev): void {\n    const newItem = this._newItem;\n\n    if (newItem.value!.trim().length > 0) {\n      addItem(\n        this.hass!,\n        newItem.value!,\n        String(this._pitchValue),\n        String(this._speedValue),\n        this._selectedLanguage,\n        this._selectedVoice\n      ).catch(() => this._fetchData());\n    }\n\n    newItem.value = \"\";\n    if (ev) {\n      newItem.focus();\n    }\n  }\n\n  private async _toggleReorder() {\n    if (!Sortable) {\n      const sortableImport = await import(\n        \"sortablejs/modular/sortable.core.esm\"\n      );\n      Sortable = sortableImport.Sortable;\n    }\n    this._reordering = !this._reordering;\n    await this.updateComplete;\n    if (this._reordering) {\n      this._createSortable();\n    } else {\n      this._sortable?.destroy();\n      this._sortable = undefined;\n    }\n  }\n\n  private _createSortable() {\n    if (!this.hass.user!.is_admin) {\n      return;\n    }\n    this._sortable = new Sortable(\n      this.shadowRoot!.getElementById(\"sortable-tts\"),\n      {\n        animation: 150,\n        fallbackClass: \"sortable-fallback\",\n        dataIdAttr: \"tts-item-id\",\n        handle: \"ha-svg-icon\",\n        onSort: async (evt) => {\n          reorderItems(this.hass!, this._sortable.toArray()).catch(() =>\n            this._fetchData()\n          );\n          this._uncheckedItems!.splice(\n            evt.newIndex,\n            0,\n            this._uncheckedItems!.splice(evt.oldIndex, 1)[0]\n          );\n          this._renderEmptySortable = true;\n          await this.updateComplete;\n          while (this._sortableEl?.lastElementChild) {\n            this._sortableEl.removeChild(this._sortableEl.lastElementChild);\n          }\n          this._renderEmptySortable = false;\n        },\n      }\n    );\n  }\n\n  private _loadVoices(lang): void {\n    voices = allVoices.filter((voice: Voice) => voice.lang === lang);\n    this._selectedVoice = voices[0].key;\n  }\n\n  private async _setLanguage(ev): Promise<void> {\n    const newVal = ev.detail.value;\n    this._selectedLanguage = newVal;\n    this._loadVoices(newVal);\n  }\n\n  private async _setVoice(ev): Promise<void> {\n    const voice = ev.detail.item.getAttribute(\"voice\");\n    this._selectedVoice = voice;\n  }\n\n  private _textValueChanged(ev): void {\n    const newVal = ev.target.value;\n    this._textValue = newVal;\n  }\n\n  private _speedValueChanged(ev): void {\n    const newVal = ev.target.value;\n    this._speedValue = newVal;\n  }\n\n  private _pitchValueChanged(ev): void {\n    const newVal = ev.target.value;\n    this._pitchValue = newVal;\n  }\n\n  private _delayValueChanged(ev): void {\n    const newVal = ev.target.value;\n    this._delayValue = newVal;\n    this._counterValue = newVal;\n  }\n\n  private _fileNameValueChanged(ev): void {\n    const newVal = ev.target.value;\n    this._fileNameValue = newVal;\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          padding: 16px;\n        }\n\n        .has-header {\n          padding-top: 0;\n        }\n\n        .editRow,\n        .addRow,\n        .checked {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n\n        .addRow ha-icon {\n          color: var(--secondary-text-color);\n          --mdc-icon-size: 26px;\n        }\n\n        .addButton {\n          padding-right: 16px;\n          cursor: pointer;\n        }\n\n        ha-checkbox {\n          padding-left: 4px;\n          padding-right: 20px;\n          --ha-checkbox-label-spacing: 0px;\n        }\n\n        paper-input {\n          flex-grow: 1;\n        }\n\n        .checked {\n          margin: 12px 0;\n          justify-content: space-between;\n        }\n\n        .checked span {\n          color: var(--primary-color);\n        }\n\n        .divider {\n          height: 1px;\n          background-color: var(--divider-color);\n          margin: 10px 0;\n        }\n\n        .clearall {\n          cursor: pointer;\n        }\n        :host {\n          height: 100%;\n        }\n        app-toolbar paper-listbox {\n          width: 150px;\n        }\n        app-toolbar paper-item {\n          cursor: pointer;\n        }\n        .content {\n          padding-bottom: 32px;\n          max-width: 96%;\n          margin: 0 auto;\n        }\n        paper-icon-item {\n          border-top: 1px solid var(--divider-color);\n        }\n        paper-icon-item:first-child {\n          border-top: 0;\n        }\n        ha-checkbox {\n          padding: 11px;\n        }\n        paper-input {\n          --paper-input-container-underline: {\n            display: none;\n          }\n          --paper-input-container-underline-focus: {\n            display: none;\n          }\n          position: relative;\n          top: 1px;\n        }\n        .tip {\n          padding: 24px;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n        .AisTtsLang {\n          display: flex;\n        }\n        .AisTtsDelay {\n          display: flex;\n          align-items: flex-end;\n          justify-content: flex-end;\n        }\n        .AisTtsDelayItems {\n          width: 16em;\n        }\n        div.AisButtons {\n          float: right;\n          text-align: right;\n          display: ruby;\n        }\n        div.ItemInfo {\n          font-size: 12px;\n        }\n        span.ItemInfoLabel {\n          margin-right: 6px;\n          color: var(--primary-color);\n        }\n        ha-expansion-panel {\n          width: 3em;\n          height: 1em;\n        }\n        ha-expansion-panel[expanded] {\n          width: 50%;\n          height: 10em;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-aistts\": HaPanelAisTts;\n  }\n}\n"],"names":[],"sourceRoot":""}