{"version":3,"file":"4e9bcdf0.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;ACjEA;;ACoCA;AACA;;;;;;;;;;;;;;;;;;;;AAxEA;AAAA;;AA+FA;;;;AAKA;;;;;;;;AASA;;AAAA;;;;AAKA;AACA;;;;;AAQA;;;;;AA3HA;;;;;;AAuIA;;;;;AAvIA;;;;;;;;;AAsJA;;AAAA;;AAGA;AACA;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-usb.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"../../../components/ha-switch\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultArray, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\nimport \"../../../components/ha-circular-progress\";\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiZigbee,\n  mdiZWave,\n  mdiAccountVoiceOff,\n  mdiAccountVoice,\n} from \"@mdi/js\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { handleFetchPromise } from \"../../../util/hass-call-api\";\n\nexport interface aisUsbSettingsInfo {\n  usbAutoStartServices: boolean;\n  usbVoiceNotification: boolean;\n}\nexport interface aisSaveUsbSettingsResponse {\n  info: string;\n  error: string;\n}\n\nexport const aisGetUsbSettings = () =>\n  handleFetchPromise<aisUsbSettingsInfo>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"GET\",\n      credentials: \"same-origin\",\n    })\n  );\n\nexport const aisSaveUsbSettings = (params: aisUsbSettingsInfo) =>\n  handleFetchPromise<aisSaveUsbSettingsResponse>(\n    fetch(\"/api/ais_file/ais_usb_view\", {\n      method: \"POST\",\n      credentials: \"same-origin\",\n      body: JSON.stringify(params),\n    })\n  );\n/*\n *\n */\n@customElement(\"ha-config-ais-dom-config-usb\")\nclass HaConfigAisDomConfigUsb extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) private usbsetingsValidating = false;\n\n  @property({ type: Boolean }) public isWide = true;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: String }) private errorUsbInfo = \"\";\n\n  @property({ type: String }) private messageUsbInfo = \"\";\n\n  @property() private usbSettingsInfo = {\n    usbAutoStartServices: true,\n    usbVoiceNotification: true,\n  };\n\n  protected async firstUpdated() {\n    try {\n      const result = await aisGetUsbSettings();\n      this.usbSettingsInfo = result;\n    } catch (err) {\n      // eslint-disable-next-line\n      this.errorUsbInfo = err;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div .narrow=${this.narrow}>\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Obsługa urządzeń USB</span>\n            <span slot=\"introduction\">\n              W tym miejscu możesz ustalić czy Asystent ma sam rozpoznawać\n              adaptery USB i uruchamiać automatycznie domyślne usługi Zigbee i\n              Zwave. <br />\n              Oraz czy ma głosowo powiadamiać o dodaniu i usunięciu urządzenia\n              USB.\n            </span>\n            <ha-card header=\"Automatyczne rozpoznawanie urządzeń USB\">\n              <div class=\"card-content\">\n                Asystent domowy powiadamia komunikatem głosowym o tym, jakie\n                urządzenie zostało dodane i jeżeli obsługa danego urządzenia\n                jest wspierana, to Asystent rozpozna, na jakim porcie działa\n                urządzenie i wykona dalsze akcje związane z obsługą danego\n                urządzenia.\n                <br />\n                <br />\n                <h2>\n                  Automatyczne uruchamianie i zatrzymywanie usług\n                  <ha-svg-icon slot=\"icon\" path=${mdiZigbee}></ha-svg-icon>\n                  <ha-svg-icon slot=\"icon\" path=${mdiZWave}></ha-svg-icon>\n                </h2>\n                ${this.usbSettingsInfo.usbAutoStartServices\n                  ? html`\n                      Asystent automatycznie uruchamia i zatrzymuje domyślne\n                      usługi powiązane z obsługiwanymi urządzeniami\n                      (zigbee2mqtt, zwave2mqtt). Możesz tę funkcję wyłączyć.\n                    `\n                  : html`\n                      Jeśl chcesz, żeby asystent automatycznie uruchamiał i\n                      zatrzymywał domyślne usługi powiązane z obsługiwanymi\n                      urządzeniami (zigbee2mqtt, zwave2mqtt), to możesz tę\n                      funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b\n                        >Automatyczny start usług dla urządzeń USB:&nbsp;</b\n                      >\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbAutoStartServices}\n                        @change=${this.switchAutoUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n                <br />\n                <br />\n\n                ${this.usbSettingsInfo.usbVoiceNotification\n                  ? html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoice}\n                        ></ha-svg-icon>\n                      </h2>\n                      Asystent powiadamia komunikatem głosowym o tym, jakie\n                      urządzenie USB zostało dodane lub usunięte. Możesz tę\n                      funkcję wyłączyć.\n                    `\n                  : html`\n                      <h2>\n                        Powiadomienia głosowe o urządzeniach USB\n                        <ha-svg-icon\n                          slot=\"icon\"\n                          path=${mdiAccountVoiceOff}\n                        ></ha-svg-icon>\n                      </h2>\n                      Jeśl chcesz, żeby asystent powiadamiał komunikatem\n                      głosowym o tym, jakie urządzenie USB zostało dodane lub\n                      usunięte, to możesz tę funkcję włączyć.\n                    `}\n\n                <br /><br />\n                ${!this.usbsetingsValidating\n                  ? html` <b>Powiadomienia głosowe o urządzeniach USB:&nbsp;</b>\n                      <ha-switch\n                        .checked=${this.usbSettingsInfo.usbVoiceNotification}\n                        @change=${this.switchVoiceForUsb}\n                      ></ha-switch>`\n                  : html`<div style=\"width: 100%; text-align: center;\">\n                      <ha-circular-progress active></ha-circular-progress>\n                    </div>`}\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > paper-toggle-button {\n          margin: -4px 0;\n          position: absolute;\n          top: 32px;\n          right: 8px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n      `,\n    ];\n  }\n\n  switchAutoUsb(ev) {\n    this.usbSettingsInfo.usbAutoStartServices = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  switchVoiceForUsb(ev) {\n    this.usbSettingsInfo.usbVoiceNotification = ev.target.checked;\n    this.saveUsbSettings();\n  }\n\n  private async saveUsbSettings(): Promise<void> {\n    this.usbsetingsValidating = true;\n    try {\n      const result = await aisSaveUsbSettings(this.usbSettingsInfo);\n      this.errorUsbInfo = result.error;\n      this.messageUsbInfo = result.info;\n    } catch (err) {\n      this.errorUsbInfo = err;\n    }\n\n    this.usbsetingsValidating = false;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-usb\": HaConfigAisDomConfigUsb;\n  }\n}\n"],"names":[],"sourceRoot":""}