{"version":3,"file":"82b5befb.js","mappings":";;;;;;;;;;;;AA0GA;;;;;;;;;;;;;;ACrBA;ACtEA;;AAEA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;;;;ACxEA;AAIA;;AAEA;AAGA;AAEA;AACA;;;AAGA;;;;AAIA;AAGA;;;AAKA;;;;;AAKA;;;;;;AAOA;;AAIA;;;;AAKA;;;;AAvDA;;;;;;;;;;;;;;;;;;;;;;;AA0MA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-listbox/paper-listbox.js","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/media-player/hui-dialog-check-media-source-ais.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {IronMenuBehavior} from '@polymer/iron-menu-behavior/iron-menu-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design\nstyling. The focused item is highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select\nlistbox can be deselected, and multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color |\n`--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color |\n`--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will\nalso have `aria-multiselectable` set. It implements key bindings to navigate\nthrough the listbox with the up and down arrow keys, esc to exit the listbox,\nand enter to activate a listbox item. Typing the first letter of a listbox item\nwill also focus it.\n\n@group Paper Elements\n@element paper-listbox\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        background: var(--paper-listbox-background-color, var(--primary-background-color));\n        color: var(--paper-listbox-color, var(--primary-text-color));\n\n        @apply --paper-listbox;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-listbox',\n  behaviors: [IronMenuBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'listbox'}\n});\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll);\n  }\n\n  disconnectedCallback(): void {\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {css, CSSResultGroup, html, LitElement, TemplateResult} from \"lit\";\nimport {property, customElement} from 'lit/decorators';\nimport \"../ha-circular-progress\";\nimport { createCloseHeading } from \"../ha-dialog\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { CheckMediaSourceAisDialogParams } from \"./show-check-media-source-ais-dialog\";\nimport { showReportProblemToAisDialog } from \"./show-report-problem-to-ais-dialog\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\n\nexport interface AisAnswer {\n  info: string;\n  error: boolean;\n  found: boolean;\n}\n\nexport const CheckMediaSourceAisWs = (\n  hass: HomeAssistant\n): Promise<AisAnswer> =>\n  hass.callWS<AisAnswer>({\n    type: \"ais_cloud/check_ais_media_source\",\n  });\n\nexport const ConfirmMediaSourceAisWs = (\n  hass: HomeAssistant\n): Promise<AisAnswer> =>\n  hass.callWS<AisAnswer>({\n    type: \"ais_cloud/confirm_ais_media_source\",\n  });\n\n@customElement(\"hui-dialog-check-media-source-ais\")\nexport class HuiDialogCheckMediaSourceAis extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  private _params?: CheckMediaSourceAisDialogParams;\n\n  @property() private _loading = false;\n\n  private _aisMediaInfo?: HassEntity;\n\n  public showDialog(params: CheckMediaSourceAisDialogParams): void {\n    this._params = params;\n    this._aisMediaInfo = this.hass.states[\n      \"media_player.wbudowany_glosnik\"\n    ] as HassEntity;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          \"Informacja o źródle multimediów\"\n        )}\n        @closed=${this.closeDialog}\n      >\n        ${this._loading\n          ? html`<ha-circular-progress active></ha-circular-progress>`\n          : html``}\n        ${this._isAudioPlaying() && !this._loading\n          ? html`<p>\n                Obecnie odtwarzasz ${this._aisMediaInfo?.attributes.source},\n                <b></b>${this._aisMediaInfo?.attributes.media_title}</b>\n              <span class=\"aisUrl\">\n                <br>z adresu URL <ha-icon icon=\"mdi:web\"></ha-icon>:\n                <b></b>${this._aisMediaInfo?.attributes.media_content_id}</b>\n                </span\n              >\n              </p>\n              <div class=\"img404\"><img src=\"${\n                this._aisMediaInfo?.attributes.media_stream_image\n              }\"/></div>\n              ${\n                this._canSourceBeChecked()\n                  ? html`\n                      <p>Jeżeli jest problem z odtwarzaniem z tego zasobu, to możesz automatycznie sprawdzić, czy jest dostępne bardziej aktualne źródło:</p>\n                      <div class=\"sourceCheckButton\">\n                        <mwc-button raised @click=${this._handleSourceCheck}>\n                                  <ha-icon icon=\"hass:robot\"></ha-icon>\n                                  &nbsp; Uruchom Automatyczne Sprawdzanie\n                        </mwc-button>\n                      </div> \n                    <p></p>Jeżeli automatyczne sprawdzenie nie pomoże, to będzie można wysłać informację o tym problemie do AI-Speaker. <br /> Automatycznie powiadomimy udostępniającego media o problemie.</p>`\n                  : html`\n                      <div style=\"text-align: center;\">\n                        <h2>\n                          Tego typu mediów jeszcze nie sprawdzamy.\n                        </h2>\n                      </div>\n                    `\n              } `\n          : html` <div class=\"img404\"><img src=\"/static/ais_404.png\" /></div>\n              <p>\n                ${this._loading\n                  ? html`<div style=\"text-align: center;\">\n                      <h2>\n                        Sprawdzam i przeszukuje cały Internet...\n                      </h2>\n                    </div>`\n                  : html`Obecnie na wbudowanym odtwarzaczu nie odtwarzasz\n                    żadnych mediów.`}\n              </p>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _checkSourceInAis(): Promise<AisAnswer> {\n    this._loading = true;\n    let itemData: AisAnswer = { info: \"\", error: false, found: false };\n    try {\n      itemData = (await CheckMediaSourceAisWs(this.hass)) as AisAnswer;\n    } catch {\n      this._loading = false;\n    }\n\n    this._loading = false;\n    return itemData;\n  }\n\n  private async _handleSourceCheck(): Promise<void> {\n    //\n    const aisAnswer = await this._checkSourceInAis();\n    if (aisAnswer.error) {\n      await showAlertDialog(this, {\n        title: \"AIS\",\n        text: aisAnswer.info,\n      });\n      return;\n    }\n\n    if (aisAnswer.found) {\n      // the new url was found\n      const confirmed = await showConfirmationDialog(this, {\n        title: \"AIS\",\n        text: aisAnswer.info,\n        confirmText: \"TAK\",\n        dismissText: \"NIE\",\n      });\n\n      if (confirmed) {\n        this._loading = true;\n        const aisAnswer2 = (await ConfirmMediaSourceAisWs(\n          this.hass\n        )) as AisAnswer;\n        this._loading = false;\n        if (aisAnswer2.error) {\n          await showAlertDialog(this, {\n            title: \"AIS\",\n            text: aisAnswer2.info,\n          });\n        } else {\n          await showAlertDialog(this, {\n            title: \"AIS\",\n            text: aisAnswer2.info,\n          });\n        }\n        this.closeDialog();\n      } else {\n        // info to AIS\n        const confirmed2 = await showConfirmationDialog(this, {\n          title: \"AIS\",\n          text: \"Czy chcesz zgłosić problem do AIS?\",\n          confirmText: \"TAK\",\n          dismissText: \"NIE\",\n        });\n        if (confirmed2) {\n          this._showReportProblemToAis();\n        }\n        this.closeDialog();\n      }\n    } else {\n      // not able to found the new url\n      const confirmed = await showConfirmationDialog(this, {\n        title: \"AIS\",\n        text: aisAnswer.info,\n        confirmText: \"TAK\",\n        dismissText: \"NIE\",\n      });\n\n      if (confirmed) {\n        // show problem dialog\n        this._showReportProblemToAis();\n      }\n      this.closeDialog();\n    }\n  }\n\n  private _isAudioPlaying(): boolean {\n    if (\n      this._aisMediaInfo?.attributes.media_title &&\n      this._aisMediaInfo?.attributes.media_content_id\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private _canSourceBeChecked(): boolean {\n    return true;\n    // if (\n    //   this._aisMediaInfo?.attributes[\"media_title\"] &&\n    //   this._aisMediaInfo?.attributes[\"media_content_id\"] &&\n    //   this._aisMediaInfo?.attributes[\"source\"] === \"Radio\"\n    // ) {\n    //   return true;\n    // }\n    // return false;\n  }\n\n  private _showReportProblemToAis(): void {\n    showReportProblemToAisDialog(this, {\n      selectedOptionCallback: (option: string) =>\n        // eslint-disable-next-line no-console\n        console.log(\"option: \" + option),\n    });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0 24px 20px;\n        }\n        div.sourceCheckButton {\n          text-align: center;\n        }\n        div.img404 {\n          text-align: center;\n        }\n        img {\n          max-width: 500px;\n          max-height: 300px;\n        }\n        span.aisUrl {\n          word-wrap: break-word;\n        }\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin-top: 40px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-check-media-source-ais\": HuiDialogCheckMediaSourceAis;\n  }\n}\n"],"names":[],"sourceRoot":""}