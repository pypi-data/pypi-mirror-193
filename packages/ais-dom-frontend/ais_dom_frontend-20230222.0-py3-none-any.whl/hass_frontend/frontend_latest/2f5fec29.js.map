{"version":3,"file":"2f5fec29.js","mappings":";;AAyCA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;;;;;;;AC7BA;;;;;;ACHA;;;;AAKA;;;ACiOA;AAKA;AAgBA;AACA;AAIA;AAkEA;;AAMA;AACA;AACA;;AAEA;;;;;;AAmBA;;AAEA;;AAoCA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;;AAEA;AACA;;;;;;;AAOA;;;AAKA;AAEA;AACA;;AAEA;;;AAIA;AACA;;AAEA;;;;AAOA;;;;;;;;;;;AA+FA","sources":["webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-fab.ts","webpack://home-assistant-frontend/./src/panels/config/devices/ha-config-devices-dashboard.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox/mwc-checkbox.js';\n\nimport {Checkbox} from '@material/mwc-checkbox/mwc-checkbox.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base.js';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n\n      :host([graphic=\"avatar\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"medium\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"large\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"control\"]) .mdc-deprecated-list-item__graphic {\n        margin-inline-end: var(--mdc-list-item-graphic-margin, 16px);\n        margin-inline-start: 0px;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport { mdiCancel, mdiFilterVariant, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../../common/navigate\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../integrations/ha-integration-overflow-menu\";\nimport { showMatterAddDeviceDialog } from \"../integrations/integration-panels/matter/show-dialog-add-matter-device\";\nimport { showZWaveJSAddNodeDialog } from \"../integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport { showAddIntegrationDialog } from \"../integrations/show-add-integration-dialog\";\n\ninterface DeviceRowData extends DeviceRegistryEntry {\n  device?: DeviceRowData;\n  area?: string;\n  integration?: string;\n  battery_entity?: [string | undefined, string | undefined];\n}\n\n@customElement(\"ha-config-devices-dashboard\")\nexport class HaConfigDeviceDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public isWide = false;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entries!: ConfigEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public route!: Route;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  @state() private _showDisabled = false;\n\n  @state() private _filter: string = history.state?.filter || \"\";\n\n  @state() private _numHiddenDevices = 0;\n\n  private _ignoreLocationChange = false;\n\n  public constructor() {\n    super();\n    window.addEventListener(\"location-changed\", () => {\n      if (this._ignoreLocationChange) {\n        this._ignoreLocationChange = false;\n        return;\n      }\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n    window.addEventListener(\"popstate\", () => {\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n  }\n\n  private _activeFilters = memoizeOne(\n    (\n      entries: ConfigEntry[],\n      filters: URLSearchParams,\n      localize: LocalizeFunc\n    ): string[] | undefined => {\n      const filterTexts: string[] = [];\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\": {\n            const configEntry = entries.find(\n              (entry) => entry.entry_id === value\n            );\n            if (!configEntry) {\n              break;\n            }\n            const integrationName = domainToName(localize, configEntry.domain);\n            filterTexts.push(\n              `${this.hass.localize(\n                \"ui.panel.config.integrations.integration\"\n              )} \"${integrationName}${\n                integrationName !== configEntry.title\n                  ? `: ${configEntry.title}`\n                  : \"\"\n              }\"`\n            );\n            break;\n          }\n        }\n      });\n      return filterTexts.length ? filterTexts : undefined;\n    }\n  );\n\n  private _devicesAndFilterDomains = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      entries: ConfigEntry[],\n      entities: EntityRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      filters: URLSearchParams,\n      showDisabled: boolean,\n      localize: LocalizeFunc\n    ) => {\n      // Some older installations might have devices pointing at invalid entryIDs\n      // So we guard for that.\n      let outputDevices: DeviceRowData[] = devices;\n\n      const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n      for (const device of devices) {\n        deviceLookup[device.id] = device;\n      }\n\n      // If nothing gets filtered, this is our correct count of devices\n      let startLength = outputDevices.length;\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      for (const entity of entities) {\n        if (!entity.device_id) {\n          continue;\n        }\n        if (!(entity.device_id in deviceEntityLookup)) {\n          deviceEntityLookup[entity.device_id] = [];\n        }\n        deviceEntityLookup[entity.device_id].push(entity);\n      }\n\n      const entryLookup: { [entryId: string]: ConfigEntry } = {};\n      for (const entry of entries) {\n        entryLookup[entry.entry_id] = entry;\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      let filterConfigEntry: ConfigEntry | undefined;\n\n      filters.forEach((value, key) => {\n        if (key === \"config_entry\") {\n          outputDevices = outputDevices.filter((device) =>\n            device.config_entries.includes(value)\n          );\n          startLength = outputDevices.length;\n          filterConfigEntry = entries.find((entry) => entry.entry_id === value);\n        }\n      });\n\n      if (!showDisabled) {\n        outputDevices = outputDevices.filter((device) => !device.disabled_by);\n      }\n\n      outputDevices = outputDevices.map((device) => ({\n        ...device,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        model: device.model || \"<unknown>\",\n        manufacturer: device.manufacturer || \"<unknown>\",\n        area:\n          device.area_id && areaLookup[device.area_id]\n            ? areaLookup[device.area_id].name\n            : \"—\",\n        integration: device.config_entries.length\n          ? device.config_entries\n              .filter((entId) => entId in entryLookup)\n              .map(\n                (entId) =>\n                  localize(`component.${entryLookup[entId].domain}.title`) ||\n                  entryLookup[entId].domain\n              )\n              .join(\", \")\n          : this.hass.localize(\n              \"ui.panel.config.devices.data_table.no_integration\"\n            ),\n        domains: device.config_entries\n          .filter((entId) => entId in entryLookup)\n          .map((entId) => entryLookup[entId].domain),\n        battery_entity: [\n          this._batteryEntity(device.id, deviceEntityLookup),\n          this._batteryChargingEntity(device.id, deviceEntityLookup),\n        ],\n        battery_level:\n          this.hass.states[\n            this._batteryEntity(device.id, deviceEntityLookup) || \"\"\n          ]?.state,\n      }));\n\n      this._numHiddenDevices = startLength - outputDevices.length;\n      return {\n        devicesOutput: outputDevices,\n        filteredConfigEntry: filterConfigEntry,\n      };\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean, showDisabled: boolean): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        icon: {\n          title: \"\",\n          type: \"icon\",\n          template: (_icon, device) =>\n            device.domains.length\n              ? html`<img\n                  alt=\"\"\n                  referrerpolicy=\"no-referrer\"\n                  src=${brandsUrl({\n                    domain: device.domains[0],\n                    type: \"icon\",\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                />`\n              : \"\",\n        },\n      };\n\n      if (narrow) {\n        columns.name = {\n          title: this.hass.localize(\n            \"ui.panel.config.devices.data_table.device\"\n          ),\n          main: true,\n          sortable: true,\n          filterable: true,\n          direction: \"asc\",\n          grows: true,\n          template: (name, device: DataTableRowData) => html`\n            ${name}\n            <div class=\"secondary\">${device.area} | ${device.integration}</div>\n          `,\n        };\n      } else {\n        columns.name = {\n          title: this.hass.localize(\n            \"ui.panel.config.devices.data_table.device\"\n          ),\n          main: true,\n          sortable: true,\n          filterable: true,\n          grows: true,\n          direction: \"asc\",\n        };\n      }\n\n      columns.manufacturer = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.manufacturer\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.model = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.model\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.area = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.area\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.integration = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.integration\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.battery_entity = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.battery\"),\n        sortable: true,\n        filterable: true,\n        type: \"numeric\",\n        width: narrow ? \"95px\" : \"15%\",\n        maxWidth: \"95px\",\n        valueColumn: \"battery_level\",\n        template: (batteryEntityPair: DeviceRowData[\"battery_entity\"]) => {\n          const battery =\n            batteryEntityPair && batteryEntityPair[0]\n              ? this.hass.states[batteryEntityPair[0]]\n              : undefined;\n          const batteryCharging =\n            batteryEntityPair && batteryEntityPair[1]\n              ? this.hass.states[batteryEntityPair[1]]\n              : undefined;\n          const batteryIsBinary =\n            battery && computeStateDomain(battery) === \"binary_sensor\";\n\n          return battery && (batteryIsBinary || !isNaN(battery.state as any))\n            ? html`\n                ${batteryIsBinary\n                  ? \"\"\n                  : Number(battery.state).toFixed() +\n                    blankBeforePercent(this.hass.locale) +\n                    \"%\"}\n                <ha-battery-icon\n                  .hass=${this.hass!}\n                  .batteryStateObj=${battery}\n                  .batteryChargingStateObj=${batteryCharging}\n                ></ha-battery-icon>\n              `\n            : html`—`;\n        },\n      };\n      if (showDisabled) {\n        columns.disabled_by = {\n          title: \"\",\n          label: this.hass.localize(\n            \"ui.panel.config.devices.data_table.disabled_by\"\n          ),\n          type: \"icon\",\n          template: (disabled_by) =>\n            disabled_by\n              ? html`<div\n                  tabindex=\"0\"\n                  style=\"display:inline-block; position: relative;\"\n                >\n                  <ha-svg-icon .path=${mdiCancel}></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${this.hass.localize(\"ui.panel.config.devices.disabled\")}\n                  </paper-tooltip>\n                </div>`\n              : \"—\",\n        };\n      }\n      return columns;\n    }\n  );\n\n  public willUpdate(changedProps) {\n    if (changedProps.has(\"_searchParms\")) {\n      if (this._searchParms.get(\"config_entry\")) {\n        // If we are requested to show the devices for a given config entry,\n        // also show the disabled ones by default.\n        this._showDisabled = true;\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    const { devicesOutput } = this._devicesAndFilterDomains(\n      this.devices,\n      this.entries,\n      this.entities,\n      this.areas,\n      this._searchParms,\n      this._showDisabled,\n      this.hass.localize\n    );\n    const activeFilters = this._activeFilters(\n      this.entries,\n      this._searchParms,\n      this.hass.localize\n    );\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config\"}\n        .tabs=${configSections.devices}\n        .route=${this.route}\n        .activeFilters=${activeFilters}\n        .numHidden=${this._numHiddenDevices}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.search\"\n        )}\n        .hiddenLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.filter.hidden_devices\",\n          \"number\",\n          this._numHiddenDevices\n        )}\n        .columns=${this._columns(this.narrow, this._showDisabled)}\n        .data=${devicesOutput}\n        .filter=${this._filter}\n        @clear-filter=${this._clearFilter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._handleRowClicked}\n        clickable\n        hasFab\n      >\n        <ha-integration-overflow-menu\n          .hass=${this.hass}\n          slot=\"toolbar-icon\"\n        ></ha-integration-overflow-menu>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.devices.add_device\")}\n          extended\n          @click=${this._addDevice}\n          ?rtl=${computeRTL(this.hass)}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n        <ha-button-menu slot=\"filter-menu\" corner=\"BOTTOM_START\" multi>\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.filter\"\n            )}\n            .path=${mdiFilterVariant}\n          ></ha-icon-button>\n          ${this.narrow && activeFilters?.length\n            ? html`<mwc-list-item @click=${this._clearFilter}\n                >${this.hass.localize(\"ui.components.data-table.filtering_by\")}\n                ${activeFilters.join(\", \")}\n                <span class=\"clear\">Clear</span></mwc-list-item\n              >`\n            : \"\"}\n          <ha-check-list-item\n            left\n            @request-selected=${this._showDisabledChanged}\n            .selected=${this._showDisabled}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.show_disabled\"\n            )}\n          </ha-check-list-item>\n        </ha-button-menu>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _batteryEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryEntity = findBatteryEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryEntity ? batteryEntity.entity_id : undefined;\n  }\n\n  private _batteryChargingEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryChargingEntity = findBatteryChargingEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryChargingEntity ? batteryChargingEntity.entity_id : undefined;\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const deviceId = ev.detail.id;\n    this._ignoreLocationChange = true;\n    navigate(`/config/devices/device/${deviceId}`);\n  }\n\n  private _showDisabledChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showDisabled = ev.detail.selected;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private _clearFilter() {\n    if (\n      this._activeFilters(this.entries, this._searchParms, this.hass.localize)\n    ) {\n      navigate(window.location.pathname, { replace: true });\n    }\n    this._showDisabled = true;\n  }\n\n  private _addDevice() {\n    const { filteredConfigEntry } = this._devicesAndFilterDomains(\n      this.devices,\n      this.entries,\n      this.entities,\n      this.areas,\n      this._searchParms,\n      this._showDisabled,\n      this.hass.localize\n    );\n    if (filteredConfigEntry?.domain === \"zha\") {\n      navigate(`/config/zha/add`);\n      return;\n    }\n    if (filteredConfigEntry?.domain === \"zwave_js\") {\n      this._showZJSAddDeviceDialog(filteredConfigEntry);\n      return;\n    }\n    if (filteredConfigEntry?.domain === \"matter\") {\n      showMatterAddDeviceDialog(this);\n      return;\n    }\n    showAddIntegrationDialog(this);\n  }\n\n  private _showZJSAddDeviceDialog(filteredConfigEntry: ConfigEntry) {\n    showZWaveJSAddNodeDialog(this, {\n      entry_id: filteredConfigEntry!.entry_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-button-menu {\n          margin-left: 8px;\n        }\n        .clear {\n          color: var(--primary-color);\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          text-transform: uppercase;\n          direction: var(--direction);\n        }\n      `,\n      haStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-devices-dashboard\": HaConfigDeviceDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}