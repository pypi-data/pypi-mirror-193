{"version":3,"file":"ed687f5e.js","mappings":";AAuDA;AAEA;;AAIA;AACA;AACA;AACA;;;AAKA;AAeA;AAKA;;AAGA;;AAGA;;AAGA;AACA;;;;AAQA;;AAMA;AACA;;;AAGA;;AAIA;;AAKA;;;AAGA;;;AAKA;;AAKA;;;AAGA;;;AAMA;;;;;AAgCA;AACA;;;AAGA;;;AAIA;AACA;;;;;AAMA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;AAqDA","sources":["webpack://home-assistant-frontend/./src/panels/aistts/ha-panel-aisttsauto.ts"],"sourcesContent":["import \"../../components/ha-card\";\nimport \"../../components/ha-menu-button\";\nimport \"@material/mwc-icon-button\";\nimport {\n  mdiHistory,\n  mdiInformationOutline,\n  mdiPencil,\n  mdiElectricSwitch,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { property, customElement } from \"lit/decorators\";\nimport \"@polymer/polymer/lib/elements/dom-repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/entity/ha-entity-toggle\";\nimport \"../../components/ha-fab\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-button-related-filter-menu\";\nimport { triggerAutomationActions } from \"../../data/automation\";\nimport { haStyle } from \"../../resources/styles\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { HomeAssistant } from \"../../types\";\nimport { formatDateTime } from \"../../common/datetime/format_date_time\";\nimport memoizeOne from \"memoize-one\";\nimport { HassEntityBase } from \"home-assistant-js-websocket\";\nimport { HaCheckbox } from \"../../components/ha-checkbox\";\n// eslint-disable-next-line import/no-duplicates\nimport \"../../components/data-table/ha-data-table\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n  // eslint-disable-next-line import/no-duplicates\n} from \"../../components/data-table/ha-data-table\";\n\nexport interface AutomationRowData extends DataTableRowData {\n  id: string;\n  name: string | undefined;\n  last_triggered: string;\n  entity: HassEntityBase;\n}\n\n@customElement(\"ha-panel-aisttsauto\")\nclass HaPanelAisTtsAuto extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  private _columns = memoizeOne(\n    (narrow: boolean, _locale): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        toggle: {\n          title: html`&nbsp;&nbsp;&nbsp;&nbsp;<ha-svg-icon\n              path=${mdiElectricSwitch}\n            ></ha-svg-icon>`,\n          type: \"icon\",\n          template: (_toggle, automation: any) =>\n            html`\n              <ha-checkbox\n                .key=${automation.id}\n                .hass=${this.hass}\n                @change=${this._handleRowCheckboxClick}\n                .checked=${automation.entity.state === \"on\"}\n              >\n              </ha-checkbox>\n            `,\n        },\n        name: {\n          title: \"Nazwa\",\n          sortable: true,\n          filterable: true,\n          direction: \"asc\",\n          grows: true,\n        },\n      };\n\n      if (!narrow) {\n        columns.last_triggered = {\n          sortable: true,\n          width: \"20%\",\n          title: this.hass.localize(\"ui.card.automation.last_triggered\"),\n          template: (last_triggered) => html`\n            ${last_triggered\n              ? formatDateTime(new Date(last_triggered), this.hass.locale)\n              : this.hass.localize(\"ui.components.relative_time.never\")}\n          `,\n        };\n        columns.trigger = {\n          title: html`\n            <mwc-button style=\"visibility: hidden\">\n              ${this.hass.localize(\"ui.card.automation.trigger\")}\n            </mwc-button>\n          `,\n          width: \"20%\",\n          template: (_info, automation: any) => html`\n            <mwc-button\n              .automation=${automation.entity}\n              @click=${(ev) => this._runActions(ev)}\n            >\n              URUCHOM\n            </mwc-button>\n          `,\n        };\n      }\n\n      if (this.hass.user!.is_admin) {\n        columns.info = {\n          title: \"\",\n          type: \"icon-button\",\n          template: (_info, automation: any) => html`\n            <mwc-icon-button\n              .automation=${automation.entity}\n              @click=${this._showInfo}\n              label=\"Info\"\n            >\n              <ha-svg-icon .path=${mdiInformationOutline}></ha-svg-icon>\n            </mwc-icon-button>\n          `,\n        };\n        columns.trace = {\n          title: \"\",\n          type: \"icon-button\",\n          template: (_info, automation: any) => html`\n            <a\n              href=\"/config/automation/trace/${automation.entity.attributes.id}\"\n            >\n              <mwc-icon-button label=\"Åšlad\">\n                <ha-svg-icon .path=${mdiHistory}></ha-svg-icon>\n              </mwc-icon-button>\n            </a>\n          `,\n        };\n        columns.edit = {\n          title: \"\",\n          type: \"icon-button\",\n          template: (_info, automation: any) => html`\n            <a\n              href=\"/config/automation/edit/${automation.entity.attributes.id}\"\n            >\n              <mwc-icon-button label=\"Edit\">\n                <ha-svg-icon path=${mdiPencil}></ha-svg-icon>\n              </mwc-icon-button>\n            </a>\n          `,\n        };\n      }\n      return columns;\n    }\n  );\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n  }\n\n  private _get_automations(_states) {\n    const l_automation: AutomationRowData[] = [];\n    Object.values(this.hass.states).forEach((entity) => {\n      if (\n        computeStateDomain(entity) === \"automation\" &&\n        !entity.entity_id.startsWith(\"automation.ais_\")\n      ) {\n        l_automation.push({\n          id: entity.entity_id,\n          name: entity.attributes.friendly_name,\n          last_triggered: entity.attributes.last_triggered,\n          entity: entity,\n        });\n      }\n    });\n    return l_automation;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>TTS Automatyczny</div>\n            ${this.hass.user!.is_admin\n              ? html`<ha-icon-button\n                  label=\"Dodaj\"\n                  icon=\"hass:plus\"\n                  @click=${this._createNew}\n                ></ha-icon-button>`\n              : html``}\n          </app-toolbar>\n        </app-header>\n        <ha-card class=\"content\">\n          <ha-data-table\n            .columns=${this._columns(this.narrow, this.hass.locale)}\n            .data=${this._get_automations(this.hass.states)}\n            auto-height\n            searchLabel=\"Szukaj\"\n            noDataText=\"Brak danych\"\n          ></ha-data-table>\n        </ha-card>\n      </ha-app-layout>\n    `;\n  }\n\n  private _showInfo(ev) {\n    ev.stopPropagation();\n    const entityId = (ev.currentTarget as any).automation.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _runActions(ev) {\n    const entityId = (ev.currentTarget as any).automation.entity_id;\n    triggerAutomationActions(this.hass, entityId);\n  }\n\n  private _createNew() {\n    navigate(\"/config/automation/edit/new\");\n  }\n\n  private _handleRowCheckboxClick(ev: Event) {\n    const key = (ev.currentTarget as any).key;\n    const hass = (ev.currentTarget as any).hass;\n    const checkbox = ev.currentTarget as HaCheckbox;\n    let mode = \"off\";\n    if (checkbox.checked) {\n      mode = \"on\";\n    }\n    hass.callService(\"ais_tts\", \"change_auto_mode\", {\n      entity_id: key,\n      change_to: mode,\n    });\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        ha-card.content {\n          padding: 16px;\n        }\n\n        .has-header {\n          padding-top: 0;\n        }\n\n        .checked span {\n          color: var(--primary-color);\n        }\n        .content {\n          padding-bottom: 32px;\n          max-width: 94%;\n          margin: 0 auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-aisttsauto\": HaPanelAisTtsAuto;\n  }\n}\n"],"names":[],"sourceRoot":""}