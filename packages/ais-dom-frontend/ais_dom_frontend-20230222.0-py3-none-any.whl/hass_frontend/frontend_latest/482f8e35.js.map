{"version":3,"file":"482f8e35.js","mappings":";;AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;ACtEA;AAEA;AACA;AACA;;;;AAIA;;AAEA;;;;AAIA;AAEA;AAGA;AACA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-aiszwave.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../../components/ha-button-menu\";\nimport {\n  css,\n  CSSResultArray,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { mdiDotsVertical, mdiHelpCircle } from \"@mdi/js\";\nimport { loadTokens } from \"../../common/auth/token_storage\";\nimport \"../../layouts/hass-loading-screen\";\nimport \"../../layouts/hass-subpage\";\nimport \"../../components/ha-circular-progress\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport \"../../components/ha-icon-button\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\n@customElement(\"ha-config-aiszwave\")\nclass ConfigAisZwave extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public route!: Route;\n\n  @property({ type: Boolean })\n  public narrow = false;\n\n  @property() private _access_token = \"\";\n\n  protected render(): TemplateResult {\n    const zwave2mqtt =\n      this.hass.states[\"sensor.status_serwisu_zwavejs2mqtt\"].state;\n    if (zwave2mqtt === \"True\") {\n      const tokens = loadTokens();\n      this._access_token = tokens?.access_token || \"\";\n      const iframe = html` <iframe\n        src=\"/api/zwave2mqtt/${this._access_token}/\"\n      ></iframe>`;\n      return html` <hass-subpage header=\"ZWaveJs2Mqtt\" .narrow=${this.narrow}>\n        <mwc-icon-button slot=\"toolbar-icon\" @click=${this._showHelp}>\n          <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n        </mwc-icon-button>\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n            <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n          </mwc-icon-button>\n          <mwc-list-item @click=${this._restartZwaveService}>\n            Restart zwave sevice\n          </mwc-list-item>\n        </ha-button-menu>\n        ${iframe}\n      </hass-subpage>`;\n    }\n\n    return html`<hass-subpage header=\"ZWaveJs2Mqtt\" .narrow=${this.narrow}>\n      <mwc-icon-button slot=\"toolbar-icon\" @click=${this._showHelp}>\n        <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      </mwc-icon-button>\n      <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n        <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n          <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n        </mwc-icon-button>\n        <mwc-list-item @click=${this._restartZwaveService}>\n          Restart zwave sevice\n        </mwc-list-item>\n      </ha-button-menu>\n      <div\n        style=\"width: 100%; height: 100%; display: flex; align-items: center;\"\n      >\n        <div style=\"width: 100%;\">\n          <p style=\"text-align: center;\">\n            <span class=\"text\"><b>BRAK PO≈ÅƒÑCZENIA Z ZWAVEJS2MQTT</b></span>\n            <span class=\"icon\">\n              <svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M8 2C6.9 2 6 2.9 6 4V12H5V16L9 20V22H15V20L19 16V12H18V4C18 2.9 17.11 2 16 2M8 4H16V12H8M9 7V9H11V7M13 7V9H15V7Z\"\n                />\n              </svg>\n            </span>\n            <br />\n          </p>\n          <svg\n            style=\"width:84px;height:84px;display:block;margin:auto;\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              fill=\"currentColor\"\n              d=\"M16.3,10.58C13.14,10.58 10.6,13.13 10.6,16.28C10.6,19.43 13.15,22 16.3,22C19.45,22 22,19.43 22,16.28C22,13.13 19.45,10.58 16.3,10.58M18,19.08H13.19L15.81,15H13.31L14.4,13.23H19.18L16.63,17.28H19.18L18,19.08M16.3,3.93V2C8.41,2 2,8.42 2,16.31H3.92C3.94,9.46 9.5,3.93 16.3,3.93M16.3,7.74V5.82C10.5,5.82 5.81,10.53 5.81,16.31H7.73C7.75,11.58 11.59,7.74 16.3,7.74\"\n            />\n          </svg>\n          <p style=\"text-align: center;\">\n            <span class=\"text\"\n              >üåä nie ma üåä nie ma üåä nie ma üåä nie ma üåä nie ma üåäüåäüåä...</span\n            >\n            <br />\n            <span class=\"text\"\n              ><b>czekam na po≈ÇƒÖczenie, to mo≈ºe potrwaƒá kilka minut...</b></span\n            >\n            <span\n              .onclick=\"${this.showZwaveStatus}\"\n              style=\"text-decoration: underline; cursor: pointer;\"\n            >\n              <br /><a> status us≈Çugi </a>\n            </span>\n\n            <br /><br />\n            <ha-circular-progress active></ha-circular-progress>\n            <br />\n            <br />\n            W razie problem√≥w sprawdz logi, wpisujƒÖc w\n            <a href=\"/developer-tools/console\">konsoli</a> komendƒô:\n            <b>pm2 logs</b><br />\n            Szczeg√≥≈Çy w dokumentacji:\n            <a\n              href=\"https://www.ai-speaker.com/docs/ais_app_integration_zwave\"\n              target=\"_blank\"\n              >Integracja ZwaveJs2MQTT</a\n            >\n          </p>\n        </div>\n      </div>\n    </hass-subpage>`;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n  }\n\n  private showZwaveStatus() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: \"sensor.status_serwisu_zwavejs2mqtt\",\n    });\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: \"Zwave\",\n      text: html`\n        Na bramkach DEV uruchomienie integracji Zwave wymaga wykonania rƒôczej\n        instalacji.\n        <p>\n          <a\n            href=\"https://ai-speaker.com/docs/ais_app_integration_zwave\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Dowiedz siƒô wiƒôcej o integracji zwave\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private async _restartZwaveService() {\n    this.hass.callService(\"ais_shell_command\", \"restart_pm2_service\", {\n      service: \"zwave\",\n    });\n  }\n\n  static get styles(): CSSResultArray {\n    return [\n      haStyle,\n      css`\n        iframe {\n          display: block;\n          width: 100%;\n          height: 100%;\n          border: 0;\n        }\n        .header + iframe {\n          height: calc(100% - 40px);\n        }\n        .header {\n          display: flex;\n          align-items: center;\n          font-size: 16px;\n          height: 40px;\n          padding: 0 16px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: 400;\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n          --mdc-icon-size: 20px;\n        }\n\n        .main-title {\n          margin: 0 0 0 24px;\n          line-height: 20px;\n          flex-grow: 1;\n        }\n\n        mwc-icon-button {\n          pointer-events: auto;\n        }\n\n        hass-subpage {\n          --app-header-background-color: var(--sidebar-background-color);\n          --app-header-text-color: var(--sidebar-text-color);\n          --app-header-border-bottom: 1px solid var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-aiszwave\": ConfigAisZwave;\n  }\n}\n"],"names":[],"sourceRoot":""}