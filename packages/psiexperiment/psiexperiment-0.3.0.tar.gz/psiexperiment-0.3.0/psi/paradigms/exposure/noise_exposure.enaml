import logging
log = logging.getLogger(__name__)

import numpy as np

from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import Branding

from psiaudio.pipeline import coroutine
from psi.context.api import ContextGroup, EnumParameter, Parameter
from psi.controller.api import (ControllerManifest, EpochOutput,
                                ExperimentAction, ExperimentCallback)

from psi.controller.input import (Coroutine, Input, IIRFilter, RMS, SPL)

from psi.data.plots import (TimeContainer, ChannelPlot, FFTContainer,
                            FFTChannelPlot, ViewBox)

from psi.data.sinks.api import BinaryStore
from psi.experiment.api import StatusItem
from psi.token.primitives import (
    BandlimitedNoise, BroadbandNoise, Cos2Envelope, ShapedNoise
)

from ..core.io_mixins import ChannelInput, EpochChannelOutput

EXPERIMENT = __name__.rsplit('.', 1)[-1]


def configure_experiment(pb, fs, t0_end, **kwargs):
    pb.maximum = int(round(t0_end * fs))


@coroutine
def update_progress(pb, target):
    pb.value = 0
    while True:
        data = (yield)
        pb.value += data.shape[-1]
        target(data)


enamldef NoiseControllerManifest(ControllerManifest): manifest:

    id = 'psi.controller'

    Extension:
        id = 'noise_exposure_stores'
        point = 'psi.data.sinks'

        BinaryStore:
            continuous_inputs = ['microphone', 'noise_level']

    Extension:
        id = 'tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: bandlimited_noise:
            name = 'bandlimited_noise_burst'
            label = 'Bandlimited noise'
            BandlimitedNoise:
                pass

        Cos2Envelope: broadband_noise:
            name = 'broadband_noise_burst'
            label = 'Broadband noise'
            BroadbandNoise:
                pass

        Cos2Envelope: broadband_noise:
            name = 'shaped_noise_burst'
            label = 'Shaped noise'
            ShapedNoise:
                pass

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        EpochChannelOutput: output:
            name = 'exposure'
            label = 'Exposure'
            configurable = True

        ChannelInput:
            name = 'microphone'

            IIRFilter:
                btype = 'highpass'
                ftype = 'butter'
                N = 2
                f_highpass = 100
                name = 'microphone_filtered'

                RMS:
                    name = 'RMS'
                    duration = 1
                    SPL: spl:
                        name = 'noise_level'

            Coroutine:
                name = 'update_progress'
                args = (pb_experiment,)
                coroutine = update_progress


    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'

        StatusItem:
            label = 'Exposure status'

            ProgressBar: pb_experiment:
                name = 'noise_progress'
                text_visible = True

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'
        rank = 100

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': None}

        ExperimentAction:
            event = 'context_initialized'
            command = 'exposure.prepare'

        ExperimentAction:
            event = 'experiment_start'
            command = 'exposure.start'
            kwargs = {'start': 10}

        ExperimentCallback:
            event = 'exposure_start'
            callback = configure_experiment
            kwargs = {'pb': pb_experiment, 'fs': output.fs}

        ExperimentAction:
            event = 'exposure_end'
            command = 'psi.controller.stop'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'noise_level_container'
            label = 'Noise level'
            delay = 0
            span = 600

            ViewBox:
                label = 'Noise level (dB SPL)'
                save_limits = True
                y_min = 108
                y_max = 118

                ChannelPlot:
                    source_name = 'noise_level'
