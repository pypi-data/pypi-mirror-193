# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class StateSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "media_ids",
            "type",
        }
        
        class properties:
            
            
            class media_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            type = schemas.IntSchema
            frame = schemas.IntSchema
            
            
            class localization_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'localization_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class parent(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parent':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            version = schemas.IntSchema
            __annotations__ = {
                "media_ids": media_ids,
                "type": type,
                "frame": frame,
                "localization_ids": localization_ids,
                "parent": parent,
                "version": version,
            }
        
        @staticmethod
        def additional_properties() -> typing.Type['AttributeValue']:
            return AttributeValue
    
    media_ids: MetaOapg.properties.media_ids
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_ids"]) -> MetaOapg.properties.media_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frame"]) -> MetaOapg.properties.frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localization_ids"]) -> MetaOapg.properties.localization_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> 'AttributeValue': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["media_ids"], typing_extensions.Literal["type"], typing_extensions.Literal["frame"], typing_extensions.Literal["localization_ids"], typing_extensions.Literal["parent"], typing_extensions.Literal["version"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_ids"]) -> MetaOapg.properties.media_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frame"]) -> typing.Union[MetaOapg.properties.frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localization_ids"]) -> typing.Union[MetaOapg.properties.localization_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union['AttributeValue', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["media_ids"], typing_extensions.Literal["type"], typing_extensions.Literal["frame"], typing_extensions.Literal["localization_ids"], typing_extensions.Literal["parent"], typing_extensions.Literal["version"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        media_ids: typing.Union[MetaOapg.properties.media_ids, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        frame: typing.Union[MetaOapg.properties.frame, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        localization_ids: typing.Union[MetaOapg.properties.localization_ids, list, tuple, schemas.Unset] = schemas.unset,
        parent: typing.Union[MetaOapg.properties.parent, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: 'AttributeValue',
    ) -> 'StateSpec':
        return super().__new__(
            cls,
            *args,
            media_ids=media_ids,
            type=type,
            frame=frame,
            localization_ids=localization_ids,
            parent=parent,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.attribute_value import AttributeValue
