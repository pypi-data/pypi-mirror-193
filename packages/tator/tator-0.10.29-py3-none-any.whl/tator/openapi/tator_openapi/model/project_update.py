# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class ProjectUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class backup_bucket(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            
            
            class bucket(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            enable_downloads = schemas.BoolSchema
            name = schemas.StrSchema
            summary = schemas.StrSchema
            thumb = schemas.StrSchema
            
            
            class upload_bucket(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            __annotations__ = {
                "backup_bucket": backup_bucket,
                "bucket": bucket,
                "enable_downloads": enable_downloads,
                "name": name,
                "summary": summary,
                "thumb": thumb,
                "upload_bucket": upload_bucket,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_bucket"]) -> MetaOapg.properties.backup_bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_downloads"]) -> MetaOapg.properties.enable_downloads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumb"]) -> MetaOapg.properties.thumb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_bucket"]) -> MetaOapg.properties.upload_bucket: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["backup_bucket", "bucket", "enable_downloads", "name", "summary", "thumb", "upload_bucket", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_bucket"]) -> typing.Union[MetaOapg.properties.backup_bucket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket"]) -> typing.Union[MetaOapg.properties.bucket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_downloads"]) -> typing.Union[MetaOapg.properties.enable_downloads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumb"]) -> typing.Union[MetaOapg.properties.thumb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_bucket"]) -> typing.Union[MetaOapg.properties.upload_bucket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["backup_bucket", "bucket", "enable_downloads", "name", "summary", "thumb", "upload_bucket", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        backup_bucket: typing.Union[MetaOapg.properties.backup_bucket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bucket: typing.Union[MetaOapg.properties.bucket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_downloads: typing.Union[MetaOapg.properties.enable_downloads, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        thumb: typing.Union[MetaOapg.properties.thumb, str, schemas.Unset] = schemas.unset,
        upload_bucket: typing.Union[MetaOapg.properties.upload_bucket, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectUpdate':
        return super().__new__(
            cls,
            *args,
            backup_bucket=backup_bucket,
            bucket=bucket,
            enable_downloads=enable_downloads,
            name=name,
            summary=summary,
            thumb=thumb,
            upload_bucket=upload_bucket,
            _configuration=_configuration,
            **kwargs,
        )
