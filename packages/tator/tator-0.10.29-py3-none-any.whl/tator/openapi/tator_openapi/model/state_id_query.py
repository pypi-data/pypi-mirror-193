# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class StateIdQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class float_array(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FloatArrayQuery']:
                        return FloatArrayQuery
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FloatArrayQuery'], typing.List['FloatArrayQuery']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'float_array':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FloatArrayQuery':
                    return super().__getitem__(i)
            
            
            class ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class localization_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'localization_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class media_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            media_query = schemas.StrSchema
            __annotations__ = {
                "float_array": float_array,
                "ids": ids,
                "localization_ids": localization_ids,
                "media_ids": media_ids,
                "media_query": media_query,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["float_array"]) -> MetaOapg.properties.float_array: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ids"]) -> MetaOapg.properties.ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localization_ids"]) -> MetaOapg.properties.localization_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_ids"]) -> MetaOapg.properties.media_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_query"]) -> MetaOapg.properties.media_query: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["float_array", "ids", "localization_ids", "media_ids", "media_query", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["float_array"]) -> typing.Union[MetaOapg.properties.float_array, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ids"]) -> typing.Union[MetaOapg.properties.ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localization_ids"]) -> typing.Union[MetaOapg.properties.localization_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_ids"]) -> typing.Union[MetaOapg.properties.media_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_query"]) -> typing.Union[MetaOapg.properties.media_query, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["float_array", "ids", "localization_ids", "media_ids", "media_query", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        float_array: typing.Union[MetaOapg.properties.float_array, list, tuple, schemas.Unset] = schemas.unset,
        ids: typing.Union[MetaOapg.properties.ids, list, tuple, schemas.Unset] = schemas.unset,
        localization_ids: typing.Union[MetaOapg.properties.localization_ids, list, tuple, schemas.Unset] = schemas.unset,
        media_ids: typing.Union[MetaOapg.properties.media_ids, list, tuple, schemas.Unset] = schemas.unset,
        media_query: typing.Union[MetaOapg.properties.media_query, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateIdQuery':
        return super().__new__(
            cls,
            *args,
            float_array=float_array,
            ids=ids,
            localization_ids=localization_ids,
            media_ids=media_ids,
            media_query=media_query,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.float_array_query import FloatArrayQuery
