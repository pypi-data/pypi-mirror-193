# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class VideoDefinition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "codec",
            "path",
            "resolution",
        }
        
        class properties:
            codec = schemas.StrSchema
            path = schemas.StrSchema
            
            
            class resolution(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 2
                    min_items = 2
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resolution':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            bit_rate = schemas.IntSchema
            codec_description = schemas.StrSchema
            codec_mime = schemas.StrSchema
            host = schemas.StrSchema
            http_auth = schemas.StrSchema
            segment_info = schemas.StrSchema
            size = schemas.IntSchema
            __annotations__ = {
                "codec": codec,
                "path": path,
                "resolution": resolution,
                "bit_rate": bit_rate,
                "codec_description": codec_description,
                "codec_mime": codec_mime,
                "host": host,
                "http_auth": http_auth,
                "segment_info": segment_info,
                "size": size,
            }
    
    codec: MetaOapg.properties.codec
    path: MetaOapg.properties.path
    resolution: MetaOapg.properties.resolution
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolution"]) -> MetaOapg.properties.resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bit_rate"]) -> MetaOapg.properties.bit_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec_description"]) -> MetaOapg.properties.codec_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec_mime"]) -> MetaOapg.properties.codec_mime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_auth"]) -> MetaOapg.properties.http_auth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment_info"]) -> MetaOapg.properties.segment_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["codec", "path", "resolution", "bit_rate", "codec_description", "codec_mime", "host", "http_auth", "segment_info", "size", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolution"]) -> MetaOapg.properties.resolution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bit_rate"]) -> typing.Union[MetaOapg.properties.bit_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec_description"]) -> typing.Union[MetaOapg.properties.codec_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec_mime"]) -> typing.Union[MetaOapg.properties.codec_mime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_auth"]) -> typing.Union[MetaOapg.properties.http_auth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment_info"]) -> typing.Union[MetaOapg.properties.segment_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["codec", "path", "resolution", "bit_rate", "codec_description", "codec_mime", "host", "http_auth", "segment_info", "size", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        codec: typing.Union[MetaOapg.properties.codec, str, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        resolution: typing.Union[MetaOapg.properties.resolution, list, tuple, ],
        bit_rate: typing.Union[MetaOapg.properties.bit_rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        codec_description: typing.Union[MetaOapg.properties.codec_description, str, schemas.Unset] = schemas.unset,
        codec_mime: typing.Union[MetaOapg.properties.codec_mime, str, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        http_auth: typing.Union[MetaOapg.properties.http_auth, str, schemas.Unset] = schemas.unset,
        segment_info: typing.Union[MetaOapg.properties.segment_info, str, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoDefinition':
        return super().__new__(
            cls,
            *args,
            codec=codec,
            path=path,
            resolution=resolution,
            bit_rate=bit_rate,
            codec_description=codec_description,
            codec_mime=codec_mime,
            host=host,
            http_auth=http_auth,
            segment_info=segment_info,
            size=size,
            _configuration=_configuration,
            **kwargs,
        )
