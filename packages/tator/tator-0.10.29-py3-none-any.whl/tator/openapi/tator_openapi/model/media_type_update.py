# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class MediaTypeUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class archive_config(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ArchiveConfig']:
                        return ArchiveConfig
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ArchiveConfig'], typing.List['ArchiveConfig']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'archive_config':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ArchiveConfig':
                    return super().__getitem__(i)
            default_box = schemas.IntSchema
            default_dot = schemas.IntSchema
            default_line = schemas.IntSchema
            
            
            class default_volume(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            description = schemas.StrSchema
            
            
            class file_format(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
            name = schemas.StrSchema
            
            
            class streaming_config(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ResolutionConfig']:
                        return ResolutionConfig
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ResolutionConfig'], typing.List['ResolutionConfig']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streaming_config':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ResolutionConfig':
                    return super().__getitem__(i)
            visible = schemas.BoolSchema
            __annotations__ = {
                "archive_config": archive_config,
                "default_box": default_box,
                "default_dot": default_dot,
                "default_line": default_line,
                "default_volume": default_volume,
                "description": description,
                "file_format": file_format,
                "name": name,
                "streaming_config": streaming_config,
                "visible": visible,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_config"]) -> MetaOapg.properties.archive_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_box"]) -> MetaOapg.properties.default_box: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_dot"]) -> MetaOapg.properties.default_dot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_line"]) -> MetaOapg.properties.default_line: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_volume"]) -> MetaOapg.properties.default_volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_format"]) -> MetaOapg.properties.file_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streaming_config"]) -> MetaOapg.properties.streaming_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archive_config", "default_box", "default_dot", "default_line", "default_volume", "description", "file_format", "name", "streaming_config", "visible", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_config"]) -> typing.Union[MetaOapg.properties.archive_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_box"]) -> typing.Union[MetaOapg.properties.default_box, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_dot"]) -> typing.Union[MetaOapg.properties.default_dot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_line"]) -> typing.Union[MetaOapg.properties.default_line, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_volume"]) -> typing.Union[MetaOapg.properties.default_volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_format"]) -> typing.Union[MetaOapg.properties.file_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streaming_config"]) -> typing.Union[MetaOapg.properties.streaming_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> typing.Union[MetaOapg.properties.visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archive_config", "default_box", "default_dot", "default_line", "default_volume", "description", "file_format", "name", "streaming_config", "visible", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        archive_config: typing.Union[MetaOapg.properties.archive_config, list, tuple, schemas.Unset] = schemas.unset,
        default_box: typing.Union[MetaOapg.properties.default_box, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_dot: typing.Union[MetaOapg.properties.default_dot, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_line: typing.Union[MetaOapg.properties.default_line, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_volume: typing.Union[MetaOapg.properties.default_volume, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        file_format: typing.Union[MetaOapg.properties.file_format, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        streaming_config: typing.Union[MetaOapg.properties.streaming_config, list, tuple, schemas.Unset] = schemas.unset,
        visible: typing.Union[MetaOapg.properties.visible, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaTypeUpdate':
        return super().__new__(
            cls,
            *args,
            archive_config=archive_config,
            default_box=default_box,
            default_dot=default_dot,
            default_line=default_line,
            default_volume=default_volume,
            description=description,
            file_format=file_format,
            name=name,
            streaming_config=streaming_config,
            visible=visible,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.archive_config import ArchiveConfig
from tator_openapi.model.resolution_config import ResolutionConfig
