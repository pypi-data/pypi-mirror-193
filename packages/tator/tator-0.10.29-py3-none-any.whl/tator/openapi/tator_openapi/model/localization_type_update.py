# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class LocalizationTypeUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Localization type update.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def colorMap() -> typing.Type['ColorMap']:
                return ColorMap
            description = schemas.StrSchema
            drawable = schemas.BoolSchema
            grouping_default = schemas.BoolSchema
            
            
            class line_width(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            name = schemas.StrSchema
            visible = schemas.BoolSchema
            __annotations__ = {
                "colorMap": colorMap,
                "description": description,
                "drawable": drawable,
                "grouping_default": grouping_default,
                "line_width": line_width,
                "name": name,
                "visible": visible,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorMap"]) -> 'ColorMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawable"]) -> MetaOapg.properties.drawable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grouping_default"]) -> MetaOapg.properties.grouping_default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_width"]) -> MetaOapg.properties.line_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["colorMap", "description", "drawable", "grouping_default", "line_width", "name", "visible", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorMap"]) -> typing.Union['ColorMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawable"]) -> typing.Union[MetaOapg.properties.drawable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grouping_default"]) -> typing.Union[MetaOapg.properties.grouping_default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_width"]) -> typing.Union[MetaOapg.properties.line_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> typing.Union[MetaOapg.properties.visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["colorMap", "description", "drawable", "grouping_default", "line_width", "name", "visible", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        colorMap: typing.Union['ColorMap', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        drawable: typing.Union[MetaOapg.properties.drawable, bool, schemas.Unset] = schemas.unset,
        grouping_default: typing.Union[MetaOapg.properties.grouping_default, bool, schemas.Unset] = schemas.unset,
        line_width: typing.Union[MetaOapg.properties.line_width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        visible: typing.Union[MetaOapg.properties.visible, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocalizationTypeUpdate':
        return super().__new__(
            cls,
            *args,
            colorMap=colorMap,
            description=description,
            drawable=drawable,
            grouping_default=grouping_default,
            line_width=line_width,
            name=name,
            visible=visible,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.color_map import ColorMap
