# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class BucketSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            access_key = schemas.StrSchema
            archive_sc = schemas.StrSchema
            endpoint_url = schemas.StrSchema
            gcs_key_info = schemas.StrSchema
            live_sc = schemas.StrSchema
            region = schemas.StrSchema
            secret_key = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "access_key": access_key,
                "archive_sc": archive_sc,
                "endpoint_url": endpoint_url,
                "gcs_key_info": gcs_key_info,
                "live_sc": live_sc,
                "region": region,
                "secret_key": secret_key,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_key"]) -> MetaOapg.properties.access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_sc"]) -> MetaOapg.properties.archive_sc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint_url"]) -> MetaOapg.properties.endpoint_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gcs_key_info"]) -> MetaOapg.properties.gcs_key_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_sc"]) -> MetaOapg.properties.live_sc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_key"]) -> MetaOapg.properties.secret_key: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "access_key", "archive_sc", "endpoint_url", "gcs_key_info", "live_sc", "region", "secret_key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_key"]) -> typing.Union[MetaOapg.properties.access_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_sc"]) -> typing.Union[MetaOapg.properties.archive_sc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint_url"]) -> typing.Union[MetaOapg.properties.endpoint_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gcs_key_info"]) -> typing.Union[MetaOapg.properties.gcs_key_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_sc"]) -> typing.Union[MetaOapg.properties.live_sc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_key"]) -> typing.Union[MetaOapg.properties.secret_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "access_key", "archive_sc", "endpoint_url", "gcs_key_info", "live_sc", "region", "secret_key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        access_key: typing.Union[MetaOapg.properties.access_key, str, schemas.Unset] = schemas.unset,
        archive_sc: typing.Union[MetaOapg.properties.archive_sc, str, schemas.Unset] = schemas.unset,
        endpoint_url: typing.Union[MetaOapg.properties.endpoint_url, str, schemas.Unset] = schemas.unset,
        gcs_key_info: typing.Union[MetaOapg.properties.gcs_key_info, str, schemas.Unset] = schemas.unset,
        live_sc: typing.Union[MetaOapg.properties.live_sc, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        secret_key: typing.Union[MetaOapg.properties.secret_key, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BucketSpec':
        return super().__new__(
            cls,
            *args,
            name=name,
            access_key=access_key,
            archive_sc=archive_sc,
            endpoint_url=endpoint_url,
            gcs_key_info=gcs_key_info,
            live_sc=live_sc,
            region=region,
            secret_key=secret_key,
            _configuration=_configuration,
            **kwargs,
        )
