# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class ResolutionConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Settings for streaming video encode. Any additional properties will be passed as command line arguments to ffmpeg. 
    """


    class MetaOapg:
        
        class properties:
            
            
            class crf(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 63
                    inclusive_minimum = 0
            preset = schemas.StrSchema
            
            
            class resolution(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 8192
                    inclusive_minimum = 0
            
            
            class vcodec(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "h264": "H264",
                        "av1": "AV1",
                    }
                
                @schemas.classproperty
                def H264(cls):
                    return cls("h264")
                
                @schemas.classproperty
                def AV1(cls):
                    return cls("av1")
            __annotations__ = {
                "crf": crf,
                "preset": preset,
                "resolution": resolution,
                "vcodec": vcodec,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crf"]) -> MetaOapg.properties.crf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preset"]) -> MetaOapg.properties.preset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolution"]) -> MetaOapg.properties.resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vcodec"]) -> MetaOapg.properties.vcodec: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crf"], typing_extensions.Literal["preset"], typing_extensions.Literal["resolution"], typing_extensions.Literal["vcodec"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crf"]) -> typing.Union[MetaOapg.properties.crf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preset"]) -> typing.Union[MetaOapg.properties.preset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolution"]) -> typing.Union[MetaOapg.properties.resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vcodec"]) -> typing.Union[MetaOapg.properties.vcodec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crf"], typing_extensions.Literal["preset"], typing_extensions.Literal["resolution"], typing_extensions.Literal["vcodec"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        crf: typing.Union[MetaOapg.properties.crf, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        preset: typing.Union[MetaOapg.properties.preset, str, schemas.Unset] = schemas.unset,
        resolution: typing.Union[MetaOapg.properties.resolution, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vcodec: typing.Union[MetaOapg.properties.vcodec, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ResolutionConfig':
        return super().__new__(
            cls,
            *args,
            crf=crf,
            preset=preset,
            resolution=resolution,
            vcodec=vcodec,
            _configuration=_configuration,
            **kwargs,
        )
