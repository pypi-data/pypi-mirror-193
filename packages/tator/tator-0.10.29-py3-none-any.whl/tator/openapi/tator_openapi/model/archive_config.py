# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class ArchiveConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Settings for archival video encode and storage. If not set, the raw video will be stored in Tator.
    """


    class MetaOapg:
        required = {
            "encode",
        }
        
        class properties:
        
            @staticmethod
            def encode() -> typing.Type['EncodeConfig']:
                return EncodeConfig
            name = schemas.StrSchema
        
            @staticmethod
            def s3_storage() -> typing.Type['S3StorageConfig']:
                return S3StorageConfig
            __annotations__ = {
                "encode": encode,
                "name": name,
                "s3_storage": s3_storage,
            }
    
    encode: 'EncodeConfig'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encode"]) -> 'EncodeConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3_storage"]) -> 'S3StorageConfig': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["encode", "name", "s3_storage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encode"]) -> 'EncodeConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3_storage"]) -> typing.Union['S3StorageConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["encode", "name", "s3_storage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        encode: 'EncodeConfig',
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        s3_storage: typing.Union['S3StorageConfig', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ArchiveConfig':
        return super().__new__(
            cls,
            *args,
            encode=encode,
            name=name,
            s3_storage=s3_storage,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.encode_config import EncodeConfig
from tator_openapi.model.s3_storage_config import S3StorageConfig
