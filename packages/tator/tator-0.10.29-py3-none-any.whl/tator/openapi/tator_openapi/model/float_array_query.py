# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class FloatArrayQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "center",
            "name",
        }
        
        class properties:
            
            
            class center(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'center':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            name = schemas.StrSchema
            lower_bound = schemas.NumberSchema
            
            
            class metric(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "l2norm": "L2NORM",
                        "l1norm": "L1NORM",
                    }
                
                @schemas.classproperty
                def L2NORM(cls):
                    return cls("l2norm")
                
                @schemas.classproperty
                def L1NORM(cls):
                    return cls("l1norm")
            
            
            class order(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "asc": "ASC",
                        "desc": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("asc")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("desc")
            upper_bound = schemas.NumberSchema
            __annotations__ = {
                "center": center,
                "name": name,
                "lower_bound": lower_bound,
                "metric": metric,
                "order": order,
                "upper_bound": upper_bound,
            }
    
    center: MetaOapg.properties.center
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["center"]) -> MetaOapg.properties.center: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lower_bound"]) -> MetaOapg.properties.lower_bound: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upper_bound"]) -> MetaOapg.properties.upper_bound: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["center", "name", "lower_bound", "metric", "order", "upper_bound", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["center"]) -> MetaOapg.properties.center: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lower_bound"]) -> typing.Union[MetaOapg.properties.lower_bound, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric"]) -> typing.Union[MetaOapg.properties.metric, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upper_bound"]) -> typing.Union[MetaOapg.properties.upper_bound, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["center", "name", "lower_bound", "metric", "order", "upper_bound", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        center: typing.Union[MetaOapg.properties.center, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        lower_bound: typing.Union[MetaOapg.properties.lower_bound, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        metric: typing.Union[MetaOapg.properties.metric, str, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
        upper_bound: typing.Union[MetaOapg.properties.upper_bound, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FloatArrayQuery':
        return super().__new__(
            cls,
            *args,
            center=center,
            name=name,
            lower_bound=lower_bound,
            metric=metric,
            order=order,
            upper_bound=upper_bound,
            _configuration=_configuration,
            **kwargs,
        )
