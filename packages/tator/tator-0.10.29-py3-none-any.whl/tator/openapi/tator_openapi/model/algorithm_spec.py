# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class AlgorithmSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Algorithm registration creation spec.
    """


    class MetaOapg:
        required = {
            "manifest",
            "name",
            "files_per_job",
            "user",
        }
        
        class properties:
            files_per_job = schemas.IntSchema
            manifest = schemas.StrSchema
            name = schemas.StrSchema
            user = schemas.IntSchema
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class cluster(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cluster':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            description = schemas.StrSchema
            
            
            class parameters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AlgorithmParameter']:
                        return AlgorithmParameter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AlgorithmParameter'], typing.List['AlgorithmParameter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parameters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AlgorithmParameter':
                    return super().__getitem__(i)
            __annotations__ = {
                "files_per_job": files_per_job,
                "manifest": manifest,
                "name": name,
                "user": user,
                "categories": categories,
                "cluster": cluster,
                "description": description,
                "parameters": parameters,
            }
    
    manifest: MetaOapg.properties.manifest
    name: MetaOapg.properties.name
    files_per_job: MetaOapg.properties.files_per_job
    user: MetaOapg.properties.user
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files_per_job"]) -> MetaOapg.properties.files_per_job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manifest"]) -> MetaOapg.properties.manifest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cluster"]) -> MetaOapg.properties.cluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["files_per_job", "manifest", "name", "user", "categories", "cluster", "description", "parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files_per_job"]) -> MetaOapg.properties.files_per_job: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manifest"]) -> MetaOapg.properties.manifest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union[MetaOapg.properties.categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cluster"]) -> typing.Union[MetaOapg.properties.cluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union[MetaOapg.properties.parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["files_per_job", "manifest", "name", "user", "categories", "cluster", "description", "parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        manifest: typing.Union[MetaOapg.properties.manifest, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        files_per_job: typing.Union[MetaOapg.properties.files_per_job, decimal.Decimal, int, ],
        user: typing.Union[MetaOapg.properties.user, decimal.Decimal, int, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, schemas.Unset] = schemas.unset,
        cluster: typing.Union[MetaOapg.properties.cluster, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        parameters: typing.Union[MetaOapg.properties.parameters, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlgorithmSpec':
        return super().__new__(
            cls,
            *args,
            manifest=manifest,
            name=name,
            files_per_job=files_per_job,
            user=user,
            categories=categories,
            cluster=cluster,
            description=description,
            parameters=parameters,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.algorithm_parameter import AlgorithmParameter
