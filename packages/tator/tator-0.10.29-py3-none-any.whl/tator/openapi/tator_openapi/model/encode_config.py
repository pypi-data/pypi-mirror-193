# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class EncodeConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Settings for archival video encode. Any additional properties will be passed as command line arguments to ffmpeg. The copy setting does no encoding and simply copies the original file.
    """


    class MetaOapg:
        
        class properties:
            
            
            class crf(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 51
                    inclusive_minimum = 0
            movflags = schemas.StrSchema
            
            
            class preset(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ultrafast": "ULTRAFAST",
                        "superfast": "SUPERFAST",
                        "veryfast": "VERYFAST",
                        "faster": "FASTER",
                        "fast": "FAST",
                        "medium": "MEDIUM",
                        "slow": "SLOW",
                        "slower": "SLOWER",
                        "veryslow": "VERYSLOW",
                    }
                
                @schemas.classproperty
                def ULTRAFAST(cls):
                    return cls("ultrafast")
                
                @schemas.classproperty
                def SUPERFAST(cls):
                    return cls("superfast")
                
                @schemas.classproperty
                def VERYFAST(cls):
                    return cls("veryfast")
                
                @schemas.classproperty
                def FASTER(cls):
                    return cls("faster")
                
                @schemas.classproperty
                def FAST(cls):
                    return cls("fast")
                
                @schemas.classproperty
                def MEDIUM(cls):
                    return cls("medium")
                
                @schemas.classproperty
                def SLOW(cls):
                    return cls("slow")
                
                @schemas.classproperty
                def SLOWER(cls):
                    return cls("slower")
                
                @schemas.classproperty
                def VERYSLOW(cls):
                    return cls("veryslow")
            
            
            class tune(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "film": "FILM",
                        "animation": "ANIMATION",
                        "grain": "GRAIN",
                        "stillimage": "STILLIMAGE",
                        "fastdecode": "FASTDECODE",
                        "zerolatency": "ZEROLATENCY",
                        "psnr": "PSNR",
                        "ssim": "SSIM",
                    }
                
                @schemas.classproperty
                def FILM(cls):
                    return cls("film")
                
                @schemas.classproperty
                def ANIMATION(cls):
                    return cls("animation")
                
                @schemas.classproperty
                def GRAIN(cls):
                    return cls("grain")
                
                @schemas.classproperty
                def STILLIMAGE(cls):
                    return cls("stillimage")
                
                @schemas.classproperty
                def FASTDECODE(cls):
                    return cls("fastdecode")
                
                @schemas.classproperty
                def ZEROLATENCY(cls):
                    return cls("zerolatency")
                
                @schemas.classproperty
                def PSNR(cls):
                    return cls("psnr")
                
                @schemas.classproperty
                def SSIM(cls):
                    return cls("ssim")
            
            
            class vcodec(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "copy": "COPY",
                        "h264": "H264",
                        "hevc": "HEVC",
                    }
                
                @schemas.classproperty
                def COPY(cls):
                    return cls("copy")
                
                @schemas.classproperty
                def H264(cls):
                    return cls("h264")
                
                @schemas.classproperty
                def HEVC(cls):
                    return cls("hevc")
            __annotations__ = {
                "crf": crf,
                "movflags": movflags,
                "preset": preset,
                "tune": tune,
                "vcodec": vcodec,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crf"]) -> MetaOapg.properties.crf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["movflags"]) -> MetaOapg.properties.movflags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preset"]) -> MetaOapg.properties.preset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tune"]) -> MetaOapg.properties.tune: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vcodec"]) -> MetaOapg.properties.vcodec: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crf"], typing_extensions.Literal["movflags"], typing_extensions.Literal["preset"], typing_extensions.Literal["tune"], typing_extensions.Literal["vcodec"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crf"]) -> typing.Union[MetaOapg.properties.crf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["movflags"]) -> typing.Union[MetaOapg.properties.movflags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preset"]) -> typing.Union[MetaOapg.properties.preset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tune"]) -> typing.Union[MetaOapg.properties.tune, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vcodec"]) -> typing.Union[MetaOapg.properties.vcodec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crf"], typing_extensions.Literal["movflags"], typing_extensions.Literal["preset"], typing_extensions.Literal["tune"], typing_extensions.Literal["vcodec"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        crf: typing.Union[MetaOapg.properties.crf, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        movflags: typing.Union[MetaOapg.properties.movflags, str, schemas.Unset] = schemas.unset,
        preset: typing.Union[MetaOapg.properties.preset, str, schemas.Unset] = schemas.unset,
        tune: typing.Union[MetaOapg.properties.tune, str, schemas.Unset] = schemas.unset,
        vcodec: typing.Union[MetaOapg.properties.vcodec, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'EncodeConfig':
        return super().__new__(
            cls,
            *args,
            crf=crf,
            movflags=movflags,
            preset=preset,
            tune=tune,
            vcodec=vcodec,
            _configuration=_configuration,
            **kwargs,
        )
