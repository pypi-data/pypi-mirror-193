# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class MediaSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "section",
            "type",
            "md5",
        }
        
        class properties:
            md5 = schemas.StrSchema
            name = schemas.StrSchema
            section = schemas.StrSchema
            
            
            class type(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = -1
            
            
            class attributes(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class codec(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'codec':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fps(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fps':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            gid = schemas.StrSchema
            
            
            class height(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'height':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class num_frames(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'num_frames':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            summaryLevel = schemas.IntSchema
            thumbnail_gif_url = schemas.StrSchema
            thumbnail_url = schemas.StrSchema
            uid = schemas.StrSchema
            url = schemas.StrSchema
            
            
            class width(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'width':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "md5": md5,
                "name": name,
                "section": section,
                "type": type,
                "attributes": attributes,
                "codec": codec,
                "fps": fps,
                "gid": gid,
                "height": height,
                "num_frames": num_frames,
                "summaryLevel": summaryLevel,
                "thumbnail_gif_url": thumbnail_gif_url,
                "thumbnail_url": thumbnail_url,
                "uid": uid,
                "url": url,
                "width": width,
            }
    
    name: MetaOapg.properties.name
    section: MetaOapg.properties.section
    type: MetaOapg.properties.type
    md5: MetaOapg.properties.md5
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fps"]) -> MetaOapg.properties.fps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gid"]) -> MetaOapg.properties.gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_frames"]) -> MetaOapg.properties.num_frames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaryLevel"]) -> MetaOapg.properties.summaryLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail_gif_url"]) -> MetaOapg.properties.thumbnail_gif_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail_url"]) -> MetaOapg.properties.thumbnail_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["md5", "name", "section", "type", "attributes", "codec", "fps", "gid", "height", "num_frames", "summaryLevel", "thumbnail_gif_url", "thumbnail_url", "uid", "url", "width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec"]) -> typing.Union[MetaOapg.properties.codec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fps"]) -> typing.Union[MetaOapg.properties.fps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gid"]) -> typing.Union[MetaOapg.properties.gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_frames"]) -> typing.Union[MetaOapg.properties.num_frames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaryLevel"]) -> typing.Union[MetaOapg.properties.summaryLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail_gif_url"]) -> typing.Union[MetaOapg.properties.thumbnail_gif_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail_url"]) -> typing.Union[MetaOapg.properties.thumbnail_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["md5", "name", "section", "type", "attributes", "codec", "fps", "gid", "height", "num_frames", "summaryLevel", "thumbnail_gif_url", "thumbnail_url", "uid", "url", "width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        section: typing.Union[MetaOapg.properties.section, str, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        md5: typing.Union[MetaOapg.properties.md5, str, ],
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        codec: typing.Union[MetaOapg.properties.codec, None, str, schemas.Unset] = schemas.unset,
        fps: typing.Union[MetaOapg.properties.fps, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gid: typing.Union[MetaOapg.properties.gid, str, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        num_frames: typing.Union[MetaOapg.properties.num_frames, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        summaryLevel: typing.Union[MetaOapg.properties.summaryLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thumbnail_gif_url: typing.Union[MetaOapg.properties.thumbnail_gif_url, str, schemas.Unset] = schemas.unset,
        thumbnail_url: typing.Union[MetaOapg.properties.thumbnail_url, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaSpec':
        return super().__new__(
            cls,
            *args,
            name=name,
            section=section,
            type=type,
            md5=md5,
            attributes=attributes,
            codec=codec,
            fps=fps,
            gid=gid,
            height=height,
            num_frames=num_frames,
            summaryLevel=summaryLevel,
            thumbnail_gif_url=thumbnail_gif_url,
            thumbnail_url=thumbnail_url,
            uid=uid,
            url=url,
            width=width,
            _configuration=_configuration,
            **kwargs,
        )
