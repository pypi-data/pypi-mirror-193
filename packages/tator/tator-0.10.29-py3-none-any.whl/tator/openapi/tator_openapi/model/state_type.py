# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class StateType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    State type.
    """


    class MetaOapg:
        
        class properties:
            
            
            class association(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Media": "MEDIA",
                        "Frame": "FRAME",
                        "Localization": "LOCALIZATION",
                    }
                
                @schemas.classproperty
                def MEDIA(cls):
                    return cls("Media")
                
                @schemas.classproperty
                def FRAME(cls):
                    return cls("Frame")
                
                @schemas.classproperty
                def LOCALIZATION(cls):
                    return cls("Localization")
            
            
            class attribute_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttributeType']:
                        return AttributeType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AttributeType'], typing.List['AttributeType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attribute_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttributeType':
                    return super().__getitem__(i)
            default_localization = schemas.IntSchema
            delete_child_localizations = schemas.BoolSchema
            description = schemas.StrSchema
            dtype = schemas.StrSchema
            grouping_default = schemas.BoolSchema
            id = schemas.IntSchema
            
            
            class interpolation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "none": "NONE",
                        "latest": "LATEST",
                        "attr_style_range": "ATTR_STYLE_RANGE",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def LATEST(cls):
                    return cls("latest")
                
                @schemas.classproperty
                def ATTR_STYLE_RANGE(cls):
                    return cls("attr_style_range")
            
            
            class media(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            name = schemas.StrSchema
            project = schemas.IntSchema
            visible = schemas.BoolSchema
            __annotations__ = {
                "association": association,
                "attribute_types": attribute_types,
                "default_localization": default_localization,
                "delete_child_localizations": delete_child_localizations,
                "description": description,
                "dtype": dtype,
                "grouping_default": grouping_default,
                "id": id,
                "interpolation": interpolation,
                "media": media,
                "name": name,
                "project": project,
                "visible": visible,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association"]) -> MetaOapg.properties.association: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_types"]) -> MetaOapg.properties.attribute_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_localization"]) -> MetaOapg.properties.default_localization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_child_localizations"]) -> MetaOapg.properties.delete_child_localizations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dtype"]) -> MetaOapg.properties.dtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grouping_default"]) -> MetaOapg.properties.grouping_default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interpolation"]) -> MetaOapg.properties.interpolation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media"]) -> MetaOapg.properties.media: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["association", "attribute_types", "default_localization", "delete_child_localizations", "description", "dtype", "grouping_default", "id", "interpolation", "media", "name", "project", "visible", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association"]) -> typing.Union[MetaOapg.properties.association, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_types"]) -> typing.Union[MetaOapg.properties.attribute_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_localization"]) -> typing.Union[MetaOapg.properties.default_localization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_child_localizations"]) -> typing.Union[MetaOapg.properties.delete_child_localizations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dtype"]) -> typing.Union[MetaOapg.properties.dtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grouping_default"]) -> typing.Union[MetaOapg.properties.grouping_default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interpolation"]) -> typing.Union[MetaOapg.properties.interpolation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media"]) -> typing.Union[MetaOapg.properties.media, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> typing.Union[MetaOapg.properties.visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["association", "attribute_types", "default_localization", "delete_child_localizations", "description", "dtype", "grouping_default", "id", "interpolation", "media", "name", "project", "visible", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        association: typing.Union[MetaOapg.properties.association, str, schemas.Unset] = schemas.unset,
        attribute_types: typing.Union[MetaOapg.properties.attribute_types, list, tuple, schemas.Unset] = schemas.unset,
        default_localization: typing.Union[MetaOapg.properties.default_localization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delete_child_localizations: typing.Union[MetaOapg.properties.delete_child_localizations, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        dtype: typing.Union[MetaOapg.properties.dtype, str, schemas.Unset] = schemas.unset,
        grouping_default: typing.Union[MetaOapg.properties.grouping_default, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        interpolation: typing.Union[MetaOapg.properties.interpolation, str, schemas.Unset] = schemas.unset,
        media: typing.Union[MetaOapg.properties.media, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        visible: typing.Union[MetaOapg.properties.visible, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateType':
        return super().__new__(
            cls,
            *args,
            association=association,
            attribute_types=attribute_types,
            default_localization=default_localization,
            delete_child_localizations=delete_child_localizations,
            description=description,
            dtype=dtype,
            grouping_default=grouping_default,
            id=id,
            interpolation=interpolation,
            media=media,
            name=name,
            project=project,
            visible=visible,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.attribute_type import AttributeType
