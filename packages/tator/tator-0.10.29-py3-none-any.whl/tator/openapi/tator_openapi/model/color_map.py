# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class ColorMap(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Maps an attribute value or version to a color/alpha. Use `key` and `map` (optionally `alpha_ranges`) to map an attribute value to colors. Use `version` to map version IDs to colors.
    """


    class MetaOapg:
        
        class properties:
            
            
            class alpha_ranges(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['AlphaRange']:
                        return AlphaRange
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'AlphaRange':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'AlphaRange':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'AlphaRange',
                ) -> 'alpha_ranges':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def default() -> typing.Type['Color']:
                return Color
        
            @staticmethod
            def defaultFill() -> typing.Type['Fill']:
                return Fill
            
            
            class fillMap(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['Fill']:
                        return Fill
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'Fill':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Fill':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Fill',
                ) -> 'fillMap':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            key = schemas.StrSchema
            
            
            class map(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['Color']:
                        return Color
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'Color':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Color':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Color',
                ) -> 'map':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class version(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['Color']:
                        return Color
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'Color':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Color':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Color',
                ) -> 'version':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "alpha_ranges": alpha_ranges,
                "default": default,
                "defaultFill": defaultFill,
                "fillMap": fillMap,
                "key": key,
                "map": map,
                "version": version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alpha_ranges"]) -> MetaOapg.properties.alpha_ranges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> 'Color': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultFill"]) -> 'Fill': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillMap"]) -> MetaOapg.properties.fillMap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["map"]) -> MetaOapg.properties.map: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["alpha_ranges", "default", "defaultFill", "fillMap", "key", "map", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alpha_ranges"]) -> typing.Union[MetaOapg.properties.alpha_ranges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union['Color', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultFill"]) -> typing.Union['Fill', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillMap"]) -> typing.Union[MetaOapg.properties.fillMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["map"]) -> typing.Union[MetaOapg.properties.map, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["alpha_ranges", "default", "defaultFill", "fillMap", "key", "map", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        alpha_ranges: typing.Union[MetaOapg.properties.alpha_ranges, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        default: typing.Union['Color', schemas.Unset] = schemas.unset,
        defaultFill: typing.Union['Fill', schemas.Unset] = schemas.unset,
        fillMap: typing.Union[MetaOapg.properties.fillMap, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        map: typing.Union[MetaOapg.properties.map, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ColorMap':
        return super().__new__(
            cls,
            *args,
            alpha_ranges=alpha_ranges,
            default=default,
            defaultFill=defaultFill,
            fillMap=fillMap,
            key=key,
            map=map,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.alpha_range import AlphaRange
from tator_openapi.model.color import Color
from tator_openapi.model.fill import Fill
