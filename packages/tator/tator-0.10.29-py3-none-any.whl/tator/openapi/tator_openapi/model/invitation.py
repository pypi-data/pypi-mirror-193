# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class Invitation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Invitation object.
    """


    class MetaOapg:
        
        class properties:
            created_by = schemas.IntSchema
            created_datetime = schemas.DateTimeSchema
            created_username = schemas.StrSchema
            email = schemas.StrSchema
            id = schemas.IntSchema
            
            
            class organization(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            
            
            class permission(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Member": "MEMBER",
                        "Admin": "ADMIN",
                    }
                
                @schemas.classproperty
                def MEMBER(cls):
                    return cls("Member")
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("Admin")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Pending": "PENDING",
                        "Expired": "EXPIRED",
                        "Accepted": "ACCEPTED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("Pending")
                
                @schemas.classproperty
                def EXPIRED(cls):
                    return cls("Expired")
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("Accepted")
            __annotations__ = {
                "created_by": created_by,
                "created_datetime": created_datetime,
                "created_username": created_username,
                "email": email,
                "id": id,
                "organization": organization,
                "permission": permission,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_datetime"]) -> MetaOapg.properties.created_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_username"]) -> MetaOapg.properties.created_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_by", "created_datetime", "created_username", "email", "id", "organization", "permission", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_datetime"]) -> typing.Union[MetaOapg.properties.created_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_username"]) -> typing.Union[MetaOapg.properties.created_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> typing.Union[MetaOapg.properties.permission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_by", "created_datetime", "created_username", "email", "id", "organization", "permission", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_by: typing.Union[MetaOapg.properties.created_by, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_datetime: typing.Union[MetaOapg.properties.created_datetime, str, datetime, schemas.Unset] = schemas.unset,
        created_username: typing.Union[MetaOapg.properties.created_username, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        permission: typing.Union[MetaOapg.properties.permission, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Invitation':
        return super().__new__(
            cls,
            *args,
            created_by=created_by,
            created_datetime=created_datetime,
            created_username=created_username,
            email=email,
            id=id,
            organization=organization,
            permission=permission,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
