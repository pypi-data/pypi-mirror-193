# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class CloneMediaSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dest_project",
            "dest_type",
        }
        
        class properties:
            dest_project = schemas.IntSchema
            
            
            class dest_type(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = -1
            
            
            class dest_section(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dest_section':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "dest_project": dest_project,
                "dest_type": dest_type,
                "dest_section": dest_section,
            }
    
    dest_project: MetaOapg.properties.dest_project
    dest_type: MetaOapg.properties.dest_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dest_project"]) -> MetaOapg.properties.dest_project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dest_type"]) -> MetaOapg.properties.dest_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dest_section"]) -> MetaOapg.properties.dest_section: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dest_project", "dest_type", "dest_section", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dest_project"]) -> MetaOapg.properties.dest_project: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dest_type"]) -> MetaOapg.properties.dest_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dest_section"]) -> typing.Union[MetaOapg.properties.dest_section, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dest_project", "dest_type", "dest_section", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dest_project: typing.Union[MetaOapg.properties.dest_project, decimal.Decimal, int, ],
        dest_type: typing.Union[MetaOapg.properties.dest_type, decimal.Decimal, int, ],
        dest_section: typing.Union[MetaOapg.properties.dest_section, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloneMediaSpec':
        return super().__new__(
            cls,
            *args,
            dest_project=dest_project,
            dest_type=dest_type,
            dest_section=dest_section,
            _configuration=_configuration,
            **kwargs,
        )
