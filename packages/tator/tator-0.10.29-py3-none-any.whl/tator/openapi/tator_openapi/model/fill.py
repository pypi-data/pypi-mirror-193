# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class Fill(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Maps an attribute value or version to a color/alpha. Use `key` and `map` (optionally `alpha_ranges`) to map an attribute value to colors. Use `version` to map version IDs to colors.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def color() -> typing.Type['Color']:
                return Color
            
            
            class style(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "fill": "FILL",
                        "blur": "BLUR",
                        "gray": "GRAY",
                    }
                
                @schemas.classproperty
                def FILL(cls):
                    return cls("fill")
                
                @schemas.classproperty
                def BLUR(cls):
                    return cls("blur")
                
                @schemas.classproperty
                def GRAY(cls):
                    return cls("gray")
            __annotations__ = {
                "color": color,
                "style": style,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> 'Color': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["style"]) -> MetaOapg.properties.style: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["color", "style", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union['Color', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["style"]) -> typing.Union[MetaOapg.properties.style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["color", "style", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        color: typing.Union['Color', schemas.Unset] = schemas.unset,
        style: typing.Union[MetaOapg.properties.style, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Fill':
        return super().__new__(
            cls,
            *args,
            color=color,
            style=style,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.color import Color
