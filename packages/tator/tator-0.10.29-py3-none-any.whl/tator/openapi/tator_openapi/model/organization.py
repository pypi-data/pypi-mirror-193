# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class Organization(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Organization object.
    """


    class MetaOapg:
        
        class properties:
            
            
            class default_membership_permission(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "No Access": "NO_ACCESS",
                        "View Only": "VIEW_ONLY",
                        "Can Edit": "CAN_EDIT",
                        "Can Transfer": "CAN_TRANSFER",
                        "Can Execute": "CAN_EXECUTE",
                        "Full Control": "FULL_CONTROL",
                    }
                
                @schemas.classproperty
                def NO_ACCESS(cls):
                    return cls("No Access")
                
                @schemas.classproperty
                def VIEW_ONLY(cls):
                    return cls("View Only")
                
                @schemas.classproperty
                def CAN_EDIT(cls):
                    return cls("Can Edit")
                
                @schemas.classproperty
                def CAN_TRANSFER(cls):
                    return cls("Can Transfer")
                
                @schemas.classproperty
                def CAN_EXECUTE(cls):
                    return cls("Can Execute")
                
                @schemas.classproperty
                def FULL_CONTROL(cls):
                    return cls("Full Control")
            id = schemas.IntSchema
            name = schemas.StrSchema
            permission = schemas.StrSchema
            __annotations__ = {
                "default_membership_permission": default_membership_permission,
                "id": id,
                "name": name,
                "permission": permission,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_membership_permission"]) -> MetaOapg.properties.default_membership_permission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["default_membership_permission", "id", "name", "permission", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_membership_permission"]) -> typing.Union[MetaOapg.properties.default_membership_permission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> typing.Union[MetaOapg.properties.permission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["default_membership_permission", "id", "name", "permission", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        default_membership_permission: typing.Union[MetaOapg.properties.default_membership_permission, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        permission: typing.Union[MetaOapg.properties.permission, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Organization':
        return super().__new__(
            cls,
            *args,
            default_membership_permission=default_membership_permission,
            id=id,
            name=name,
            permission=permission,
            _configuration=_configuration,
            **kwargs,
        )
