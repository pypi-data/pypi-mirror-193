# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class MediaFiles(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Object containing upload urls for the transcoded file and corresponding `VideoDefinition`.
    """


    class MetaOapg:
        
        class properties:
            
            
            class archival(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VideoDefinition']:
                        return VideoDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VideoDefinition'], typing.List['VideoDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'archival':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VideoDefinition':
                    return super().__getitem__(i)
            
            
            class attachment(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AuxiliaryFileDefinition']:
                        return AuxiliaryFileDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AuxiliaryFileDefinition'], typing.List['AuxiliaryFileDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachment':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AuxiliaryFileDefinition':
                    return super().__getitem__(i)
            
            
            class audio(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AudioDefinition']:
                        return AudioDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AudioDefinition'], typing.List['AudioDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'audio':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AudioDefinition':
                    return super().__getitem__(i)
            
            
            class concat(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConcatDefinition']:
                        return ConcatDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ConcatDefinition'], typing.List['ConcatDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'concat':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ConcatDefinition':
                    return super().__getitem__(i)
            
            
            class frameOffset(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'frameOffset':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class image(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageDefinition']:
                        return ImageDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ImageDefinition'], typing.List['ImageDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageDefinition':
                    return super().__getitem__(i)
            
            
            class layout(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'layout':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class live(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LiveDefinition']:
                        return LiveDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LiveDefinition'], typing.List['LiveDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'live':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LiveDefinition':
                    return super().__getitem__(i)
            quality = schemas.IntSchema
            
            
            class streaming(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VideoDefinition']:
                        return VideoDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VideoDefinition'], typing.List['VideoDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streaming':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VideoDefinition':
                    return super().__getitem__(i)
            
            
            class thumbnail(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageDefinition']:
                        return ImageDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ImageDefinition'], typing.List['ImageDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thumbnail':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageDefinition':
                    return super().__getitem__(i)
            
            
            class thumbnail_gif(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageDefinition']:
                        return ImageDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ImageDefinition'], typing.List['ImageDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thumbnail_gif':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageDefinition':
                    return super().__getitem__(i)
            __annotations__ = {
                "archival": archival,
                "attachment": attachment,
                "audio": audio,
                "concat": concat,
                "frameOffset": frameOffset,
                "ids": ids,
                "image": image,
                "layout": layout,
                "live": live,
                "quality": quality,
                "streaming": streaming,
                "thumbnail": thumbnail,
                "thumbnail_gif": thumbnail_gif,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archival"]) -> MetaOapg.properties.archival: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachment"]) -> MetaOapg.properties.attachment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> MetaOapg.properties.audio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["concat"]) -> MetaOapg.properties.concat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frameOffset"]) -> MetaOapg.properties.frameOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ids"]) -> MetaOapg.properties.ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality"]) -> MetaOapg.properties.quality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streaming"]) -> MetaOapg.properties.streaming: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail_gif"]) -> MetaOapg.properties.thumbnail_gif: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archival", "attachment", "audio", "concat", "frameOffset", "ids", "image", "layout", "live", "quality", "streaming", "thumbnail", "thumbnail_gif", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archival"]) -> typing.Union[MetaOapg.properties.archival, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachment"]) -> typing.Union[MetaOapg.properties.attachment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union[MetaOapg.properties.audio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["concat"]) -> typing.Union[MetaOapg.properties.concat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frameOffset"]) -> typing.Union[MetaOapg.properties.frameOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ids"]) -> typing.Union[MetaOapg.properties.ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union[MetaOapg.properties.layout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live"]) -> typing.Union[MetaOapg.properties.live, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality"]) -> typing.Union[MetaOapg.properties.quality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streaming"]) -> typing.Union[MetaOapg.properties.streaming, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail_gif"]) -> typing.Union[MetaOapg.properties.thumbnail_gif, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archival", "attachment", "audio", "concat", "frameOffset", "ids", "image", "layout", "live", "quality", "streaming", "thumbnail", "thumbnail_gif", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        archival: typing.Union[MetaOapg.properties.archival, list, tuple, schemas.Unset] = schemas.unset,
        attachment: typing.Union[MetaOapg.properties.attachment, list, tuple, schemas.Unset] = schemas.unset,
        audio: typing.Union[MetaOapg.properties.audio, list, tuple, schemas.Unset] = schemas.unset,
        concat: typing.Union[MetaOapg.properties.concat, list, tuple, schemas.Unset] = schemas.unset,
        frameOffset: typing.Union[MetaOapg.properties.frameOffset, list, tuple, schemas.Unset] = schemas.unset,
        ids: typing.Union[MetaOapg.properties.ids, list, tuple, schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, list, tuple, schemas.Unset] = schemas.unset,
        layout: typing.Union[MetaOapg.properties.layout, list, tuple, schemas.Unset] = schemas.unset,
        live: typing.Union[MetaOapg.properties.live, list, tuple, schemas.Unset] = schemas.unset,
        quality: typing.Union[MetaOapg.properties.quality, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        streaming: typing.Union[MetaOapg.properties.streaming, list, tuple, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union[MetaOapg.properties.thumbnail, list, tuple, schemas.Unset] = schemas.unset,
        thumbnail_gif: typing.Union[MetaOapg.properties.thumbnail_gif, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaFiles':
        return super().__new__(
            cls,
            *args,
            archival=archival,
            attachment=attachment,
            audio=audio,
            concat=concat,
            frameOffset=frameOffset,
            ids=ids,
            image=image,
            layout=layout,
            live=live,
            quality=quality,
            streaming=streaming,
            thumbnail=thumbnail,
            thumbnail_gif=thumbnail_gif,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.audio_definition import AudioDefinition
from tator_openapi.model.auxiliary_file_definition import AuxiliaryFileDefinition
from tator_openapi.model.concat_definition import ConcatDefinition
from tator_openapi.model.image_definition import ImageDefinition
from tator_openapi.model.live_definition import LiveDefinition
from tator_openapi.model.video_definition import VideoDefinition
