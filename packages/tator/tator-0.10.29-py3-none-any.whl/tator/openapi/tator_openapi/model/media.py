# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class Media(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class archive_state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "archived": "ARCHIVED",
                        "to_archive": "TO_ARCHIVE",
                        "live": "LIVE",
                        "to_live": "TO_LIVE",
                    }
                
                @schemas.classproperty
                def ARCHIVED(cls):
                    return cls("archived")
                
                @schemas.classproperty
                def TO_ARCHIVE(cls):
                    return cls("to_archive")
                
                @schemas.classproperty
                def LIVE(cls):
                    return cls("live")
                
                @schemas.classproperty
                def TO_LIVE(cls):
                    return cls("to_live")
            archive_status_date = schemas.DateTimeSchema
            
            
            class attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['AttributeValue']:
                        return AttributeValue
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'AttributeValue':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'AttributeValue':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'AttributeValue',
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            codec = schemas.StrSchema
            created_by = schemas.IntSchema
            created_datetime = schemas.StrSchema
            fps = schemas.NumberSchema
            gid = schemas.StrSchema
            height = schemas.IntSchema
            id = schemas.IntSchema
            last_edit_end = schemas.DateTimeSchema
            last_edit_start = schemas.DateTimeSchema
            md5 = schemas.StrSchema
        
            @staticmethod
            def media_files() -> typing.Type['MediaFiles']:
                return MediaFiles
            meta = schemas.IntSchema
            modified_by = schemas.IntSchema
            modified_datetime = schemas.StrSchema
            name = schemas.StrSchema
            num_frames = schemas.IntSchema
            project = schemas.IntSchema
            summaryLevel = schemas.IntSchema
            uid = schemas.StrSchema
            width = schemas.IntSchema
            __annotations__ = {
                "archive_state": archive_state,
                "archive_status_date": archive_status_date,
                "attributes": attributes,
                "codec": codec,
                "created_by": created_by,
                "created_datetime": created_datetime,
                "fps": fps,
                "gid": gid,
                "height": height,
                "id": id,
                "last_edit_end": last_edit_end,
                "last_edit_start": last_edit_start,
                "md5": md5,
                "media_files": media_files,
                "meta": meta,
                "modified_by": modified_by,
                "modified_datetime": modified_datetime,
                "name": name,
                "num_frames": num_frames,
                "project": project,
                "summaryLevel": summaryLevel,
                "uid": uid,
                "width": width,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_state"]) -> MetaOapg.properties.archive_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive_status_date"]) -> MetaOapg.properties.archive_status_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_datetime"]) -> MetaOapg.properties.created_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fps"]) -> MetaOapg.properties.fps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gid"]) -> MetaOapg.properties.gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_edit_end"]) -> MetaOapg.properties.last_edit_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_edit_start"]) -> MetaOapg.properties.last_edit_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_files"]) -> 'MediaFiles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_datetime"]) -> MetaOapg.properties.modified_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_frames"]) -> MetaOapg.properties.num_frames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaryLevel"]) -> MetaOapg.properties.summaryLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archive_state", "archive_status_date", "attributes", "codec", "created_by", "created_datetime", "fps", "gid", "height", "id", "last_edit_end", "last_edit_start", "md5", "media_files", "meta", "modified_by", "modified_datetime", "name", "num_frames", "project", "summaryLevel", "uid", "width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_state"]) -> typing.Union[MetaOapg.properties.archive_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive_status_date"]) -> typing.Union[MetaOapg.properties.archive_status_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec"]) -> typing.Union[MetaOapg.properties.codec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_datetime"]) -> typing.Union[MetaOapg.properties.created_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fps"]) -> typing.Union[MetaOapg.properties.fps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gid"]) -> typing.Union[MetaOapg.properties.gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_edit_end"]) -> typing.Union[MetaOapg.properties.last_edit_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_edit_start"]) -> typing.Union[MetaOapg.properties.last_edit_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> typing.Union[MetaOapg.properties.md5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_files"]) -> typing.Union['MediaFiles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_by"]) -> typing.Union[MetaOapg.properties.modified_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_datetime"]) -> typing.Union[MetaOapg.properties.modified_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_frames"]) -> typing.Union[MetaOapg.properties.num_frames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaryLevel"]) -> typing.Union[MetaOapg.properties.summaryLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archive_state", "archive_status_date", "attributes", "codec", "created_by", "created_datetime", "fps", "gid", "height", "id", "last_edit_end", "last_edit_start", "md5", "media_files", "meta", "modified_by", "modified_datetime", "name", "num_frames", "project", "summaryLevel", "uid", "width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        archive_state: typing.Union[MetaOapg.properties.archive_state, str, schemas.Unset] = schemas.unset,
        archive_status_date: typing.Union[MetaOapg.properties.archive_status_date, str, datetime, schemas.Unset] = schemas.unset,
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        codec: typing.Union[MetaOapg.properties.codec, str, schemas.Unset] = schemas.unset,
        created_by: typing.Union[MetaOapg.properties.created_by, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_datetime: typing.Union[MetaOapg.properties.created_datetime, str, schemas.Unset] = schemas.unset,
        fps: typing.Union[MetaOapg.properties.fps, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gid: typing.Union[MetaOapg.properties.gid, str, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_edit_end: typing.Union[MetaOapg.properties.last_edit_end, str, datetime, schemas.Unset] = schemas.unset,
        last_edit_start: typing.Union[MetaOapg.properties.last_edit_start, str, datetime, schemas.Unset] = schemas.unset,
        md5: typing.Union[MetaOapg.properties.md5, str, schemas.Unset] = schemas.unset,
        media_files: typing.Union['MediaFiles', schemas.Unset] = schemas.unset,
        meta: typing.Union[MetaOapg.properties.meta, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modified_by: typing.Union[MetaOapg.properties.modified_by, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modified_datetime: typing.Union[MetaOapg.properties.modified_datetime, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        num_frames: typing.Union[MetaOapg.properties.num_frames, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        summaryLevel: typing.Union[MetaOapg.properties.summaryLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Media':
        return super().__new__(
            cls,
            *args,
            archive_state=archive_state,
            archive_status_date=archive_status_date,
            attributes=attributes,
            codec=codec,
            created_by=created_by,
            created_datetime=created_datetime,
            fps=fps,
            gid=gid,
            height=height,
            id=id,
            last_edit_end=last_edit_end,
            last_edit_start=last_edit_start,
            md5=md5,
            media_files=media_files,
            meta=meta,
            modified_by=modified_by,
            modified_datetime=modified_datetime,
            name=name,
            num_frames=num_frames,
            project=project,
            summaryLevel=summaryLevel,
            uid=uid,
            width=width,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.attribute_value import AttributeValue
from tator_openapi.model.media_files import MediaFiles
