# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class LiveUpdateDefinition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "layout",
            "streams",
        }
        
        class properties:
            
            
            class layout(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'layout':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class streams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LiveDefinition']:
                        return LiveDefinition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LiveDefinition'], typing.List['LiveDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streams':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LiveDefinition':
                    return super().__getitem__(i)
            __annotations__ = {
                "layout": layout,
                "streams": streams,
            }
    
    layout: MetaOapg.properties.layout
    streams: MetaOapg.properties.streams
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streams"]) -> MetaOapg.properties.streams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["layout", "streams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streams"]) -> MetaOapg.properties.streams: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["layout", "streams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        layout: typing.Union[MetaOapg.properties.layout, list, tuple, ],
        streams: typing.Union[MetaOapg.properties.streams, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveUpdateDefinition':
        return super().__new__(
            cls,
            *args,
            layout=layout,
            streams=streams,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.live_definition import LiveDefinition
