# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class LocalizationTypeSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "dtype",
            "media_types",
        }
        
        class properties:
            
            
            class dtype(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "box": "BOX",
                        "line": "LINE",
                        "dot": "DOT",
                        "poly": "POLY",
                    }
                
                @schemas.classproperty
                def BOX(cls):
                    return cls("box")
                
                @schemas.classproperty
                def LINE(cls):
                    return cls("line")
                
                @schemas.classproperty
                def DOT(cls):
                    return cls("dot")
                
                @schemas.classproperty
                def POLY(cls):
                    return cls("poly")
            
            
            class media_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'media_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            name = schemas.StrSchema
            
            
            class attribute_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttributeType']:
                        return AttributeType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AttributeType'], typing.List['AttributeType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attribute_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttributeType':
                    return super().__getitem__(i)
        
            @staticmethod
            def colorMap() -> typing.Type['ColorMap']:
                return ColorMap
            description = schemas.StrSchema
            drawable = schemas.BoolSchema
            grouping_default = schemas.BoolSchema
            
            
            class line_width(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            visible = schemas.BoolSchema
            __annotations__ = {
                "dtype": dtype,
                "media_types": media_types,
                "name": name,
                "attribute_types": attribute_types,
                "colorMap": colorMap,
                "description": description,
                "drawable": drawable,
                "grouping_default": grouping_default,
                "line_width": line_width,
                "visible": visible,
            }
    
    name: MetaOapg.properties.name
    dtype: MetaOapg.properties.dtype
    media_types: MetaOapg.properties.media_types
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dtype"]) -> MetaOapg.properties.dtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_types"]) -> MetaOapg.properties.media_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_types"]) -> MetaOapg.properties.attribute_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorMap"]) -> 'ColorMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drawable"]) -> MetaOapg.properties.drawable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grouping_default"]) -> MetaOapg.properties.grouping_default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_width"]) -> MetaOapg.properties.line_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dtype", "media_types", "name", "attribute_types", "colorMap", "description", "drawable", "grouping_default", "line_width", "visible", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dtype"]) -> MetaOapg.properties.dtype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_types"]) -> MetaOapg.properties.media_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_types"]) -> typing.Union[MetaOapg.properties.attribute_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorMap"]) -> typing.Union['ColorMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drawable"]) -> typing.Union[MetaOapg.properties.drawable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grouping_default"]) -> typing.Union[MetaOapg.properties.grouping_default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_width"]) -> typing.Union[MetaOapg.properties.line_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> typing.Union[MetaOapg.properties.visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dtype", "media_types", "name", "attribute_types", "colorMap", "description", "drawable", "grouping_default", "line_width", "visible", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        dtype: typing.Union[MetaOapg.properties.dtype, str, ],
        media_types: typing.Union[MetaOapg.properties.media_types, list, tuple, ],
        attribute_types: typing.Union[MetaOapg.properties.attribute_types, list, tuple, schemas.Unset] = schemas.unset,
        colorMap: typing.Union['ColorMap', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        drawable: typing.Union[MetaOapg.properties.drawable, bool, schemas.Unset] = schemas.unset,
        grouping_default: typing.Union[MetaOapg.properties.grouping_default, bool, schemas.Unset] = schemas.unset,
        line_width: typing.Union[MetaOapg.properties.line_width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        visible: typing.Union[MetaOapg.properties.visible, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocalizationTypeSpec':
        return super().__new__(
            cls,
            *args,
            name=name,
            dtype=dtype,
            media_types=media_types,
            attribute_types=attribute_types,
            colorMap=colorMap,
            description=description,
            drawable=drawable,
            grouping_default=grouping_default,
            line_width=line_width,
            visible=visible,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.attribute_type import AttributeType
from tator_openapi.model.color_map import ColorMap
