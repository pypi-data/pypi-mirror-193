# coding: utf-8

"""
    Tator REST API

    Interface to the Tator backend.  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401


class AttributeTypeUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Renames an attribute of a type.
    """


    class MetaOapg:
        required = {
            "old_attribute_type_name",
            "entity_type",
            "new_attribute_type",
        }
        
        class properties:
            entity_type = schemas.StrSchema
            
            
            class new_attribute_type(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                    
                        @staticmethod
                        def autocomplete() -> typing.Type['AutocompleteService']:
                            return AutocompleteService
                        
                        
                        class choices(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'choices':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                    
                        @staticmethod
                        def default() -> typing.Type['AttributeValue']:
                            return AttributeValue
                        description = schemas.StrSchema
                        
                        
                        class dtype(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "bool": "BOOL",
                                    "int": "INT",
                                    "float": "FLOAT",
                                    "enum": "ENUM",
                                    "string": "STRING",
                                    "datetime": "DATETIME",
                                    "geopos": "GEOPOS",
                                    "float_array": "FLOAT_ARRAY",
                                }
                            
                            @schemas.classproperty
                            def BOOL(cls):
                                return cls("bool")
                            
                            @schemas.classproperty
                            def INT(cls):
                                return cls("int")
                            
                            @schemas.classproperty
                            def FLOAT(cls):
                                return cls("float")
                            
                            @schemas.classproperty
                            def ENUM(cls):
                                return cls("enum")
                            
                            @schemas.classproperty
                            def STRING(cls):
                                return cls("string")
                            
                            @schemas.classproperty
                            def DATETIME(cls):
                                return cls("datetime")
                            
                            @schemas.classproperty
                            def GEOPOS(cls):
                                return cls("geopos")
                            
                            @schemas.classproperty
                            def FLOAT_ARRAY(cls):
                                return cls("float_array")
                        
                        
                        class labels(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'labels':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        maximum = schemas.NumberSchema
                        minimum = schemas.NumberSchema
                        name = schemas.StrSchema
                        order = schemas.IntSchema
                        required = schemas.BoolSchema
                        
                        
                        class size(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_minimum = 1
                        style = schemas.StrSchema
                        use_current = schemas.BoolSchema
                        __annotations__ = {
                            "autocomplete": autocomplete,
                            "choices": choices,
                            "default": default,
                            "description": description,
                            "dtype": dtype,
                            "labels": labels,
                            "maximum": maximum,
                            "minimum": minimum,
                            "name": name,
                            "order": order,
                            "required": required,
                            "size": size,
                            "style": style,
                            "use_current": use_current,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["autocomplete"]) -> 'AutocompleteService': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["choices"]) -> MetaOapg.properties.choices: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default"]) -> 'AttributeValue': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dtype"]) -> MetaOapg.properties.dtype: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["maximum"]) -> MetaOapg.properties.maximum: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["minimum"]) -> MetaOapg.properties.minimum: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["style"]) -> MetaOapg.properties.style: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["use_current"]) -> MetaOapg.properties.use_current: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["autocomplete", "choices", "default", "description", "dtype", "labels", "maximum", "minimum", "name", "order", "required", "size", "style", "use_current", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["autocomplete"]) -> typing.Union['AutocompleteService', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["choices"]) -> typing.Union[MetaOapg.properties.choices, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union['AttributeValue', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dtype"]) -> typing.Union[MetaOapg.properties.dtype, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["maximum"]) -> typing.Union[MetaOapg.properties.maximum, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["minimum"]) -> typing.Union[MetaOapg.properties.minimum, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["style"]) -> typing.Union[MetaOapg.properties.style, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["use_current"]) -> typing.Union[MetaOapg.properties.use_current, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autocomplete", "choices", "default", "description", "dtype", "labels", "maximum", "minimum", "name", "order", "required", "size", "style", "use_current", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    autocomplete: typing.Union['AutocompleteService', schemas.Unset] = schemas.unset,
                    choices: typing.Union[MetaOapg.properties.choices, list, tuple, schemas.Unset] = schemas.unset,
                    default: typing.Union['AttributeValue', schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    dtype: typing.Union[MetaOapg.properties.dtype, str, schemas.Unset] = schemas.unset,
                    labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
                    maximum: typing.Union[MetaOapg.properties.maximum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    minimum: typing.Union[MetaOapg.properties.minimum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
                    size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    style: typing.Union[MetaOapg.properties.style, str, schemas.Unset] = schemas.unset,
                    use_current: typing.Union[MetaOapg.properties.use_current, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'new_attribute_type':
                    return super().__new__(
                        cls,
                        *args,
                        autocomplete=autocomplete,
                        choices=choices,
                        default=default,
                        description=description,
                        dtype=dtype,
                        labels=labels,
                        maximum=maximum,
                        minimum=minimum,
                        name=name,
                        order=order,
                        required=required,
                        size=size,
                        style=style,
                        use_current=use_current,
                        _configuration=_configuration,
                        **kwargs,
                    )
            old_attribute_type_name = schemas.StrSchema
            max_instances = schemas.IntSchema
            __annotations__ = {
                "entity_type": entity_type,
                "new_attribute_type": new_attribute_type,
                "old_attribute_type_name": old_attribute_type_name,
                "max_instances": max_instances,
            }
    
    old_attribute_type_name: MetaOapg.properties.old_attribute_type_name
    entity_type: MetaOapg.properties.entity_type
    new_attribute_type: MetaOapg.properties.new_attribute_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_attribute_type"]) -> MetaOapg.properties.new_attribute_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_attribute_type_name"]) -> MetaOapg.properties.old_attribute_type_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_instances"]) -> MetaOapg.properties.max_instances: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity_type", "new_attribute_type", "old_attribute_type_name", "max_instances", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity_type"]) -> MetaOapg.properties.entity_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_attribute_type"]) -> MetaOapg.properties.new_attribute_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_attribute_type_name"]) -> MetaOapg.properties.old_attribute_type_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_instances"]) -> typing.Union[MetaOapg.properties.max_instances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity_type", "new_attribute_type", "old_attribute_type_name", "max_instances", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        old_attribute_type_name: typing.Union[MetaOapg.properties.old_attribute_type_name, str, ],
        entity_type: typing.Union[MetaOapg.properties.entity_type, str, ],
        new_attribute_type: typing.Union[MetaOapg.properties.new_attribute_type, dict, frozendict.frozendict, ],
        max_instances: typing.Union[MetaOapg.properties.max_instances, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttributeTypeUpdate':
        return super().__new__(
            cls,
            *args,
            old_attribute_type_name=old_attribute_type_name,
            entity_type=entity_type,
            new_attribute_type=new_attribute_type,
            max_instances=max_instances,
            _configuration=_configuration,
            **kwargs,
        )

from tator_openapi.model.attribute_value import AttributeValue
from tator_openapi.model.autocomplete_service import AutocompleteService
