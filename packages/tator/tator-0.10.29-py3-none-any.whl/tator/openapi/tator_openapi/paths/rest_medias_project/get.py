# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from tator_openapi import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tator_openapi import schemas  # noqa: F401

from tator_openapi.model.not_found_response import NotFoundResponse
from tator_openapi.model.media import Media
from tator_openapi.model.bad_request_response import BadRequestResponse

from . import path

# Query params


class MediaIdSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.IntSchema
        ):
        
        
            class MetaOapg:
                inclusive_minimum = 1

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MediaIdSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TypeSchema = schemas.IntSchema
NameSchema = schemas.StrSchema
SectionSchema = schemas.IntSchema


class DtypeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "image": "IMAGE",
            "video": "VIDEO",
            "multi": "MULTI",
        }
    
    @schemas.classproperty
    def IMAGE(cls):
        return cls("image")
    
    @schemas.classproperty
    def VIDEO(cls):
        return cls("video")
    
    @schemas.classproperty
    def MULTI(cls):
        return cls("multi")
Md5Schema = schemas.StrSchema
GidSchema = schemas.StrSchema
UidSchema = schemas.StrSchema
AfterSchema = schemas.StrSchema
AfterIdSchema = schemas.IntSchema


class ArchiveLifecycleSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "live": "LIVE",
            "archived": "ARCHIVED",
            "all": "ALL",
        }
    
    @schemas.classproperty
    def LIVE(cls):
        return cls("live")
    
    @schemas.classproperty
    def ARCHIVED(cls):
        return cls("archived")
    
    @schemas.classproperty
    def ALL(cls):
        return cls("all")
AnnotationSearchSchema = schemas.StrSchema
SearchSchema = schemas.StrSchema


class AttributeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeLtSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeLtSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeLteSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeLteSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeGtSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeGtSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeGteSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeGteSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeContainsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeContainsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeDistanceSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeDistanceSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class AttributeNullSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AttributeNullSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
StartSchema = schemas.IntSchema
StopSchema = schemas.IntSchema


class ForceEsSchema(
    schemas.EnumBase,
    schemas.IntSchema
):


    class MetaOapg:
        enum_value_to_name = {
            0: "POSITIVE_0",
            1: "POSITIVE_1",
        }
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)


class PresignedSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 86400
        inclusive_minimum = 1
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'media_id': typing.Union[MediaIdSchema, list, tuple, ],
        'type': typing.Union[TypeSchema, decimal.Decimal, int, ],
        'name': typing.Union[NameSchema, str, ],
        'section': typing.Union[SectionSchema, decimal.Decimal, int, ],
        'dtype': typing.Union[DtypeSchema, str, ],
        'md5': typing.Union[Md5Schema, str, ],
        'gid': typing.Union[GidSchema, str, ],
        'uid': typing.Union[UidSchema, str, ],
        'after': typing.Union[AfterSchema, str, ],
        'after_id': typing.Union[AfterIdSchema, decimal.Decimal, int, ],
        'archive_lifecycle': typing.Union[ArchiveLifecycleSchema, str, ],
        'annotation_search': typing.Union[AnnotationSearchSchema, str, ],
        'search': typing.Union[SearchSchema, str, ],
        'attribute': typing.Union[AttributeSchema, list, tuple, ],
        'attribute_lt': typing.Union[AttributeLtSchema, list, tuple, ],
        'attribute_lte': typing.Union[AttributeLteSchema, list, tuple, ],
        'attribute_gt': typing.Union[AttributeGtSchema, list, tuple, ],
        'attribute_gte': typing.Union[AttributeGteSchema, list, tuple, ],
        'attribute_contains': typing.Union[AttributeContainsSchema, list, tuple, ],
        'attribute_distance': typing.Union[AttributeDistanceSchema, list, tuple, ],
        'attribute_null': typing.Union[AttributeNullSchema, list, tuple, ],
        'start': typing.Union[StartSchema, decimal.Decimal, int, ],
        'stop': typing.Union[StopSchema, decimal.Decimal, int, ],
        'force_es': typing.Union[ForceEsSchema, decimal.Decimal, int, ],
        'presigned': typing.Union[PresignedSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_media_id = api_client.QueryParameter(
    name="media_id",
    style=api_client.ParameterStyle.FORM,
    schema=MediaIdSchema,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
request_query_name = api_client.QueryParameter(
    name="name",
    style=api_client.ParameterStyle.FORM,
    schema=NameSchema,
    explode=True,
)
request_query_section = api_client.QueryParameter(
    name="section",
    style=api_client.ParameterStyle.FORM,
    schema=SectionSchema,
    explode=True,
)
request_query_dtype = api_client.QueryParameter(
    name="dtype",
    style=api_client.ParameterStyle.FORM,
    schema=DtypeSchema,
    explode=True,
)
request_query_md5 = api_client.QueryParameter(
    name="md5",
    style=api_client.ParameterStyle.FORM,
    schema=Md5Schema,
    explode=True,
)
request_query_gid = api_client.QueryParameter(
    name="gid",
    style=api_client.ParameterStyle.FORM,
    schema=GidSchema,
    explode=True,
)
request_query_uid = api_client.QueryParameter(
    name="uid",
    style=api_client.ParameterStyle.FORM,
    schema=UidSchema,
    explode=True,
)
request_query_after = api_client.QueryParameter(
    name="after",
    style=api_client.ParameterStyle.FORM,
    schema=AfterSchema,
    explode=True,
)
request_query_after_id = api_client.QueryParameter(
    name="after_id",
    style=api_client.ParameterStyle.FORM,
    schema=AfterIdSchema,
    explode=True,
)
request_query_archive_lifecycle = api_client.QueryParameter(
    name="archive_lifecycle",
    style=api_client.ParameterStyle.FORM,
    schema=ArchiveLifecycleSchema,
    explode=True,
)
request_query_annotation_search = api_client.QueryParameter(
    name="annotation_search",
    style=api_client.ParameterStyle.FORM,
    schema=AnnotationSearchSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_attribute = api_client.QueryParameter(
    name="attribute",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeSchema,
)
request_query_attribute_lt = api_client.QueryParameter(
    name="attribute_lt",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeLtSchema,
)
request_query_attribute_lte = api_client.QueryParameter(
    name="attribute_lte",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeLteSchema,
)
request_query_attribute_gt = api_client.QueryParameter(
    name="attribute_gt",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeGtSchema,
)
request_query_attribute_gte = api_client.QueryParameter(
    name="attribute_gte",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeGteSchema,
)
request_query_attribute_contains = api_client.QueryParameter(
    name="attribute_contains",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeContainsSchema,
)
request_query_attribute_distance = api_client.QueryParameter(
    name="attribute_distance",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeDistanceSchema,
)
request_query_attribute_null = api_client.QueryParameter(
    name="attribute_null",
    style=api_client.ParameterStyle.FORM,
    schema=AttributeNullSchema,
)
request_query_start = api_client.QueryParameter(
    name="start",
    style=api_client.ParameterStyle.FORM,
    schema=StartSchema,
    explode=True,
)
request_query_stop = api_client.QueryParameter(
    name="stop",
    style=api_client.ParameterStyle.FORM,
    schema=StopSchema,
    explode=True,
)
request_query_force_es = api_client.QueryParameter(
    name="force_es",
    style=api_client.ParameterStyle.FORM,
    schema=ForceEsSchema,
    explode=True,
)
request_query_presigned = api_client.QueryParameter(
    name="presigned",
    style=api_client.ParameterStyle.FORM,
    schema=PresignedSchema,
    explode=True,
)
# Path params
ProjectSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'project': typing.Union[ProjectSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_project = api_client.PathParameter(
    name="project",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectSchema,
    required=True,
)
_auth = [
    'SessionAuth',
    'TokenAuth',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['Media']:
            return Media

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['Media'], typing.List['Media']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Media':
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = BadRequestResponse


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = NotFoundResponse


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_media_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_media_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_media_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_media_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_project,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_media_id,
            request_query_type,
            request_query_name,
            request_query_section,
            request_query_dtype,
            request_query_md5,
            request_query_gid,
            request_query_uid,
            request_query_after,
            request_query_after_id,
            request_query_archive_lifecycle,
            request_query_annotation_search,
            request_query_search,
            request_query_attribute,
            request_query_attribute_lt,
            request_query_attribute_lte,
            request_query_attribute_gt,
            request_query_attribute_gte,
            request_query_attribute_contains,
            request_query_attribute_distance,
            request_query_attribute_null,
            request_query_start,
            request_query_stop,
            request_query_force_es,
            request_query_presigned,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetMediaList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_media_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_media_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_media_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_media_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_media_list_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_media_list_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


