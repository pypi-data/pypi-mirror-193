{"version":3,"sources":["STTable.tsx","index.tsx"],"names":["isDate","dateStr","isNaN","Date","getDate","isFloat","floatStr","parseFloat","STTable","props","searchInput","getColumnSearchProps","dataIndex","linkable","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","value","onChange","e","target","onPressEnter","handleSearch","marginBottom","display","type","onClick","icon","SearchOutlined","size","width","handleReset","closeDropdown","setState","searchText","searchedColumn","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","x","state","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","placement","title","href","handleAction","bind","onSelectChange","selectedRowKeys","data","args","columns","row_key","actions_in_row","tags_columns","batch_actions","linkable_columns","sorter_columns","searchable_columns","expand_column","default_expand_all_rows","iframes_in_row","revoke_height_step","iframe_height","actions","that","rowSelection","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","map","column","ellipsis","showTitle","key","concat","action_width","action","i","Object","assign","defaultSortOrder","sorter","a","b","aa","bb","getTime","Number","localeCompare","tags","index","split","tag","handleReAction","rowKey","dataSource","scroll","sticky","expandable","defaultExpandAllRows","onExpand","expanded","ajustHeight","expandedRowRender","indent","root","document","getElementById","clientWidth","margin","link","marginRight","frameBorder","src","length","height","summary","pageData","Summary","fixed","Row","Cell","colSpan","records","filter","item","okText","cancelText","this","stopPropagation","event","id","uuidv4","payload","Streamlit","setComponentValue","pagination","filters","extra","revoke_step","Math","min","clientHeight","scrollHeight","offsetHeight","setFrameHeight","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.efc692ce.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { Table, Input, Button, Tag, Space, InputRef, Tooltip, Popconfirm } from 'antd';\nimport { ColumnType } from \"antd/lib/table\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\n\n\ninterface IExtra {\n  action: string\n}\n\ninterface EventPayload {\n  action: string\n  records?: any[]\n  column?: string\n}\n\ninterface Event {\n  id: string\n  payload: EventPayload\n}\n\ninterface State {\n  pagination?: any\n  filters?: any\n  sorter?: any\n  searchText?: string\n  searchedColumn?: string\n  selectedRowKeys?: React.Key[]\n}\n\ninterface FilterConfirmProps {\n  closeDropdown: boolean;\n}\n\ninterface ColumnFilterItem {\n  text: React.ReactNode;\n  value: string | number | boolean;\n  children?: ColumnFilterItem[];\n}\n\ninterface FilterDropdownProps {\n  prefixCls: string;\n  setSelectedKeys: (selectedKeys: React.Key[]) => void;\n  selectedKeys: React.Key[];\n  confirm: (param?: FilterConfirmProps) => void;\n  clearFilters: () => void;\n  filters?: ColumnFilterItem[];\n  visible: boolean;\n}\n\nfunction isDate(dateStr: string) {\n  return !isNaN(new Date(dateStr).getDate());\n}\n\nfunction isFloat(floatStr: string) {\n  return !isNaN(parseFloat(floatStr));\n}\n\n\nclass STTable extends StreamlitComponentBase<State>{\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      searchedColumn: \"\"\n    }\n  }\n\n  searchInput?: InputRef;\n\n  getColumnSearchProps = (dataIndex: string, linkable: boolean) => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node: InputRef) => {\n            this.searchInput = node\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false });\n              this.setState({\n                searchText: (selectedKeys[0] as string),\n                searchedColumn: dataIndex,\n              });\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value: string, record: any) =>\n      record[dataIndex]\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n        : '',\n    onFilterDropdownVisibleChange: (visible: boolean) => {\n      if (visible) {\n        setTimeout(() => this.searchInput && this.searchInput.select(), 100);\n      }\n    },\n    render: (text: string, record: any) => {\n      let x = this.state.searchedColumn && this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ) : (<Tooltip placement=\"topLeft\" title={text}>\n        {text}</Tooltip>\n      )\n      if (linkable) {\n        // eslint-disable-next-line\n        x = <a href=\"#\" onClick={this.handleAction(\"ClickLink\", [record], dataIndex).bind(this)}>{x}</a>\n      }\n      return x\n    }\n  });\n\n  handleSearch = (selectedKeys: React.Key[], confirm: () => void, dataIndex: string) => {\n    confirm();\n    this.setState({\n      searchText: (selectedKeys[0] as string),\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = (clearFilters: () => void) => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  private handleAction(action: string, records: object[], column?: string) {\n    const that = this;\n    return function (e: React.MouseEvent<HTMLElement>) {\n      e.stopPropagation();\n      const event: Event = {\n        id: uuidv4(),\n        payload: {\n          action,\n          records,\n          column,\n        }\n      }\n      Streamlit.setComponentValue(event);\n      that.setState({ selectedRowKeys: [] })\n    }\n  }\n\n  private handleReAction(pagination: any, filters: any, sorter: any, extra: IExtra) {\n    this.ajustHeight();\n  }\n\n  ajustHeight(revoke_step?: number) {\n    const root = document.getElementById('root');\n    if (root) {\n      const height = Math.min(root.clientHeight, root.scrollHeight, root.offsetHeight);\n      Streamlit.setFrameHeight(height - (revoke_step? revoke_step: 0));\n      setTimeout(Streamlit.setFrameHeight, 1);\n    }\n  }\n\n  componentDidMount() {\n    this.ajustHeight();\n  }\n\n  componentDidUpdate() {\n    this.ajustHeight();\n  }\n\n  onSelectChange = (selectedRowKeys: React.Key[]) => {\n    this.setState({ selectedRowKeys });\n  };\n\n  public render = (): ReactNode => {\n    const data = this.props.args.data;\n    let columns: ColumnType<object>[] = this.props.args.columns;\n    const { row_key, actions_in_row, tags_columns, batch_actions, linkable_columns, sorter_columns, searchable_columns,\n      expand_column, default_expand_all_rows, iframes_in_row, revoke_height_step, iframe_height} = this.props.args;\n    let actions = this.props.args.actions;\n    const that = this;\n\n\n    const { selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      selections: [\n        Table.SELECTION_ALL,\n        Table.SELECTION_INVERT,\n        Table.SELECTION_NONE,\n      ]\n    }\n\n    // eslint-disable-next-line\n    columns.map((column: ColumnType<object>) => {\n      column.ellipsis = {\n        showTitle: false,\n      };\n      if (linkable_columns.includes(((column.key as string)))) {\n        column.render = (text: string, record: any) => {\n          // eslint-disable-next-line\n          return <a href=\"#\" onClick={that.handleAction(\"ClickLink\", [record], column.key?.toString()).bind(that)}>{text}</a>\n        }\n      }\n    })\n    if (actions || actions_in_row) {\n      columns = columns.concat(\n        {\n          title: 'Action',\n          key: 'operation',\n          width: this.props.args.action_width,\n          render: (text, record: any) => {\n            if (record['_antd_table_actions']) {\n              actions = record['_antd_table_actions']\n            }\n            return <Space size=\"middle\">\n              {actions.map(function (action: string, i: Number) {\n                // eslint-disable-next-line\n                return <a href=\"#\" key={action} onClick={that.handleAction(action, [record]).bind(that)}>{action}</a>\n              })}\n            </Space>\n          }\n        }\n      );\n    }\n    if (searchable_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((searchable_columns as string[]).includes((column.key as string))) {\n          Object.assign(column, this.getColumnSearchProps((column.dataIndex as string), linkable_columns.includes(((column.key as string)))));\n        }\n      })\n    }\n    if (sorter_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((sorter_columns as string[]).includes((column.key as string))) {\n          column.defaultSortOrder = 'descend'\n          if (!column.sorter) {\n            column.sorter = (a: any, b: any) => {\n              const aa = a[(column.key as string)];\n              const bb = b[(column.key as string)];\n              if (typeof (aa) === 'number') {\n                return aa - bb\n              } else if (isDate(aa) && isDate(bb)) {\n                return (new Date(aa)).getTime() - (new Date(bb)).getTime()\n              } else if (isFloat(aa) && isFloat(bb)) {\n                return Number.parseFloat(aa) - Number.parseFloat(bb)\n              }\n              return aa.localeCompare(bb)\n            }\n          }\n        }\n      })\n    }\n    if (tags_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((tags_columns as string[]).includes((column.key as string))) {\n          column.render = (tags: string, record: any, index: Number) => {\n            return <>\n              {tags.split(',').map(tag => (\n                <Tag color=\"blue\" key={'tags/' + tag + '/' + index}>\n                  {tag}\n                </Tag>\n              ))}\n            </>\n          }\n        }\n      })\n    }\n    return (\n      <Table\n        rowSelection={batch_actions ? rowSelection : undefined}\n        onChange={this.handleReAction.bind(this)}\n        rowKey={row_key}\n        size={'large'}\n        columns={columns}\n        dataSource={data}\n        scroll={{x: true}}\n        //scroll={{ x: 1500 }}\n        sticky\n        expandable={(expand_column || iframes_in_row ) ? {\n          defaultExpandAllRows: default_expand_all_rows,\n          onExpand: (expanded: boolean, record: any) => {\n            this.ajustHeight(expanded?0:(revoke_height_step as number));\n          },\n          expandedRowRender: function(record: any, index, indent, expanded){\n            const root = document.getElementById('root');\n            let width = 0;\n            if (root) {\n                width = root.clientWidth;\n            }\n            return <>\n              {expand_column && <p style={{ margin: 0 }}>{record[(expand_column as string)]}</p>}\n              {record['_antd_table_iframes'] && record['_antd_table_iframes'].map((link: string, index: number) => {\n                // eslint-disable-next-line\n                return <iframe style={{marginRight: \"3px\"}} frameBorder=\"0\" key={index.toString()} src={link} width={width/record['_antd_table_iframes'].length - 12} height={iframe_height}>Browser not compatible.</iframe>\n              })}\n            </>\n          },\n        } : undefined}\n        summary={pageData => {\n          return batch_actions ?\n            <Table.Summary fixed='bottom'>\n              <Table.Summary.Row>\n                <Table.Summary.Cell index={0} colSpan={columns.length}>\n                  <Space size=\"middle\">\n                    {batch_actions.map(function (action: string, i: Number) {\n                      const selectedKeys: string[] = (that.state.selectedRowKeys || []).map((key: React.Key) => (key.toString()));\n                      const records: object[] = (data as object[]).filter((item: any) => selectedKeys.includes(item[row_key].toString()));\n                      return <Popconfirm\n                      title=\"Are you sure to delete this task?\"\n                      //onConfirm={confirm}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                    >\n                      <Button key={`${i}`} onClick={that.handleAction(action, records).bind(that)}>{action}</Button></Popconfirm>\n                    })}\n                  </Space>\n                </Table.Summary.Cell>\n              </Table.Summary.Row>\n            </Table.Summary> : <></>\n        }}\n      />\n    )\n  }\n}\n\nexport default withStreamlitConnection(STTable);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STTable from \"./STTable\"\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <STTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}