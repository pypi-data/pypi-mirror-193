# coding: utf-8

"""
    NewsCatcher News API V2

    NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python)   # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: team@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401


class Article(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    title = schemas.StrSchema
                    author = schemas.StrSchema
                    published_date = schemas.StrSchema
                    published_date_precision = schemas.StrSchema
                    link = schemas.StrSchema
                    clean_url = schemas.StrSchema
                    
                    
                    class excerpt(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'excerpt':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class summary(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'summary':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class rights(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'rights':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    rank = schemas.IntSchema
                    topic = schemas.StrSchema
                    country = schemas.StrSchema
                    
                    
                    class language(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'language':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    authors = schemas.StrSchema
                    is_opinion = schemas.BoolSchema
                    
                    
                    class twitter_account(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'twitter_account':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class _score(
                        schemas.NumberBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, float, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> '_score':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    _id = schemas.StrSchema
                    __annotations__ = {
                        "title": title,
                        "author": author,
                        "published_date": published_date,
                        "published_date_precision": published_date_precision,
                        "link": link,
                        "clean_url": clean_url,
                        "excerpt": excerpt,
                        "summary": summary,
                        "rights": rights,
                        "rank": rank,
                        "topic": topic,
                        "country": country,
                        "language": language,
                        "authors": authors,
                        "is_opinion": is_opinion,
                        "twitter_account": twitter_account,
                        "_score": _score,
                        "_id": _id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["author"]) -> MetaOapg.properties.author: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["published_date"]) -> MetaOapg.properties.published_date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["published_date_precision"]) -> MetaOapg.properties.published_date_precision: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["clean_url"]) -> MetaOapg.properties.clean_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rights"]) -> MetaOapg.properties.rights: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_opinion"]) -> MetaOapg.properties.is_opinion: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["twitter_account"]) -> MetaOapg.properties.twitter_account: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["_score"]) -> MetaOapg.properties._score: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "author", "published_date", "published_date_precision", "link", "clean_url", "excerpt", "summary", "rights", "rank", "topic", "country", "language", "authors", "is_opinion", "twitter_account", "_score", "_id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union[MetaOapg.properties.author, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["published_date"]) -> typing.Union[MetaOapg.properties.published_date, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["published_date_precision"]) -> typing.Union[MetaOapg.properties.published_date_precision, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["clean_url"]) -> typing.Union[MetaOapg.properties.clean_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["excerpt"]) -> typing.Union[MetaOapg.properties.excerpt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rights"]) -> typing.Union[MetaOapg.properties.rights, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> typing.Union[MetaOapg.properties.rank, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> typing.Union[MetaOapg.properties.authors, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_opinion"]) -> typing.Union[MetaOapg.properties.is_opinion, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["twitter_account"]) -> typing.Union[MetaOapg.properties.twitter_account, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["_score"]) -> typing.Union[MetaOapg.properties._score, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "author", "published_date", "published_date_precision", "link", "clean_url", "excerpt", "summary", "rights", "rank", "topic", "country", "language", "authors", "is_opinion", "twitter_account", "_score", "_id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                author: typing.Union[MetaOapg.properties.author, str, schemas.Unset] = schemas.unset,
                published_date: typing.Union[MetaOapg.properties.published_date, str, schemas.Unset] = schemas.unset,
                published_date_precision: typing.Union[MetaOapg.properties.published_date_precision, str, schemas.Unset] = schemas.unset,
                link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                clean_url: typing.Union[MetaOapg.properties.clean_url, str, schemas.Unset] = schemas.unset,
                excerpt: typing.Union[MetaOapg.properties.excerpt, None, str, schemas.Unset] = schemas.unset,
                summary: typing.Union[MetaOapg.properties.summary, None, str, schemas.Unset] = schemas.unset,
                rights: typing.Union[MetaOapg.properties.rights, None, str, schemas.Unset] = schemas.unset,
                rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
                country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                language: typing.Union[MetaOapg.properties.language, None, str, schemas.Unset] = schemas.unset,
                authors: typing.Union[MetaOapg.properties.authors, str, schemas.Unset] = schemas.unset,
                is_opinion: typing.Union[MetaOapg.properties.is_opinion, bool, schemas.Unset] = schemas.unset,
                twitter_account: typing.Union[MetaOapg.properties.twitter_account, None, str, schemas.Unset] = schemas.unset,
                _score: typing.Union[MetaOapg.properties._score, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    title=title,
                    author=author,
                    published_date=published_date,
                    published_date_precision=published_date_precision,
                    link=link,
                    clean_url=clean_url,
                    excerpt=excerpt,
                    summary=summary,
                    rights=rights,
                    rank=rank,
                    topic=topic,
                    country=country,
                    language=language,
                    authors=authors,
                    is_opinion=is_opinion,
                    twitter_account=twitter_account,
                    _score=_score,
                    _id=_id,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Article':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
