# coding: utf-8

"""
    NewsCatcher News API V2

    NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python)   # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: team@newscatcherapi.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from newscatcherapi_client import schemas  # noqa: F401


class LatestHeadlines(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            when = schemas.StrSchema
            
            
            class lang(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "af": "AF",
                        "ar": "AR",
                        "bg": "BG",
                        "bn": "BN",
                        "ca": "CA",
                        "cn": "CN",
                        "cs": "CS",
                        "cy": "CY",
                        "da": "DA",
                        "de": "DE",
                        "el": "EL",
                        "en": "EN",
                        "es": "ES",
                        "et": "ET",
                        "fa": "FA",
                        "fi": "FI",
                        "fr": "FR",
                        "gu": "GU",
                        "he": "HE",
                        "hi": "HI",
                        "hr": "HR",
                        "hu": "HU",
                        "id": "ID",
                        "it": "IT",
                        "ja": "JA",
                        "kn": "KN",
                        "ko": "KO",
                        "lt": "LT",
                        "lv": "LV",
                        "mk": "MK",
                        "ml": "ML",
                        "mr": "MR",
                        "ne": "NE",
                        "nl": "NL",
                        "false": "FALSE",
                        "pa": "PA",
                        "pl": "PL",
                        "pt": "PT",
                        "ro": "RO",
                        "ru": "RU",
                        "sk": "SK",
                        "sl": "SL",
                        "so": "SO",
                        "sq": "SQ",
                        "sv": "SV",
                        "sw": "SW",
                        "ta": "TA",
                        "te": "TE",
                        "th": "TH",
                        "tl": "TL",
                        "tr": "TR",
                        "tw": "TW",
                        "uk": "UK",
                        "ur": "UR",
                        "vi": "VI",
                    }
                
                @schemas.classproperty
                def AF(cls):
                    return cls("af")
                
                @schemas.classproperty
                def AR(cls):
                    return cls("ar")
                
                @schemas.classproperty
                def BG(cls):
                    return cls("bg")
                
                @schemas.classproperty
                def BN(cls):
                    return cls("bn")
                
                @schemas.classproperty
                def CA(cls):
                    return cls("ca")
                
                @schemas.classproperty
                def CN(cls):
                    return cls("cn")
                
                @schemas.classproperty
                def CS(cls):
                    return cls("cs")
                
                @schemas.classproperty
                def CY(cls):
                    return cls("cy")
                
                @schemas.classproperty
                def DA(cls):
                    return cls("da")
                
                @schemas.classproperty
                def DE(cls):
                    return cls("de")
                
                @schemas.classproperty
                def EL(cls):
                    return cls("el")
                
                @schemas.classproperty
                def EN(cls):
                    return cls("en")
                
                @schemas.classproperty
                def ES(cls):
                    return cls("es")
                
                @schemas.classproperty
                def ET(cls):
                    return cls("et")
                
                @schemas.classproperty
                def FA(cls):
                    return cls("fa")
                
                @schemas.classproperty
                def FI(cls):
                    return cls("fi")
                
                @schemas.classproperty
                def FR(cls):
                    return cls("fr")
                
                @schemas.classproperty
                def GU(cls):
                    return cls("gu")
                
                @schemas.classproperty
                def HE(cls):
                    return cls("he")
                
                @schemas.classproperty
                def HI(cls):
                    return cls("hi")
                
                @schemas.classproperty
                def HR(cls):
                    return cls("hr")
                
                @schemas.classproperty
                def HU(cls):
                    return cls("hu")
                
                @schemas.classproperty
                def ID(cls):
                    return cls("id")
                
                @schemas.classproperty
                def IT(cls):
                    return cls("it")
                
                @schemas.classproperty
                def JA(cls):
                    return cls("ja")
                
                @schemas.classproperty
                def KN(cls):
                    return cls("kn")
                
                @schemas.classproperty
                def KO(cls):
                    return cls("ko")
                
                @schemas.classproperty
                def LT(cls):
                    return cls("lt")
                
                @schemas.classproperty
                def LV(cls):
                    return cls("lv")
                
                @schemas.classproperty
                def MK(cls):
                    return cls("mk")
                
                @schemas.classproperty
                def ML(cls):
                    return cls("ml")
                
                @schemas.classproperty
                def MR(cls):
                    return cls("mr")
                
                @schemas.classproperty
                def NE(cls):
                    return cls("ne")
                
                @schemas.classproperty
                def NL(cls):
                    return cls("nl")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def PA(cls):
                    return cls("pa")
                
                @schemas.classproperty
                def PL(cls):
                    return cls("pl")
                
                @schemas.classproperty
                def PT(cls):
                    return cls("pt")
                
                @schemas.classproperty
                def RO(cls):
                    return cls("ro")
                
                @schemas.classproperty
                def RU(cls):
                    return cls("ru")
                
                @schemas.classproperty
                def SK(cls):
                    return cls("sk")
                
                @schemas.classproperty
                def SL(cls):
                    return cls("sl")
                
                @schemas.classproperty
                def SO(cls):
                    return cls("so")
                
                @schemas.classproperty
                def SQ(cls):
                    return cls("sq")
                
                @schemas.classproperty
                def SV(cls):
                    return cls("sv")
                
                @schemas.classproperty
                def SW(cls):
                    return cls("sw")
                
                @schemas.classproperty
                def TA(cls):
                    return cls("ta")
                
                @schemas.classproperty
                def TE(cls):
                    return cls("te")
                
                @schemas.classproperty
                def TH(cls):
                    return cls("th")
                
                @schemas.classproperty
                def TL(cls):
                    return cls("tl")
                
                @schemas.classproperty
                def TR(cls):
                    return cls("tr")
                
                @schemas.classproperty
                def TW(cls):
                    return cls("tw")
                
                @schemas.classproperty
                def UK(cls):
                    return cls("uk")
                
                @schemas.classproperty
                def UR(cls):
                    return cls("ur")
                
                @schemas.classproperty
                def VI(cls):
                    return cls("vi")
            countries = schemas.StrSchema
            not_countries = schemas.StrSchema
            
            
            class topic(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "news": "NEWS",
                        "sport": "SPORT",
                        "tech": "TECH",
                        "world": "WORLD",
                        "finance": "FINANCE",
                        "politics": "POLITICS",
                        "business": "BUSINESS",
                        "economics": "ECONOMICS",
                        "entertainment": "ENTERTAINMENT",
                        "beauty": "BEAUTY",
                        "travel": "TRAVEL",
                        "music": "MUSIC",
                        "food": "FOOD",
                        "science": "SCIENCE",
                        "gaming": "GAMING",
                    }
                
                @schemas.classproperty
                def NEWS(cls):
                    return cls("news")
                
                @schemas.classproperty
                def SPORT(cls):
                    return cls("sport")
                
                @schemas.classproperty
                def TECH(cls):
                    return cls("tech")
                
                @schemas.classproperty
                def WORLD(cls):
                    return cls("world")
                
                @schemas.classproperty
                def FINANCE(cls):
                    return cls("finance")
                
                @schemas.classproperty
                def POLITICS(cls):
                    return cls("politics")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
                
                @schemas.classproperty
                def ECONOMICS(cls):
                    return cls("economics")
                
                @schemas.classproperty
                def ENTERTAINMENT(cls):
                    return cls("entertainment")
                
                @schemas.classproperty
                def BEAUTY(cls):
                    return cls("beauty")
                
                @schemas.classproperty
                def TRAVEL(cls):
                    return cls("travel")
                
                @schemas.classproperty
                def MUSIC(cls):
                    return cls("music")
                
                @schemas.classproperty
                def FOOD(cls):
                    return cls("food")
                
                @schemas.classproperty
                def SCIENCE(cls):
                    return cls("science")
                
                @schemas.classproperty
                def GAMING(cls):
                    return cls("gaming")
            sources = schemas.StrSchema
            not_sources = schemas.StrSchema
            ranked_only = schemas.BoolSchema
            
            
            class page_size(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 1
            
            
            class page(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            __annotations__ = {
                "when": when,
                "lang": lang,
                "countries": countries,
                "not_countries": not_countries,
                "topic": topic,
                "sources": sources,
                "not_sources": not_sources,
                "ranked_only": ranked_only,
                "page_size": page_size,
                "page": page,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["when"]) -> MetaOapg.properties.when: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countries"]) -> MetaOapg.properties.countries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not_countries"]) -> MetaOapg.properties.not_countries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> MetaOapg.properties.sources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not_sources"]) -> MetaOapg.properties.not_sources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ranked_only"]) -> MetaOapg.properties.ranked_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page_size"]) -> MetaOapg.properties.page_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["when", "lang", "countries", "not_countries", "topic", "sources", "not_sources", "ranked_only", "page_size", "page", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["when"]) -> typing.Union[MetaOapg.properties.when, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> typing.Union[MetaOapg.properties.lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countries"]) -> typing.Union[MetaOapg.properties.countries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not_countries"]) -> typing.Union[MetaOapg.properties.not_countries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> typing.Union[MetaOapg.properties.sources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not_sources"]) -> typing.Union[MetaOapg.properties.not_sources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ranked_only"]) -> typing.Union[MetaOapg.properties.ranked_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page_size"]) -> typing.Union[MetaOapg.properties.page_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["when", "lang", "countries", "not_countries", "topic", "sources", "not_sources", "ranked_only", "page_size", "page", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        when: typing.Union[MetaOapg.properties.when, str, schemas.Unset] = schemas.unset,
        lang: typing.Union[MetaOapg.properties.lang, str, schemas.Unset] = schemas.unset,
        countries: typing.Union[MetaOapg.properties.countries, str, schemas.Unset] = schemas.unset,
        not_countries: typing.Union[MetaOapg.properties.not_countries, str, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        sources: typing.Union[MetaOapg.properties.sources, str, schemas.Unset] = schemas.unset,
        not_sources: typing.Union[MetaOapg.properties.not_sources, str, schemas.Unset] = schemas.unset,
        ranked_only: typing.Union[MetaOapg.properties.ranked_only, bool, schemas.Unset] = schemas.unset,
        page_size: typing.Union[MetaOapg.properties.page_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LatestHeadlines':
        return super().__new__(
            cls,
            *args,
            when=when,
            lang=lang,
            countries=countries,
            not_countries=not_countries,
            topic=topic,
            sources=sources,
            not_sources=not_sources,
            ranked_only=ranked_only,
            page_size=page_size,
            page=page,
            _configuration=_configuration,
            **kwargs,
        )
