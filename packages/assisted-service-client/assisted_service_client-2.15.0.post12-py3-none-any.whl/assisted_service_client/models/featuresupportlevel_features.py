# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeaturesupportlevelFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_id': 'str',
        'support_level': 'str'
    }

    attribute_map = {
        'feature_id': 'feature_id',
        'support_level': 'support_level'
    }

    def __init__(self, feature_id=None, support_level=None):  # noqa: E501
        """FeaturesupportlevelFeatures - a model defined in Swagger"""  # noqa: E501

        self._feature_id = None
        self._support_level = None
        self.discriminator = None

        self.feature_id = feature_id
        self.support_level = support_level

    @property
    def feature_id(self):
        """Gets the feature_id of this FeaturesupportlevelFeatures.  # noqa: E501

        The ID of the feature  # noqa: E501

        :return: The feature_id of this FeaturesupportlevelFeatures.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this FeaturesupportlevelFeatures.

        The ID of the feature  # noqa: E501

        :param feature_id: The feature_id of this FeaturesupportlevelFeatures.  # noqa: E501
        :type: str
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501
        allowed_values = ["ADDITIONAL_NTP_SOURCE", "REQUESTED_HOSTNAME", "PROXY", "SNO", "DAY2_HOSTS", "VIP_AUTO_ALLOC", "DISK_SELECTION", "OVN_NETWORK_TYPE", "SDN_NETWORK_TYPE", "PLATFORM_SELECTION", "SCHEDULABLE_MASTERS", "AUTO_ASSIGN_ROLE", "CUSTOM_MANIFEST", "DISK_ENCRYPTION", "CLUSTER_MANAGED_NETWORKING_WITH_VMS", "ARM64_ARCHITECTURE", "ARM64_ARCHITECTURE_WITH_CLUSTER_MANAGED_NETWORKING", "SINGLE_NODE_EXPANSION", "LVM", "DUAL_STACK_NETWORKING", "MULTIARCH_RELEASE_IMAGE", "NUTANIX_INTEGRATION", "DUAL_STACK_VIPS", "USER_MANAGED_NETWORKING_WITH_MULTI_NODE"]  # noqa: E501
        if feature_id not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_id` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_id, allowed_values)
            )

        self._feature_id = feature_id

    @property
    def support_level(self):
        """Gets the support_level of this FeaturesupportlevelFeatures.  # noqa: E501


        :return: The support_level of this FeaturesupportlevelFeatures.  # noqa: E501
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this FeaturesupportlevelFeatures.


        :param support_level: The support_level of this FeaturesupportlevelFeatures.  # noqa: E501
        :type: str
        """
        if support_level is None:
            raise ValueError("Invalid value for `support_level`, must not be `None`")  # noqa: E501
        allowed_values = ["supported", "unsupported", "tech-preview", "dev-preview"]  # noqa: E501
        if support_level not in allowed_values:
            raise ValueError(
                "Invalid value for `support_level` ({0}), must be one of {1}"  # noqa: E501
                .format(support_level, allowed_values)
            )

        self._support_level = support_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturesupportlevelFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturesupportlevelFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
