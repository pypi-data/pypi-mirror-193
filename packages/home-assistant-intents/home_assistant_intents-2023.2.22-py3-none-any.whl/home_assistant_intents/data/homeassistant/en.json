{
  "language": "en",
  "intents": {
    "HassTurnOff": {
      "data": [
        {
          "sentences": [
            "<turn> off [all] [the] (fan | fans) in <area>",
            "<turn> off <area> (fan | fans)",
            "<turn> [all] <area> (fan | fans) off"
          ],
          "slots": {
            "domain": "fan",
            "name": "all"
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "<turn> off <name>",
            "<turn> <name> [to] off"
          ],
          "excludes_context": {
            "domain": [
              "cover",
              "scene",
              "sensor",
              "script"
            ]
          }
        },
        {
          "sentences": [
            "<turn> off [all] [the] (light | lights) in <area>",
            "<turn> off [all] <area> (light | lights)",
            "<turn> [all] [the] <area> (light | lights) off",
            "<turn> [all] [the] (light | lights) in <area> off"
          ],
          "slots": {
            "domain": "light"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<close> <name> [in <area>]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<close> [the] garage door"
          ],
          "slots": {
            "domain": "cover",
            "device_class": "garage"
          },
          "response": "cover_device_class"
        },
        {
          "sentences": [
            "<close> [the] {cover_classes:device_class} in <area>",
            "<close> <area> {cover_classes:device_class}"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "cover_device_class"
        }
      ]
    },
    "HassTurnOn": {
      "data": [
        {
          "sentences": [
            "activate <name> [scene]"
          ],
          "requires_context": {
            "domain": "scene"
          },
          "slots": {
            "domain": "scene"
          },
          "response": "scene"
        },
        {
          "sentences": [
            "<turn> on [all] [the] (light | lights) in <area>",
            "<turn> on [all] <area> (light | lights)",
            "<turn> [all] [the] <area> (light | lights) on",
            "<turn> [all] [the] (light | lights) in <area> on"
          ],
          "slots": {
            "domain": "light"
          },
          "response": "lights_area"
        },
        {
          "sentences": [
            "<open> <name> [in <area>]"
          ],
          "requires_context": {
            "domain": "cover"
          },
          "response": "cover"
        },
        {
          "sentences": [
            "<open> [the] garage door"
          ],
          "slots": {
            "domain": "cover",
            "device_class": "garage"
          },
          "response": "cover_device_class"
        },
        {
          "sentences": [
            "<open> [the] {cover_classes:device_class} in <area>",
            "<open> <area> {cover_classes:device_class}"
          ],
          "slots": {
            "domain": "cover"
          },
          "response": "cover_device_class"
        },
        {
          "sentences": [
            "<turn> on [all] [the] (fan | fans) in <area>",
            "<turn> on <area> (fan | fans)",
            "<turn> [all] <area> (fan | fans) on"
          ],
          "slots": {
            "domain": "fan",
            "name": "all"
          },
          "response": "fans_area"
        },
        {
          "sentences": [
            "(run|start) <name> [script]"
          ],
          "requires_context": {
            "domain": "script"
          },
          "slots": {
            "domain": "script"
          },
          "response": "script"
        },
        {
          "sentences": [
            "<turn> on <name>",
            "<turn> <name> [to] on"
          ],
          "excludes_context": {
            "domain": [
              "cover",
              "scene",
              "sensor",
              "script"
            ]
          }
        }
      ]
    },
    "HassGetState": {
      "data": [
        {
          "sentences": [
            "what is [the state of] <name> [in <area>]"
          ],
          "response": "one",
          "excludes_context": {
            "domain": [
              "scene",
              "script"
            ]
          }
        },
        {
          "sentences": [
            "is [the state of] <name> {on_off_states:state} [in <area>]"
          ],
          "response": "one_yesno",
          "excludes_context": {
            "domain": [
              "cover"
            ]
          }
        },
        {
          "sentences": [
            "(is|are) any {on_off_domains:domain} {on_off_states:state} [in <area>]"
          ],
          "response": "any"
        },
        {
          "sentences": [
            "are all [the] {on_off_domains:domain} {on_off_states:state} [in <area>]"
          ],
          "response": "all"
        },
        {
          "sentences": [
            "(which|what) {on_off_domains:domain} (is|are) {on_off_states:state} [in <area>]"
          ],
          "response": "which"
        },
        {
          "sentences": [
            "how many {on_off_domains:domain} (is|are) {on_off_states:state} [in <area>]"
          ],
          "response": "how_many"
        },
        {
          "sentences": [
            "is <name> {cover_states:state} [in <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "cover"
          },
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(is|are) any {cover_classes:device_class} {cover_states:state} [in <area>]"
          ],
          "response": "any",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "are all [the] {cover_classes:device_class} {cover_states:state} [in <area>]"
          ],
          "response": "all",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "(which|what) {cover_classes:device_class} (is|are) {cover_states:state} [in <area>]"
          ],
          "response": "which",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "how many {cover_classes:device_class} (is|are) {cover_states:state} [in <area>]"
          ],
          "response": "how_many",
          "slots": {
            "domain": "cover"
          }
        },
        {
          "sentences": [
            "is <name> {lock_states:state} [in <area>]"
          ],
          "response": "one_yesno",
          "requires_context": {
            "domain": "lock"
          },
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(is|are) any door[s] {lock_states:state} [in <area>]"
          ],
          "response": "any",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "are all [the] door[s] {lock_states:state} [in <area>]"
          ],
          "response": "all",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "(which|what) door[s] (is|are) {lock_states:state} [in <area>]"
          ],
          "response": "which",
          "slots": {
            "domain": "lock"
          }
        },
        {
          "sentences": [
            "how many door[s] (is|are) {lock_states:state} [in <area>]"
          ],
          "response": "how_many",
          "slots": {
            "domain": "lock"
          }
        }
      ]
    }
  },
  "responses": {
    "errors": {
      "no_intent": "Sorry, I couldn't understand that",
      "no_area": "No area named {{ area }}",
      "no_domain": "{{ area }} does not contain a {{ domain }}",
      "no_device_class": "{{ area }} does not contain a {{ device_class }}",
      "no_entity": "No device or entity named {{ entity }}",
      "handle_error": "An unexpected error occurred while handling the intent"
    },
    "intents": {
      "HassGetState": {
        "one": "{{ slots.name | capitalize }} is {{ state.state_with_unit }}\n",
        "one_yesno": "{% if query.matched %}\n  Yes\n{% else %}\n  No, {{ state.state_with_unit }}\n{% endif %}\n",
        "any": "{% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Yes, {{ match[:3] | join(\", \") }} and {{ (match | length - 3) }} more\n  {%- else -%}\n    Yes,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  No\n{% endif %}\n",
        "all": "{% if not query.unmatched: %}\n  Yes\n{% else %}\n  {% set no_match = query.unmatched | map(attribute=\"name\") | sort | list %}\n  {% if no_match | length > 4 %}\n    No, {{ no_match[:3] | join(\", \") }} and {{ (no_match | length - 3) }} more not\n  {%- else -%}\n    No,\n    {% for name in no_match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor %} not\n  {% endif %}\n{% endif %}\n",
        "which": "{% if not query.matched %}\n  Not any\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} and {{ (match | length - 3) }} more\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n",
        "how_many": "{{ query.matched | length }}\n"
      },
      "HassTurnOff": {
        "default": "Turned off {{ state.domain }}",
        "lights_area": "Turned off lights",
        "fans_area": "Turned off fans",
        "cover": "Closed",
        "cover_device_class": "Closed {{ slots.device_class }}"
      },
      "HassTurnOn": {
        "default": "Turned on {{ state.domain }}",
        "lights_area": "Turned on lights",
        "fans_area": "Turned on fans",
        "cover": "Opened",
        "cover_device_class": "Opened {{ slots.device_class }}",
        "scene": "Activated",
        "script": "Started"
      }
    }
  },
  "lists": {
    "color": {
      "values": [
        "white",
        "black",
        "red",
        "orange",
        "yellow",
        "green",
        "blue",
        "purple",
        "brown"
      ]
    },
    "brightness": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "temperature": {
      "range": {
        "type": "temperature",
        "from": 0,
        "to": 100
      }
    },
    "temperature_unit": {
      "values": [
        "celsius",
        {
          "in": "c",
          "out": "celsius"
        },
        "fahrenheit",
        {
          "in": "f",
          "out": "fahrenheit"
        }
      ]
    },
    "brightness_level": {
      "values": [
        {
          "in": "(max | maximum | highest)",
          "out": 100
        },
        {
          "in": "( minimum | lowest)",
          "out": 1
        }
      ]
    },
    "on_off_states": {
      "values": [
        {
          "in": "on",
          "out": "on"
        },
        {
          "in": "off",
          "out": "off"
        }
      ]
    },
    "on_off_domains": {
      "values": [
        {
          "in": "light[s]",
          "out": "light"
        },
        {
          "in": "fan[s]",
          "out": "fan"
        },
        {
          "in": "switch[es]",
          "out": "switch"
        }
      ]
    },
    "cover_states": {
      "values": [
        {
          "in": "open",
          "out": "open"
        },
        {
          "in": "closed",
          "out": "closed"
        },
        {
          "in": "opening",
          "out": "opening"
        },
        {
          "in": "closing",
          "out": "closing"
        }
      ]
    },
    "cover_classes": {
      "values": [
        {
          "in": "awning[s]",
          "out": "awning"
        },
        {
          "in": "blind[s]",
          "out": "blind"
        },
        {
          "in": "curtain[s]",
          "out": "curtain"
        },
        {
          "in": "door[s]",
          "out": "door"
        },
        {
          "in": "garage door[s]",
          "out": "garage"
        },
        {
          "in": "gate[s]",
          "out": "gate"
        },
        {
          "in": "shade[s]",
          "out": "shade"
        },
        {
          "in": "shutter[s]",
          "out": "shutter"
        },
        {
          "in": "window[s]",
          "out": "window"
        }
      ]
    },
    "lock_states": {
      "values": [
        {
          "in": "locked",
          "out": "locked"
        },
        {
          "in": "unlocked",
          "out": "unlocked"
        }
      ]
    }
  },
  "expansion_rules": {
    "name": "[the] {name}",
    "area": "[the] {area}",
    "what_is": "(what's | whats | what is)",
    "brightness": "{brightness}[%| percent]",
    "turn": "(turn | switch | change)",
    "temp": "(temp | temperature)",
    "temperature": "{temperature}[°| degrees] [{temperature_unit}]",
    "open": "(open | raise)",
    "close": "(close | shut | lower)",
    "set": "(set|change)"
  },
  "skip_words": [
    "please",
    "can you"
  ]
}