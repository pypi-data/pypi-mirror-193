{"version":3,"file":"lib_index_js.36822fe162be7a60a6df.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBgD;AACwB;AACnB;AACU;AACN;AAClB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,+DAAa,EAAE,yEAAgB;AAChE;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,gDAAgD,oDAAU;AAC1D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qEAAqE,WAAW,KAAK,OAAO;AAC5F;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6CAA6C,8EAA4B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+EAA6B;AAC3C,eAAe,mEAAe;AAC9B;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,8DAA8D,eAAe;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;AC9I4B;AACA;AACnD,sBAAsB,QAAQ;AAC9B,gCAAgC,+CAAQ;AACxC,kCAAkC,+CAAQ;AAC1C,sCAAsC,+CAAQ;AAC9C,IAAI,gDAAS;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,kCAAkC;AAC3E,QAAQ,0DAAmB,WAAW,6BAA6B;AACnE,QAAQ,0DAAmB,UAAU,0BAA0B,uDAAuD,0DAAmB,WAAW,4CAA4C,kBAAkB;AAClN,oBAAoB,0DAAmB,UAAU,SAAS,4FAA4F;AACtJ,YAAY,0DAAmB,UAAU,gCAAgC;AACzE,gBAAgB,0DAAmB;AACnC;AACA,gBAAgB,0DAAmB;AACnC;AACA,oBAAoB,0DAAmB;AACvC,gBAAgB,0DAAmB,aAAa,2DAA2D;AAC3G,sBAAsB,0DAAmB,UAAU,gCAAgC;AACnF,YAAY,0DAAmB;AAC/B;AACA;AACA,iEAAe,UAAU,EAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,mCAAmC,6DAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,eAAe;AAC9C;AACA,8EAA8E,UAAU;AACxF,mBAAmB;AACnB;AACA,cAAc,0DAAmB,CAAC,uDAAc;AAChD;AACA","sources":["webpack://grundkurs_theme/./lib/handler.js","webpack://grundkurs_theme/./lib/index.js","webpack://grundkurs_theme/./lib/widget.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'grundkurs_theme', endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import { CellFooterWithButton } from './widget';\nimport { INotebookTracker, NotebookPanel, } from '@jupyterlab/notebook';\nimport { IThemeManager } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { requestAPI } from './handler';\nconst PLUGIN_ID = 'grundkurs_theme:plugin';\n/**\n * Initialization data for the grundkurs_theme extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [INotebookTracker, IThemeManager, ISettingRegistry],\n    activate: (app, tracker, manager, settings) => {\n        const { commands, shell } = app;\n        const command = 'grundkurs:send-feedback';\n        let url = '';\n        /**\n         * Load the settings for this extension\n         *\n         * @param setting Extension settings\n         */\n        function loadSetting(setting) {\n            // Read the settings and convert to the correct type\n            url = setting.get('url').composite;\n        }\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        Promise.all([app.restored, settings.load(PLUGIN_ID)])\n            .then(([, setting]) => {\n            // Read the settings\n            loadSetting(setting);\n            // Listen for your plugin setting changes using Signal\n            setting.changed.connect(loadSetting);\n            commands.addCommand(command, {\n                label: 'Send feedback for this assignment',\n                execute: async (args) => {\n                    var _a, _b;\n                    const current = getCurrent(tracker, shell, args);\n                    if (current) {\n                        // Get cellid of current active cell\n                        const cellId = (_b = (_a = current.content.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.modelDB.basePath;\n                        const value = args['value'];\n                        // POST request\n                        const dataToSend = { 'cellId': cellId, url, value };\n                        try {\n                            console.log(JSON.stringify(dataToSend));\n                            const reply = await requestAPI('feedback', {\n                                body: JSON.stringify(dataToSend),\n                                method: 'POST',\n                            });\n                            console.log(reply);\n                        }\n                        catch (reason) {\n                            console.error(`Error on POST /feedback ${dataToSend}.\\n${reason}`);\n                        }\n                    }\n                },\n            });\n        });\n        console.log('JupyterLab extension grundkurs_theme is activated!');\n        const style = 'grundkurs_theme/index.css';\n        manager.register({\n            name: 'grundkurs_theme',\n            isLight: true,\n            load: () => manager.loadCSS(style),\n            unload: () => Promise.resolve(undefined)\n        });\n    }\n};\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Extend the default implementation of an `IContentFactory`.\n */\nexport class ContentFactoryWithFooterButton extends NotebookPanel.ContentFactory {\n    constructor(commands, options) {\n        super(options);\n        this.commands = commands;\n    }\n    /**\n     * Create a new cell header for the parent widget.\n     */\n    createCellFooter() {\n        return new CellFooterWithButton(this.commands);\n    }\n    createMarkdownCell(options, parent) {\n        var _a, _b, _c;\n        //const cellId = options.model?.modelDB.basePath\n        console.log(options);\n        console.log((_a = options.model) === null || _a === void 0 ? void 0 : _a.value.text);\n        console.log(parent);\n        console.log((_b = parent.model) === null || _b === void 0 ? void 0 : _b.cells);\n        const existingCell = options.model;\n        if (existingCell) {\n            const content = existingCell.value.text + 'New content';\n            existingCell.value.text = content;\n        }\n        if ((_c = parent.model) === null || _c === void 0 ? void 0 : _c.cells) {\n            console.log('been here');\n            for (let i = 0; i < parent.model.cells.length; i++) {\n                const cell = parent.model.cells.get(i);\n                console.log(cell);\n                //if (cell.type === 'markdown' && cell.metadata.get('path') === basePath) {\n                //  break;\n                //}\n            }\n        }\n        return super.createMarkdownCell(options, parent);\n    }\n}\n/**\n * The notebook cell factory provider.\n */\nconst cellFactory = {\n    id: 'jupyterlab-cellcodebtn:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        // tslint:disable-next-line:no-console\n        console.log('JupyterLab extension jupyterlab-cellcodebtn', 'overrides default nootbook content factory');\n        const { commands } = app;\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new ContentFactoryWithFooterButton(commands, { editorFactory });\n    }\n};\n/**\n * Export this plugins as default.\n */\nconst plugins = [\n    plugin,\n    cellFactory\n];\nexport default plugins;\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport React, { useState, useEffect } from 'react';\nconst StarRating = ({ submit }) => {\n    const [rating, setRating] = useState(0);\n    const [clicked, setClicked] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n    useEffect(() => {\n        if (submitted) {\n            setTimeout(() => {\n                setSubmitted(false);\n            }, 5000);\n        }\n    }, [submitted]);\n    // @ts-ignore\n    const handleClick = (index) => {\n        setRating(index + 1);\n        setClicked(true);\n    };\n    // @ts-ignore\n    const handleSubmit = async () => {\n        // logic to handle the submit event goes here\n        console.log(`Rating submitted: ${rating}`);\n        setClicked(false);\n        submit(rating).then(() => setSubmitted(true)).catch(e => console.log(e));\n    };\n    const ratings = [\n        \"too easy\",\n        \"easy\",\n        \"good\",\n        \"hard\",\n        \"too hard\"\n    ];\n    return (React.createElement(\"div\", { className: CELL_FOOTER_DIV_CLASS },\n        React.createElement(\"span\", { className: \"exercise_label\" }, \"Feedback\"),\n        React.createElement(\"div\", { className: 'star-rating' }, ['😜', '😛', '🙂', '😕', '😖'].map((star, index) => (React.createElement(\"span\", { onClick: () => handleClick(index), style: { margin: '10px' } }, star)))),\n        clicked && (React.createElement(\"div\", { style: { display: 'flex', flexDirection: 'column', width: '280px', justifyContent: 'space-around' } },\n            React.createElement(\"div\", { className: \"submitted-message\" },\n                React.createElement(\"b\", null, \"You:\"),\n                \" \",\n                React.createElement(\"span\", null,\n                    \"The exercise was \",\n                    React.createElement(\"b\", null, ratings[rating - 1])),\n                React.createElement(\"button\", { className: \"submit-button\", onClick: () => handleSubmit() }, \"Submit\")))),\n        submitted && (React.createElement(\"div\", { className: \"submitted-message\" },\n            React.createElement(\"b\", null, \"Us:\"),\n            \" Thank you for submitting your feedback \\uD83D\\uDE4F\"))));\n};\nexport default StarRating;\n/**\n * The CSS classes added to the cell footer.\n */\nconst CELL_FOOTER_DIV_CLASS = 'gk-cellFeedbackContainer';\n//const CELL_FOOTER_BUTTON_CLASS = 'gk-cellFeedbackBtn';\n/**\n * Extend default implementation of a cell footer.\n */\nexport class CellFooterWithButton extends ReactWidget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor(commands) {\n        super();\n        this.commands = commands;\n    }\n    render() {\n        var _a;\n        const metadata = this.parent.model.sharedModel.getMetadata();\n        return (\n        // TOOD: check for specific tag\n        ((_a = metadata.tags) === null || _a === void 0 ? void 0 : _a.includes(\"exercise\")) ?\n            React.createElement(StarRating, { submit: (i) => {\n                    // We return the Promise, so that the component can react on completion \n                    return this.commands.execute('grundkurs:send-feedback', { value: i });\n                } })\n            // Return empty tag\n            : React.createElement(React.Fragment, null));\n    }\n}\n"],"names":[],"sourceRoot":""}