@PACKAGE_INIT@

cmake_minimum_required(VERSION 3.10)

list(APPEND CMAKE_MODULE_PATH "@PACKAGE_cmakeModulesDir@")

# Check the components
set(LibsrcML_KNOWN_COMPONENTS static shared)
set(LibsrcML_COMPONENT_STATIC NO)
set(LibsrcML_COMPONENT_SHARED NO)
foreach (LibsrcML_COMPONENT IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    if (LibsrcML_COMPONENT IN_LIST LibsrcML_KNOWN_COMPONENTS)
        set(LibsrcML_COMPONENT_${LibsrcML_COMPONENT} YES)
    else()
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "srcML does not recognize component `${LibsrcML_COMPONENT}`.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif()
endforeach()

# Not allowed to specify both static and shared components
if(LibsrcML_COMPONENT_STATIC AND LibsrcML_COMPONENT_SHARED)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "srcML components `static` and `shared` are mutually exclusive.")
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
endif()

set(COMPONENT "shared")
if (LibsrcML_COMPONENT_STATIC)
    set(COMPONENT "static")
endif()

set(LibsrcML_static_targets "${CMAKE_CURRENT_LIST_DIR}/srcML-static-targets.cmake")
set(LibsrcML_shared_targets "${CMAKE_CURRENT_LIST_DIR}/srcML-shared-targets.cmake")

if (NOT EXISTS "${LibsrcML_${COMPONENT}_targets}")
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "LibsrcML `${COMPONENT}` libraries were requested but not found.")
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
endif()
include("${LibsrcML_${COMPONENT}_targets}")

find_path(srcML_INCLUDE_DIR
  NAMES srcml.h
  PATHS "${CMAKE_CURRENT_LIST_DIR}/../include"
  DOC "libsrcml include directory"
)

# Add the include file
target_include_directories(srcML::libsrcml_${COMPONENT} PUBLIC INTERFACE ${srcML_INCLUDE_DIR})

# Find dependencies
# find_package(LibXml2 REQUIRED)
# find_package(Iconv REQUIRED)
# find_package(LibXslt REQUIRED)
# find_package(Threads REQUIRED)

# target_link_libraries(srcML::libsrcml_${COMPONENT} PRIVATE Thread::Thread)
set_target_properties(srcML::libsrcml_${COMPONENT} PROPERTIES IMPORTED_GLOBAL TRUE)
add_library(srcML::LibsrcML ALIAS srcML::libsrcml_${COMPONENT})
