{"version":3,"file":"js/module_auth.signup.d39f6949.bundle.js","mappings":"0PA8BA,SAASA,EAAT,GAaG,IAba,UACdC,EADc,UAEdC,EAFc,cAGdC,EAHc,0BAIdC,EAJc,gBAKdC,EALc,aAMdC,EANc,OAOdC,EAPc,gBAQdC,EARc,eASdC,EATc,gBAUdC,EAVc,aAWdC,EAXc,mBAYdC,GACC,EA0BD,OACE,gBAAC,OAAD,CACEC,SA3BiBC,MAAOC,EAAMC,KAChC,MAAMC,GAASC,EAAAA,EAAAA,IAAmBH,EAAMC,GAUxC,IAAIG,SATGF,EAAOG,iBACThB,EAGMa,EAAOI,mBAChBJ,EAAOK,YAAcL,EAAOI,iBAAiBE,KAAKC,OAClDP,EAAOQ,eAAiBR,EAAOI,iBAAiBK,UACzCT,EAAOI,yBAJPJ,EAAOI,iBAOhB,IACEF,QAAaQ,EAAAA,GAAAA,KAAiBC,SAASC,KAAMZ,EAM9C,CALC,MAAOa,GACP,OAAOC,EAAAA,EAAAA,IACLD,EACA1B,EAA4B,CAACkB,YAAa,oBAAsB,CAAC,EAEpE,CACDM,SAASC,KAAOV,EAAKJ,KAAKiB,eAEpB,IAAIC,SAAQ,QAAlB,EAME9B,cAAeA,EACf+B,mBAAkB,IAClBC,aAAc,CAACC,YAAY,GAC3BC,SAAUpB,IACR,MAAMqB,EAAS,CAAC,EAQhB,OANErB,EAAOsB,UACPtB,EAAOG,kBACPH,EAAOG,mBAAqBH,EAAOsB,WAEnCD,EAAOlB,iBAAmBoB,EAAAA,GAAAA,OAAiB,yBAEtCF,CAAP,IAGDG,GACC,gBAAC,IAAD,CAAM5B,SAAU4B,EAAOC,eACnBrC,GACA,gBAAC,EAAAsC,MAAD,CAAOC,KAAK,gBAAgBC,QAAO,IAAaC,OAAQ,IAAM,OAE/DrC,GACC,gBAAC,IAAD,CAASsC,MAAI,GACX,gBAAC,KAAD,+GAMJ,gBAAC,KAAD,CACEC,OAAQR,EAAAA,GAAAA,OAAiB,oBACzBS,OAAQ5C,GAAmBH,GAE1BK,EAAO2C,OAAS,EACf,gBAAC,KAAD,CACEN,KAAK,QACLO,MAAOX,EAAAA,GAAAA,OAAiB,iBACxBY,QAAS7C,EAAO8C,KAAIvB,IAAK,CACvBwB,IAAKxB,EACLyB,MAAOzB,EACPP,KAAMO,MAERxB,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpB4C,UAAQ,IAGV,gBAAC,KAAD,CACEZ,KAAK,QACLO,MAAOX,EAAAA,GAAAA,OAAiB,iBACxBlC,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpB6C,UAAQ,IAGZ,gBAAC,UAAD,CAAYC,OAAO,SACjB,gBAAC,KAAD,CACEd,KAAK,aACLO,MAAOX,EAAAA,GAAAA,OAAiB,cACxBgB,UAAQ,EACRlD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,IAEtB,gBAAC,KAAD,CACEgC,KAAK,YACLO,MAAOX,EAAAA,GAAAA,OAAiB,aACxBgB,UAAQ,EACRlD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,KAGvBR,EACC,gBAAC,KAAD,CACEwC,KAAK,mBACLY,SAAUtD,GAAaQ,EAAgBiD,SAAS,eAChDC,SAAS,cACTtD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBiD,mBAAoBrD,IAGtB,gBAAC,KAAD,CACEoC,KAAK,cACLO,MAAOX,EAAAA,GAAAA,OAAiB,eACxBgB,SAAUtD,GAAaQ,EAAgBiD,SAAS,eAChDrD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,IAGvB,YAAaN,GACZ,gBAAC,KAAD,CACEsC,KAAK,UACLO,MAAOX,EAAAA,GAAAA,OAAiB,WACxBlC,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,IAGvB,UAAWN,GACV,gBAAC,KAAD,CACEsC,KAAK,QACLO,MAAOX,EAAAA,GAAAA,OAAiB,gBACxBlC,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,KAIzBP,GACC,gBAAC,KAAD,CAAU2C,OAAQR,EAAAA,GAAAA,OAAiB,kBACjC,gBAAC,KAAD,CAAYI,KAAK,WAAWO,MAAOX,EAAAA,GAAAA,OAAiB,YAAagB,UAAQ,IACzE,gBAAC,UAAD,CAAYE,OAAO,SACjB,gBAAC,KAAD,CACEd,KAAK,WACLkB,KAAK,WACLX,MAAOX,EAAAA,GAAAA,OAAiB,YACxBuB,aAAa,eACbP,UAAQ,IAEV,gBAAC,KAAD,CACEZ,KAAK,mBACLkB,KAAK,WACLX,MAAOX,EAAAA,GAAAA,OAAiB,oBACxBuB,aAAa,eACbP,UAAQ,MAKftD,GACC,gBAAC,KAAD,CAAU8C,OAAQR,EAAAA,GAAAA,OAAiB,uBACjC,gBAAC,IAAD,CAASO,MAAI,GACX,gBAAC,KAAD,yIAKF,gBAAC,KAAD,CACES,SAAU9C,EAAgBiD,SAAS,WACnCf,KAAK,UACLoB,aAAa,GACbb,MAAOX,EAAAA,GAAAA,OAAiB,WACxByB,YAAazB,EAAAA,GAAAA,OACX,oHAKR,uBAAK0B,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC5C,gBAAC,KAAD,CACEC,qBAAqB,EACrBlB,MACEjD,EACIsC,EAAAA,GAAAA,OAAiB,+BACjBA,EAAAA,GAAAA,OAAiB,4BAEvB8B,UAAU,kBAEZ,gBAAC,UAAD,CAAYC,SAAU9B,EAAOL,YAC3B,gBAAC,IAAD,CAAQoC,GAAG,IAAI3C,KAAM5B,EAAWsE,SAAU9B,EAAOL,YAC/C,gBAAC,KAAD,oBAQf,CAEDpC,EAAOyE,UAAY,CACjBxE,UAAWyE,IAAAA,OAAAA,WACXxE,UAAWwE,IAAAA,KAAAA,WACXvE,cAAeuE,IAAAA,OAAAA,WACftE,0BAA2BsE,IAAAA,KAAAA,WAC3BrE,gBAAiBqE,IAAAA,KAAAA,WACjBpE,aAAcoE,IAAAA,OAAAA,WACdnE,OAAQmE,IAAAA,QAAkBA,IAAAA,QAAkBC,WAC5CnE,gBAAiBkE,IAAAA,OACjBjE,eAAgBiE,IAAAA,KAChBhE,gBAAiBgE,IAAAA,QAAkBA,IAAAA,QAAkBC,WACrDhE,aAAc+D,IAAAA,QAAkBA,IAAAA,QAChC9D,mBAAoB8D,IAAAA,QAGtB1E,EAAO4E,aAAe,CACpBpE,gBAAiB,KACjBC,gBAAgB,EAChBE,aAAc,GACdC,mBAAoB,IAGtBiE,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAYF,SAASG,cAAc,qBACzC,IAAKD,EACH,OAGF,MAAME,EAASC,KAAKC,MAAMJ,EAAUK,QAAQH,QAC5CI,EAAAA,OAAgB,gBAACrF,EAAWiF,GAAYF,EAAxC,G","sources":["webpack:///indico/modules/auth/client/js/signup.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2023 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Field, Form as FinalForm} from 'react-final-form';\nimport {Button, Form, Message} from 'semantic-ui-react';\n\nimport {\n  SyncedFinalAffiliationDropdown,\n  SyncedFinalDropdown,\n  SyncedFinalInput,\n  SyncedFinalTextArea,\n} from 'indico/react/components/syncedInputs';\nimport {\n  FinalInput,\n  FinalSubmitButton,\n  handleSubmitError,\n  getValuesForFields,\n} from 'indico/react/forms';\nimport {Fieldset, FinalTextArea} from 'indico/react/forms/fields';\nimport {Translate} from 'indico/react/i18n';\nimport {indicoAxios} from 'indico/utils/axios';\n\nfunction Signup({\n  cancelURL,\n  moderated,\n  initialValues,\n  hasPredefinedAffiliations,\n  showAccountForm,\n  syncedValues,\n  emails,\n  affiliationMeta,\n  hasPendingUser,\n  mandatoryFields,\n  lockedFields,\n  lockedFieldMessage,\n}) {\n  const handleSubmit = async (data, form) => {\n    const values = getValuesForFields(data, form);\n    delete values.password_confirm;\n    if (!hasPredefinedAffiliations) {\n      // value.affiliation is already there and used\n      delete values.affiliation_data;\n    } else if (values.affiliation_data) {\n      values.affiliation = values.affiliation_data.text.trim();\n      values.affiliation_id = values.affiliation_data.id;\n      delete values.affiliation_data;\n    }\n    let resp;\n    try {\n      resp = await indicoAxios.post(location.href, values);\n    } catch (e) {\n      return handleSubmitError(\n        e,\n        hasPredefinedAffiliations ? {affiliation: 'affiliation_data'} : {}\n      );\n    }\n    location.href = resp.data.redirect;\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  return (\n    <FinalForm\n      onSubmit={handleSubmit}\n      initialValues={initialValues}\n      initialValuesEqual={_.isEqual}\n      subscription={{submitting: true}}\n      validate={values => {\n        const errors = {};\n        if (\n          values.password &&\n          values.password_confirm &&\n          values.password_confirm !== values.password\n        ) {\n          errors.password_confirm = Translate.string('Passwords must match');\n        }\n        return errors;\n      }}\n    >\n      {fprops => (\n        <Form onSubmit={fprops.handleSubmit}>\n          {!showAccountForm && (\n            <Field name=\"synced_fields\" isEqual={_.isEqual} render={() => null} />\n          )}\n          {hasPendingUser && (\n            <Message info>\n              <Translate>\n                There is already some information in Indico that concerns you. We are going to link\n                it automatically.\n              </Translate>\n            </Message>\n          )}\n          <Fieldset\n            legend={Translate.string('User information')}\n            active={showAccountForm || moderated}\n          >\n            {emails.length > 1 ? (\n              <SyncedFinalDropdown\n                name=\"email\"\n                label={Translate.string('Email address')}\n                options={emails.map(e => ({\n                  key: e,\n                  value: e,\n                  text: e,\n                }))}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                required\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"email\"\n                label={Translate.string('Email address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                readOnly\n              />\n            )}\n            <Form.Group widths=\"equal\">\n              <SyncedFinalInput\n                name=\"first_name\"\n                label={Translate.string('First name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n              <SyncedFinalInput\n                name=\"last_name\"\n                label={Translate.string('Last name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            </Form.Group>\n            {hasPredefinedAffiliations ? (\n              <SyncedFinalAffiliationDropdown\n                name=\"affiliation_data\"\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncName=\"affiliation\"\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                currentAffiliation={affiliationMeta}\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"affiliation\"\n                label={Translate.string('Affiliation')}\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            {'address' in syncedValues && (\n              <SyncedFinalTextArea\n                name=\"address\"\n                label={Translate.string('Address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            {'phone' in syncedValues && (\n              <SyncedFinalInput\n                name=\"phone\"\n                label={Translate.string('Phone number')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n          </Fieldset>\n          {showAccountForm && (\n            <Fieldset legend={Translate.string('Login details')}>\n              <FinalInput name=\"username\" label={Translate.string('Username')} required />\n              <Form.Group widths=\"equal\">\n                <FinalInput\n                  name=\"password\"\n                  type=\"password\"\n                  label={Translate.string('Password')}\n                  autoComplete=\"new-password\"\n                  required\n                />\n                <FinalInput\n                  name=\"password_confirm\"\n                  type=\"password\"\n                  label={Translate.string('Confirm password')}\n                  autoComplete=\"new-password\"\n                  required\n                />\n              </Form.Group>\n            </Fieldset>\n          )}\n          {moderated && (\n            <Fieldset legend={Translate.string('Account moderation')}>\n              <Message info>\n                <Translate>\n                  Each new account needs to be approved by an administrator. We will send you an\n                  email as soon as your request has been approved.\n                </Translate>\n              </Message>\n              <FinalTextArea\n                required={mandatoryFields.includes('comment')}\n                name=\"comment\"\n                initialValue=\"\"\n                label={Translate.string('Comment')}\n                description={Translate.string(\n                  'You can provide additional information or a comment for the administrators who will review your registration.'\n                )}\n              />\n            </Fieldset>\n          )}\n          <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n            <FinalSubmitButton\n              disabledUntilChange={false}\n              label={\n                moderated\n                  ? Translate.string('Submit registration request')\n                  : Translate.string('Create my Indico profile')\n              }\n              className=\"submit-button\"\n            />\n            <Form.Field disabled={fprops.submitting}>\n              <Button as=\"a\" href={cancelURL} disabled={fprops.submitting}>\n                <Translate>Cancel</Translate>\n              </Button>\n            </Form.Field>\n          </div>\n        </Form>\n      )}\n    </FinalForm>\n  );\n}\n\nSignup.propTypes = {\n  cancelURL: PropTypes.string.isRequired,\n  moderated: PropTypes.bool.isRequired,\n  initialValues: PropTypes.object.isRequired,\n  hasPredefinedAffiliations: PropTypes.bool.isRequired,\n  showAccountForm: PropTypes.bool.isRequired,\n  syncedValues: PropTypes.object.isRequired,\n  emails: PropTypes.arrayOf(PropTypes.string).isRequired,\n  affiliationMeta: PropTypes.object,\n  hasPendingUser: PropTypes.bool,\n  mandatoryFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lockedFields: PropTypes.arrayOf(PropTypes.string),\n  lockedFieldMessage: PropTypes.string,\n};\n\nSignup.defaultProps = {\n  affiliationMeta: null,\n  hasPendingUser: false,\n  lockedFields: [],\n  lockedFieldMessage: '',\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const container = document.querySelector('#signup-container');\n  if (!container) {\n    return;\n  }\n\n  const config = JSON.parse(container.dataset.config);\n  ReactDOM.render(<Signup {...config} />, container);\n});\n"],"names":["Signup","cancelURL","moderated","initialValues","hasPredefinedAffiliations","showAccountForm","syncedValues","emails","affiliationMeta","hasPendingUser","mandatoryFields","lockedFields","lockedFieldMessage","onSubmit","async","data","form","values","getValuesForFields","resp","password_confirm","affiliation_data","affiliation","text","trim","affiliation_id","id","indicoAxios","location","href","e","handleSubmitError","redirect","Promise","initialValuesEqual","subscription","submitting","validate","errors","password","Translate","fprops","handleSubmit","Field","name","isEqual","render","info","legend","active","length","label","options","map","key","value","required","readOnly","widths","includes","syncName","currentAffiliation","type","autoComplete","initialValue","description","style","display","justifyContent","disabledUntilChange","className","disabled","as","propTypes","PropTypes","isRequired","defaultProps","document","addEventListener","container","querySelector","config","JSON","parse","dataset","ReactDOM"],"sourceRoot":""}