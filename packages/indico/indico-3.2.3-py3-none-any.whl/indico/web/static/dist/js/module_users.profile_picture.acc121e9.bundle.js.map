{"version":3,"file":"js/module_users.profile_picture.acc121e9.bundle.js","mappings":"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","sources":["webpack:///indico/modules/users/client/js/ProfilePicture.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2023 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport previewURL from 'indico-url:users.profile_picture_preview';\nimport saveURL from 'indico-url:users.save_profile_picture';\n\nimport createDecorator from 'final-form-calculate';\nimport PropTypes from 'prop-types';\nimport React, {useState, useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useDropzone} from 'react-dropzone';\nimport {Form as FinalForm, useField, useFormState} from 'react-final-form';\nimport {Button, Form, Icon, Image, Card} from 'semantic-ui-react';\n\nimport {TooltipIfTruncated} from 'indico/react/components';\nimport {FinalSubmitButton} from 'indico/react/forms';\nimport {Translate, Param} from 'indico/react/i18n';\nimport {indicoAxios, handleAxiosError} from 'indico/utils/axios';\n\nimport './ProfilePicture.module.scss';\n\nfunction ProfilePictureCard({image, text, email, children, source}) {\n  const {\n    input: {onChange, value},\n  } = useField('source');\n\n  const active = value === source;\n  return (\n    <Card\n      color={active ? 'blue' : null}\n      onClick={() => onChange(source)}\n      style={active ? {backgroundColor: '#f5f5f5'} : null}\n    >\n      <Card.Description>\n        {image ? (\n          <Image src={image} circular size=\"tiny\" />\n        ) : (\n          <Icon name=\"question circle outline\" size=\"huge\" styleName=\"placeholder\" />\n        )}\n        {text}\n      </Card.Description>\n      {email && (\n        <TooltipIfTruncated useEventTarget>\n          <Card.Content extra>\n            <Translate>\n              Based on <Param name=\"email\" value={email} />\n            </Translate>\n          </Card.Content>\n        </TooltipIfTruncated>\n      )}\n      {children && <Card.Content extra>{children}</Card.Content>}\n    </Card>\n  );\n}\n\nProfilePictureCard.propTypes = {\n  image: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  email: PropTypes.string,\n  children: PropTypes.node,\n  source: PropTypes.oneOf(['standard', 'identicon', 'gravatar', 'custom']).isRequired,\n};\n\nProfilePictureCard.defaultProps = {\n  image: null,\n  email: null,\n  children: null,\n};\n\nfunction CustomPictureUpload({onFileSelected}) {\n  const {submitting} = useFormState({\n    subscription: {submitting: true},\n  });\n\n  const {\n    input: {onChange},\n  } = useField('file', {allowNull: true});\n\n  const {getRootProps, getInputProps, open} = useDropzone({\n    onDropAccepted: ([file]) => {\n      onFileSelected(file);\n      onChange(file);\n    },\n    multiple: false,\n    noClick: true,\n    noKeyboard: true,\n    accept: ['.jpg', '.png', '.gif', '.webp'],\n    disabled: submitting,\n  });\n\n  return (\n    <section>\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <Button\n          disabled={submitting}\n          type=\"button\"\n          icon=\"upload\"\n          content={Translate.string('Upload')}\n          size=\"small\"\n          onClick={evt => {\n            evt.stopPropagation();\n            open();\n          }}\n        />\n      </div>\n    </section>\n  );\n}\n\nCustomPictureUpload.propTypes = {\n  onFileSelected: PropTypes.func.isRequired,\n};\n\nconst formDecorator = createDecorator({\n  field: 'file',\n  updates: value => (value === null ? {} : {source: 'custom'}),\n});\n\nfunction ProfilePicture({userId, email, source}) {\n  const [previewFile, setPreviewFile] = useState(null);\n  const [hasPreview, setHasPreview] = useState(source === 'custom');\n\n  const userIdArgs = userId !== null ? {user_id: userId} : {};\n\n  const submitPicture = async formData => {\n    const bodyFormData = new FormData();\n    if (formData.source === 'custom') {\n      bodyFormData.append('picture', formData.file);\n    }\n    bodyFormData.append('source', formData.source);\n    const config = {\n      headers: {'content-type': 'multipart/form-data'},\n    };\n    try {\n      await indicoAxios.post(saveURL(userIdArgs), bodyFormData, config);\n    } catch (e) {\n      handleAxiosError(e);\n      return;\n    }\n    location.reload();\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  const getPreview = () => {\n    return previewFile\n      ? URL.createObjectURL(previewFile)\n      : previewURL({...userIdArgs, source: 'custom'});\n  };\n\n  const handleFileSelected = useCallback(file => {\n    setPreviewFile(file);\n    setHasPreview(true);\n  }, []);\n\n  const validate = values => {\n    if (values.source === 'custom' && !values.file) {\n      return {source: 'invalid'};\n    }\n    return {};\n  };\n\n  return (\n    <div styleName=\"profile-picture-selection\">\n      <FinalForm\n        onSubmit={submitPicture}\n        initialValues={{file: null, source}}\n        validate={validate}\n        subscription={{}}\n        decorators={[formDecorator]}\n      >\n        {fprops => (\n          <div>\n            <Form onSubmit={fprops.handleSubmit}>\n              <Card.Group itemsPerRow={4} centered>\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'standard'})}\n                  text={Translate.string('System-assigned icon')}\n                  source=\"standard\"\n                />\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'identicon'})}\n                  text=\"Identicon\"\n                  source=\"identicon\"\n                  email={email}\n                />\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'gravatar'})}\n                  text=\"Gravatar\"\n                  source=\"gravatar\"\n                  email={email}\n                />\n                <ProfilePictureCard\n                  image={hasPreview ? getPreview() : null}\n                  text={Translate.string('Custom picture')}\n                  source=\"custom\"\n                >\n                  <CustomPictureUpload onFileSelected={handleFileSelected} />\n                </ProfilePictureCard>\n              </Card.Group>\n              <FinalSubmitButton\n                label={Translate.string('Save changes')}\n                className=\"submit-button\"\n              />\n            </Form>\n          </div>\n        )}\n      </FinalForm>\n    </div>\n  );\n}\n\nProfilePicture.propTypes = {\n  userId: PropTypes.number,\n  email: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n};\n\nProfilePicture.defaultProps = {\n  userId: null,\n};\n\nwindow.setupPictureSelection = function setupPictureSelection(userId, email, source) {\n  document.addEventListener('DOMContentLoaded', () => {\n    ReactDOM.render(\n      <ProfilePicture userId={userId} email={email} source={source} />,\n      document.querySelector('#profile-picture-selection')\n    );\n  });\n};\n"],"names":["ProfilePictureCard","image","text","email","children","source","input","onChange","value","useField","active","Card","color","onClick","style","backgroundColor","Image","src","circular","size","Icon","name","TooltipIfTruncated","useEventTarget","extra","CustomPictureUpload","onFileSelected","submitting","useFormState","subscription","allowNull","getRootProps","getInputProps","open","useDropzone","onDropAccepted","file","multiple","noClick","noKeyboard","accept","disabled","Button","type","icon","content","Translate","evt","stopPropagation","propTypes","PropTypes","isRequired","defaultProps","formDecorator","createDecorator","field","updates","ProfilePicture","userId","previewFile","setPreviewFile","useState","hasPreview","setHasPreview","userIdArgs","user_id","handleFileSelected","useCallback","onSubmit","async","bodyFormData","FormData","formData","append","config","headers","indicoAxios","saveURL","e","handleAxiosError","location","reload","Promise","initialValues","validate","values","decorators","fprops","Form","handleSubmit","itemsPerRow","centered","previewURL","URL","createObjectURL","label","className","window","setupPictureSelection","document","addEventListener","ReactDOM","querySelector"],"sourceRoot":""}