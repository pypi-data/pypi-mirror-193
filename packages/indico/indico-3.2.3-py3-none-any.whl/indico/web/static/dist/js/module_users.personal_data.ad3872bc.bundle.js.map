{"version":3,"file":"js/module_users.personal_data.ad3872bc.bundle.js","mappings":"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","sources":["webpack:///indico/modules/users/client/js/PersonalDataForm.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2023 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport emailsURL from 'indico-url:users.user_emails';\nimport saveURL from 'indico-url:users.user_profile_update';\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Field, Form as FinalForm} from 'react-final-form';\nimport {Form} from 'semantic-ui-react';\n\nimport {\n  SyncedFinalAffiliationDropdown,\n  SyncedFinalInput,\n  SyncedFinalTextArea,\n} from 'indico/react/components/syncedInputs';\nimport {\n  FinalDropdown,\n  FinalSubmitButton,\n  getChangedValues,\n  handleSubmitError,\n  parsers as p,\n} from 'indico/react/forms';\nimport {Translate, Param} from 'indico/react/i18n';\nimport {indicoAxios} from 'indico/utils/axios';\n\nfunction PersonalDataForm({\n  userId,\n  userValues,\n  currentAffiliation,\n  titles,\n  syncedValues,\n  lockedFields,\n  lockedFieldMessage,\n  hasPredefinedAffiliations,\n}) {\n  const userIdArgs = userId !== null ? {user_id: userId} : {};\n\n  const handleSubmit = async (data, form) => {\n    const changedValues = getChangedValues(data, form);\n    if (!hasPredefinedAffiliations) {\n      // value.affiliation is already there and used\n      delete changedValues.affiliation_data;\n    } else if (changedValues.affiliation_data) {\n      changedValues.affiliation = changedValues.affiliation_data.text.trim();\n      changedValues.affiliation_id = changedValues.affiliation_data.id;\n      delete changedValues.affiliation_data;\n    }\n    try {\n      await indicoAxios.patch(saveURL(userIdArgs), changedValues);\n    } catch (e) {\n      return handleSubmitError(e);\n    }\n    location.reload();\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  const titleOptions = titles.map(t => ({key: t.name, value: t.name, text: t.title}));\n\n  return (\n    <div>\n      <FinalForm\n        onSubmit={handleSubmit}\n        initialValues={userValues}\n        initialValuesEqual={_.isEqual}\n        subscription={{}}\n      >\n        {fprops => (\n          <Form onSubmit={fprops.handleSubmit}>\n            <Field name=\"synced_fields\" isEqual={_.isEqual} render={() => null} />\n            <FinalDropdown\n              name=\"title\"\n              options={titleOptions}\n              selection\n              parse={p.nullIfEmpty}\n              label={Translate.string('Title')}\n              placeholder={Translate.string('None')}\n            />\n            <Form.Group widths=\"equal\">\n              <SyncedFinalInput\n                name=\"first_name\"\n                label={Translate.string('First name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n              <SyncedFinalInput\n                name=\"last_name\"\n                label={Translate.string('Last name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            </Form.Group>\n            {hasPredefinedAffiliations ? (\n              <SyncedFinalAffiliationDropdown\n                name=\"affiliation_data\"\n                syncName=\"affiliation\"\n                currentAffiliation={currentAffiliation}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"affiliation\"\n                label={Translate.string('Affiliation')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            <SyncedFinalTextArea\n              name=\"address\"\n              label={Translate.string('Address')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n            />\n            <SyncedFinalInput\n              name=\"phone\"\n              label={Translate.string('Phone number')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n            />\n            <SyncedFinalInput\n              name=\"email\"\n              label={Translate.string('Email address')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n              readOnly\n            >\n              <Translate>\n                You can manage your email addresses{' '}\n                <Param name=\"link\" wrapper={<a href={emailsURL(userIdArgs)} />}>\n                  here\n                </Param>\n                .\n              </Translate>\n            </SyncedFinalInput>\n            <FinalSubmitButton label={Translate.string('Save changes')} className=\"submit-button\" />\n          </Form>\n        )}\n      </FinalForm>\n    </div>\n  );\n}\n\nPersonalDataForm.propTypes = {\n  userId: PropTypes.number,\n  userValues: PropTypes.object.isRequired,\n  currentAffiliation: PropTypes.object,\n  titles: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  syncedValues: PropTypes.objectOf(PropTypes.string).isRequired,\n  lockedFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lockedFieldMessage: PropTypes.string.isRequired,\n  hasPredefinedAffiliations: PropTypes.bool.isRequired,\n};\n\nPersonalDataForm.defaultProps = {\n  userId: null,\n  currentAffiliation: null,\n};\n\nwindow.setupPersonalDataForm = function setupPersonalDataForm(\n  userId,\n  userValues,\n  currentAffiliation,\n  titles,\n  syncedValues,\n  lockedFields,\n  lockedFieldMessage,\n  hasPredefinedAffiliations\n) {\n  document.addEventListener('DOMContentLoaded', () => {\n    ReactDOM.render(\n      <PersonalDataForm\n        userId={userId}\n        userValues={userValues}\n        currentAffiliation={currentAffiliation}\n        titles={titles}\n        syncedValues={syncedValues}\n        lockedFields={lockedFields}\n        lockedFieldMessage={lockedFieldMessage}\n        hasPredefinedAffiliations={hasPredefinedAffiliations}\n      />,\n      document.querySelector('#personal-details-form-container')\n    );\n  });\n};\n"],"names":["PersonalDataForm","userId","userValues","currentAffiliation","titles","syncedValues","lockedFields","lockedFieldMessage","hasPredefinedAffiliations","userIdArgs","user_id","titleOptions","map","t","key","name","value","text","title","onSubmit","async","data","form","changedValues","getChangedValues","affiliation_data","affiliation","trim","affiliation_id","id","indicoAxios","saveURL","e","handleSubmitError","location","reload","Promise","initialValues","initialValuesEqual","subscription","fprops","handleSubmit","Field","isEqual","render","options","selection","parse","p","label","Translate","placeholder","widths","required","syncName","readOnly","wrapper","href","emailsURL","className","propTypes","PropTypes","isRequired","defaultProps","window","setupPersonalDataForm","document","addEventListener","ReactDOM","querySelector"],"sourceRoot":""}