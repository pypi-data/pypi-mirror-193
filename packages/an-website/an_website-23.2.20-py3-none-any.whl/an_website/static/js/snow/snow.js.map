{
  "version": 3,
  "sources": ["../../../snow/snow.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt MIT\nconst snow = document.getElementById(\"snow\") as HTMLDivElement;\n\nlet snowflakesCount = 200;\n\nlet bodyHeightPx: number;\nlet pageHeightVh: number;\n\nfunction setHeightVariables(): void {\n    bodyHeightPx = document.documentElement.getBoundingClientRect().height;\n    pageHeightVh = 100 * Math.max(bodyHeightPx / window.innerHeight, 1);\n}\n\nfunction getSnowAttributes(): void {\n    if (snow) {\n        snowflakesCount = Number(\n            // @ts-expect-error TS2339\n            snow.attributes?.count?.value ?? snowflakesCount,\n        );\n    }\n}\n\n// This function allows you to turn the snow on and off\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction showSnow(value: boolean): void {\n    if (value) {\n        snow.style.display = \"block\";\n    } else {\n        snow.style.display = \"none\";\n    }\n}\n\n// Creating snowflakes\nfunction spawnSnow(snowDensity = 200): void {\n    for (let i = 1; i <= snowDensity; i++) {\n        const flake = document.createElement(\"p\");\n        snow.appendChild(flake);\n    }\n}\n\n// Append style for each snowflake to the head\nfunction addCss(rule: string): void {\n    const css = document.createElement(\"style\");\n    css.appendChild(document.createTextNode(rule)); // Support for the rest\n    document.getElementsByTagName(\"head\")[0].appendChild(css);\n}\n\n// Math\nfunction randomInt(value = 100): number {\n    return Math.floor(Math.random() * value) + 1;\n}\n\nfunction randomIntRange(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomArbitrary(min: number, max: number): number {\n    return Math.random() * (max - min) + min;\n}\n\n// Create style for snowflake\nfunction spawnSnowCSS(snowDensity = 200): void {\n    let rule = \"\";\n\n    for (let i = 1; i <= snowDensity; i++) {\n        const randomX = Math.random() * 100; // vw\n        const randomOffset = Math.random() * 10; // vw\n        const randomXEnd = randomX + randomOffset;\n        const randomXEndYoyo = randomX + (randomOffset / 2);\n        const randomYoyoTime = getRandomArbitrary(0.3, 0.8);\n        const randomYoyoY = randomYoyoTime * 100; // vh\n        const randomScale = Math.random();\n        const fallDuration = randomIntRange(10, 30); // s\n        const fallDelay = randomInt(30) * -1; // s\n        const opacity = Math.random();\n\n        rule += `\n      #snow p:nth-child(${i}) {\n        opacity: ${opacity};\n        transform: translate(${randomX}vw, -10px) scale(${randomScale});\n        animation: fall-${i} ${fallDuration}s ${fallDelay}s linear infinite;\n      }\n      @keyframes fall-${i} {\n        ${randomYoyoTime * 100}% {\n          transform: translate(${randomXEnd}vw, ${randomYoyoY}vh) scale(${randomScale});\n        }\n        to {\n          transform: translate(${randomXEndYoyo}vw, 100vh) scale(${randomScale});\n        }\n      }\n    `;\n    }\n    addCss(rule);\n}\n\n// Load the rules and execute after the DOM loads\nfunction createSnow(): void {\n    setHeightVariables();\n    getSnowAttributes();\n    spawnSnowCSS(snowflakesCount);\n    if (!snow.firstElementChild) {\n        spawnSnow(snowflakesCount);\n    }\n}\n\nwindow.onload = createSnow;\n// @license-end\n\n// TODO add option to easily re-render scenery. For example when window resizes.\n// this should be easy as CSS rerenders after display block -> none -> block;\n// TODO add progress bar for slower clients\n"],
  "mappings": "aAAA;AACA,MAAM,KAAO,SAAS,eAAe,MAAM,EAE3C,IAAI,gBAAkB,IAElB,aACA,aAEJ,SAAS,oBAA2B,CAChC,aAAe,SAAS,gBAAgB,sBAAsB,EAAE,OAChE,aAAe,IAAM,KAAK,IAAI,aAAe,OAAO,YAAa,CAAC,CACtE,CAEA,SAAS,mBAA0B,CAbnC,IAAAA,EAAAC,EAAAC,EAcQ,OACA,gBAAkB,QAEdA,GAAAD,GAAAD,EAAA,KAAK,aAAL,YAAAA,EAAiB,QAAjB,YAAAC,EAAwB,QAAxB,KAAAC,EAAiC,eACrC,EAER,CAIA,SAAS,SAASC,EAAsB,CAChCA,EACA,KAAK,MAAM,QAAU,QAErB,KAAK,MAAM,QAAU,MAE7B,CAGA,SAAS,UAAUC,EAAc,IAAW,CACxC,QAASC,EAAI,EAAGA,GAAKD,EAAaC,IAAK,CACnC,MAAMC,EAAQ,SAAS,cAAc,GAAG,EACxC,KAAK,YAAYA,CAAK,EAE9B,CAGA,SAAS,OAAOC,EAAoB,CAChC,MAAMC,EAAM,SAAS,cAAc,OAAO,EAC1CA,EAAI,YAAY,SAAS,eAAeD,CAAI,CAAC,EAC7C,SAAS,qBAAqB,MAAM,EAAE,CAAC,EAAE,YAAYC,CAAG,CAC5D,CAGA,SAAS,UAAUL,EAAQ,IAAa,CACpC,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIA,CAAK,EAAI,CAC/C,CAEA,SAAS,eAAeM,EAAaC,EAAqB,CACtD,OAAAD,EAAM,KAAK,KAAKA,CAAG,EACnBC,EAAM,KAAK,MAAMA,CAAG,EACb,KAAK,MAAM,KAAK,OAAO,GAAKA,EAAMD,EAAM,EAAE,EAAIA,CACzD,CAEA,SAAS,mBAAmBA,EAAaC,EAAqB,CAC1D,OAAO,KAAK,OAAO,GAAKA,EAAMD,GAAOA,CACzC,CAGA,SAAS,aAAaL,EAAc,IAAW,CAC3C,IAAIG,EAAO,GAEX,QAASF,EAAI,EAAGA,GAAKD,EAAaC,IAAK,CACnC,MAAMM,EAAU,KAAK,OAAO,EAAI,IAC1BC,EAAe,KAAK,OAAO,EAAI,GAC/BC,EAAaF,EAAUC,EACvBE,EAAiBH,EAAWC,EAAe,EAC3CG,EAAiB,mBAAmB,GAAK,EAAG,EAC5CC,EAAcD,EAAiB,IAC/BE,EAAc,KAAK,OAAO,EAC1BC,EAAe,eAAe,GAAI,EAAE,EACpCC,EAAY,UAAU,EAAE,EAAI,GAC5BC,EAAU,KAAK,OAAO,EAE5Bb,GAAQ;AAAA,0BACUF;AAAA,mBACPe;AAAA,+BACYT,qBAA2BM;AAAA,0BAChCZ,KAAKa,MAAiBC;AAAA;AAAA,wBAExBd;AAAA,UACdU,EAAiB;AAAA,iCACMF,QAAiBG,cAAwBC;AAAA;AAAA;AAAA,iCAGzCH,qBAAkCG;AAAA;AAAA;AAAA,MAK/D,OAAOV,CAAI,CACf,CAGA,SAAS,YAAmB,CACxB,mBAAmB,EACnB,kBAAkB,EAClB,aAAa,eAAe,EACvB,KAAK,mBACN,UAAU,eAAe,CAEjC,CAEA,OAAO,OAAS,WAChB;",
  "names": ["_a", "_b", "_c", "value", "snowDensity", "i", "flake", "rule", "css", "min", "max", "randomX", "randomOffset", "randomXEnd", "randomXEndYoyo", "randomYoyoTime", "randomYoyoY", "randomScale", "fallDuration", "fallDelay", "opacity"]
}
