{
  "version": 3,
  "sources": ["../../../currency_converter/converter.ts"],
  "sourcesContent": ["// @license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-3.0-or-later\n(() => {\n    let bigIntType = \"bigint\";\n    try {\n        BigInt(69);\n    } catch (e) {\n        // fix for cool browsers like Pale Moon that don't support BigInt\n        // eslint-disable-next-line no-global-assign\n        BigInt = Number as unknown as BigIntConstructor;\n        bigIntType = \"number\";\n    }\n    const output = elById(\"output\") as HTMLInputElement;\n\n    const fields: [\n        HTMLInputElement,\n        HTMLInputElement,\n        HTMLInputElement,\n        HTMLInputElement,\n    ] = [\n        elById(\"euro\") as HTMLInputElement, // Euro\n        elById(\"mark\") as HTMLInputElement, // Deutsche Mark\n        elById(\"ost\") as HTMLInputElement, // Ostmark\n        elById(\"schwarz\") as HTMLInputElement, // Ostmark auf dem Schwarzmarkt\n    ];\n    const factors: [\n        bigint | number,\n        bigint | number,\n        bigint | number,\n        bigint | number,\n    ] = [\n        BigInt(1), // Euro\n        BigInt(2), // Deutsche Mark\n        BigInt(4), // Ostmark\n        BigInt(20), // Ostmark auf dem Schwarzmarkt\n    ];\n    const numberRegex = /^(?:\\d+|(?:\\d+)?[,.]\\d{1,2}|\\d+[,.](?:\\d{1,2})?)?$/;\n\n    const isZero = (str: string) => /^0*$/.test(str);\n\n    function getDisplayValue(wert: string | bigint | number): null | string {\n        if (typeof wert === \"string\") {\n            wert = strToBigInt(wert);\n        }\n\n        if (typeof wert !== bigIntType) {\n            alert(`Ung√ºltiger Wert ${wert} mit type ${typeof wert}`);\n            return null;\n        }\n\n        if (typeof wert === \"number\") {\n            wert = Math.floor(wert);\n        }\n\n        let str = wert.toString();\n        if (bigIntType === \"number\" && str.includes(\"e\")) {\n            const [num, pow] = str.split(\"e\");\n\n            if (pow.startsWith(\"-\")) {\n                return \"0\"; // too small to be displayed\n            }\n\n            // eslint-disable-next-line prefer-const\n            let [int, dec] = num.split(\".\");\n            dec = dec || \"\";\n            str = int + dec + \"0\".repeat(parseInt(pow) - dec.length);\n        }\n        if (isZero(str)) {\n            return \"0\"; // is empty string or 0\n        }\n\n        const dec = str.slice(-2); // last two chars or whole str if len <= 2\n        return (\n            (str.slice(0, -2) || \"0\") + // integer part, but \"0\" instead of \"\"\n            (\n                isZero(dec)\n                    ? \"\" // if is integer do not append\n                    : \",\" + (dec.length === 1 ? \"0\" : \"\") + dec\n            )\n        );\n    }\n\n    function strToBigInt(str: string): number | bigint {\n        if (isZero(str)) {\n            return BigInt(0);\n        }\n\n        let [int, dec] = [str, \"00\"];\n        if (str.includes(\",\")) {\n            [int, dec] = str.split(\",\");\n        } else if (str.includes(\".\")) {\n            [int, dec] = str.split(\".\");\n        }\n        if (dec.length !== 2) {\n            // get the first two digits after the comma, fill with 0 if needed\n            dec = (dec + \"00\").slice(0, 2);\n        }\n        return BigInt(int + dec);\n    }\n\n    PopStateHandlers[\"currencyConverter\"] = (e: PopStateEvent) =>\n        setAllFields(\n            strToBigInt((e.state as { euro: string })[\"euro\"].toString()),\n        );\n\n    const setEuroParam = (euroVal: string, push: boolean) =>\n        setURLParam(\n            \"euro\",\n            euroVal,\n            { euro: euroVal },\n            \"currencyConverter\",\n            push,\n        );\n\n    function setAllFields(\n        euroValue: bigint | number,\n        ignored: number | null = null,\n    ) {\n        setEuroParam(getDisplayValue(euroValue) || \"null\", false);\n        for (let i = 0; i < 4; i++) {\n            const value = getDisplayValue(\n                (euroValue as bigint) * (factors[i] as bigint),\n            );\n            fields[i].placeholder = value || \"null\";\n            if (i !== ignored) {\n                fields[i].value = value || \"null\";\n            }\n        }\n    }\n\n    const updateOutput = () => {\n        // deno-fmt-ignore\n        output.value = fields[0].value + \" Euro, das sind ja \" +\n            fields[1].value + \" Mark; \" +\n            fields[2].value + \" Ostmark und \" +\n            fields[3].value + \" Ostmark auf dem Schwarzmarkt!\";\n    };\n\n    function onSubmit(event: Event) {\n        event.preventDefault();\n        for (const field of fields) {\n            field.value = getDisplayValue(field.value) || \"null\";\n        }\n        setEuroParam(fields[0].value, true);\n        updateOutput();\n    }\n\n    for (let i = 0; i < 4; i++) {\n        fields[i].oninput = () => {\n            // remove \"invalid\" class\n            for (const field of fields) {\n                field.className = \"\";\n            }\n            // add \"invalid\" class if input is not a number\n            if (!numberRegex.test(fields[i].value)) {\n                fields[i].className = \"invalid\";\n                return;\n            }\n            // parse input as it is a number\n            setAllFields(\n                (strToBigInt(fields[i].value) as bigint) /\n                    (factors[i] as bigint),\n                i,\n            );\n\n            updateOutput();\n        };\n    }\n    // set the value of the fields to the placeholder set by tornado\n    for (const field of fields) {\n        field.value = field.placeholder;\n    }\n    // fix form submit\n    (elById(\"form\") as HTMLFormElement).onsubmit = onSubmit;\n})();\n// @license-end\n"],
  "mappings": "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",
  "names": ["bigIntType", "e", "output", "fields", "factors", "numberRegex", "isZero", "str", "getDisplayValue", "wert", "strToBigInt", "num", "pow", "int", "dec", "setAllFields", "setEuroParam", "euroVal", "push", "euroValue", "ignored", "i", "value", "updateOutput", "onSubmit", "event", "field"]
}
