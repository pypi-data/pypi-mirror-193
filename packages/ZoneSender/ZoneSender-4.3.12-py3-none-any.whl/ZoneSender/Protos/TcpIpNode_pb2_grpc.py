# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import Common_pb2 as Common__pb2
from . import TcpIpNode_pb2 as TcpIpNode__pb2


class TcpIpNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitTcpIpStack = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/InitTcpIpStack',
                request_serializer=Common__pb2.generic_string.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.StartTcpIpStack = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/StartTcpIpStack',
                request_serializer=Common__pb2.empty.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.StopTcpIpStack = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/StopTcpIpStack',
                request_serializer=Common__pb2.empty.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.GetAllVectorPortInfo = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/GetAllVectorPortInfo',
                request_serializer=Common__pb2.empty.SerializeToString,
                response_deserializer=TcpIpNode__pb2.vector_all_port_info.FromString,
                )
        self.OpenVectorPort = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/OpenVectorPort',
                request_serializer=TcpIpNode__pb2.vector_port_info.SerializeToString,
                response_deserializer=TcpIpNode__pb2.openPort_result.FromString,
                )
        self.AddProtoPortInfo = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/AddProtoPortInfo',
                request_serializer=TcpIpNode__pb2.proto_port_info.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.CreatZoneIface = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/CreatZoneIface',
                request_serializer=TcpIpNode__pb2.zone_ifcae_info.SerializeToString,
                response_deserializer=TcpIpNode__pb2.openPort_result.FromString,
                )
        self.ZoneIfaceUp = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/ZoneIfaceUp',
                request_serializer=Common__pb2.generic_int.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.ZoneIfaceDown = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/ZoneIfaceDown',
                request_serializer=Common__pb2.generic_int.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.ZoneIfaceRemove = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/ZoneIfaceRemove',
                request_serializer=Common__pb2.generic_int.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )
        self.ZoneIfaceAddGroupAddress = channel.unary_unary(
                '/TcpIpNode.TcpIpNode/ZoneIfaceAddGroupAddress',
                request_serializer=TcpIpNode__pb2.groupAddress.SerializeToString,
                response_deserializer=Common__pb2.result.FromString,
                )


class TcpIpNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitTcpIpStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTcpIpStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTcpIpStack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllVectorPortInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenVectorPort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProtoPortInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatZoneIface(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneIfaceUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneIfaceDown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneIfaceRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneIfaceAddGroupAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TcpIpNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitTcpIpStack': grpc.unary_unary_rpc_method_handler(
                    servicer.InitTcpIpStack,
                    request_deserializer=Common__pb2.generic_string.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'StartTcpIpStack': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTcpIpStack,
                    request_deserializer=Common__pb2.empty.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'StopTcpIpStack': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTcpIpStack,
                    request_deserializer=Common__pb2.empty.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'GetAllVectorPortInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllVectorPortInfo,
                    request_deserializer=Common__pb2.empty.FromString,
                    response_serializer=TcpIpNode__pb2.vector_all_port_info.SerializeToString,
            ),
            'OpenVectorPort': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenVectorPort,
                    request_deserializer=TcpIpNode__pb2.vector_port_info.FromString,
                    response_serializer=TcpIpNode__pb2.openPort_result.SerializeToString,
            ),
            'AddProtoPortInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProtoPortInfo,
                    request_deserializer=TcpIpNode__pb2.proto_port_info.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'CreatZoneIface': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatZoneIface,
                    request_deserializer=TcpIpNode__pb2.zone_ifcae_info.FromString,
                    response_serializer=TcpIpNode__pb2.openPort_result.SerializeToString,
            ),
            'ZoneIfaceUp': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneIfaceUp,
                    request_deserializer=Common__pb2.generic_int.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'ZoneIfaceDown': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneIfaceDown,
                    request_deserializer=Common__pb2.generic_int.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'ZoneIfaceRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneIfaceRemove,
                    request_deserializer=Common__pb2.generic_int.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
            'ZoneIfaceAddGroupAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneIfaceAddGroupAddress,
                    request_deserializer=TcpIpNode__pb2.groupAddress.FromString,
                    response_serializer=Common__pb2.result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TcpIpNode.TcpIpNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TcpIpNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitTcpIpStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/InitTcpIpStack',
            Common__pb2.generic_string.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTcpIpStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/StartTcpIpStack',
            Common__pb2.empty.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopTcpIpStack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/StopTcpIpStack',
            Common__pb2.empty.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllVectorPortInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/GetAllVectorPortInfo',
            Common__pb2.empty.SerializeToString,
            TcpIpNode__pb2.vector_all_port_info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenVectorPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/OpenVectorPort',
            TcpIpNode__pb2.vector_port_info.SerializeToString,
            TcpIpNode__pb2.openPort_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddProtoPortInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/AddProtoPortInfo',
            TcpIpNode__pb2.proto_port_info.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatZoneIface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/CreatZoneIface',
            TcpIpNode__pb2.zone_ifcae_info.SerializeToString,
            TcpIpNode__pb2.openPort_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneIfaceUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/ZoneIfaceUp',
            Common__pb2.generic_int.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneIfaceDown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/ZoneIfaceDown',
            Common__pb2.generic_int.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneIfaceRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/ZoneIfaceRemove',
            Common__pb2.generic_int.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneIfaceAddGroupAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TcpIpNode.TcpIpNode/ZoneIfaceAddGroupAddress',
            TcpIpNode__pb2.groupAddress.SerializeToString,
            Common__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
