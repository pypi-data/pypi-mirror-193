# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['odp_amsterdam']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.0.0', 'yarl>=1.6.0']

setup_kwargs = {
    'name': 'odp-amsterdam',
    'version': '5.1.0',
    'description': 'Asynchronous Python client providing Open Data information of Amsterdam',
    'long_description': '<!-- Header -->\n![alt Header of the odp Amsterdam package](https://raw.githubusercontent.com/klaasnicolaas/python-odp-amsterdam/main/assets/header_odp_amsterdam-min.png)\n\n<!-- PROJECT SHIELDS -->\n[![GitHub Release][releases-shield]][releases]\n[![Python Versions][python-versions-shield]][pypi]\n![Project Stage][project-stage-shield]\n![Project Maintenance][maintenance-shield]\n[![License][license-shield]](LICENSE)\n\n[![GitHub Activity][commits-shield]][commits-url]\n[![PyPi Downloads][downloads-shield]][downloads-url]\n[![GitHub Last Commit][last-commit-shield]][commits-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n\n[![Code Quality][code-quality-shield]][code-quality]\n[![Build Status][build-shield]][build-url]\n[![Typing Status][typing-shield]][typing-url]\n\n[![Maintainability][maintainability-shield]][maintainability-url]\n[![Code Coverage][codecov-shield]][codecov-url]\n\nAsynchronous Python client for the open datasets of Amsterdam (The Netherlands).\n\n## About\n\nA python package with which you can retrieve data from the Open Data Platform of Amsterdam via [their API][api]. This package was initially created to only retrieve parking data from the API, but the code base is made in such a way that it is easy to extend for other datasets from the same platform.\n\n## Installation\n\n```bash\npip install odp-amsterdam\n```\n\n## Datasets\n\nYou can read the following datasets with this package:\n\n- [Parking garages occupancy / Garages parkeerbezetting][garages] (53 garages)\n- [Parking locations / Parkeervakken][parking]\n\n<details>\n    <summary>Click here to get more details</summary>\n\n### Parking garages\n\nRead the occupancy of a parking garage in Amsterdam (The Netherlands), both for day visitors (short-term parking) and season ticket holders (long-term parking).\n\n**NOTE**: Not all parking garages have data for long-term parking.\n\n| Variable | Type | Description |\n| :------- | :--- | :---------- |\n| `garage_id` | string | The id of the garage |\n| `garage_name` | string | The name of the garage |\n| `state` | string | The state of the garage (`ok` or `problem`) |\n| `free_space_short` | integer | The number of free spaces for day visitors |\n| `free_space_long` | integer (or None) | The number of free spaces for season ticket holders |\n| `short_capacity` | integer | The total capacity of the garage for day visitors |\n| `long_capacity` | integer (or None) | The total capacity of the garage for season ticket holders |\n| `availability_pct` | float | The percentage of free parking spaces |\n| `longitude` | float | The longitude of the garage |\n| `latitude` | float | The latitude of the garage |\n\n### Parking locations\n\nYou can use the following parameters in your request:\n\n- **limit** (default: 10) - How many results you want to retrieve.\n- **parking_type** (default: "") - Filter based on the `eType` from the geojson data.\n\n| Variable | Type | Description |\n| :------- | :--- | :---------- |\n| `spot_id` | string | The id of the location |\n| `spot_type` | string (or None) | The type of the location (e.g. **E6a**) |\n| `spot_description` | string (or None) | The description of the location type |\n| `street` | string (or None) | The street name of the location |\n| `number` | integer (or None) | How many parking spots there are on this location |\n| `orientation` | string (or None) | The parking orientation of the location (**visgraag**, **langs** or **file**) |\n| `coordinates` | list[float] | The coordinates of the location |\n</details>\n\n## Usage\n\n```python\nimport asyncio\n\nfrom odp_amsterdam import ODPAmsterdam\n\n\nasync def main():\n    """Show example on using the ODP Amsterdam API client."""\n    async with ODPAmsterdam() as client:\n        # Parking locations\n        locations: list[ParkingSpot] = await client.location(\n            limit=5, parking_type="E6a"\n        )\n\n        # Garages\n        all_garages: list[Garage] = await client.all_garages()\n        garage: Garage = await client.garage(garage_id="ID_OF_GARAGE")\n\n        print(locations)\n        print(all_garages)\n        print(garage)\n\n\nif __name__ == "__main__":\n    asyncio.run(main())\n```\n\n## Use cases\n\n[NIPKaart.nl][nipkaart]\n\nA website that provides insight into where disabled parking spaces are, based on data from users and municipalities. Operates mainly in the Netherlands, but also has plans to process data from abroad.\n\n## Contributing\n\nThis is an active open-source project. We are always open to people who want to\nuse the code or contribute to it.\n\nWe\'ve set up a separate document for our\n[contribution guidelines](CONTRIBUTING.md).\n\nThank you for being involved! :heart_eyes:\n\n## Setting up development environment\n\nThis Python project is fully managed using the [Poetry][poetry] dependency\nmanager.\n\nYou need at least:\n\n- Python 3.9+\n- [Poetry][poetry-install]\n\nInstall all packages, including all development requirements:\n\n```bash\npoetry install\n```\n\nPoetry creates by default an virtual environment where it installs all\nnecessary pip packages, to enter or exit the venv run the following commands:\n\n```bash\npoetry shell\nexit\n```\n\nSetup the pre-commit check, you must run this inside the virtual environment:\n\n```bash\npre-commit install\n```\n\n*Now you\'re all set to get started!*\n\nAs this repository uses the [pre-commit][pre-commit] framework, all changes\nare linted and tested with each commit. You can run all checks and tests\nmanually, using the following command:\n\n```bash\npoetry run pre-commit run --all-files\n```\n\nTo run just the Python tests:\n\n```bash\npoetry run pytest\n```\n\n## License\n\nMIT License\n\nCopyright (c) 2020-2023 Klaas Schoute\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n[api]: https://api.data.amsterdam.nl\n[nipkaart]: https://www.nipkaart.nl\n[garages]: https://data.amsterdam.nl/datasets/9ORkef6T-aU29g/actuele-beschikbaarheid-parkeergarages/\n[parking]: https://api.data.amsterdam.nl/v1/docs/datasets/parkeervakken.html\n\n<!-- MARKDOWN LINKS & IMAGES -->\n[build-shield]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/tests.yaml/badge.svg\n[build-url]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/tests.yaml\n[code-quality-shield]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/codeql.yaml/badge.svg\n[code-quality]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/codeql.yaml\n[commits-shield]: https://img.shields.io/github/commit-activity/y/klaasnicolaas/python-odp-amsterdam.svg\n[commits-url]: https://github.com/klaasnicolaas/python-odp-amsterdam/commits/main\n[codecov-shield]: https://codecov.io/gh/klaasnicolaas/python-odp-amsterdam/branch/main/graph/badge.svg?token=F6CE1S25NV\n[codecov-url]: https://codecov.io/gh/klaasnicolaas/python-odp-amsterdam\n[downloads-shield]: https://img.shields.io/pypi/dm/odp-amsterdam\n[downloads-url]: https://pypistats.org/packages/odp-amsterdam\n[issues-shield]: https://img.shields.io/github/issues/klaasnicolaas/python-odp-amsterdam.svg\n[issues-url]: https://github.com/klaasnicolaas/python-odp-amsterdam/issues\n[license-shield]: https://img.shields.io/github/license/klaasnicolaas/python-odp-amsterdam.svg\n[last-commit-shield]: https://img.shields.io/github/last-commit/klaasnicolaas/python-odp-amsterdam.svg\n[maintenance-shield]: https://img.shields.io/maintenance/yes/2023.svg\n[maintainability-shield]: https://api.codeclimate.com/v1/badges/72d6baa9151bb0b0cfdf/maintainability\n[maintainability-url]: https://codeclimate.com/github/klaasnicolaas/python-odp-amsterdam/maintainability\n[project-stage-shield]: https://img.shields.io/badge/project%20stage-experimental-yellow.svg\n[pypi]: https://pypi.org/project/odp-amsterdam/\n[python-versions-shield]: https://img.shields.io/pypi/pyversions/odp-amsterdam\n[typing-shield]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/typing.yaml/badge.svg\n[typing-url]: https://github.com/klaasnicolaas/python-odp-amsterdam/actions/workflows/typing.yaml\n[releases-shield]: https://img.shields.io/github/release/klaasnicolaas/python-odp-amsterdam.svg\n[releases]: https://github.com/klaasnicolaas/python-odp-amsterdam/releases\n[stars-shield]: https://img.shields.io/github/stars/klaasnicolaas/python-odp-amsterdam.svg\n[stars-url]: https://github.com/klaasnicolaas/python-odp-amsterdam/stargazers\n\n[poetry-install]: https://python-poetry.org/docs/#installation\n[poetry]: https://python-poetry.org\n[pre-commit]: https://pre-commit.com\n',
    'author': 'Klaas Schoute',
    'author_email': 'hello@student-techlife.com',
    'maintainer': 'Klaas Schoute',
    'maintainer_email': 'hello@student-techlife.com',
    'url': 'https://github.com/klaasnicolaas/python-odp-amsterdam',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
