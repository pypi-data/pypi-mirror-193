# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['proper_cli', 'proper_cli.pastel']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'proper-cli',
    'version': '1.3',
    'description': 'Replace your HTML templates with Python server-Side components',
    'long_description': '# Proper CLI\n\nProper CLI is a Python library for creating composable, nestable, and ridiculously good looking command-line-**user**-interfaces from simple classes.\n\n![proper_cli output](https://raw.githubusercontent.com/jpsca/proper-cli/main/output.png)\n\n## Features\n\n- Made for interfacing **with humans**.\n- Arbitrary nesting and composition of commands.\n- Automatic help page generation\n- No need to redeclare paramaters and options with decorators, just write Python methods\n- The help of a command is its docstring, why make it more complex?\n\n\n## Usage\n\nDeclare a class that inherits from `proper_cli.Cli`. Every method/attribute that does not starts with an underscore will be a command.\n\n```python\nfrom proper_cli import Cli\n\nclass Manage(Cli):\n    def first(self, arg1, arg2=3):\n        pass\n\n    def second(self):\n        pass\n\n    def _not_a_command(self):\n        pass\n```\n\nThen, instance that class and call it.\n\n```python\n# run.py\ncli = Manage()\n\nif __name__ == "__main__":\n    cli()\n```\n\nThe class dosctring will be printed at the beginning of the help page.\n\nThe arguments can be then passed by position:\n\n```bash\npython run.py first foo bar\n```\n\nor by name:\n\n```bash\npython run.py first -arg1 foo -arg2 bar\n```\n\nTo pass a `True` use the name without a value, for a `False`, prepend the name of the argument with `no-`:\n\n```bash\npython run.py first -arg1 -no-arg2\n```\n\n\n### Subgroups\n\nIf an attribute is a subclass of `proper_cli.Cli`, it will be a subgroup:\n\n```python\nfrom proper_cli import Cli\n\nclass DBSub(Cli):\n    def migrate(self):\n        pass\n\nclass Manage(Cli):\n    # A subgroup\n    db = DBSub  # NOT `DBSub()`\n```\n\n### Context\n\nYou can pass any named argument as context to be used by your commands. This will be stored at the `_env` attribute.\n\nExample:\n\n```python\n>>> cli = Manage(lorem="ipsum")\n>>> print(cli._env)\n{"lorem": "ipsum"}\n```\n\n\n## An example\n\nThe image at the top was autogenerated by running this example:\n\n```python\n# example.py\nfrom proper_cli import Cli\n\n\nclass DBCli(Cli):\n    """Database-related commands\n    """\n\n    def migrate(self, message):\n        """Autogenerate a new revision file.\n\n        This is an alias for "revision --autogenerate".\n\n        Arguments:\n\n        - message: Revision message\n\n        """\n        pass\n\n    def branches(self):\n        """Show all branches."""\n        pass\n\n\nclass MyCli(Cli):\n    """Welcome to Proper CLI 3\n    """\n\n    def new(self, path, quiet=False):\n        """Creates a new Proper application at `path`.\n\n        Arguments:\n\n        - path: Where to create the new application.\n        - quiet [False]: Supress all output.\n        """\n        pass\n\n    def hello(count, name):\n        """Simple program that greets NAME for a total of COUNT times."""\n        pass\n\n    # A subgroup!\n    db = DBCli\n\n\ncli = MyCli()\n\nif __name__ == "__main__":\n    cli()\n\n```\n\n\n## Coloring the Output\n\nWhenever you output text, you can surround the text with tags to color its output (thanks to https://github.com/sdispater/pastel).\nThis is automatically enabled for the docstrings, but you can also have it by using `proper_cli.echo()`\nas a drop-in replacement of `print()`.\n\n```python\n# green text\necho("<fg=green>foo</fg=green>")\n\n# black text on a cyan background\necho("<fg=black;bg=cyan>foo</>")\n\n# bold text on a yellow background\necho("<bg=yellow;options=bold>foo</>")\n```\n\nAvailable foreground and background colors are: black, red, green, yellow, blue, magenta, cyan and white.\n\nThe available options are: bold, underscore, blink, reverse and conceal.\n\nThe closing tag can be replaced by `</>`, which revokes all formatting options established by the last opened tag.\n\n\n## Custom styles\n\nThese four styles are available by default:\n\n```python\n# green text\necho("<info>foo</info>")\n\n# yellow text\necho("<comment>foo</comment>")\n\n# black text on a cyan background\necho("<question>foo</question>")\n\n# white text on a red background\necho("<error>foo</error>")\n```\n\nIt is possible to define your own styles using the `proper_cli.add_style()` method:\n\n```python\nadd_style("fire", fg="red", bg="yellow", options=["bold", "blink"])\necho("<fire>foo</fire>")\n```\n\n\n## Helpers\n\nBeyond the CLI builder, proper_cli also includes some commonly-used helper functions\n\n### `confirm(question, default=False, yes_choices=YES_CHOICES, no_choices=NO_CHOICES)`\n\nAsk a yes/no question via and return their answer.\n\n### `ask(question, default=None, alternatives=None)`\n\nAsk a question via input() and return their answer.\n\n\n## FAQ\n\n### Why don\'t just use optparse or argparse?\n\nI find it too verbose.\n\n### Why don\'t just use click?\n\nAre you kidding? Because this looks better and is easier to use and understand.\n\n### Why don\'t just use...?\n\nBecause this library fits better my mental model. I hope it matches yours as well.\n',
    'author': 'Juan-Pablo Scaletti',
    'author_email': 'juanpablo@jpscaletti.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/jpsca/proper-cli',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
