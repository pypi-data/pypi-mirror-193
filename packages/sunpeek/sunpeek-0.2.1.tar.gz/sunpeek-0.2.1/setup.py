# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['sunpeek',
 'sunpeek.api',
 'sunpeek.api.routers',
 'sunpeek.common',
 'sunpeek.components',
 'sunpeek.core_methods',
 'sunpeek.core_methods.pc_method',
 'sunpeek.core_methods.virtuals',
 'sunpeek.db_utils',
 'sunpeek.definitions',
 'sunpeek.demo']

package_data = \
{'': ['*'],
 'sunpeek.definitions': ['raw_data/FHW, Pekasolar/*',
                         'raw_data/Friesach, GoS L/*']}

install_requires = \
['coolprop>=6.4,<6.5',
 'fastapi',
 'httpx',
 'kaleido==0.2.1',
 'lxml',
 'metpy',
 'numpy',
 'onnxruntime',
 'pandas',
 'pint-pandas==0.2',
 'pint==0.19.2',
 'plotly',
 'protobuf<4',
 'psycopg2-binary',
 'pvlib',
 'pyephem',
 'python-multipart',
 'scikit-learn<1.2',
 'scipy>=1.10',
 'skl2onnx==1.13',
 'sqlalchemy-utils',
 'sqlalchemy>=1.4,<2.0',
 'statsmodels',
 'times',
 'timezonefinder',
 'tomli>=2.0.1,<3.0.0',
 'trio',
 'uncertainties',
 'uvicorn[standard]<0.18',
 'yamlloader']

setup_kwargs = {
    'name': 'sunpeek',
    'version': '0.2.1',
    'description': 'Large Solar Thermal Monitoring Tool. Implements the Performance Check Method of ISO 24194',
    'long_description': '![Logo_Transparent_wide.svg](https://gitlab.com/sunpeek/sunpeek/-/raw/main/static_assets/Logo_Transparent_wide.svg?inline=false)\n\n**Core:**\n\n![Pipline Status](https://gitlab.com/sunpeek/sunpeek/badges/main/pipeline.svg) \n![Test Coverage](https://gitlab.com/sunpeek/sunpeek/badges/main/coverage.svg) \n![Supported Python](https://img.shields.io/pypi/pyversions/sunpeek)\n[![Docker Image Version](https://img.shields.io/docker/v/sunpeek/sunpeek/latest?label=image&logo=Docker)](https://hub.docker.com/r/sunpeek/sunpeek)\n[![PyPI](https://img.shields.io/pypi/v/sunpeek?logo=PyPi&logoColor=yellow)](https://pypi.org/project/sunpeek/)\n![GitLab contributors](https://img.shields.io/gitlab/contributors/sunpeek/sunpeek)\n![Lines of code](https://img.shields.io/tokei/lines/gitlab.com/sunpeek/sunpeek) \n![Open Issues](https://img.shields.io/gitlab/issues/open-raw/sunpeek/sunpeek?gitlab_url=https%3A%2F%2Fgitlab.com) \n\n**WebUI:**\n\n![Pipline Status](https://gitlab.com/sunpeek/web-ui/badges/main/pipeline.svg)\n[![Docker Image Version](https://img.shields.io/docker/v/sunpeek/web-ui/latest?label=image&logo=Docker)](https://hub.docker.com/r/sunpeek/sunpeek)\n![GitLab contributors](https://img.shields.io/gitlab/contributors/sunpeek/web-ui)\n![Lines of code](https://img.shields.io/tokei/lines/gitlab.com/sunpeek/web-ui) \n![Open Issues](https://img.shields.io/gitlab/issues/open-raw/sunpeek/web-ui?gitlab_url=https%3A%2F%2Fgitlab.com) \n\n# About SunPeek\nSunPeek implements a dynamic, in situ test methodology for large solar thermal plants, packaged as an open source software \napplication and python library. It also includes the first open source implementation of the ISO 24194 procedure \nfor checking the yield of solar thermal collector fields\n\nSunPeek was originally developed as part of the HarvestIT research project, see https://www.collector-array-test.org\n\n## A Web Application and a Python Library\nSunPeek is available as both a complete, containerised web application - intended to make the ongoing monitoring of one or\nseveral solar thermal plants simple and intuitive - and as a python library, for use by researchers and for building into \nother tools. To install the python library, simply run `pip install sunpeek`. To set up the web application, see below.\n\n## License\nExcept where specifically noted otherwise, SunPeek is made available under the GNU Lesser General Public License. This means\nthat you can use the software, copy it, redistribute it and include it in other software, including commercial, proprietary \nsoftware, for free, as long as you abide by the terms of the GNU GPL, with the exceptions provided by the LGPL. In particular, \nif you redistribute a modified version of the software, you must make the source code of your modifications available, and\nif you include the software in another piece of software or physical product, you must give users notice that SunPeek is \nused, and inform them where to obtain a copy of the SunPeek source code and license.\n\nNote that the SunPeek WebUI (https://gitlab.com/sunpeek/web-ui), is covered by a seperate licence, the BSD-3-Clause, see:\nhttps://opensource.org/licenses/BSD-3-Clause\n\nCopyright (c) 2020-2022, AEE - Institut fÃ¼r Nachhaltige Technologien, SOLID Solar Energy Systems GmbH, GASOKOL GmbH, Schneid Gesellschaft m.b.H.  \nCopyright (c) 2023, SunPeek Open Source Contributors\n\nSunPeek is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n\n# Run\n## Linux\nThe preferred way to run the SunPeek application is with docker on a Linux host. Running on Docker on Windows ([see below](#windows)) \nor installing directly on the host (not recommended) is also possible. \n\n## Deploy Full Application with Docker Compose\nThe full application can be run with docker compose. This requires docker engine 19.03+, supporting the `docker compose`\ncommand (instead of the older separate `docker-compose` tool). Use `docker version` to check. To install docker go to\nhttps://docs.docker.com/engine/install/ select the relevant platform and follow the instructions.\n\n1. Use https://gitlab.com/api/v4/projects/43333900/repository/archive?path=deploy to download an archive of the \ndeployment files and unzip it to the location you want to run it from.\n2. Open `api.env.template` and set `HIT_DB_PW` to a strong random password\n3. Open `db.env.template` and set `POSTGRES_PASSWORD` to _the same_ strong random password.\n4. If you want to access the application from anywhere except the local machine, open `ui.env.template` and replace `localhost`\nin `HIT_API_BASE_URL` with a URL which can be used to access the machine on which the application is running. **IMORTANT:\nit is strongly recommended that you don\'t make SunPeek accessible from the public internet. At present there are NO built\nin access controls**\n5. In a terminal in the unzipped folder, run `docker compose up -d`\n6. After at most 2 minutes (usually a few seconds), the web UI should be accessible at http://localhost, or the url set \nin step 4.\n\n## Windows\n### Get Docker\n#### Windows 10 and 11\nOn desktop windows, the easiest way to get Docker is to install [docker desktop](https://www.docker.com/products/docker-desktop/).\n#### Windows server \nTo install the Docker Engine on Windows Server, see [this guide from Microsoft](https://learn.microsoft.com/en-us/virtualization/windowscontainers/quick-start/set-up-environment?tabs=dockerce)\n\n### Set up SunPeek\n1. [Download](https://gitlab.com/api/v4/projects/43333900/repository/archive?path=deploy) the archive of the deployment files\n2. Open a powershell terminal (or e.g. the Terminal window in PyCharm) in the deployment folder, and run `.\\quick-setup.ps1`\n3. Run `docker-compose up -d` to start the application in "detached" mode (i.e. in the background). If you want to run\nit attached to the terminal to see console output from the containers, run `docker-compose up`.\n4. After at most 2 minutes (usually a few seconds), the web UI should be accessible at `<external.url>` \n(`localhost` by default), and the api at `<external.url>/api/v1`. See `<external.url>/api/v1/docs` for API documentation.\n5. To update the application to use newer images, run `docker compose pull` then `docker compose restart`\n\n##### Using the Easy Installer\nFor convenience, if you wish to avoid using powershell, a simple graphical utility is provided for use on Windows. \nDocker is still required. **NOTE: If you have previously set up SunPeek using the default configuration, you must first \nremove all stored data by running the command `docker volume rm harvestit_hit_postgres_data`, _this will also remove \nuploaded data._ You do not need to do this to update the software, simply open a command prompt in the folder where you \nstored the SunPeek configuration and run `docker compose pull`, then `docker compose up -d`**\n1. Download [this file](https://gitlab.com/sunpeek/sunpeek/-/raw/main/sunpeek_easy_installer.zip?inline=false), and unzip\nit to a temporary location.\n2. Run `sunpeek_easy_installer.exe`\n3. You should then get a small window with 2 fields. You must select a location to store the configuration files for the\napplication, if you are running the application only for access from the local machine, leave the default in the url field. \n4. Click setup. \n5. Once the window closes open the directory you specified, and double-click the start.bat file. A command prompt will \nopen to display the startup process.\n6. Docker compose will download the required application components, this may take several minutes, once you see all \ncomponents listed as \'started\' or \'healthy\' you can close the command prompt.\n7. Open a browser and go to the url specified in the setup tool, probably http://localhost to see the web-UI for the tool.\n8. To stop the application, assuming no other processes are running under docker on your machine, simply shut down the \ndocker engine. If you are using Docker Desktop, this can be done by right clicking the Docker icon the the system try and \nselecting Quit\n\n#### Configuration\nConfiguration is via environment variables, which can be set by any configuration management system you use, however the\ndefault setup uses `.env` files. To deploy the application on a single host, only the database password and external URL\nneed to be set. The `.\\quick-setup.ps1` or easy installer does this for you, or you can manually set the value of \n`HIT_DB_PW` and `POSTGRES_PASSWORD` in the `api.env` and `db.env` files to *the same* random, unique password string, \nand the value of `HIT_API_BASE_URL` in the `ui.env` file to <external.url>/api/v1.  \n_*NOTE*_: This setup is designed to deploy all containers on a single machine where docker compose is running. \nThe configuration for the Traefik reverse proxy is stored in a directory which is *bind mounted* to the container. For \nother deployment approaches (e.g. using Kubernetes), a different a more appropriate Traefik dynamic \n[configuration provider](https://doc.traefik.io/traefik/providers/overview/) should be selected.\n\n#### Technical Details - What does compose do?\n[Docker Compose](https://docs.docker.com/compose/) is a tool for *orchestrating* docker containers, to create \napplications made up of several docker containers. When the HarvestIT application is started with the default docker-compose \nfile, the following things happen:\n1. Compose checks if each of the images defined in the compose file, is available with the correct tag locally, if not it\npulls them from the relevant registry\n2. A virtual network is created, for the containers to communicate with each other. This is segregated from the host machine\'s\nmain network interfaces.\n3. The database container (using image `timescale/timescaledb:latest-pg14`), is started, with a healthcheck defined. \nAlongside this container, a [Docker Volume](https://docs.docker.com/storage/volumes/) is created called `hit_postgres_data`, \nwhich is mapped to the default data directory in the database container, to ensure that database data is persisted when \nthe containers are recreated (e.g. during an update).\n4. The reverse proxy container (using image `traefik:v2.8`) is started. As well as being attached to the virtual network \ncreated by docker compose, this has port 80 exposed to the host, so that it can be accessed at `localhost/` or from an\nextrnal connection. This routes web requests to either the web-ui or api containers, depending on the path in the request \nURL. It can also [be configured](https://doc.traefik.io/traefik/https/overview/) to terminate TLS (HTTPS) encrypted \nconnections and obtain certificates automatically, to secure connections to the application.\n5. Compose waits until the database container reports a "healthy" status, then starts the api container (using image \n`sunpeek:latest)`, this is the main HarvestIT application.\n6. The `harvestit` container runs a database initialization scripts to get the database ready. \n7. Once the api container has started, the webui container is started. \n\n# Development\n## Development Environment\nSunPeek uses [Poetry](https://python-poetry.org/) as a virtual environment and dependency manager and build system. To \nget started:\n1. [install poetry](https://python-poetry.org/docs/#installation)\n2. You may need to allow powershell to run scripts (for example to use the built-in terminal in PyCharm on Windows). \nTo do this, go to the start menu, search powershell, right click and select run as administrator. In the terminal that \nopens run `set-executionpolicy remotesigned`\n3. Clone this repository (or a fork of it, see [CONTRIBUTING](https://gitlab.com/sunpeek/sunpeek/-/blob/main/CONTRIBUTING.md)).\n4. Open a terminal in the repository root and run `poetry install --with dev`. This will get you a python virtual environment \nwith all the required dependencies. If you get errors from poetry, try running `poetry lock`, then `poetry install --with dev` again.\n\nIf you are using PyCharm as your IDE, make sure you have version 2022.3 or newer, then follow [these instructions](https://www.jetbrains.com/help/pycharm/poetry.html)\nto set up PyCharm to work with the Poetry virtual env. You may need to restart PyCharm after installing poetry.\n\n## Getting a local development database\nThe application can work with any postgresql database, provided it has the timescaledb extension installed. The `init_db`\nmodule in HarvestIT will create a new database according to your settings (see the [config variables](https://docs.sunpeek.org/configuration-variables.html),\nand add our "preinstalled data" (fluid definitions, sensor types etc...), to it.   \nThe easiest way to get a local database is to run the [TimescaleDB docker image](https://hub.docker.com/r/timescale/timescaledb/), \nthis is what the test fixtures described in [Test Database] do automatically. There is a script called `setup_dev_db.pyÂ´ \nprovided as a convenience. The description below assumes you will use this method.\n\nIf you need to write integration tests, there are test fixtures that deal with the steps below automatically. \nTo create the container and set up the database with a test plant, run the following in a terminal, starting in the root project folder:\n```\ncd ./tests\ndocker-compose up -d\ncd ..\npython -m setup_dev_db\n```\n\n## Running the application in the development environment\n### Run directly in a local terminal\nIn a terminal window with the correct virtual environment active, run: `uvicorn sunpeek.api.main:app --reload`\n\n### Run standalone in Docker \nPull and run the latest image from the Docker Hub image registry: `docker run -p 8000:8000 --name sunpeek sunpeek/sunpeek:latest`\n\n#### Prerequisits:\n* You need to have docker desktop installed https://www.docker.com/products/docker-desktop/, on windows enabling WSL2 is recommended, but docker desktop should work without it https://docs.microsoft.com/en-us/windows/wsl/install\n  * You need to have [docker-compose](https://docs.docker.com/compose/) available, this is usually installed automatically with Docker desktop.\n\n# Maintainers and Steering Committee\nSunPeek is developed as an open source project, with contributions gladly accepted from interested members of the community.\nThe overall direction of the project is managed by a **steering committee**, which currently consists of: \n* Daniel Tschopp <d.tschopp@aee.at>\n* Philip Ohnewein <p.ohnewein@aee.at>\n* Marnoch Hamilton-Jones <m.hamilton-jones@aee.at>\n* Lukas Feierl <l.feierl@solid.at>\n* Maria Moser <m.moser@solid.at>\n\nThe steering committee appoints the project maintainers, and makes final decisions on which contributors have commit \nprivileges on the official repository as well as ongoing implementation of new features and updates. The maintainers are\nresponsible for reviewing and merging any merge (pull) requests. The current **maintainers** are:\n* Marnoch Hamilton-Jones <m.hamilton-jones@aee.at>\n* Lukas Feierl <l.feierl@solid.at>\n* Philip Ohnewein <p.ohnewein@aee.at>\n',
    'author': 'Philip Ohnewein, Daniel Tschopp, Lukas Feierl, Marnoch Hamilton-Jones, Jonathan Cazco',
    'author_email': 'None',
    'maintainer': 'Marnoch Hamilton-Jones',
    'maintainer_email': 'm.hamilton-jones@aee.at',
    'url': 'https://gitlab.com/sunpeek/sunpeek',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<3.9',
}


setup(**setup_kwargs)
