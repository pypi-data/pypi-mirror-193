
#THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT CHANGE MANUALLY

from aipha_geo_solutions.webservice_api import AiphaClient, command_request, running_services_request, check_services_completed
import time

def list_running_services(client):

  return running_services_request(
        client.get_username(),
        client.get_token(),
        client.get_server_address(),
        client.get_verify_ssl())


def wait_for_completion(client,
  services):
  
  completed = False
  while not completed:
    time.sleep(10)
    completed =  check_services_completed(
        client.get_username(),
        client.get_token(),
        client.get_server_address(),
        services,
        client.get_verify_ssl()
        )


def download_data_to_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   download_type=0,
   destination='/data',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "download data to cloud",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def upload_data_from_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   target='/data',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "upload data from cloud",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def remove_files_from_cloud(client,
   target='/files',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "remove files from cloud",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def create_directory_in_cloud(client,
   destination='/files',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "create directory in cloud",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def classify_each_file_in_folder(client,
   command='classify 3D',
   command_instance_type='nano',
   adjustable_in_parameter_name='input_data_path',
   adjustable_out_parameter_name='output_data_path',
   input_data_path='/3D_data',
   in_model_path='/3D_classification_model',
   output_path='/3D_classification',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "classify each file in folder",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def qc_classification(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "qc classification",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def lidar_completeness(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/',
   lidar_new_shp_file='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "lidar completeness",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def ortho_completeness(client,
   project_id='',
   year='2022',
   orthophoto_folder='in/',
   out_folder='out/',
   orthophoto_new_shp_file='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "ortho completeness",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def vegetation_consistency(client,
   project_id='',
   year='2022',
   lidar_old_data_reduced_folder='in/',
   lidar_new_data_reduced_folder='in/',
   out_folder='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "vegetation consistency",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def generate_orthophoto_subset(client,
   trasse_id='',
   mapping_file='in/',
   orthophoto_path='in/',
   subset_path='out/',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "generate orthophoto subset",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def sg_qc_data_processing_init(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_folder='/QC-AIPHA',
   processing_folder='/processing',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing init",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def sg_qc_data_processing(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_data_folder='',
   ftp_ortho_folders='',
   processing_folder='/processing',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def tower_displacement(client,
   spatial_reference=2056,
   laz_in_folder_new='laz_folder_new',
   laz_in_folder_old='laz_folder_old',
   laz_in_folder_ref='laz_folder_ref',
   result_out_folder='results',
   tower_names='1010x001,1010x002',
   tower_coordinates='257875.7425442745175 113330.5794447326122,254339.7628343642347 113418.4283347820272',
   perform_preprocessing='True',
   instance_type='P2'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "tower displacement",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def las2las(client,
   i='file.las',
   o='file.las',
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "las2las",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )


def sleep_infinity(client,
   instance_type='nano'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sleep infinity",
    all_parameters,
    client.get_server_address(),
    client.get_verify_ssl()
    )
