***************************************
Inline Regridder App: Quick-Start Guide
***************************************

This is a quick-start guide to configuring and running Afterburner's **Inline
Regridder** app. It is mainly aimed at users who would like to regrid model data
(in UM PP format) as it is generated by the Met Office Unified Model.

This guide assumes you are comfortable working with the following tools:

* FCM and Subversion commands
* Rose and cylc commands
* Rose suites

If that's not you then it's recommended that you work through the longer
:doc:`user guide </rose_apps/inline_regridder/guide>` for the Inline Regridder app.

The current guide assumes that you wish to incorporate the Inline Regridder app
into one of your existing UM-based climate suites.

Step 1: Take a copy of Rose suite u-ce479
-----------------------------------------

Suite `u-ce479`_ can be obtained from the Met Office suite repository using the
following command:

.. code-block:: sh

   % cd ~/roses
   % svn export https://code.metoffice.gov.uk/svn/roses-u/c/e/4/7/9/trunk u-ce479

This suite contains a skeletal ``suite.rc`` file, together with very basic config
files for the ``inline_regridder`` and ``postproc`` apps. The suite is for
reference purposes only; it will not run unmodified.

(If you'd prefer to start from a fully configured - and correspondingly complex -
climate suite, have a look at suite `u-bc582`_. This is an atmosphere-only suite
based on the GA7.0 global atmosphere model. It incorporates the Inline Regridder
app to regrid UM PP model output from an N96 source grid to an N48 target grid.)

Step 2: Copy the ``app/inline_regridder`` directory over to your target climate suite
-------------------------------------------------------------------------------------

.. code-block:: sh

   % cp -r u-ce479/app/inline_regridder <target-suite>/app/

Step 3: Open the suite configuration within Rose's config-edit GUI utility
--------------------------------------------------------------------------

.. code-block:: sh

   % cd <target-suite>
   % rose edit &

Within the GUI, navigate to the config pages for the ``inline_regridder`` app.

Step 4: Specify the AFTERBURNER_HOME_DIR variable
-------------------------------------------------

On the *Runtime Environment* panel the AFTERBURNER_HOME_DIR variable should be set
to the top-level directory that contains the Afterburner software installation.
If you're not sure where that is then please ask your local system administrator.

.. code-block:: ini

   AFTERBURNER_HOME_DIR=${UMDIR}/afterburner/software/turbofan/current

The path specified above should be valid on the Met Office HPC. You can expand
$UMDIR if you like.

Step 5: Set the model data input and output directory paths
-----------------------------------------------------------

On the *General Options* panel specify the paths to the directories where model
data will be read and where regridded model data will be output (in netCDF format).
If the suite is configured such that the UM writes model data to the $DATAM
directory, then these fields may not need to be changed.

.. code-block:: ini

   model_data_dir=${DATAM}
   output_dir=${DATAM}/regridded

Step 6: Review and, if necessary, modify the input file options
---------------------------------------------------------------

On the *General Options* panel, review the Input File Format and Input Filename
Template options. If you are wanting to regrid model data in PP format then these
fields may not need to be changed.

.. code-block:: ini

   input_file_format=pp
   input_filename_template={runid}{dotstream}*.pp

Step 7: Review and, if necessary, modify the output file options
----------------------------------------------------------------

On the *General Options* panel, modify the Output Filename Template option
to suit your requirements. Further information about filename template construction
can be viewed :ref:`here <filename-templates>`.

.. code-block:: ini

   output_file_format=nc
   output_filename_template={runid}_{stream}_{var_id}_proc{lbproc}_tim{lbtim}_{data_start_date}_{data_end_date}.nc

An example filename generated using the above template might appear thus::

   ab123_apy_m01s00i024_proc128_tim122_19701201_19711201.nc

Step 8: Configure the diagnostics that you want to regrid
---------------------------------------------------------

In the *Diagnostic Definitions* namelist, specify the STASH codes of the diagnostics
that you want to have regridded. Also, ensure that the Enabled option is set to
true. Disable (or delete entirely) any other diagnostics from the sample suite
that you are not interested in.  

.. code-block:: ini

   [namelist:diagnostics(tas)]
   enabled=true
   var_id=m01s00i024
   !lbproc=128
   !lbtim=122

If required, add or modify the ``lbproc`` and/or ``lbtim`` options if the default
values shown above are not appropriate.

If you create a new entry (a.k.a. section) in the namelist, e.g. by cloning an
existing entry, don't forget to rename it from the Rose-generated number to
something more memorable. 

The 'dummy' diagnostic named ``_defaults_`` is used, as one might imagine, to
specify default settings to apply to all diagnostics. Most of the options should
be self-explanatory. The key options that need setting correctly are Stream
Names and Regridder, both of which can be overridden for individual diagnostics.

Step 9: Configure any required Grid Definitions
-----------------------------------------------

In the *Grid Definitions* namelist, modify the existing grid definitions or add
new ones as required. Each definition comprises the path to a grid file and the
name/identifier of a variable to load from that file, as shown below.

.. code-block:: ini

   [namelist:grids(um_n48e_pgrid)]
   file_path=/scratch/mary/grid_files/lsm/ff/qrparm.mask.n48e
   var_id=land_binary_mask

Grid definitions are used to define both target grids and, if required, land-sea
mask grids. They are referenced by the regridder definitions described in the
next step.

.. warning:: The files referred to by each grid definition **must** be visible
   to the host computer that will be running the Inline Regridder app.

Step 10: Configure any required Regridder Definitions
-----------------------------------------------------

In the *Regridder Definitions* namelist, modify the existing regridder definitions
or add new ones as required. Each definition comprises the name of the target grid
(i.e. one of the named grids specified at Step 9), the name of an Iris regridding
scheme, and optional arguments to pass to the initialisation method for the scheme.

.. code-block:: ini

   [namelist:regridders(default)]
   target_grid=um_n48e_pgrid
   scheme=iris.analysis.AreaWeighted

Step 11: Check settings on the UM Options and NetCDF Save Options panels
------------------------------------------------------------------------

On the *UM Options* panel check that the settings for the UM Cylc Task Name and
Sentinel Filename Extension options are appropriate for your needs.

The *NetCDF Save Options* panel contains settings for controlling how the netCDF
output files get written. The default settings should be appropriate for most
applications. A handful of less frequently used options can be accessed via the
View > View Latent Variables menu option.

If you are re-running a suite and there is a possibility that old netCDF files
from a previous run still reside in the output directory then you should enable
the Overwrite Output Files option (alternatively, of course, you could delete
those files manually beforehand).

Step 12: Add the inline_regridder app to the suite definition file
------------------------------------------------------------------

Assuming that you will be regridding diagnostics that are being read from UM PP
files, it will usually be necessary to execute the ``inline_regridder`` task
*after* the PP files have been created but *before* they have been archived to
MASS (and thereafter deleted).

Thus, the dependency graph in your suite definition file (``suite.rc``) might
be augmented as shown below. This, or something like it, may need to be added
under a number of cycle points. 

.. code-block:: ini

   [dependencies]
   graph = postproc => inline_regridder:finish => pparchive

The task names in your ``suite.rc`` file may well differ from those shown above.

The ``:finish`` tag appended to the ``inline_regridder`` task ensures that an
error condition raised by the task will not cause the rest of your suite to fail.
You could of course insert an explicit ``inline_regridder:fail`` task into the
dependency graph if you wanted to catch and act upon such a failure.

In the `u-ce479`_ sample suite the behaviour of the ``postproc`` and ``pparchive``
tasks is controlled using ``rose-app-<key>.conf`` files in the ``app/postproc/opt``
subdirectory. The ``postproc`` task disables the archiving step; the ``pparchive``
task disables the PP transform step. This is but one way to achieve the desired
task separation; other approaches may be equally effective.

Step 13: Run your suite
-----------------------

At this point you should be able to run your suite. Before doing so it's probably
worth ensuring that the command used to run the Inline Regridder app has either
the verbose (``-v``) or debug (``-D``) option set. That way, if the app encounters
an error is should write a basic error message to one of the suite's log files
(typically ``job.out`` and/or ``job.err``).

If all goes well you should see netCDF output files containing regridded model
data appear in the configured output directory (as defined at Step 5 above).
You may wish to define additional suite tasks to do something with these output
files (e.g. copy them to some other file system location or archive them to MASS).


.. Links below are referenced elsewhere in this document.

.. _u-ce479: https://code.metoffice.gov.uk/trac/roses-u/browser/c/e/4/7/9/trunk

.. _u-bc582: https://code.metoffice.gov.uk/trac/roses-u/browser/b/c/5/8/2/trunk
