from typing import List, Tuple, overload

from .PenaltyManager import PenaltyManager
from .ProblemData import ProblemData
from .XorShift128 import XorShift128

class Individual:
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        rng: XorShift128,
    ) -> None: ...
    @overload
    def __init__(
        self,
        data: ProblemData,
        penalty_manager: PenaltyManager,
        routes: List[List[int]],
    ) -> None: ...
    @overload
    def __init__(self, individual: Individual) -> None: ...
    def cost(self) -> int: ...
    def get_neighbours(self) -> List[Tuple[int, int]]: ...
    def get_routes(self) -> List[List[int]]: ...
    def has_excess_capacity(self) -> bool: ...
    def has_time_warp(self) -> bool: ...
    def is_feasible(self) -> bool: ...
    def num_routes(self) -> int: ...
